                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module rudolph2
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _polite_cancel
                                     12 	.globl _polite_send
                                     13 	.globl _polite_close
                                     14 	.globl _polite_open
                                     15 	.globl _packetbuf_hdrreduce
                                     16 	.globl _packetbuf_hdralloc
                                     17 	.globl _packetbuf_set_datalen
                                     18 	.globl _packetbuf_totlen
                                     19 	.globl _packetbuf_hdrptr
                                     20 	.globl _packetbuf_dataptr
                                     21 	.globl _packetbuf_clear
                                     22 	.globl _ctimer_set
                                     23 	.globl _ACTIVE
                                     24 	.globl _TX_BYTE
                                     25 	.globl _RX_BYTE
                                     26 	.globl _ERR
                                     27 	.globl _FE
                                     28 	.globl _SLAVE
                                     29 	.globl _RE
                                     30 	.globl _MODE
                                     31 	.globl _T3OVFIF
                                     32 	.globl _T3CH0IF
                                     33 	.globl _T3CH1IF
                                     34 	.globl _T4OVFIF
                                     35 	.globl _T4CH0IF
                                     36 	.globl _T4CH1IF
                                     37 	.globl _OVFIM
                                     38 	.globl _B_0
                                     39 	.globl _B_1
                                     40 	.globl _B_2
                                     41 	.globl _B_3
                                     42 	.globl _B_4
                                     43 	.globl _B_5
                                     44 	.globl _B_6
                                     45 	.globl _B_7
                                     46 	.globl _P2IF
                                     47 	.globl _UTX0IF
                                     48 	.globl _UTX1IF
                                     49 	.globl _P1IF
                                     50 	.globl _WDTIF
                                     51 	.globl _ACC_0
                                     52 	.globl _ACC_1
                                     53 	.globl _ACC_2
                                     54 	.globl _ACC_3
                                     55 	.globl _ACC_4
                                     56 	.globl _ACC_5
                                     57 	.globl _ACC_6
                                     58 	.globl _ACC_7
                                     59 	.globl _P
                                     60 	.globl _F1
                                     61 	.globl _OV
                                     62 	.globl _RS0
                                     63 	.globl _RS1
                                     64 	.globl _F0
                                     65 	.globl _AC
                                     66 	.globl _CY
                                     67 	.globl _DMAIF
                                     68 	.globl _T1IF
                                     69 	.globl _T2IF
                                     70 	.globl _T3IF
                                     71 	.globl _T4IF
                                     72 	.globl _P0IF
                                     73 	.globl _STIF
                                     74 	.globl _DMAIE
                                     75 	.globl _T1IE
                                     76 	.globl _T2IE
                                     77 	.globl _T3IE
                                     78 	.globl _T4IE
                                     79 	.globl _P0IE
                                     80 	.globl _RFERRIE
                                     81 	.globl _ADCIE
                                     82 	.globl _URX0IE
                                     83 	.globl _URX1IE
                                     84 	.globl _ENCIE
                                     85 	.globl _STIE
                                     86 	.globl _EA
                                     87 	.globl _P2_0
                                     88 	.globl _P2_1
                                     89 	.globl _P2_2
                                     90 	.globl _P2_3
                                     91 	.globl _P2_4
                                     92 	.globl _P2_5
                                     93 	.globl _P2_6
                                     94 	.globl _P2_7
                                     95 	.globl _ENCIF_0
                                     96 	.globl _ENCIF_1
                                     97 	.globl _P1_0
                                     98 	.globl _P1_1
                                     99 	.globl _P1_2
                                    100 	.globl _P1_3
                                    101 	.globl _P1_4
                                    102 	.globl _P1_5
                                    103 	.globl _P1_6
                                    104 	.globl _P1_7
                                    105 	.globl _IT0
                                    106 	.globl _RFERRIF
                                    107 	.globl _IT1
                                    108 	.globl _URX0IF
                                    109 	.globl _ADCIF
                                    110 	.globl _URX1IF
                                    111 	.globl _P0_0
                                    112 	.globl _P0_1
                                    113 	.globl _P0_2
                                    114 	.globl _P0_3
                                    115 	.globl _P0_4
                                    116 	.globl _P0_5
                                    117 	.globl _P0_6
                                    118 	.globl _P0_7
                                    119 	.globl _WDCTL
                                    120 	.globl _U1GCR
                                    121 	.globl _U1UCR
                                    122 	.globl _U1BAUD
                                    123 	.globl _U1DBUF
                                    124 	.globl _U1CSR
                                    125 	.globl _U0GCR
                                    126 	.globl _U0UCR
                                    127 	.globl _U0BAUD
                                    128 	.globl _U0DBUF
                                    129 	.globl _U0CSR
                                    130 	.globl _TIMIF
                                    131 	.globl _T4CC1
                                    132 	.globl _T4CCTL1
                                    133 	.globl _T4CC0
                                    134 	.globl _T4CCTL0
                                    135 	.globl _T4CTL
                                    136 	.globl _T4CNT
                                    137 	.globl _T3CC1
                                    138 	.globl _T3CCTL1
                                    139 	.globl _T3CC0
                                    140 	.globl _T3CCTL0
                                    141 	.globl _T3CTL
                                    142 	.globl _T3CNT
                                    143 	.globl _T2MSEL
                                    144 	.globl _T2IRQM
                                    145 	.globl _T2MOVF2
                                    146 	.globl _T2MOVF1
                                    147 	.globl _T2MOVF0
                                    148 	.globl _T2M1
                                    149 	.globl _T2M0
                                    150 	.globl _T2IRQF
                                    151 	.globl _T2EVTCFG
                                    152 	.globl _T2CTRL
                                    153 	.globl _T1STAT
                                    154 	.globl _T1CCTL2
                                    155 	.globl _T1CCTL1
                                    156 	.globl _T1CCTL0
                                    157 	.globl _T1CTL
                                    158 	.globl _T1CNTH
                                    159 	.globl _T1CNTL
                                    160 	.globl _T1CC2H
                                    161 	.globl _T1CC2L
                                    162 	.globl _T1CC1H
                                    163 	.globl _T1CC1L
                                    164 	.globl _T1CC0H
                                    165 	.globl _T1CC0L
                                    166 	.globl _CLKCONSTA
                                    167 	.globl _CLKCONCMD
                                    168 	.globl _SLEEPSTA
                                    169 	.globl _SLEEPCMD
                                    170 	.globl _STLOAD
                                    171 	.globl _ST2
                                    172 	.globl _ST1
                                    173 	.globl _ST0
                                    174 	.globl _RFERRF
                                    175 	.globl _RFIRQF0
                                    176 	.globl _RFST
                                    177 	.globl _RFD
                                    178 	.globl _RFIRQF1
                                    179 	.globl _PSBANK
                                    180 	.globl _FMAP
                                    181 	.globl _MEMCTR
                                    182 	.globl __XPAGE
                                    183 	.globl _MPAGE
                                    184 	.globl _PMUX
                                    185 	.globl _P2DIR
                                    186 	.globl _P1DIR
                                    187 	.globl _P0DIR
                                    188 	.globl _P2INP
                                    189 	.globl _P1INP
                                    190 	.globl _P2SEL
                                    191 	.globl _P1SEL
                                    192 	.globl _P0SEL
                                    193 	.globl _APCFG
                                    194 	.globl _PERCFG
                                    195 	.globl _P0INP
                                    196 	.globl _P2IEN
                                    197 	.globl _P1IEN
                                    198 	.globl _P0IEN
                                    199 	.globl _PICTL
                                    200 	.globl _P2IFG
                                    201 	.globl _P1IFG
                                    202 	.globl _P0IFG
                                    203 	.globl _DMAREQ
                                    204 	.globl _DMAARM
                                    205 	.globl _DMA0CFGH
                                    206 	.globl _DMA0CFGL
                                    207 	.globl _DMA1CFGH
                                    208 	.globl _DMA1CFGL
                                    209 	.globl _DMAIRQ
                                    210 	.globl _ENCCS
                                    211 	.globl _ENCDO
                                    212 	.globl _ENCDI
                                    213 	.globl _RNDH
                                    214 	.globl _RNDL
                                    215 	.globl _ADCH
                                    216 	.globl _ADCL
                                    217 	.globl _ADCCON3
                                    218 	.globl _ADCCON2
                                    219 	.globl _ADCCON1
                                    220 	.globl _B
                                    221 	.globl _IRCON2
                                    222 	.globl _ACC
                                    223 	.globl _PSW
                                    224 	.globl _IRCON
                                    225 	.globl _IP1
                                    226 	.globl _IEN1
                                    227 	.globl _IP0
                                    228 	.globl _IEN0
                                    229 	.globl _P2
                                    230 	.globl _S1CON
                                    231 	.globl _IEN2
                                    232 	.globl _S0CON
                                    233 	.globl _DPS
                                    234 	.globl _P1
                                    235 	.globl _TCON
                                    236 	.globl _PCON
                                    237 	.globl _DPH1
                                    238 	.globl _DPL1
                                    239 	.globl _DPH0
                                    240 	.globl _DPL0
                                    241 	.globl _SP
                                    242 	.globl _P0
                                    243 	.globl _X_IEEE_ADDR
                                    244 	.globl _X_INFOPAGE
                                    245 	.globl _X_P2DIR
                                    246 	.globl _X_P1DIR
                                    247 	.globl _X_P0DIR
                                    248 	.globl _X_U1GCR
                                    249 	.globl _X_U1UCR
                                    250 	.globl _X_U1BAUD
                                    251 	.globl _X_U1DBUF
                                    252 	.globl _X_U1CSR
                                    253 	.globl _X_P2INP
                                    254 	.globl _X_P1INP
                                    255 	.globl _X_P2SEL
                                    256 	.globl _X_P1SEL
                                    257 	.globl _X_P0SEL
                                    258 	.globl _X_APCFG
                                    259 	.globl _X_PERCFG
                                    260 	.globl _X_T4CC1
                                    261 	.globl _X_T4CCTL1
                                    262 	.globl _X_T4CC0
                                    263 	.globl _X_T4CCTL0
                                    264 	.globl _X_T4CTL
                                    265 	.globl _X_T4CNT
                                    266 	.globl _X_RFIRQF0
                                    267 	.globl _X_T1CCTL2
                                    268 	.globl _X_T1CCTL1
                                    269 	.globl _X_T1CCTL0
                                    270 	.globl _X_T1CTL
                                    271 	.globl _X_T1CNTH
                                    272 	.globl _X_T1CNTL
                                    273 	.globl _X_RFST
                                    274 	.globl _X_T1CC2H
                                    275 	.globl _X_T1CC2L
                                    276 	.globl _X_T1CC1H
                                    277 	.globl _X_T1CC1L
                                    278 	.globl _X_T1CC0H
                                    279 	.globl _X_T1CC0L
                                    280 	.globl _X_RFD
                                    281 	.globl _X_TIMIF
                                    282 	.globl _X_DMAREQ
                                    283 	.globl _X_DMAARM
                                    284 	.globl _X_DMA0CFGH
                                    285 	.globl _X_DMA0CFGL
                                    286 	.globl _X_DMA1CFGH
                                    287 	.globl _X_DMA1CFGL
                                    288 	.globl _X_DMAIRQ
                                    289 	.globl _X_T3CC1
                                    290 	.globl _X_T3CCTL1
                                    291 	.globl _X_T3CC0
                                    292 	.globl _X_T3CCTL0
                                    293 	.globl _X_T3CTL
                                    294 	.globl _X_T3CNT
                                    295 	.globl _X_WDCTL
                                    296 	.globl _X_MEMCTR
                                    297 	.globl _X_CLKCONCMD
                                    298 	.globl _X_U0GCR
                                    299 	.globl _X_U0UCR
                                    300 	.globl _X_T2MSEL
                                    301 	.globl _X_U0BAUD
                                    302 	.globl _X_U0DBUF
                                    303 	.globl _X_RFERRF
                                    304 	.globl _X_SLEEPCMD
                                    305 	.globl _X_RNDH
                                    306 	.globl _X_RNDL
                                    307 	.globl _X_ADCH
                                    308 	.globl _X_ADCL
                                    309 	.globl _X_ADCCON3
                                    310 	.globl _X_ADCCON2
                                    311 	.globl _X_ADCCON1
                                    312 	.globl _X_ENCCS
                                    313 	.globl _X_ENCDO
                                    314 	.globl _X_ENCDI
                                    315 	.globl _X_T1STAT
                                    316 	.globl _X_PMUX
                                    317 	.globl _X_STLOAD
                                    318 	.globl _X_P2IEN
                                    319 	.globl _X_P0IEN
                                    320 	.globl _X_T2IRQM
                                    321 	.globl _X_T2MOVF2
                                    322 	.globl _X_T2MOVF1
                                    323 	.globl _X_T2MOVF0
                                    324 	.globl _X_T2M1
                                    325 	.globl _X_T2M0
                                    326 	.globl _X_T2IRQF
                                    327 	.globl _X_P2
                                    328 	.globl _X_PSBANK
                                    329 	.globl _X_FMAP
                                    330 	.globl _X_CLKCONSTA
                                    331 	.globl _X_SLEEPSTA
                                    332 	.globl _X_T2EVTCFG
                                    333 	.globl _X_ST2
                                    334 	.globl _X_ST1
                                    335 	.globl _X_ST0
                                    336 	.globl _X_T2CTRL
                                    337 	.globl _X__XPAGE
                                    338 	.globl _X_MPAGE
                                    339 	.globl _X_RFIRQF1
                                    340 	.globl _X_P1
                                    341 	.globl _X_P0INP
                                    342 	.globl _X_P1IEN
                                    343 	.globl _X_PICTL
                                    344 	.globl _X_P2IFG
                                    345 	.globl _X_P1IFG
                                    346 	.globl _X_P0IFG
                                    347 	.globl _X_U0CSR
                                    348 	.globl _X_P0
                                    349 	.globl _USBF5
                                    350 	.globl _USBF4
                                    351 	.globl _USBF3
                                    352 	.globl _USBF2
                                    353 	.globl _USBF1
                                    354 	.globl _USBF0
                                    355 	.globl _USBCNTH
                                    356 	.globl _USBCNTL
                                    357 	.globl _USBCNT0
                                    358 	.globl _USBCSOH
                                    359 	.globl _USBCSOL
                                    360 	.globl _USBMAXO
                                    361 	.globl _USBCSIH
                                    362 	.globl _USBCSIL
                                    363 	.globl _USBCS0
                                    364 	.globl _USBMAXI
                                    365 	.globl _USBCTRL
                                    366 	.globl _USBINDEX
                                    367 	.globl _USBFRMH
                                    368 	.globl _USBFRML
                                    369 	.globl _USBCIE
                                    370 	.globl _USBOIE
                                    371 	.globl _USBIIE
                                    372 	.globl _USBCIF
                                    373 	.globl _USBOIF
                                    374 	.globl _USBIIF
                                    375 	.globl _USBPOW
                                    376 	.globl _USBADDR
                                    377 	.globl _CSPT
                                    378 	.globl _CSPZ
                                    379 	.globl _CSPY
                                    380 	.globl _CSPX
                                    381 	.globl _CSPSTAT
                                    382 	.globl _CSPCTRL
                                    383 	.globl _CSPPROG23
                                    384 	.globl _CSPPROG22
                                    385 	.globl _CSPPROG21
                                    386 	.globl _CSPPROG20
                                    387 	.globl _CSPPROG19
                                    388 	.globl _CSPPROG18
                                    389 	.globl _CSPPROG17
                                    390 	.globl _CSPPROG16
                                    391 	.globl _CSPPROG15
                                    392 	.globl _CSPPROG14
                                    393 	.globl _CSPPROG13
                                    394 	.globl _CSPPROG12
                                    395 	.globl _CSPPROG11
                                    396 	.globl _CSPPROG10
                                    397 	.globl _CSPPROG9
                                    398 	.globl _CSPPROG8
                                    399 	.globl _CSPPROG7
                                    400 	.globl _CSPPROG6
                                    401 	.globl _CSPPROG5
                                    402 	.globl _CSPPROG4
                                    403 	.globl _CSPPROG3
                                    404 	.globl _CSPPROG2
                                    405 	.globl _CSPPROG1
                                    406 	.globl _CSPPROG0
                                    407 	.globl _RFC_OBS_CTRL2
                                    408 	.globl _RFC_OBS_CTRL1
                                    409 	.globl _RFC_OBS_CTRL0
                                    410 	.globl _TXFILTCFG
                                    411 	.globl _PTEST1
                                    412 	.globl _PTEST0
                                    413 	.globl _ATEST
                                    414 	.globl _DACTEST2
                                    415 	.globl _DACTEST1
                                    416 	.globl _DACTEST0
                                    417 	.globl _MDMTEST1
                                    418 	.globl _MDMTEST0
                                    419 	.globl _ADCTEST2
                                    420 	.globl _ADCTEST1
                                    421 	.globl _ADCTEST0
                                    422 	.globl _AGCCTRL3
                                    423 	.globl _AGCCTRL2
                                    424 	.globl _AGCCTRL1
                                    425 	.globl _AGCCTRL0
                                    426 	.globl _FSCAL3
                                    427 	.globl _FSCAL2
                                    428 	.globl _FSCAL1
                                    429 	.globl _FSCAL0
                                    430 	.globl _FSCTRL
                                    431 	.globl _RXCTRL
                                    432 	.globl _FREQEST
                                    433 	.globl _MDMCTRL1
                                    434 	.globl _MDMCTRL0
                                    435 	.globl _RFRND
                                    436 	.globl _RFERRM
                                    437 	.globl _RFIRQM1
                                    438 	.globl _RFIRQM0
                                    439 	.globl _TXLAST_PTR
                                    440 	.globl _TXFIRST_PTR
                                    441 	.globl _RXP1_PTR
                                    442 	.globl _RXLAST_PTR
                                    443 	.globl _RXFIRST_PTR
                                    444 	.globl _TXFIFOCNT
                                    445 	.globl _RXFIFOCNT
                                    446 	.globl _RXFIRST
                                    447 	.globl _RSSISTAT
                                    448 	.globl _RSSI
                                    449 	.globl _CCACTRL1
                                    450 	.globl _CCACTRL0
                                    451 	.globl _FSMCTRL
                                    452 	.globl _FIFOPCTRL
                                    453 	.globl _FSMSTAT1
                                    454 	.globl _FSMSTAT0
                                    455 	.globl _TXCTRL
                                    456 	.globl _TXPOWER
                                    457 	.globl _FREQCTRL
                                    458 	.globl _FREQTUNE
                                    459 	.globl _RXMASKCLR
                                    460 	.globl _RXMASKSET
                                    461 	.globl _RXENABLE
                                    462 	.globl _FRMCTRL1
                                    463 	.globl _FRMCTRL0
                                    464 	.globl _SRCEXTEN2
                                    465 	.globl _SRCEXTEN1
                                    466 	.globl _SRCEXTEN0
                                    467 	.globl _SRCSHORTEN2
                                    468 	.globl _SRCSHORTEN1
                                    469 	.globl _SRCSHORTEN0
                                    470 	.globl _SRCMATCH
                                    471 	.globl _FRMFILT1
                                    472 	.globl _FRMFILT0
                                    473 	.globl _SHORT_ADDR1
                                    474 	.globl _SHORT_ADDR0
                                    475 	.globl _PAN_ID1
                                    476 	.globl _PAN_ID0
                                    477 	.globl _EXT_ADDR7
                                    478 	.globl _EXT_ADDR6
                                    479 	.globl _EXT_ADDR5
                                    480 	.globl _EXT_ADDR4
                                    481 	.globl _EXT_ADDR3
                                    482 	.globl _EXT_ADDR2
                                    483 	.globl _EXT_ADDR1
                                    484 	.globl _EXT_ADDR0
                                    485 	.globl _SRCSHORTPENDEN2
                                    486 	.globl _SRCSHORTPENDEN1
                                    487 	.globl _SRCSHORTPENDEN0
                                    488 	.globl _SRCEXTPENDEN2
                                    489 	.globl _SRCEXTPENDEN1
                                    490 	.globl _SRCEXTPENDEN0
                                    491 	.globl _SRCRESINDEX
                                    492 	.globl _SRCRESMASK2
                                    493 	.globl _SRCRESMASK1
                                    494 	.globl _SRCRESMASK0
                                    495 	.globl _SRC_ADDR_TABLE
                                    496 	.globl _TXFIFO
                                    497 	.globl _RXFIFO
                                    498 	.globl _RFCORE_RAM
                                    499 	.globl _CMPCTL
                                    500 	.globl _OPAMPS
                                    501 	.globl _OPAMPC
                                    502 	.globl _STCV2
                                    503 	.globl _STCV1
                                    504 	.globl _STCV0
                                    505 	.globl _STCS
                                    506 	.globl _STCC
                                    507 	.globl _T1CC4H
                                    508 	.globl _T1CC4L
                                    509 	.globl _T1CC3H
                                    510 	.globl _T1CC3L
                                    511 	.globl _XX_T1CC2H
                                    512 	.globl _XX_T1CC2L
                                    513 	.globl _XX_T1CC1H
                                    514 	.globl _XX_T1CC1L
                                    515 	.globl _XX_T1CC0H
                                    516 	.globl _XX_T1CC0L
                                    517 	.globl _T1CCTL4
                                    518 	.globl _T1CCTL3
                                    519 	.globl _XX_T1CCTL2
                                    520 	.globl _XX_T1CCTL1
                                    521 	.globl _XX_T1CCTL0
                                    522 	.globl _CLD
                                    523 	.globl _IRCTL
                                    524 	.globl _CHIPINFO1
                                    525 	.globl _CHIPINFO0
                                    526 	.globl _FWDATA
                                    527 	.globl _FADDRH
                                    528 	.globl _FADDRL
                                    529 	.globl _FCTL
                                    530 	.globl _IVCTRL
                                    531 	.globl _BATTMON
                                    532 	.globl _SRCRC
                                    533 	.globl _DBGDATA
                                    534 	.globl _TESTREG0
                                    535 	.globl _CHIPID
                                    536 	.globl _CHVER
                                    537 	.globl _OBSSEL5
                                    538 	.globl _OBSSEL4
                                    539 	.globl _OBSSEL3
                                    540 	.globl _OBSSEL2
                                    541 	.globl _OBSSEL1
                                    542 	.globl _OBSSEL0
                                    543 	.globl _I2CIO
                                    544 	.globl _I2CWC
                                    545 	.globl _I2CADDR
                                    546 	.globl _I2CDATA
                                    547 	.globl _I2CSTAT
                                    548 	.globl _I2CCFG
                                    549 	.globl _OPAMPMC
                                    550 	.globl _MONMUX
                                    551 	.globl _rudolph2_open
                                    552 	.globl _rudolph2_close
                                    553 	.globl _rudolph2_send
                                    554 	.globl _rudolph2_stop
                                    555 ;--------------------------------------------------------
                                    556 ; special function registers
                                    557 ;--------------------------------------------------------
                                    558 	.area RSEG    (ABS,DATA)
      000000                        559 	.org 0x0000
                           000080   560 _P0	=	0x0080
                           000081   561 _SP	=	0x0081
                           000082   562 _DPL0	=	0x0082
                           000083   563 _DPH0	=	0x0083
                           000084   564 _DPL1	=	0x0084
                           000085   565 _DPH1	=	0x0085
                           000087   566 _PCON	=	0x0087
                           000088   567 _TCON	=	0x0088
                           000090   568 _P1	=	0x0090
                           000092   569 _DPS	=	0x0092
                           000098   570 _S0CON	=	0x0098
                           00009A   571 _IEN2	=	0x009a
                           00009B   572 _S1CON	=	0x009b
                           0000A0   573 _P2	=	0x00a0
                           0000A8   574 _IEN0	=	0x00a8
                           0000A9   575 _IP0	=	0x00a9
                           0000B8   576 _IEN1	=	0x00b8
                           0000B9   577 _IP1	=	0x00b9
                           0000C0   578 _IRCON	=	0x00c0
                           0000D0   579 _PSW	=	0x00d0
                           0000E0   580 _ACC	=	0x00e0
                           0000E8   581 _IRCON2	=	0x00e8
                           0000F0   582 _B	=	0x00f0
                           0000B4   583 _ADCCON1	=	0x00b4
                           0000B5   584 _ADCCON2	=	0x00b5
                           0000B6   585 _ADCCON3	=	0x00b6
                           0000BA   586 _ADCL	=	0x00ba
                           0000BB   587 _ADCH	=	0x00bb
                           0000BC   588 _RNDL	=	0x00bc
                           0000BD   589 _RNDH	=	0x00bd
                           0000B1   590 _ENCDI	=	0x00b1
                           0000B2   591 _ENCDO	=	0x00b2
                           0000B3   592 _ENCCS	=	0x00b3
                           0000D1   593 _DMAIRQ	=	0x00d1
                           0000D2   594 _DMA1CFGL	=	0x00d2
                           0000D3   595 _DMA1CFGH	=	0x00d3
                           0000D4   596 _DMA0CFGL	=	0x00d4
                           0000D5   597 _DMA0CFGH	=	0x00d5
                           0000D6   598 _DMAARM	=	0x00d6
                           0000D7   599 _DMAREQ	=	0x00d7
                           000089   600 _P0IFG	=	0x0089
                           00008A   601 _P1IFG	=	0x008a
                           00008B   602 _P2IFG	=	0x008b
                           00008C   603 _PICTL	=	0x008c
                           0000AB   604 _P0IEN	=	0x00ab
                           00008D   605 _P1IEN	=	0x008d
                           0000AC   606 _P2IEN	=	0x00ac
                           00008F   607 _P0INP	=	0x008f
                           0000F1   608 _PERCFG	=	0x00f1
                           0000F2   609 _APCFG	=	0x00f2
                           0000F3   610 _P0SEL	=	0x00f3
                           0000F4   611 _P1SEL	=	0x00f4
                           0000F5   612 _P2SEL	=	0x00f5
                           0000F6   613 _P1INP	=	0x00f6
                           0000F7   614 _P2INP	=	0x00f7
                           0000FD   615 _P0DIR	=	0x00fd
                           0000FE   616 _P1DIR	=	0x00fe
                           0000FF   617 _P2DIR	=	0x00ff
                           0000AE   618 _PMUX	=	0x00ae
                           000093   619 _MPAGE	=	0x0093
                           000093   620 __XPAGE	=	0x0093
                           0000C7   621 _MEMCTR	=	0x00c7
                           00009F   622 _FMAP	=	0x009f
                           00009F   623 _PSBANK	=	0x009f
                           000091   624 _RFIRQF1	=	0x0091
                           0000D9   625 _RFD	=	0x00d9
                           0000E1   626 _RFST	=	0x00e1
                           0000E9   627 _RFIRQF0	=	0x00e9
                           0000BF   628 _RFERRF	=	0x00bf
                           000095   629 _ST0	=	0x0095
                           000096   630 _ST1	=	0x0096
                           000097   631 _ST2	=	0x0097
                           0000AD   632 _STLOAD	=	0x00ad
                           0000BE   633 _SLEEPCMD	=	0x00be
                           00009D   634 _SLEEPSTA	=	0x009d
                           0000C6   635 _CLKCONCMD	=	0x00c6
                           00009E   636 _CLKCONSTA	=	0x009e
                           0000DA   637 _T1CC0L	=	0x00da
                           0000DB   638 _T1CC0H	=	0x00db
                           0000DC   639 _T1CC1L	=	0x00dc
                           0000DD   640 _T1CC1H	=	0x00dd
                           0000DE   641 _T1CC2L	=	0x00de
                           0000DF   642 _T1CC2H	=	0x00df
                           0000E2   643 _T1CNTL	=	0x00e2
                           0000E3   644 _T1CNTH	=	0x00e3
                           0000E4   645 _T1CTL	=	0x00e4
                           0000E5   646 _T1CCTL0	=	0x00e5
                           0000E6   647 _T1CCTL1	=	0x00e6
                           0000E7   648 _T1CCTL2	=	0x00e7
                           0000AF   649 _T1STAT	=	0x00af
                           000094   650 _T2CTRL	=	0x0094
                           00009C   651 _T2EVTCFG	=	0x009c
                           0000A1   652 _T2IRQF	=	0x00a1
                           0000A2   653 _T2M0	=	0x00a2
                           0000A3   654 _T2M1	=	0x00a3
                           0000A4   655 _T2MOVF0	=	0x00a4
                           0000A5   656 _T2MOVF1	=	0x00a5
                           0000A6   657 _T2MOVF2	=	0x00a6
                           0000A7   658 _T2IRQM	=	0x00a7
                           0000C3   659 _T2MSEL	=	0x00c3
                           0000CA   660 _T3CNT	=	0x00ca
                           0000CB   661 _T3CTL	=	0x00cb
                           0000CC   662 _T3CCTL0	=	0x00cc
                           0000CD   663 _T3CC0	=	0x00cd
                           0000CE   664 _T3CCTL1	=	0x00ce
                           0000CF   665 _T3CC1	=	0x00cf
                           0000EA   666 _T4CNT	=	0x00ea
                           0000EB   667 _T4CTL	=	0x00eb
                           0000EC   668 _T4CCTL0	=	0x00ec
                           0000ED   669 _T4CC0	=	0x00ed
                           0000EE   670 _T4CCTL1	=	0x00ee
                           0000EF   671 _T4CC1	=	0x00ef
                           0000D8   672 _TIMIF	=	0x00d8
                           000086   673 _U0CSR	=	0x0086
                           0000C1   674 _U0DBUF	=	0x00c1
                           0000C2   675 _U0BAUD	=	0x00c2
                           0000C4   676 _U0UCR	=	0x00c4
                           0000C5   677 _U0GCR	=	0x00c5
                           0000F8   678 _U1CSR	=	0x00f8
                           0000F9   679 _U1DBUF	=	0x00f9
                           0000FA   680 _U1BAUD	=	0x00fa
                           0000FB   681 _U1UCR	=	0x00fb
                           0000FC   682 _U1GCR	=	0x00fc
                           0000C9   683 _WDCTL	=	0x00c9
                                    684 ;--------------------------------------------------------
                                    685 ; special function bits
                                    686 ;--------------------------------------------------------
                                    687 	.area RSEG    (ABS,DATA)
      000000                        688 	.org 0x0000
                           000087   689 _P0_7	=	0x0087
                           000086   690 _P0_6	=	0x0086
                           000085   691 _P0_5	=	0x0085
                           000084   692 _P0_4	=	0x0084
                           000083   693 _P0_3	=	0x0083
                           000082   694 _P0_2	=	0x0082
                           000081   695 _P0_1	=	0x0081
                           000080   696 _P0_0	=	0x0080
                           00008F   697 _URX1IF	=	0x008f
                           00008D   698 _ADCIF	=	0x008d
                           00008B   699 _URX0IF	=	0x008b
                           00008A   700 _IT1	=	0x008a
                           000089   701 _RFERRIF	=	0x0089
                           000088   702 _IT0	=	0x0088
                           000097   703 _P1_7	=	0x0097
                           000096   704 _P1_6	=	0x0096
                           000095   705 _P1_5	=	0x0095
                           000094   706 _P1_4	=	0x0094
                           000093   707 _P1_3	=	0x0093
                           000092   708 _P1_2	=	0x0092
                           000091   709 _P1_1	=	0x0091
                           000090   710 _P1_0	=	0x0090
                           000099   711 _ENCIF_1	=	0x0099
                           000098   712 _ENCIF_0	=	0x0098
                           0000A7   713 _P2_7	=	0x00a7
                           0000A6   714 _P2_6	=	0x00a6
                           0000A5   715 _P2_5	=	0x00a5
                           0000A4   716 _P2_4	=	0x00a4
                           0000A3   717 _P2_3	=	0x00a3
                           0000A2   718 _P2_2	=	0x00a2
                           0000A1   719 _P2_1	=	0x00a1
                           0000A0   720 _P2_0	=	0x00a0
                           0000AF   721 _EA	=	0x00af
                           0000AD   722 _STIE	=	0x00ad
                           0000AC   723 _ENCIE	=	0x00ac
                           0000AB   724 _URX1IE	=	0x00ab
                           0000AA   725 _URX0IE	=	0x00aa
                           0000A9   726 _ADCIE	=	0x00a9
                           0000A8   727 _RFERRIE	=	0x00a8
                           0000BD   728 _P0IE	=	0x00bd
                           0000BC   729 _T4IE	=	0x00bc
                           0000BB   730 _T3IE	=	0x00bb
                           0000BA   731 _T2IE	=	0x00ba
                           0000B9   732 _T1IE	=	0x00b9
                           0000B8   733 _DMAIE	=	0x00b8
                           0000C7   734 _STIF	=	0x00c7
                           0000C5   735 _P0IF	=	0x00c5
                           0000C4   736 _T4IF	=	0x00c4
                           0000C3   737 _T3IF	=	0x00c3
                           0000C2   738 _T2IF	=	0x00c2
                           0000C1   739 _T1IF	=	0x00c1
                           0000C0   740 _DMAIF	=	0x00c0
                           0000D7   741 _CY	=	0x00d7
                           0000D6   742 _AC	=	0x00d6
                           0000D5   743 _F0	=	0x00d5
                           0000D4   744 _RS1	=	0x00d4
                           0000D3   745 _RS0	=	0x00d3
                           0000D2   746 _OV	=	0x00d2
                           0000D1   747 _F1	=	0x00d1
                           0000D0   748 _P	=	0x00d0
                           0000E7   749 _ACC_7	=	0x00e7
                           0000E6   750 _ACC_6	=	0x00e6
                           0000E5   751 _ACC_5	=	0x00e5
                           0000E4   752 _ACC_4	=	0x00e4
                           0000E3   753 _ACC_3	=	0x00e3
                           0000E2   754 _ACC_2	=	0x00e2
                           0000E1   755 _ACC_1	=	0x00e1
                           0000E0   756 _ACC_0	=	0x00e0
                           0000EC   757 _WDTIF	=	0x00ec
                           0000EB   758 _P1IF	=	0x00eb
                           0000EA   759 _UTX1IF	=	0x00ea
                           0000E9   760 _UTX0IF	=	0x00e9
                           0000E8   761 _P2IF	=	0x00e8
                           0000F7   762 _B_7	=	0x00f7
                           0000F6   763 _B_6	=	0x00f6
                           0000F5   764 _B_5	=	0x00f5
                           0000F4   765 _B_4	=	0x00f4
                           0000F3   766 _B_3	=	0x00f3
                           0000F2   767 _B_2	=	0x00f2
                           0000F1   768 _B_1	=	0x00f1
                           0000F0   769 _B_0	=	0x00f0
                           0000DE   770 _OVFIM	=	0x00de
                           0000DD   771 _T4CH1IF	=	0x00dd
                           0000DC   772 _T4CH0IF	=	0x00dc
                           0000DB   773 _T4OVFIF	=	0x00db
                           0000DA   774 _T3CH1IF	=	0x00da
                           0000D9   775 _T3CH0IF	=	0x00d9
                           0000D8   776 _T3OVFIF	=	0x00d8
                           0000FF   777 _MODE	=	0x00ff
                           0000FE   778 _RE	=	0x00fe
                           0000FD   779 _SLAVE	=	0x00fd
                           0000FC   780 _FE	=	0x00fc
                           0000FB   781 _ERR	=	0x00fb
                           0000FA   782 _RX_BYTE	=	0x00fa
                           0000F9   783 _TX_BYTE	=	0x00f9
                           0000F8   784 _ACTIVE	=	0x00f8
                                    785 ;--------------------------------------------------------
                                    786 ; overlayable register banks
                                    787 ;--------------------------------------------------------
                                    788 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        789 	.ds 8
                                    790 ;--------------------------------------------------------
                                    791 ; internal ram data
                                    792 ;--------------------------------------------------------
                                    793 	.area DSEG    (DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; overlayable items in internal ram 
                                    796 ;--------------------------------------------------------
                                    797 ;--------------------------------------------------------
                                    798 ; indirectly addressable internal ram data
                                    799 ;--------------------------------------------------------
                                    800 	.area ISEG    (DATA)
                                    801 ;--------------------------------------------------------
                                    802 ; absolute internal ram data
                                    803 ;--------------------------------------------------------
                                    804 	.area IABS    (ABS,DATA)
                                    805 	.area IABS    (ABS,DATA)
                                    806 ;--------------------------------------------------------
                                    807 ; bit data
                                    808 ;--------------------------------------------------------
                                    809 	.area BSEG    (BIT)
                                    810 ;--------------------------------------------------------
                                    811 ; paged external ram data
                                    812 ;--------------------------------------------------------
                                    813 	.area PSEG    (PAG,XDATA)
                                    814 ;--------------------------------------------------------
                                    815 ; external ram data
                                    816 ;--------------------------------------------------------
                                    817 	.area XSEG    (XDATA)
                           0061A6   818 _MONMUX	=	0x61a6
                           0061A6   819 _OPAMPMC	=	0x61a6
                           006230   820 _I2CCFG	=	0x6230
                           006231   821 _I2CSTAT	=	0x6231
                           006232   822 _I2CDATA	=	0x6232
                           006233   823 _I2CADDR	=	0x6233
                           006234   824 _I2CWC	=	0x6234
                           006235   825 _I2CIO	=	0x6235
                           006243   826 _OBSSEL0	=	0x6243
                           006244   827 _OBSSEL1	=	0x6244
                           006245   828 _OBSSEL2	=	0x6245
                           006246   829 _OBSSEL3	=	0x6246
                           006247   830 _OBSSEL4	=	0x6247
                           006248   831 _OBSSEL5	=	0x6248
                           006249   832 _CHVER	=	0x6249
                           00624A   833 _CHIPID	=	0x624a
                           00624B   834 _TESTREG0	=	0x624b
                           006260   835 _DBGDATA	=	0x6260
                           006262   836 _SRCRC	=	0x6262
                           006264   837 _BATTMON	=	0x6264
                           006265   838 _IVCTRL	=	0x6265
                           006270   839 _FCTL	=	0x6270
                           006271   840 _FADDRL	=	0x6271
                           006272   841 _FADDRH	=	0x6272
                           006273   842 _FWDATA	=	0x6273
                           006276   843 _CHIPINFO0	=	0x6276
                           006277   844 _CHIPINFO1	=	0x6277
                           006281   845 _IRCTL	=	0x6281
                           006290   846 _CLD	=	0x6290
                           0062A0   847 _XX_T1CCTL0	=	0x62a0
                           0062A1   848 _XX_T1CCTL1	=	0x62a1
                           0062A2   849 _XX_T1CCTL2	=	0x62a2
                           0062A3   850 _T1CCTL3	=	0x62a3
                           0062A4   851 _T1CCTL4	=	0x62a4
                           0062A6   852 _XX_T1CC0L	=	0x62a6
                           0062A7   853 _XX_T1CC0H	=	0x62a7
                           0062A8   854 _XX_T1CC1L	=	0x62a8
                           0062A9   855 _XX_T1CC1H	=	0x62a9
                           0062AA   856 _XX_T1CC2L	=	0x62aa
                           0062AB   857 _XX_T1CC2H	=	0x62ab
                           0062AC   858 _T1CC3L	=	0x62ac
                           0062AD   859 _T1CC3H	=	0x62ad
                           0062AE   860 _T1CC4L	=	0x62ae
                           0062AF   861 _T1CC4H	=	0x62af
                           0062B0   862 _STCC	=	0x62b0
                           0062B1   863 _STCS	=	0x62b1
                           0062B2   864 _STCV0	=	0x62b2
                           0062B3   865 _STCV1	=	0x62b3
                           0062B4   866 _STCV2	=	0x62b4
                           0062C0   867 _OPAMPC	=	0x62c0
                           0062C1   868 _OPAMPS	=	0x62c1
                           0062D0   869 _CMPCTL	=	0x62d0
                           006000   870 _RFCORE_RAM	=	0x6000
                           006000   871 _RXFIFO	=	0x6000
                           006080   872 _TXFIFO	=	0x6080
                           006100   873 _SRC_ADDR_TABLE	=	0x6100
                           006160   874 _SRCRESMASK0	=	0x6160
                           006161   875 _SRCRESMASK1	=	0x6161
                           006162   876 _SRCRESMASK2	=	0x6162
                           006163   877 _SRCRESINDEX	=	0x6163
                           006164   878 _SRCEXTPENDEN0	=	0x6164
                           006165   879 _SRCEXTPENDEN1	=	0x6165
                           006166   880 _SRCEXTPENDEN2	=	0x6166
                           006167   881 _SRCSHORTPENDEN0	=	0x6167
                           006168   882 _SRCSHORTPENDEN1	=	0x6168
                           006169   883 _SRCSHORTPENDEN2	=	0x6169
                           00616A   884 _EXT_ADDR0	=	0x616a
                           00616B   885 _EXT_ADDR1	=	0x616b
                           00616C   886 _EXT_ADDR2	=	0x616c
                           00616D   887 _EXT_ADDR3	=	0x616d
                           00616E   888 _EXT_ADDR4	=	0x616e
                           00616F   889 _EXT_ADDR5	=	0x616f
                           006170   890 _EXT_ADDR6	=	0x6170
                           006171   891 _EXT_ADDR7	=	0x6171
                           006172   892 _PAN_ID0	=	0x6172
                           006173   893 _PAN_ID1	=	0x6173
                           006174   894 _SHORT_ADDR0	=	0x6174
                           006175   895 _SHORT_ADDR1	=	0x6175
                           006180   896 _FRMFILT0	=	0x6180
                           006181   897 _FRMFILT1	=	0x6181
                           006182   898 _SRCMATCH	=	0x6182
                           006183   899 _SRCSHORTEN0	=	0x6183
                           006184   900 _SRCSHORTEN1	=	0x6184
                           006185   901 _SRCSHORTEN2	=	0x6185
                           006186   902 _SRCEXTEN0	=	0x6186
                           006187   903 _SRCEXTEN1	=	0x6187
                           006188   904 _SRCEXTEN2	=	0x6188
                           006189   905 _FRMCTRL0	=	0x6189
                           00618A   906 _FRMCTRL1	=	0x618a
                           00618B   907 _RXENABLE	=	0x618b
                           00618C   908 _RXMASKSET	=	0x618c
                           00618D   909 _RXMASKCLR	=	0x618d
                           00618E   910 _FREQTUNE	=	0x618e
                           00618F   911 _FREQCTRL	=	0x618f
                           006190   912 _TXPOWER	=	0x6190
                           006191   913 _TXCTRL	=	0x6191
                           006192   914 _FSMSTAT0	=	0x6192
                           006193   915 _FSMSTAT1	=	0x6193
                           006194   916 _FIFOPCTRL	=	0x6194
                           006195   917 _FSMCTRL	=	0x6195
                           006196   918 _CCACTRL0	=	0x6196
                           006197   919 _CCACTRL1	=	0x6197
                           006198   920 _RSSI	=	0x6198
                           006199   921 _RSSISTAT	=	0x6199
                           00619A   922 _RXFIRST	=	0x619a
                           00619B   923 _RXFIFOCNT	=	0x619b
                           00619C   924 _TXFIFOCNT	=	0x619c
                           00619D   925 _RXFIRST_PTR	=	0x619d
                           00619E   926 _RXLAST_PTR	=	0x619e
                           00619F   927 _RXP1_PTR	=	0x619f
                           0061A1   928 _TXFIRST_PTR	=	0x61a1
                           0061A2   929 _TXLAST_PTR	=	0x61a2
                           0061A3   930 _RFIRQM0	=	0x61a3
                           0061A4   931 _RFIRQM1	=	0x61a4
                           0061A5   932 _RFERRM	=	0x61a5
                           0061A7   933 _RFRND	=	0x61a7
                           0061A8   934 _MDMCTRL0	=	0x61a8
                           0061A9   935 _MDMCTRL1	=	0x61a9
                           0061AA   936 _FREQEST	=	0x61aa
                           0061AB   937 _RXCTRL	=	0x61ab
                           0061AC   938 _FSCTRL	=	0x61ac
                           0061AD   939 _FSCAL0	=	0x61ad
                           0061AE   940 _FSCAL1	=	0x61ae
                           0061AF   941 _FSCAL2	=	0x61af
                           0061B0   942 _FSCAL3	=	0x61b0
                           0061B1   943 _AGCCTRL0	=	0x61b1
                           0061B2   944 _AGCCTRL1	=	0x61b2
                           0061B3   945 _AGCCTRL2	=	0x61b3
                           0061B4   946 _AGCCTRL3	=	0x61b4
                           0061B5   947 _ADCTEST0	=	0x61b5
                           0061B6   948 _ADCTEST1	=	0x61b6
                           0061B7   949 _ADCTEST2	=	0x61b7
                           0061B8   950 _MDMTEST0	=	0x61b8
                           0061B9   951 _MDMTEST1	=	0x61b9
                           0061BA   952 _DACTEST0	=	0x61ba
                           0061BB   953 _DACTEST1	=	0x61bb
                           0061BC   954 _DACTEST2	=	0x61bc
                           0061BD   955 _ATEST	=	0x61bd
                           0061BE   956 _PTEST0	=	0x61be
                           0061BF   957 _PTEST1	=	0x61bf
                           0061FA   958 _TXFILTCFG	=	0x61fa
                           0061EB   959 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   960 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   961 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   962 _CSPPROG0	=	0x61c0
                           0061C1   963 _CSPPROG1	=	0x61c1
                           0061C2   964 _CSPPROG2	=	0x61c2
                           0061C3   965 _CSPPROG3	=	0x61c3
                           0061C4   966 _CSPPROG4	=	0x61c4
                           0061C5   967 _CSPPROG5	=	0x61c5
                           0061C6   968 _CSPPROG6	=	0x61c6
                           0061C7   969 _CSPPROG7	=	0x61c7
                           0061C8   970 _CSPPROG8	=	0x61c8
                           0061C9   971 _CSPPROG9	=	0x61c9
                           0061CA   972 _CSPPROG10	=	0x61ca
                           0061CB   973 _CSPPROG11	=	0x61cb
                           0061CC   974 _CSPPROG12	=	0x61cc
                           0061CD   975 _CSPPROG13	=	0x61cd
                           0061CE   976 _CSPPROG14	=	0x61ce
                           0061CF   977 _CSPPROG15	=	0x61cf
                           0061D0   978 _CSPPROG16	=	0x61d0
                           0061D1   979 _CSPPROG17	=	0x61d1
                           0061D2   980 _CSPPROG18	=	0x61d2
                           0061D3   981 _CSPPROG19	=	0x61d3
                           0061D4   982 _CSPPROG20	=	0x61d4
                           0061D5   983 _CSPPROG21	=	0x61d5
                           0061D6   984 _CSPPROG22	=	0x61d6
                           0061D7   985 _CSPPROG23	=	0x61d7
                           0061E0   986 _CSPCTRL	=	0x61e0
                           0061E1   987 _CSPSTAT	=	0x61e1
                           0061E2   988 _CSPX	=	0x61e2
                           0061E3   989 _CSPY	=	0x61e3
                           0061E4   990 _CSPZ	=	0x61e4
                           0061E5   991 _CSPT	=	0x61e5
                           006200   992 _USBADDR	=	0x6200
                           006201   993 _USBPOW	=	0x6201
                           006202   994 _USBIIF	=	0x6202
                           006204   995 _USBOIF	=	0x6204
                           006206   996 _USBCIF	=	0x6206
                           006207   997 _USBIIE	=	0x6207
                           006209   998 _USBOIE	=	0x6209
                           00620B   999 _USBCIE	=	0x620b
                           00620C  1000 _USBFRML	=	0x620c
                           00620D  1001 _USBFRMH	=	0x620d
                           00620E  1002 _USBINDEX	=	0x620e
                           00620F  1003 _USBCTRL	=	0x620f
                           006210  1004 _USBMAXI	=	0x6210
                           006211  1005 _USBCS0	=	0x6211
                           006211  1006 _USBCSIL	=	0x6211
                           006212  1007 _USBCSIH	=	0x6212
                           006213  1008 _USBMAXO	=	0x6213
                           006214  1009 _USBCSOL	=	0x6214
                           006215  1010 _USBCSOH	=	0x6215
                           006216  1011 _USBCNT0	=	0x6216
                           006216  1012 _USBCNTL	=	0x6216
                           006217  1013 _USBCNTH	=	0x6217
                           006220  1014 _USBF0	=	0x6220
                           006222  1015 _USBF1	=	0x6222
                           006224  1016 _USBF2	=	0x6224
                           006226  1017 _USBF3	=	0x6226
                           006228  1018 _USBF4	=	0x6228
                           00622A  1019 _USBF5	=	0x622a
                           007080  1020 _X_P0	=	0x7080
                           007086  1021 _X_U0CSR	=	0x7086
                           007089  1022 _X_P0IFG	=	0x7089
                           00708A  1023 _X_P1IFG	=	0x708a
                           00708B  1024 _X_P2IFG	=	0x708b
                           00708C  1025 _X_PICTL	=	0x708c
                           00708D  1026 _X_P1IEN	=	0x708d
                           00708F  1027 _X_P0INP	=	0x708f
                           007090  1028 _X_P1	=	0x7090
                           007091  1029 _X_RFIRQF1	=	0x7091
                           007093  1030 _X_MPAGE	=	0x7093
                           007093  1031 _X__XPAGE	=	0x7093
                           007094  1032 _X_T2CTRL	=	0x7094
                           007095  1033 _X_ST0	=	0x7095
                           007096  1034 _X_ST1	=	0x7096
                           007097  1035 _X_ST2	=	0x7097
                           00709C  1036 _X_T2EVTCFG	=	0x709c
                           00709D  1037 _X_SLEEPSTA	=	0x709d
                           00709E  1038 _X_CLKCONSTA	=	0x709e
                           00709F  1039 _X_FMAP	=	0x709f
                           00709F  1040 _X_PSBANK	=	0x709f
                           0070A0  1041 _X_P2	=	0x70a0
                           0070A1  1042 _X_T2IRQF	=	0x70a1
                           0070A2  1043 _X_T2M0	=	0x70a2
                           0070A3  1044 _X_T2M1	=	0x70a3
                           0070A4  1045 _X_T2MOVF0	=	0x70a4
                           0070A5  1046 _X_T2MOVF1	=	0x70a5
                           0070A6  1047 _X_T2MOVF2	=	0x70a6
                           0070A7  1048 _X_T2IRQM	=	0x70a7
                           0070AB  1049 _X_P0IEN	=	0x70ab
                           0070AC  1050 _X_P2IEN	=	0x70ac
                           0070AD  1051 _X_STLOAD	=	0x70ad
                           0070AE  1052 _X_PMUX	=	0x70ae
                           0070AF  1053 _X_T1STAT	=	0x70af
                           0070B1  1054 _X_ENCDI	=	0x70b1
                           0070B2  1055 _X_ENCDO	=	0x70b2
                           0070B3  1056 _X_ENCCS	=	0x70b3
                           0070B4  1057 _X_ADCCON1	=	0x70b4
                           0070B5  1058 _X_ADCCON2	=	0x70b5
                           0070B6  1059 _X_ADCCON3	=	0x70b6
                           0070BA  1060 _X_ADCL	=	0x70ba
                           0070BB  1061 _X_ADCH	=	0x70bb
                           0070BC  1062 _X_RNDL	=	0x70bc
                           0070BD  1063 _X_RNDH	=	0x70bd
                           0070BE  1064 _X_SLEEPCMD	=	0x70be
                           0070BF  1065 _X_RFERRF	=	0x70bf
                           0070C1  1066 _X_U0DBUF	=	0x70c1
                           0070C2  1067 _X_U0BAUD	=	0x70c2
                           0070C3  1068 _X_T2MSEL	=	0x70c3
                           0070C4  1069 _X_U0UCR	=	0x70c4
                           0070C5  1070 _X_U0GCR	=	0x70c5
                           0070C6  1071 _X_CLKCONCMD	=	0x70c6
                           0070C7  1072 _X_MEMCTR	=	0x70c7
                           0070C9  1073 _X_WDCTL	=	0x70c9
                           0070CA  1074 _X_T3CNT	=	0x70ca
                           0070CB  1075 _X_T3CTL	=	0x70cb
                           0070CC  1076 _X_T3CCTL0	=	0x70cc
                           0070CD  1077 _X_T3CC0	=	0x70cd
                           0070CE  1078 _X_T3CCTL1	=	0x70ce
                           0070CF  1079 _X_T3CC1	=	0x70cf
                           0070D1  1080 _X_DMAIRQ	=	0x70d1
                           0070D2  1081 _X_DMA1CFGL	=	0x70d2
                           0070D3  1082 _X_DMA1CFGH	=	0x70d3
                           0070D4  1083 _X_DMA0CFGL	=	0x70d4
                           0070D5  1084 _X_DMA0CFGH	=	0x70d5
                           0070D6  1085 _X_DMAARM	=	0x70d6
                           0070D7  1086 _X_DMAREQ	=	0x70d7
                           0070D8  1087 _X_TIMIF	=	0x70d8
                           0070D9  1088 _X_RFD	=	0x70d9
                           0070DA  1089 _X_T1CC0L	=	0x70da
                           0070DB  1090 _X_T1CC0H	=	0x70db
                           0070DC  1091 _X_T1CC1L	=	0x70dc
                           0070DD  1092 _X_T1CC1H	=	0x70dd
                           0070DE  1093 _X_T1CC2L	=	0x70de
                           0070DF  1094 _X_T1CC2H	=	0x70df
                           0070E1  1095 _X_RFST	=	0x70e1
                           0070E2  1096 _X_T1CNTL	=	0x70e2
                           0070E3  1097 _X_T1CNTH	=	0x70e3
                           0070E4  1098 _X_T1CTL	=	0x70e4
                           0070E5  1099 _X_T1CCTL0	=	0x70e5
                           0070E6  1100 _X_T1CCTL1	=	0x70e6
                           0070E7  1101 _X_T1CCTL2	=	0x70e7
                           0070E9  1102 _X_RFIRQF0	=	0x70e9
                           0070EA  1103 _X_T4CNT	=	0x70ea
                           0070EB  1104 _X_T4CTL	=	0x70eb
                           0070EC  1105 _X_T4CCTL0	=	0x70ec
                           0070ED  1106 _X_T4CC0	=	0x70ed
                           0070EE  1107 _X_T4CCTL1	=	0x70ee
                           0070EF  1108 _X_T4CC1	=	0x70ef
                           0070F1  1109 _X_PERCFG	=	0x70f1
                           0070F2  1110 _X_APCFG	=	0x70f2
                           0070F3  1111 _X_P0SEL	=	0x70f3
                           0070F4  1112 _X_P1SEL	=	0x70f4
                           0070F5  1113 _X_P2SEL	=	0x70f5
                           0070F6  1114 _X_P1INP	=	0x70f6
                           0070F7  1115 _X_P2INP	=	0x70f7
                           0070F8  1116 _X_U1CSR	=	0x70f8
                           0070F9  1117 _X_U1DBUF	=	0x70f9
                           0070FA  1118 _X_U1BAUD	=	0x70fa
                           0070FB  1119 _X_U1UCR	=	0x70fb
                           0070FC  1120 _X_U1GCR	=	0x70fc
                           0070FD  1121 _X_P0DIR	=	0x70fd
                           0070FE  1122 _X_P1DIR	=	0x70fe
                           0070FF  1123 _X_P2DIR	=	0x70ff
                           007800  1124 _X_INFOPAGE	=	0x7800
                           00780C  1125 _X_IEEE_ADDR	=	0x780c
                                   1126 ;--------------------------------------------------------
                                   1127 ; absolute external ram data
                                   1128 ;--------------------------------------------------------
                                   1129 	.area XABS    (ABS,XDATA)
                                   1130 ;--------------------------------------------------------
                                   1131 ; external initialized ram data
                                   1132 ;--------------------------------------------------------
                                   1133 	.area XISEG   (XDATA)
                                   1134 	.area HOME    (CODE)
                                   1135 	.area GSINIT0 (CODE)
                                   1136 	.area GSINIT1 (CODE)
                                   1137 	.area GSINIT2 (CODE)
                                   1138 	.area GSINIT3 (CODE)
                                   1139 	.area GSINIT4 (CODE)
                                   1140 	.area GSINIT5 (CODE)
                                   1141 	.area GSINIT  (CODE)
                                   1142 	.area GSFINAL (CODE)
                                   1143 	.area CSEG    (CODE)
                                   1144 ;--------------------------------------------------------
                                   1145 ; global & static initialisations
                                   1146 ;--------------------------------------------------------
                                   1147 	.area HOME    (CODE)
                                   1148 	.area GSINIT  (CODE)
                                   1149 	.area GSFINAL (CODE)
                                   1150 	.area GSINIT  (CODE)
                                   1151 ;--------------------------------------------------------
                                   1152 ; Home
                                   1153 ;--------------------------------------------------------
                                   1154 	.area HOME    (CODE)
                                   1155 	.area HOME    (CODE)
                                   1156 ;--------------------------------------------------------
                                   1157 ; code
                                   1158 ;--------------------------------------------------------
                                   1159 	.area CSEG    (CODE)
                                   1160 ;------------------------------------------------------------
                                   1161 ;Allocation info for local variables in function 'read_data'
                                   1162 ;------------------------------------------------------------
                                   1163 ;dataptr                   Allocated to stack - sp -7
                                   1164 ;chunk                     Allocated to stack - sp -9
                                   1165 ;c                         Allocated to stack - sp -2
                                   1166 ;len                       Allocated to registers r3 r4 
                                   1167 ;------------------------------------------------------------
                                   1168 ;	../../core/net/rime/rudolph2.c:96: read_data(struct rudolph2_conn *c, uint8_t *dataptr, int chunk)
                                   1169 ;	-----------------------------------------
                                   1170 ;	 function read_data
                                   1171 ;	-----------------------------------------
      000000                       1172 _read_data:
                           000007  1173 	ar7 = 0x07
                           000006  1174 	ar6 = 0x06
                           000005  1175 	ar5 = 0x05
                           000004  1176 	ar4 = 0x04
                           000003  1177 	ar3 = 0x03
                           000002  1178 	ar2 = 0x02
                           000001  1179 	ar1 = 0x01
                           000000  1180 	ar0 = 0x00
      000000 C0 82            [24] 1181 	push	dpl
      000002 C0 83            [24] 1182 	push	dph
      000004 C0 F0            [24] 1183 	push	b
                                   1184 ;	../../core/net/rime/rudolph2.c:98: int len = 0;
      000006 7B 00            [12] 1185 	mov	r3,#0x00
      000008 7C 00            [12] 1186 	mov	r4,#0x00
                                   1187 ;	../../core/net/rime/rudolph2.c:100: if(c->cb->read_chunk) {
      00000A A8 81            [24] 1188 	mov	r0,sp
      00000C 18               [12] 1189 	dec	r0
      00000D 18               [12] 1190 	dec	r0
      00000E 74 28            [12] 1191 	mov	a,#0x28
      000010 26               [12] 1192 	add	a,@r0
      000011 FE               [12] 1193 	mov	r6,a
      000012 E4               [12] 1194 	clr	a
      000013 08               [12] 1195 	inc	r0
      000014 36               [12] 1196 	addc	a,@r0
      000015 FA               [12] 1197 	mov	r2,a
      000016 08               [12] 1198 	inc	r0
      000017 86 07            [24] 1199 	mov	ar7,@r0
      000019 8E 82            [24] 1200 	mov	dpl,r6
      00001B 8A 83            [24] 1201 	mov	dph,r2
      00001D 8F F0            [24] 1202 	mov	b,r7
      00001F 12r00r00         [24] 1203 	lcall	__gptrget
      000022 FE               [12] 1204 	mov	r6,a
      000023 A3               [24] 1205 	inc	dptr
      000024 12r00r00         [24] 1206 	lcall	__gptrget
      000027 FA               [12] 1207 	mov	r2,a
      000028 A3               [24] 1208 	inc	dptr
      000029 12r00r00         [24] 1209 	lcall	__gptrget
      00002C FF               [12] 1210 	mov	r7,a
      00002D 74 02            [12] 1211 	mov	a,#0x02
      00002F 2E               [12] 1212 	add	a,r6
      000030 FE               [12] 1213 	mov	r6,a
      000031 E4               [12] 1214 	clr	a
      000032 3A               [12] 1215 	addc	a,r2
      000033 FA               [12] 1216 	mov	r2,a
      000034 8E 82            [24] 1217 	mov	dpl,r6
      000036 8A 83            [24] 1218 	mov	dph,r2
      000038 8F F0            [24] 1219 	mov	b,r7
      00003A 12r00r00         [24] 1220 	lcall	__gptrget
      00003D FE               [12] 1221 	mov	r6,a
      00003E A3               [24] 1222 	inc	dptr
      00003F 12r00r00         [24] 1223 	lcall	__gptrget
      000042 FF               [12] 1224 	mov	r7,a
      000043 4E               [12] 1225 	orl	a,r6
      000044 60 59            [24] 1226 	jz	00102$
                                   1227 ;	../../core/net/rime/rudolph2.c:101: len = c->cb->read_chunk(c, chunk * RUDOLPH2_DATASIZE,
      000046 E5 81            [12] 1228 	mov	a,sp
      000048 24 F7            [12] 1229 	add	a,#0xf7
      00004A F8               [12] 1230 	mov	r0,a
      00004B 86 02            [24] 1231 	mov	ar2,@r0
      00004D 08               [12] 1232 	inc	r0
      00004E E6               [12] 1233 	mov	a,@r0
      00004F 54 03            [12] 1234 	anl	a,#0x03
      000051 A2 E0            [12] 1235 	mov	c,acc.0
      000053 CA               [12] 1236 	xch	a,r2
      000054 13               [12] 1237 	rrc	a
      000055 CA               [12] 1238 	xch	a,r2
      000056 13               [12] 1239 	rrc	a
      000057 A2 E0            [12] 1240 	mov	c,acc.0
      000059 CA               [12] 1241 	xch	a,r2
      00005A 13               [12] 1242 	rrc	a
      00005B CA               [12] 1243 	xch	a,r2
      00005C 13               [12] 1244 	rrc	a
      00005D CA               [12] 1245 	xch	a,r2
      00005E FD               [12] 1246 	mov	r5,a
      00005F 74 40            [12] 1247 	mov	a,#0x40
      000061 C0 E0            [24] 1248 	push	acc
      000063 E4               [12] 1249 	clr	a
      000064 C0 E0            [24] 1250 	push	acc
      000066 E5 81            [12] 1251 	mov	a,sp
      000068 24 F7            [12] 1252 	add	a,#0xf7
      00006A F8               [12] 1253 	mov	r0,a
      00006B E6               [12] 1254 	mov	a,@r0
      00006C C0 E0            [24] 1255 	push	acc
      00006E 08               [12] 1256 	inc	r0
      00006F E6               [12] 1257 	mov	a,@r0
      000070 C0 E0            [24] 1258 	push	acc
      000072 08               [12] 1259 	inc	r0
      000073 E6               [12] 1260 	mov	a,@r0
      000074 C0 E0            [24] 1261 	push	acc
      000076 C0 02            [24] 1262 	push	ar2
      000078 C0 05            [24] 1263 	push	ar5
      00007A 12r00r7F         [24] 1264 	lcall	00110$
      00007D 80 12            [24] 1265 	sjmp	00111$
      00007F                       1266 00110$:
      00007F C0 06            [24] 1267 	push	ar6
      000081 C0 07            [24] 1268 	push	ar7
      000083 E5 81            [12] 1269 	mov	a,sp
      000085 24 F3            [12] 1270 	add	a,#0xf3
      000087 F8               [12] 1271 	mov	r0,a
      000088 86 82            [24] 1272 	mov	dpl,@r0
      00008A 08               [12] 1273 	inc	r0
      00008B 86 83            [24] 1274 	mov	dph,@r0
      00008D 08               [12] 1275 	inc	r0
      00008E 86 F0            [24] 1276 	mov	b,@r0
      000090 22               [24] 1277 	ret
      000091                       1278 00111$:
      000091 AE 82            [24] 1279 	mov	r6,dpl
      000093 AF 83            [24] 1280 	mov	r7,dph
      000095 E5 81            [12] 1281 	mov	a,sp
      000097 24 F9            [12] 1282 	add	a,#0xf9
      000099 F5 81            [12] 1283 	mov	sp,a
      00009B 8E 03            [24] 1284 	mov	ar3,r6
      00009D 8F 04            [24] 1285 	mov	ar4,r7
      00009F                       1286 00102$:
                                   1287 ;	../../core/net/rime/rudolph2.c:104: return len;
      00009F 8B 82            [24] 1288 	mov	dpl,r3
      0000A1 8C 83            [24] 1289 	mov	dph,r4
                                   1290 ;	../../core/net/rime/rudolph2.c:105: }
      0000A3 15 81            [12] 1291 	dec	sp
      0000A5 15 81            [12] 1292 	dec	sp
      0000A7 15 81            [12] 1293 	dec	sp
      0000A9 22               [24] 1294 	ret
                                   1295 ;------------------------------------------------------------
                                   1296 ;Allocation info for local variables in function 'format_data'
                                   1297 ;------------------------------------------------------------
                                   1298 ;chunk                     Allocated to stack - sp -9
                                   1299 ;c                         Allocated to stack - sp -5
                                   1300 ;hdr                       Allocated to stack - sp -2
                                   1301 ;len                       Allocated to registers r6 r7 
                                   1302 ;------------------------------------------------------------
                                   1303 ;	../../core/net/rime/rudolph2.c:108: format_data(struct rudolph2_conn *c, int chunk)
                                   1304 ;	-----------------------------------------
                                   1305 ;	 function format_data
                                   1306 ;	-----------------------------------------
      0000AA                       1307 _format_data:
      0000AA C0 82            [24] 1308 	push	dpl
      0000AC C0 83            [24] 1309 	push	dph
      0000AE C0 F0            [24] 1310 	push	b
      0000B0 05 81            [12] 1311 	inc	sp
      0000B2 05 81            [12] 1312 	inc	sp
      0000B4 05 81            [12] 1313 	inc	sp
                                   1314 ;	../../core/net/rime/rudolph2.c:113: packetbuf_clear();
      0000B6 12r00r00         [24] 1315 	lcall	_packetbuf_clear
                                   1316 ;	../../core/net/rime/rudolph2.c:114: hdr = packetbuf_dataptr();
      0000B9 12r00r00         [24] 1317 	lcall	_packetbuf_dataptr
      0000BC AA 82            [24] 1318 	mov	r2,dpl
      0000BE AB 83            [24] 1319 	mov	r3,dph
      0000C0 AC F0            [24] 1320 	mov	r4,b
      0000C2 A8 81            [24] 1321 	mov	r0,sp
      0000C4 18               [12] 1322 	dec	r0
      0000C5 18               [12] 1323 	dec	r0
      0000C6 A6 02            [24] 1324 	mov	@r0,ar2
      0000C8 08               [12] 1325 	inc	r0
      0000C9 A6 03            [24] 1326 	mov	@r0,ar3
      0000CB 08               [12] 1327 	inc	r0
      0000CC A6 04            [24] 1328 	mov	@r0,ar4
                                   1329 ;	../../core/net/rime/rudolph2.c:115: hdr->type = TYPE_DATA;
      0000CE A8 81            [24] 1330 	mov	r0,sp
      0000D0 18               [12] 1331 	dec	r0
      0000D1 18               [12] 1332 	dec	r0
      0000D2 86 82            [24] 1333 	mov	dpl,@r0
      0000D4 08               [12] 1334 	inc	r0
      0000D5 86 83            [24] 1335 	mov	dph,@r0
      0000D7 08               [12] 1336 	inc	r0
      0000D8 86 F0            [24] 1337 	mov	b,@r0
      0000DA E4               [12] 1338 	clr	a
      0000DB 12r00r00         [24] 1339 	lcall	__gptrput
                                   1340 ;	../../core/net/rime/rudolph2.c:116: hdr->hops_from_base = c->hops_from_base;
      0000DE A8 81            [24] 1341 	mov	r0,sp
      0000E0 18               [12] 1342 	dec	r0
      0000E1 18               [12] 1343 	dec	r0
      0000E2 04               [12] 1344 	inc	a
      0000E3 26               [12] 1345 	add	a,@r0
      0000E4 FD               [12] 1346 	mov	r5,a
      0000E5 E4               [12] 1347 	clr	a
      0000E6 08               [12] 1348 	inc	r0
      0000E7 36               [12] 1349 	addc	a,@r0
      0000E8 FE               [12] 1350 	mov	r6,a
      0000E9 08               [12] 1351 	inc	r0
      0000EA 86 07            [24] 1352 	mov	ar7,@r0
      0000EC E5 81            [12] 1353 	mov	a,sp
      0000EE 24 FB            [12] 1354 	add	a,#0xfb
      0000F0 F8               [12] 1355 	mov	r0,a
      0000F1 74 46            [12] 1356 	mov	a,#0x46
      0000F3 26               [12] 1357 	add	a,@r0
      0000F4 FA               [12] 1358 	mov	r2,a
      0000F5 E4               [12] 1359 	clr	a
      0000F6 08               [12] 1360 	inc	r0
      0000F7 36               [12] 1361 	addc	a,@r0
      0000F8 FB               [12] 1362 	mov	r3,a
      0000F9 08               [12] 1363 	inc	r0
      0000FA 86 04            [24] 1364 	mov	ar4,@r0
      0000FC 8A 82            [24] 1365 	mov	dpl,r2
      0000FE 8B 83            [24] 1366 	mov	dph,r3
      000100 8C F0            [24] 1367 	mov	b,r4
      000102 12r00r00         [24] 1368 	lcall	__gptrget
      000105 8D 82            [24] 1369 	mov	dpl,r5
      000107 8E 83            [24] 1370 	mov	dph,r6
      000109 8F F0            [24] 1371 	mov	b,r7
      00010B 12r00r00         [24] 1372 	lcall	__gptrput
                                   1373 ;	../../core/net/rime/rudolph2.c:117: hdr->version = c->version;
      00010E A8 81            [24] 1374 	mov	r0,sp
      000110 18               [12] 1375 	dec	r0
      000111 18               [12] 1376 	dec	r0
      000112 74 02            [12] 1377 	mov	a,#0x02
      000114 26               [12] 1378 	add	a,@r0
      000115 FD               [12] 1379 	mov	r5,a
      000116 E4               [12] 1380 	clr	a
      000117 08               [12] 1381 	inc	r0
      000118 36               [12] 1382 	addc	a,@r0
      000119 FE               [12] 1383 	mov	r6,a
      00011A 08               [12] 1384 	inc	r0
      00011B 86 07            [24] 1385 	mov	ar7,@r0
      00011D E5 81            [12] 1386 	mov	a,sp
      00011F 24 FB            [12] 1387 	add	a,#0xfb
      000121 F8               [12] 1388 	mov	r0,a
      000122 74 44            [12] 1389 	mov	a,#0x44
      000124 26               [12] 1390 	add	a,@r0
      000125 FA               [12] 1391 	mov	r2,a
      000126 E4               [12] 1392 	clr	a
      000127 08               [12] 1393 	inc	r0
      000128 36               [12] 1394 	addc	a,@r0
      000129 FB               [12] 1395 	mov	r3,a
      00012A 08               [12] 1396 	inc	r0
      00012B 86 04            [24] 1397 	mov	ar4,@r0
      00012D 8A 82            [24] 1398 	mov	dpl,r2
      00012F 8B 83            [24] 1399 	mov	dph,r3
      000131 8C F0            [24] 1400 	mov	b,r4
      000133 12r00r00         [24] 1401 	lcall	__gptrget
      000136 FA               [12] 1402 	mov	r2,a
      000137 A3               [24] 1403 	inc	dptr
      000138 12r00r00         [24] 1404 	lcall	__gptrget
      00013B FB               [12] 1405 	mov	r3,a
      00013C 8D 82            [24] 1406 	mov	dpl,r5
      00013E 8E 83            [24] 1407 	mov	dph,r6
      000140 8F F0            [24] 1408 	mov	b,r7
      000142 EA               [12] 1409 	mov	a,r2
      000143 12r00r00         [24] 1410 	lcall	__gptrput
      000146 A3               [24] 1411 	inc	dptr
      000147 EB               [12] 1412 	mov	a,r3
      000148 12r00r00         [24] 1413 	lcall	__gptrput
                                   1414 ;	../../core/net/rime/rudolph2.c:118: hdr->chunk = chunk;
      00014B A8 81            [24] 1415 	mov	r0,sp
      00014D 18               [12] 1416 	dec	r0
      00014E 18               [12] 1417 	dec	r0
      00014F 74 04            [12] 1418 	mov	a,#0x04
      000151 26               [12] 1419 	add	a,@r0
      000152 FD               [12] 1420 	mov	r5,a
      000153 E4               [12] 1421 	clr	a
      000154 08               [12] 1422 	inc	r0
      000155 36               [12] 1423 	addc	a,@r0
      000156 FE               [12] 1424 	mov	r6,a
      000157 08               [12] 1425 	inc	r0
      000158 86 07            [24] 1426 	mov	ar7,@r0
      00015A E5 81            [12] 1427 	mov	a,sp
      00015C 24 F7            [12] 1428 	add	a,#0xf7
      00015E F8               [12] 1429 	mov	r0,a
      00015F 86 03            [24] 1430 	mov	ar3,@r0
      000161 08               [12] 1431 	inc	r0
      000162 86 04            [24] 1432 	mov	ar4,@r0
      000164 8D 82            [24] 1433 	mov	dpl,r5
      000166 8E 83            [24] 1434 	mov	dph,r6
      000168 8F F0            [24] 1435 	mov	b,r7
      00016A EB               [12] 1436 	mov	a,r3
      00016B 12r00r00         [24] 1437 	lcall	__gptrput
      00016E A3               [24] 1438 	inc	dptr
      00016F EC               [12] 1439 	mov	a,r4
      000170 12r00r00         [24] 1440 	lcall	__gptrput
                                   1441 ;	../../core/net/rime/rudolph2.c:119: len = read_data(c, (uint8_t *)hdr + sizeof(struct rudolph2_hdr), chunk);
      000173 A8 81            [24] 1442 	mov	r0,sp
      000175 18               [12] 1443 	dec	r0
      000176 18               [12] 1444 	dec	r0
      000177 86 02            [24] 1445 	mov	ar2,@r0
      000179 08               [12] 1446 	inc	r0
      00017A 86 03            [24] 1447 	mov	ar3,@r0
      00017C 08               [12] 1448 	inc	r0
      00017D 86 04            [24] 1449 	mov	ar4,@r0
      00017F 74 06            [12] 1450 	mov	a,#0x06
      000181 2A               [12] 1451 	add	a,r2
      000182 FA               [12] 1452 	mov	r2,a
      000183 E4               [12] 1453 	clr	a
      000184 3B               [12] 1454 	addc	a,r3
      000185 FB               [12] 1455 	mov	r3,a
      000186 E5 81            [12] 1456 	mov	a,sp
      000188 24 F7            [12] 1457 	add	a,#0xf7
      00018A F8               [12] 1458 	mov	r0,a
      00018B E6               [12] 1459 	mov	a,@r0
      00018C C0 E0            [24] 1460 	push	acc
      00018E 08               [12] 1461 	inc	r0
      00018F E6               [12] 1462 	mov	a,@r0
      000190 C0 E0            [24] 1463 	push	acc
      000192 C0 02            [24] 1464 	push	ar2
      000194 C0 03            [24] 1465 	push	ar3
      000196 C0 04            [24] 1466 	push	ar4
      000198 E5 81            [12] 1467 	mov	a,sp
      00019A 24 F6            [12] 1468 	add	a,#0xf6
      00019C F8               [12] 1469 	mov	r0,a
      00019D 86 82            [24] 1470 	mov	dpl,@r0
      00019F 08               [12] 1471 	inc	r0
      0001A0 86 83            [24] 1472 	mov	dph,@r0
      0001A2 08               [12] 1473 	inc	r0
      0001A3 86 F0            [24] 1474 	mov	b,@r0
      0001A5 12r00r00         [24] 1475 	lcall	_read_data
      0001A8 AE 82            [24] 1476 	mov	r6,dpl
      0001AA AF 83            [24] 1477 	mov	r7,dph
      0001AC E5 81            [12] 1478 	mov	a,sp
      0001AE 24 FB            [12] 1479 	add	a,#0xfb
      0001B0 F5 81            [12] 1480 	mov	sp,a
                                   1481 ;	../../core/net/rime/rudolph2.c:120: packetbuf_set_datalen(sizeof(struct rudolph2_hdr) + len);
      0001B2 74 06            [12] 1482 	mov	a,#0x06
      0001B4 2E               [12] 1483 	add	a,r6
      0001B5 FC               [12] 1484 	mov	r4,a
      0001B6 E4               [12] 1485 	clr	a
      0001B7 3F               [12] 1486 	addc	a,r7
      0001B8 FD               [12] 1487 	mov	r5,a
      0001B9 8C 82            [24] 1488 	mov	dpl,r4
      0001BB 8D 83            [24] 1489 	mov	dph,r5
      0001BD C0 07            [24] 1490 	push	ar7
      0001BF C0 06            [24] 1491 	push	ar6
      0001C1 12r00r00         [24] 1492 	lcall	_packetbuf_set_datalen
      0001C4 D0 06            [24] 1493 	pop	ar6
      0001C6 D0 07            [24] 1494 	pop	ar7
                                   1495 ;	../../core/net/rime/rudolph2.c:122: return len;
      0001C8 8E 82            [24] 1496 	mov	dpl,r6
      0001CA 8F 83            [24] 1497 	mov	dph,r7
                                   1498 ;	../../core/net/rime/rudolph2.c:123: }
      0001CC E5 81            [12] 1499 	mov	a,sp
      0001CE 24 FA            [12] 1500 	add	a,#0xfa
      0001D0 F5 81            [12] 1501 	mov	sp,a
      0001D2 22               [24] 1502 	ret
                                   1503 ;------------------------------------------------------------
                                   1504 ;Allocation info for local variables in function 'write_data'
                                   1505 ;------------------------------------------------------------
                                   1506 ;chunk                     Allocated to stack - sp -6
                                   1507 ;data                      Allocated to stack - sp -9
                                   1508 ;datalen                   Allocated to stack - sp -11
                                   1509 ;c                         Allocated to stack - sp -2
                                   1510 ;------------------------------------------------------------
                                   1511 ;	../../core/net/rime/rudolph2.c:126: write_data(struct rudolph2_conn *c, int chunk, uint8_t *data, int datalen)
                                   1512 ;	-----------------------------------------
                                   1513 ;	 function write_data
                                   1514 ;	-----------------------------------------
      0001D3                       1515 _write_data:
      0001D3 C0 82            [24] 1516 	push	dpl
      0001D5 C0 83            [24] 1517 	push	dph
      0001D7 C0 F0            [24] 1518 	push	b
                                   1519 ;	../../core/net/rime/rudolph2.c:129: if(c->flags & FLAG_IS_STOPPED) {
      0001D9 A8 81            [24] 1520 	mov	r0,sp
      0001DB 18               [12] 1521 	dec	r0
      0001DC 18               [12] 1522 	dec	r0
      0001DD 74 48            [12] 1523 	mov	a,#0x48
      0001DF 26               [12] 1524 	add	a,@r0
      0001E0 FA               [12] 1525 	mov	r2,a
      0001E1 E4               [12] 1526 	clr	a
      0001E2 08               [12] 1527 	inc	r0
      0001E3 36               [12] 1528 	addc	a,@r0
      0001E4 FB               [12] 1529 	mov	r3,a
      0001E5 08               [12] 1530 	inc	r0
      0001E6 86 04            [24] 1531 	mov	ar4,@r0
      0001E8 8A 82            [24] 1532 	mov	dpl,r2
      0001EA 8B 83            [24] 1533 	mov	dph,r3
      0001EC 8C F0            [24] 1534 	mov	b,r4
      0001EE 12r00r00         [24] 1535 	lcall	__gptrget
      0001F1 FA               [12] 1536 	mov	r2,a
      0001F2 30 E2 03         [24] 1537 	jnb	acc.2,00102$
                                   1538 ;	../../core/net/rime/rudolph2.c:130: return;
      0001F5 02r03rBC         [24] 1539 	ljmp	00108$
      0001F8                       1540 00102$:
                                   1541 ;	../../core/net/rime/rudolph2.c:133: if(chunk == 0) {
      0001F8 E5 81            [12] 1542 	mov	a,sp
      0001FA 24 FA            [12] 1543 	add	a,#0xfa
      0001FC F8               [12] 1544 	mov	r0,a
      0001FD E6               [12] 1545 	mov	a,@r0
      0001FE 08               [12] 1546 	inc	r0
      0001FF 46               [12] 1547 	orl	a,@r0
      000200 70 77            [24] 1548 	jnz	00104$
                                   1549 ;	../../core/net/rime/rudolph2.c:134: c->cb->write_chunk(c, 0, RUDOLPH2_FLAG_NEWFILE, data, 0);
      000202 A8 81            [24] 1550 	mov	r0,sp
      000204 18               [12] 1551 	dec	r0
      000205 18               [12] 1552 	dec	r0
      000206 74 28            [12] 1553 	mov	a,#0x28
      000208 26               [12] 1554 	add	a,@r0
      000209 FA               [12] 1555 	mov	r2,a
      00020A E4               [12] 1556 	clr	a
      00020B 08               [12] 1557 	inc	r0
      00020C 36               [12] 1558 	addc	a,@r0
      00020D FB               [12] 1559 	mov	r3,a
      00020E 08               [12] 1560 	inc	r0
      00020F 86 04            [24] 1561 	mov	ar4,@r0
      000211 8A 82            [24] 1562 	mov	dpl,r2
      000213 8B 83            [24] 1563 	mov	dph,r3
      000215 8C F0            [24] 1564 	mov	b,r4
      000217 12r00r00         [24] 1565 	lcall	__gptrget
      00021A FA               [12] 1566 	mov	r2,a
      00021B A3               [24] 1567 	inc	dptr
      00021C 12r00r00         [24] 1568 	lcall	__gptrget
      00021F FB               [12] 1569 	mov	r3,a
      000220 A3               [24] 1570 	inc	dptr
      000221 12r00r00         [24] 1571 	lcall	__gptrget
      000224 FC               [12] 1572 	mov	r4,a
      000225 8A 82            [24] 1573 	mov	dpl,r2
      000227 8B 83            [24] 1574 	mov	dph,r3
      000229 8C F0            [24] 1575 	mov	b,r4
      00022B 12r00r00         [24] 1576 	lcall	__gptrget
      00022E FA               [12] 1577 	mov	r2,a
      00022F A3               [24] 1578 	inc	dptr
      000230 12r00r00         [24] 1579 	lcall	__gptrget
      000233 FB               [12] 1580 	mov	r3,a
      000234 C0 03            [24] 1581 	push	ar3
      000236 C0 02            [24] 1582 	push	ar2
      000238 E4               [12] 1583 	clr	a
      000239 C0 E0            [24] 1584 	push	acc
      00023B C0 E0            [24] 1585 	push	acc
      00023D E5 81            [12] 1586 	mov	a,sp
      00023F 24 F3            [12] 1587 	add	a,#0xf3
      000241 F8               [12] 1588 	mov	r0,a
      000242 E6               [12] 1589 	mov	a,@r0
      000243 C0 E0            [24] 1590 	push	acc
      000245 08               [12] 1591 	inc	r0
      000246 E6               [12] 1592 	mov	a,@r0
      000247 C0 E0            [24] 1593 	push	acc
      000249 08               [12] 1594 	inc	r0
      00024A E6               [12] 1595 	mov	a,@r0
      00024B C0 E0            [24] 1596 	push	acc
      00024D 74 01            [12] 1597 	mov	a,#0x01
      00024F C0 E0            [24] 1598 	push	acc
      000251 E4               [12] 1599 	clr	a
      000252 C0 E0            [24] 1600 	push	acc
      000254 C0 E0            [24] 1601 	push	acc
      000256 C0 E0            [24] 1602 	push	acc
      000258 12r02r5D         [24] 1603 	lcall	00124$
      00025B 80 12            [24] 1604 	sjmp	00125$
      00025D                       1605 00124$:
      00025D C0 02            [24] 1606 	push	ar2
      00025F C0 03            [24] 1607 	push	ar3
      000261 E5 81            [12] 1608 	mov	a,sp
      000263 24 EF            [12] 1609 	add	a,#0xef
      000265 F8               [12] 1610 	mov	r0,a
      000266 86 82            [24] 1611 	mov	dpl,@r0
      000268 08               [12] 1612 	inc	r0
      000269 86 83            [24] 1613 	mov	dph,@r0
      00026B 08               [12] 1614 	inc	r0
      00026C 86 F0            [24] 1615 	mov	b,@r0
      00026E 22               [24] 1616 	ret
      00026F                       1617 00125$:
      00026F E5 81            [12] 1618 	mov	a,sp
      000271 24 F7            [12] 1619 	add	a,#0xf7
      000273 F5 81            [12] 1620 	mov	sp,a
      000275 D0 02            [24] 1621 	pop	ar2
      000277 D0 03            [24] 1622 	pop	ar3
      000279                       1623 00104$:
                                   1624 ;	../../core/net/rime/rudolph2.c:142: if(datalen < RUDOLPH2_DATASIZE) {
      000279 E5 81            [12] 1625 	mov	a,sp
      00027B 24 F5            [12] 1626 	add	a,#0xf5
      00027D F8               [12] 1627 	mov	r0,a
      00027E C3               [12] 1628 	clr	c
      00027F E6               [12] 1629 	mov	a,@r0
      000280 94 40            [12] 1630 	subb	a,#0x40
      000282 08               [12] 1631 	inc	r0
      000283 E6               [12] 1632 	mov	a,@r0
      000284 64 80            [12] 1633 	xrl	a,#0x80
      000286 94 80            [12] 1634 	subb	a,#0x80
      000288 40 03            [24] 1635 	jc	00126$
      00028A 02r03r27         [24] 1636 	ljmp	00106$
      00028D                       1637 00126$:
                                   1638 ;	../../core/net/rime/rudolph2.c:146: c->cb->write_chunk(c, chunk * RUDOLPH2_DATASIZE,
      00028D A8 81            [24] 1639 	mov	r0,sp
      00028F 18               [12] 1640 	dec	r0
      000290 18               [12] 1641 	dec	r0
      000291 74 28            [12] 1642 	mov	a,#0x28
      000293 26               [12] 1643 	add	a,@r0
      000294 FA               [12] 1644 	mov	r2,a
      000295 E4               [12] 1645 	clr	a
      000296 08               [12] 1646 	inc	r0
      000297 36               [12] 1647 	addc	a,@r0
      000298 FB               [12] 1648 	mov	r3,a
      000299 08               [12] 1649 	inc	r0
      00029A 86 04            [24] 1650 	mov	ar4,@r0
      00029C 8A 82            [24] 1651 	mov	dpl,r2
      00029E 8B 83            [24] 1652 	mov	dph,r3
      0002A0 8C F0            [24] 1653 	mov	b,r4
      0002A2 12r00r00         [24] 1654 	lcall	__gptrget
      0002A5 FA               [12] 1655 	mov	r2,a
      0002A6 A3               [24] 1656 	inc	dptr
      0002A7 12r00r00         [24] 1657 	lcall	__gptrget
      0002AA FB               [12] 1658 	mov	r3,a
      0002AB A3               [24] 1659 	inc	dptr
      0002AC 12r00r00         [24] 1660 	lcall	__gptrget
      0002AF FC               [12] 1661 	mov	r4,a
      0002B0 8A 82            [24] 1662 	mov	dpl,r2
      0002B2 8B 83            [24] 1663 	mov	dph,r3
      0002B4 8C F0            [24] 1664 	mov	b,r4
      0002B6 12r00r00         [24] 1665 	lcall	__gptrget
      0002B9 FA               [12] 1666 	mov	r2,a
      0002BA A3               [24] 1667 	inc	dptr
      0002BB 12r00r00         [24] 1668 	lcall	__gptrget
      0002BE FB               [12] 1669 	mov	r3,a
      0002BF E5 81            [12] 1670 	mov	a,sp
      0002C1 24 FA            [12] 1671 	add	a,#0xfa
      0002C3 F8               [12] 1672 	mov	r0,a
      0002C4 86 04            [24] 1673 	mov	ar4,@r0
      0002C6 08               [12] 1674 	inc	r0
      0002C7 E6               [12] 1675 	mov	a,@r0
      0002C8 54 03            [12] 1676 	anl	a,#0x03
      0002CA A2 E0            [12] 1677 	mov	c,acc.0
      0002CC CC               [12] 1678 	xch	a,r4
      0002CD 13               [12] 1679 	rrc	a
      0002CE CC               [12] 1680 	xch	a,r4
      0002CF 13               [12] 1681 	rrc	a
      0002D0 A2 E0            [12] 1682 	mov	c,acc.0
      0002D2 CC               [12] 1683 	xch	a,r4
      0002D3 13               [12] 1684 	rrc	a
      0002D4 CC               [12] 1685 	xch	a,r4
      0002D5 13               [12] 1686 	rrc	a
      0002D6 CC               [12] 1687 	xch	a,r4
      0002D7 FF               [12] 1688 	mov	r7,a
      0002D8 C0 03            [24] 1689 	push	ar3
      0002DA C0 02            [24] 1690 	push	ar2
      0002DC E5 81            [12] 1691 	mov	a,sp
      0002DE 24 F3            [12] 1692 	add	a,#0xf3
      0002E0 F8               [12] 1693 	mov	r0,a
      0002E1 E6               [12] 1694 	mov	a,@r0
      0002E2 C0 E0            [24] 1695 	push	acc
      0002E4 08               [12] 1696 	inc	r0
      0002E5 E6               [12] 1697 	mov	a,@r0
      0002E6 C0 E0            [24] 1698 	push	acc
      0002E8 E5 81            [12] 1699 	mov	a,sp
      0002EA 24 F3            [12] 1700 	add	a,#0xf3
      0002EC F8               [12] 1701 	mov	r0,a
      0002ED E6               [12] 1702 	mov	a,@r0
      0002EE C0 E0            [24] 1703 	push	acc
      0002F0 08               [12] 1704 	inc	r0
      0002F1 E6               [12] 1705 	mov	a,@r0
      0002F2 C0 E0            [24] 1706 	push	acc
      0002F4 08               [12] 1707 	inc	r0
      0002F5 E6               [12] 1708 	mov	a,@r0
      0002F6 C0 E0            [24] 1709 	push	acc
      0002F8 74 02            [12] 1710 	mov	a,#0x02
      0002FA C0 E0            [24] 1711 	push	acc
      0002FC E4               [12] 1712 	clr	a
      0002FD C0 E0            [24] 1713 	push	acc
      0002FF C0 04            [24] 1714 	push	ar4
      000301 C0 07            [24] 1715 	push	ar7
      000303 12r03r08         [24] 1716 	lcall	00127$
      000306 80 12            [24] 1717 	sjmp	00128$
      000308                       1718 00127$:
      000308 C0 02            [24] 1719 	push	ar2
      00030A C0 03            [24] 1720 	push	ar3
      00030C E5 81            [12] 1721 	mov	a,sp
      00030E 24 EF            [12] 1722 	add	a,#0xef
      000310 F8               [12] 1723 	mov	r0,a
      000311 86 82            [24] 1724 	mov	dpl,@r0
      000313 08               [12] 1725 	inc	r0
      000314 86 83            [24] 1726 	mov	dph,@r0
      000316 08               [12] 1727 	inc	r0
      000317 86 F0            [24] 1728 	mov	b,@r0
      000319 22               [24] 1729 	ret
      00031A                       1730 00128$:
      00031A E5 81            [12] 1731 	mov	a,sp
      00031C 24 F7            [12] 1732 	add	a,#0xf7
      00031E F5 81            [12] 1733 	mov	sp,a
      000320 D0 02            [24] 1734 	pop	ar2
      000322 D0 03            [24] 1735 	pop	ar3
      000324 02r03rBC         [24] 1736 	ljmp	00108$
      000327                       1737 00106$:
                                   1738 ;	../../core/net/rime/rudolph2.c:149: c->cb->write_chunk(c, chunk * RUDOLPH2_DATASIZE,
      000327 A8 81            [24] 1739 	mov	r0,sp
      000329 18               [12] 1740 	dec	r0
      00032A 18               [12] 1741 	dec	r0
      00032B 74 28            [12] 1742 	mov	a,#0x28
      00032D 26               [12] 1743 	add	a,@r0
      00032E FD               [12] 1744 	mov	r5,a
      00032F E4               [12] 1745 	clr	a
      000330 08               [12] 1746 	inc	r0
      000331 36               [12] 1747 	addc	a,@r0
      000332 FE               [12] 1748 	mov	r6,a
      000333 08               [12] 1749 	inc	r0
      000334 86 07            [24] 1750 	mov	ar7,@r0
      000336 8D 82            [24] 1751 	mov	dpl,r5
      000338 8E 83            [24] 1752 	mov	dph,r6
      00033A 8F F0            [24] 1753 	mov	b,r7
      00033C 12r00r00         [24] 1754 	lcall	__gptrget
      00033F FD               [12] 1755 	mov	r5,a
      000340 A3               [24] 1756 	inc	dptr
      000341 12r00r00         [24] 1757 	lcall	__gptrget
      000344 FE               [12] 1758 	mov	r6,a
      000345 A3               [24] 1759 	inc	dptr
      000346 12r00r00         [24] 1760 	lcall	__gptrget
      000349 FF               [12] 1761 	mov	r7,a
      00034A 8D 82            [24] 1762 	mov	dpl,r5
      00034C 8E 83            [24] 1763 	mov	dph,r6
      00034E 8F F0            [24] 1764 	mov	b,r7
      000350 12r00r00         [24] 1765 	lcall	__gptrget
      000353 FD               [12] 1766 	mov	r5,a
      000354 A3               [24] 1767 	inc	dptr
      000355 12r00r00         [24] 1768 	lcall	__gptrget
      000358 FE               [12] 1769 	mov	r6,a
      000359 E5 81            [12] 1770 	mov	a,sp
      00035B 24 FA            [12] 1771 	add	a,#0xfa
      00035D F8               [12] 1772 	mov	r0,a
      00035E 86 04            [24] 1773 	mov	ar4,@r0
      000360 08               [12] 1774 	inc	r0
      000361 E6               [12] 1775 	mov	a,@r0
      000362 54 03            [12] 1776 	anl	a,#0x03
      000364 A2 E0            [12] 1777 	mov	c,acc.0
      000366 CC               [12] 1778 	xch	a,r4
      000367 13               [12] 1779 	rrc	a
      000368 CC               [12] 1780 	xch	a,r4
      000369 13               [12] 1781 	rrc	a
      00036A A2 E0            [12] 1782 	mov	c,acc.0
      00036C CC               [12] 1783 	xch	a,r4
      00036D 13               [12] 1784 	rrc	a
      00036E CC               [12] 1785 	xch	a,r4
      00036F 13               [12] 1786 	rrc	a
      000370 CC               [12] 1787 	xch	a,r4
      000371 FF               [12] 1788 	mov	r7,a
      000372 C0 06            [24] 1789 	push	ar6
      000374 C0 05            [24] 1790 	push	ar5
      000376 E5 81            [12] 1791 	mov	a,sp
      000378 24 F3            [12] 1792 	add	a,#0xf3
      00037A F8               [12] 1793 	mov	r0,a
      00037B E6               [12] 1794 	mov	a,@r0
      00037C C0 E0            [24] 1795 	push	acc
      00037E 08               [12] 1796 	inc	r0
      00037F E6               [12] 1797 	mov	a,@r0
      000380 C0 E0            [24] 1798 	push	acc
      000382 E5 81            [12] 1799 	mov	a,sp
      000384 24 F3            [12] 1800 	add	a,#0xf3
      000386 F8               [12] 1801 	mov	r0,a
      000387 E6               [12] 1802 	mov	a,@r0
      000388 C0 E0            [24] 1803 	push	acc
      00038A 08               [12] 1804 	inc	r0
      00038B E6               [12] 1805 	mov	a,@r0
      00038C C0 E0            [24] 1806 	push	acc
      00038E 08               [12] 1807 	inc	r0
      00038F E6               [12] 1808 	mov	a,@r0
      000390 C0 E0            [24] 1809 	push	acc
      000392 E4               [12] 1810 	clr	a
      000393 C0 E0            [24] 1811 	push	acc
      000395 C0 E0            [24] 1812 	push	acc
      000397 C0 04            [24] 1813 	push	ar4
      000399 C0 07            [24] 1814 	push	ar7
      00039B 12r03rA0         [24] 1815 	lcall	00129$
      00039E 80 12            [24] 1816 	sjmp	00130$
      0003A0                       1817 00129$:
      0003A0 C0 05            [24] 1818 	push	ar5
      0003A2 C0 06            [24] 1819 	push	ar6
      0003A4 E5 81            [12] 1820 	mov	a,sp
      0003A6 24 EF            [12] 1821 	add	a,#0xef
      0003A8 F8               [12] 1822 	mov	r0,a
      0003A9 86 82            [24] 1823 	mov	dpl,@r0
      0003AB 08               [12] 1824 	inc	r0
      0003AC 86 83            [24] 1825 	mov	dph,@r0
      0003AE 08               [12] 1826 	inc	r0
      0003AF 86 F0            [24] 1827 	mov	b,@r0
      0003B1 22               [24] 1828 	ret
      0003B2                       1829 00130$:
      0003B2 E5 81            [12] 1830 	mov	a,sp
      0003B4 24 F7            [12] 1831 	add	a,#0xf7
      0003B6 F5 81            [12] 1832 	mov	sp,a
      0003B8 D0 05            [24] 1833 	pop	ar5
      0003BA D0 06            [24] 1834 	pop	ar6
      0003BC                       1835 00108$:
                                   1836 ;	../../core/net/rime/rudolph2.c:152: }
      0003BC 15 81            [12] 1837 	dec	sp
      0003BE 15 81            [12] 1838 	dec	sp
      0003C0 15 81            [12] 1839 	dec	sp
      0003C2 22               [24] 1840 	ret
                                   1841 ;------------------------------------------------------------
                                   1842 ;Allocation info for local variables in function 'send_data'
                                   1843 ;------------------------------------------------------------
                                   1844 ;interval                  Allocated to stack - sp -3
                                   1845 ;c                         Allocated to registers r5 r6 r7 
                                   1846 ;len                       Allocated to registers r3 r4 
                                   1847 ;------------------------------------------------------------
                                   1848 ;	../../core/net/rime/rudolph2.c:155: send_data(struct rudolph2_conn *c, clock_time_t interval)
                                   1849 ;	-----------------------------------------
                                   1850 ;	 function send_data
                                   1851 ;	-----------------------------------------
      0003C3                       1852 _send_data:
      0003C3 AD 82            [24] 1853 	mov	r5,dpl
      0003C5 AE 83            [24] 1854 	mov	r6,dph
      0003C7 AF F0            [24] 1855 	mov	r7,b
                                   1856 ;	../../core/net/rime/rudolph2.c:159: len = format_data(c, c->snd_nxt);
      0003C9 74 40            [12] 1857 	mov	a,#0x40
      0003CB 2D               [12] 1858 	add	a,r5
      0003CC FA               [12] 1859 	mov	r2,a
      0003CD E4               [12] 1860 	clr	a
      0003CE 3E               [12] 1861 	addc	a,r6
      0003CF FB               [12] 1862 	mov	r3,a
      0003D0 8F 04            [24] 1863 	mov	ar4,r7
      0003D2 8A 82            [24] 1864 	mov	dpl,r2
      0003D4 8B 83            [24] 1865 	mov	dph,r3
      0003D6 8C F0            [24] 1866 	mov	b,r4
      0003D8 12r00r00         [24] 1867 	lcall	__gptrget
      0003DB FA               [12] 1868 	mov	r2,a
      0003DC A3               [24] 1869 	inc	dptr
      0003DD 12r00r00         [24] 1870 	lcall	__gptrget
      0003E0 FB               [12] 1871 	mov	r3,a
      0003E1 C0 07            [24] 1872 	push	ar7
      0003E3 C0 06            [24] 1873 	push	ar6
      0003E5 C0 05            [24] 1874 	push	ar5
      0003E7 C0 02            [24] 1875 	push	ar2
      0003E9 C0 03            [24] 1876 	push	ar3
      0003EB 8D 82            [24] 1877 	mov	dpl,r5
      0003ED 8E 83            [24] 1878 	mov	dph,r6
      0003EF 8F F0            [24] 1879 	mov	b,r7
      0003F1 12r00rAA         [24] 1880 	lcall	_format_data
      0003F4 AB 82            [24] 1881 	mov	r3,dpl
      0003F6 AC 83            [24] 1882 	mov	r4,dph
      0003F8 15 81            [12] 1883 	dec	sp
      0003FA 15 81            [12] 1884 	dec	sp
      0003FC D0 05            [24] 1885 	pop	ar5
      0003FE D0 06            [24] 1886 	pop	ar6
      000400 D0 07            [24] 1887 	pop	ar7
                                   1888 ;	../../core/net/rime/rudolph2.c:160: polite_send(&c->c, interval, POLITE_HEADER);
      000402 C0 04            [24] 1889 	push	ar4
      000404 C0 03            [24] 1890 	push	ar3
      000406 74 01            [12] 1891 	mov	a,#0x01
      000408 C0 E0            [24] 1892 	push	acc
      00040A E5 81            [12] 1893 	mov	a,sp
      00040C 24 FA            [12] 1894 	add	a,#0xfa
      00040E F8               [12] 1895 	mov	r0,a
      00040F E6               [12] 1896 	mov	a,@r0
      000410 C0 E0            [24] 1897 	push	acc
      000412 08               [12] 1898 	inc	r0
      000413 E6               [12] 1899 	mov	a,@r0
      000414 C0 E0            [24] 1900 	push	acc
      000416 8D 82            [24] 1901 	mov	dpl,r5
      000418 8E 83            [24] 1902 	mov	dph,r6
      00041A 8F F0            [24] 1903 	mov	b,r7
      00041C 12r00r00         [24] 1904 	lcall	_polite_send
      00041F 15 81            [12] 1905 	dec	sp
      000421 15 81            [12] 1906 	dec	sp
      000423 15 81            [12] 1907 	dec	sp
      000425 D0 03            [24] 1908 	pop	ar3
      000427 D0 04            [24] 1909 	pop	ar4
                                   1910 ;	../../core/net/rime/rudolph2.c:165: return len;
      000429 8B 82            [24] 1911 	mov	dpl,r3
      00042B 8C 83            [24] 1912 	mov	dph,r4
                                   1913 ;	../../core/net/rime/rudolph2.c:166: }
      00042D 22               [24] 1914 	ret
                                   1915 ;------------------------------------------------------------
                                   1916 ;Allocation info for local variables in function 'send_nack'
                                   1917 ;------------------------------------------------------------
                                   1918 ;c                         Allocated to stack - sp -5
                                   1919 ;hdr                       Allocated to stack - sp -2
                                   1920 ;------------------------------------------------------------
                                   1921 ;	../../core/net/rime/rudolph2.c:169: send_nack(struct rudolph2_conn *c)
                                   1922 ;	-----------------------------------------
                                   1923 ;	 function send_nack
                                   1924 ;	-----------------------------------------
      00042E                       1925 _send_nack:
      00042E C0 82            [24] 1926 	push	dpl
      000430 C0 83            [24] 1927 	push	dph
      000432 C0 F0            [24] 1928 	push	b
      000434 05 81            [12] 1929 	inc	sp
      000436 05 81            [12] 1930 	inc	sp
      000438 05 81            [12] 1931 	inc	sp
                                   1932 ;	../../core/net/rime/rudolph2.c:172: packetbuf_clear();
      00043A 12r00r00         [24] 1933 	lcall	_packetbuf_clear
                                   1934 ;	../../core/net/rime/rudolph2.c:173: packetbuf_hdralloc(sizeof(struct rudolph2_hdr));
      00043D 90 00 06         [24] 1935 	mov	dptr,#0x0006
      000440 12r00r00         [24] 1936 	lcall	_packetbuf_hdralloc
                                   1937 ;	../../core/net/rime/rudolph2.c:174: hdr = packetbuf_hdrptr();
      000443 12r00r00         [24] 1938 	lcall	_packetbuf_hdrptr
      000446 AA 82            [24] 1939 	mov	r2,dpl
      000448 AB 83            [24] 1940 	mov	r3,dph
      00044A AC F0            [24] 1941 	mov	r4,b
      00044C A8 81            [24] 1942 	mov	r0,sp
      00044E 18               [12] 1943 	dec	r0
      00044F 18               [12] 1944 	dec	r0
      000450 A6 02            [24] 1945 	mov	@r0,ar2
      000452 08               [12] 1946 	inc	r0
      000453 A6 03            [24] 1947 	mov	@r0,ar3
      000455 08               [12] 1948 	inc	r0
      000456 A6 04            [24] 1949 	mov	@r0,ar4
                                   1950 ;	../../core/net/rime/rudolph2.c:176: hdr->hops_from_base = c->hops_from_base;
      000458 A8 81            [24] 1951 	mov	r0,sp
      00045A 18               [12] 1952 	dec	r0
      00045B 18               [12] 1953 	dec	r0
      00045C 74 01            [12] 1954 	mov	a,#0x01
      00045E 26               [12] 1955 	add	a,@r0
      00045F FD               [12] 1956 	mov	r5,a
      000460 E4               [12] 1957 	clr	a
      000461 08               [12] 1958 	inc	r0
      000462 36               [12] 1959 	addc	a,@r0
      000463 FE               [12] 1960 	mov	r6,a
      000464 08               [12] 1961 	inc	r0
      000465 86 07            [24] 1962 	mov	ar7,@r0
      000467 E5 81            [12] 1963 	mov	a,sp
      000469 24 FB            [12] 1964 	add	a,#0xfb
      00046B F8               [12] 1965 	mov	r0,a
      00046C 74 46            [12] 1966 	mov	a,#0x46
      00046E 26               [12] 1967 	add	a,@r0
      00046F FA               [12] 1968 	mov	r2,a
      000470 E4               [12] 1969 	clr	a
      000471 08               [12] 1970 	inc	r0
      000472 36               [12] 1971 	addc	a,@r0
      000473 FB               [12] 1972 	mov	r3,a
      000474 08               [12] 1973 	inc	r0
      000475 86 04            [24] 1974 	mov	ar4,@r0
      000477 8A 82            [24] 1975 	mov	dpl,r2
      000479 8B 83            [24] 1976 	mov	dph,r3
      00047B 8C F0            [24] 1977 	mov	b,r4
      00047D 12r00r00         [24] 1978 	lcall	__gptrget
      000480 8D 82            [24] 1979 	mov	dpl,r5
      000482 8E 83            [24] 1980 	mov	dph,r6
      000484 8F F0            [24] 1981 	mov	b,r7
      000486 12r00r00         [24] 1982 	lcall	__gptrput
                                   1983 ;	../../core/net/rime/rudolph2.c:177: hdr->type = TYPE_NACK;
      000489 A8 81            [24] 1984 	mov	r0,sp
      00048B 18               [12] 1985 	dec	r0
      00048C 18               [12] 1986 	dec	r0
      00048D 86 82            [24] 1987 	mov	dpl,@r0
      00048F 08               [12] 1988 	inc	r0
      000490 86 83            [24] 1989 	mov	dph,@r0
      000492 08               [12] 1990 	inc	r0
      000493 86 F0            [24] 1991 	mov	b,@r0
      000495 74 01            [12] 1992 	mov	a,#0x01
      000497 12r00r00         [24] 1993 	lcall	__gptrput
                                   1994 ;	../../core/net/rime/rudolph2.c:178: hdr->version = c->version;
      00049A A8 81            [24] 1995 	mov	r0,sp
      00049C 18               [12] 1996 	dec	r0
      00049D 18               [12] 1997 	dec	r0
      00049E 04               [12] 1998 	inc	a
      00049F 26               [12] 1999 	add	a,@r0
      0004A0 FD               [12] 2000 	mov	r5,a
      0004A1 E4               [12] 2001 	clr	a
      0004A2 08               [12] 2002 	inc	r0
      0004A3 36               [12] 2003 	addc	a,@r0
      0004A4 FE               [12] 2004 	mov	r6,a
      0004A5 08               [12] 2005 	inc	r0
      0004A6 86 07            [24] 2006 	mov	ar7,@r0
      0004A8 E5 81            [12] 2007 	mov	a,sp
      0004AA 24 FB            [12] 2008 	add	a,#0xfb
      0004AC F8               [12] 2009 	mov	r0,a
      0004AD 74 44            [12] 2010 	mov	a,#0x44
      0004AF 26               [12] 2011 	add	a,@r0
      0004B0 FA               [12] 2012 	mov	r2,a
      0004B1 E4               [12] 2013 	clr	a
      0004B2 08               [12] 2014 	inc	r0
      0004B3 36               [12] 2015 	addc	a,@r0
      0004B4 FB               [12] 2016 	mov	r3,a
      0004B5 08               [12] 2017 	inc	r0
      0004B6 86 04            [24] 2018 	mov	ar4,@r0
      0004B8 8A 82            [24] 2019 	mov	dpl,r2
      0004BA 8B 83            [24] 2020 	mov	dph,r3
      0004BC 8C F0            [24] 2021 	mov	b,r4
      0004BE 12r00r00         [24] 2022 	lcall	__gptrget
      0004C1 FA               [12] 2023 	mov	r2,a
      0004C2 A3               [24] 2024 	inc	dptr
      0004C3 12r00r00         [24] 2025 	lcall	__gptrget
      0004C6 FB               [12] 2026 	mov	r3,a
      0004C7 8D 82            [24] 2027 	mov	dpl,r5
      0004C9 8E 83            [24] 2028 	mov	dph,r6
      0004CB 8F F0            [24] 2029 	mov	b,r7
      0004CD EA               [12] 2030 	mov	a,r2
      0004CE 12r00r00         [24] 2031 	lcall	__gptrput
      0004D1 A3               [24] 2032 	inc	dptr
      0004D2 EB               [12] 2033 	mov	a,r3
      0004D3 12r00r00         [24] 2034 	lcall	__gptrput
                                   2035 ;	../../core/net/rime/rudolph2.c:179: hdr->chunk = c->rcv_nxt;
      0004D6 A8 81            [24] 2036 	mov	r0,sp
      0004D8 18               [12] 2037 	dec	r0
      0004D9 18               [12] 2038 	dec	r0
      0004DA 74 04            [12] 2039 	mov	a,#0x04
      0004DC 26               [12] 2040 	add	a,@r0
      0004DD FD               [12] 2041 	mov	r5,a
      0004DE E4               [12] 2042 	clr	a
      0004DF 08               [12] 2043 	inc	r0
      0004E0 36               [12] 2044 	addc	a,@r0
      0004E1 FE               [12] 2045 	mov	r6,a
      0004E2 08               [12] 2046 	inc	r0
      0004E3 86 07            [24] 2047 	mov	ar7,@r0
      0004E5 E5 81            [12] 2048 	mov	a,sp
      0004E7 24 FB            [12] 2049 	add	a,#0xfb
      0004E9 F8               [12] 2050 	mov	r0,a
      0004EA 74 42            [12] 2051 	mov	a,#0x42
      0004EC 26               [12] 2052 	add	a,@r0
      0004ED FA               [12] 2053 	mov	r2,a
      0004EE E4               [12] 2054 	clr	a
      0004EF 08               [12] 2055 	inc	r0
      0004F0 36               [12] 2056 	addc	a,@r0
      0004F1 FB               [12] 2057 	mov	r3,a
      0004F2 08               [12] 2058 	inc	r0
      0004F3 86 04            [24] 2059 	mov	ar4,@r0
      0004F5 8A 82            [24] 2060 	mov	dpl,r2
      0004F7 8B 83            [24] 2061 	mov	dph,r3
      0004F9 8C F0            [24] 2062 	mov	b,r4
      0004FB 12r00r00         [24] 2063 	lcall	__gptrget
      0004FE FA               [12] 2064 	mov	r2,a
      0004FF A3               [24] 2065 	inc	dptr
      000500 12r00r00         [24] 2066 	lcall	__gptrget
      000503 FB               [12] 2067 	mov	r3,a
      000504 8D 82            [24] 2068 	mov	dpl,r5
      000506 8E 83            [24] 2069 	mov	dph,r6
      000508 8F F0            [24] 2070 	mov	b,r7
      00050A EA               [12] 2071 	mov	a,r2
      00050B 12r00r00         [24] 2072 	lcall	__gptrput
      00050E A3               [24] 2073 	inc	dptr
      00050F EB               [12] 2074 	mov	a,r3
      000510 12r00r00         [24] 2075 	lcall	__gptrput
                                   2076 ;	../../core/net/rime/rudolph2.c:184: polite_send(&c->c, NACK_TIMEOUT, POLITE_HEADER);
      000513 74 01            [12] 2077 	mov	a,#0x01
      000515 C0 E0            [24] 2078 	push	acc
      000517 74 20            [12] 2079 	mov	a,#0x20
      000519 C0 E0            [24] 2080 	push	acc
      00051B E4               [12] 2081 	clr	a
      00051C C0 E0            [24] 2082 	push	acc
      00051E E5 81            [12] 2083 	mov	a,sp
      000520 24 F8            [12] 2084 	add	a,#0xf8
      000522 F8               [12] 2085 	mov	r0,a
      000523 86 82            [24] 2086 	mov	dpl,@r0
      000525 08               [12] 2087 	inc	r0
      000526 86 83            [24] 2088 	mov	dph,@r0
      000528 08               [12] 2089 	inc	r0
      000529 86 F0            [24] 2090 	mov	b,@r0
      00052B 12r00r00         [24] 2091 	lcall	_polite_send
      00052E 15 81            [12] 2092 	dec	sp
      000530 15 81            [12] 2093 	dec	sp
      000532 15 81            [12] 2094 	dec	sp
                                   2095 ;	../../core/net/rime/rudolph2.c:185: }
      000534 E5 81            [12] 2096 	mov	a,sp
      000536 24 FA            [12] 2097 	add	a,#0xfa
      000538 F5 81            [12] 2098 	mov	sp,a
      00053A 22               [24] 2099 	ret
                                   2100 ;------------------------------------------------------------
                                   2101 ;Allocation info for local variables in function 'sent'
                                   2102 ;------------------------------------------------------------
                                   2103 ;polite                    Allocated to registers 
                                   2104 ;------------------------------------------------------------
                                   2105 ;	../../core/net/rime/rudolph2.c:218: sent(struct polite_conn *polite)
                                   2106 ;	-----------------------------------------
                                   2107 ;	 function sent
                                   2108 ;	-----------------------------------------
      00053B                       2109 _sent:
                                   2110 ;	../../core/net/rime/rudolph2.c:231: }
      00053B 22               [24] 2111 	ret
                                   2112 ;------------------------------------------------------------
                                   2113 ;Allocation info for local variables in function 'dropped'
                                   2114 ;------------------------------------------------------------
                                   2115 ;polite                    Allocated to registers 
                                   2116 ;------------------------------------------------------------
                                   2117 ;	../../core/net/rime/rudolph2.c:234: dropped(struct polite_conn *polite)
                                   2118 ;	-----------------------------------------
                                   2119 ;	 function dropped
                                   2120 ;	-----------------------------------------
      00053C                       2121 _dropped:
                                   2122 ;	../../core/net/rime/rudolph2.c:245: }
      00053C 22               [24] 2123 	ret
                                   2124 ;------------------------------------------------------------
                                   2125 ;Allocation info for local variables in function 'timed_send'
                                   2126 ;------------------------------------------------------------
                                   2127 ;ptr                       Allocated to registers r5 r6 r7 
                                   2128 ;c                         Allocated to stack - sp -4
                                   2129 ;interval                  Allocated to stack - sp -1
                                   2130 ;len                       Allocated to registers r2 r4 
                                   2131 ;sloc0                     Allocated to stack - sp -1
                                   2132 ;sloc1                     Allocated to stack - sp -11
                                   2133 ;sloc2                     Allocated to stack - sp -9
                                   2134 ;sloc3                     Allocated to stack - sp -7
                                   2135 ;------------------------------------------------------------
                                   2136 ;	../../core/net/rime/rudolph2.c:248: timed_send(void *ptr)
                                   2137 ;	-----------------------------------------
                                   2138 ;	 function timed_send
                                   2139 ;	-----------------------------------------
      00053D                       2140 _timed_send:
      00053D E5 81            [12] 2141 	mov	a,sp
      00053F 24 0C            [12] 2142 	add	a,#0x0c
      000541 F5 81            [12] 2143 	mov	sp,a
      000543 AD 82            [24] 2144 	mov	r5,dpl
      000545 AE 83            [24] 2145 	mov	r6,dph
      000547 AF F0            [24] 2146 	mov	r7,b
                                   2147 ;	../../core/net/rime/rudolph2.c:250: struct rudolph2_conn *c = (struct rudolph2_conn *)ptr;
      000549 E5 81            [12] 2148 	mov	a,sp
      00054B 24 FC            [12] 2149 	add	a,#0xfc
      00054D F8               [12] 2150 	mov	r0,a
      00054E A6 05            [24] 2151 	mov	@r0,ar5
      000550 08               [12] 2152 	inc	r0
      000551 A6 06            [24] 2153 	mov	@r0,ar6
      000553 08               [12] 2154 	inc	r0
      000554 A6 07            [24] 2155 	mov	@r0,ar7
                                   2156 ;	../../core/net/rime/rudolph2.c:254: if((c->flags & FLAG_IS_STOPPED) == 0 &&
      000556 E5 81            [12] 2157 	mov	a,sp
      000558 24 FC            [12] 2158 	add	a,#0xfc
      00055A F8               [12] 2159 	mov	r0,a
      00055B 74 48            [12] 2160 	mov	a,#0x48
      00055D 26               [12] 2161 	add	a,@r0
      00055E FA               [12] 2162 	mov	r2,a
      00055F E4               [12] 2163 	clr	a
      000560 08               [12] 2164 	inc	r0
      000561 36               [12] 2165 	addc	a,@r0
      000562 FB               [12] 2166 	mov	r3,a
      000563 08               [12] 2167 	inc	r0
      000564 86 04            [24] 2168 	mov	ar4,@r0
      000566 8A 82            [24] 2169 	mov	dpl,r2
      000568 8B 83            [24] 2170 	mov	dph,r3
      00056A 8C F0            [24] 2171 	mov	b,r4
      00056C 12r00r00         [24] 2172 	lcall	__gptrget
      00056F FC               [12] 2173 	mov	r4,a
      000570 30 E2 03         [24] 2174 	jnb	acc.2,00144$
      000573 02r07r36         [24] 2175 	ljmp	00114$
      000576                       2176 00144$:
                                   2177 ;	../../core/net/rime/rudolph2.c:255: (c->flags & FLAG_LAST_RECEIVED)) {
      000576 EC               [12] 2178 	mov	a,r4
      000577 20 E1 03         [24] 2179 	jb	acc.1,00145$
      00057A 02r07r36         [24] 2180 	ljmp	00114$
      00057D                       2181 00145$:
                                   2182 ;	../../core/net/rime/rudolph2.c:263: if(c->flags & FLAG_LAST_SENT) {
      00057D EC               [12] 2183 	mov	a,r4
      00057E 30 E0 0A         [24] 2184 	jnb	acc.0,00102$
                                   2185 ;	../../core/net/rime/rudolph2.c:264: interval = STEADY_INTERVAL;
      000581 A8 81            [24] 2186 	mov	r0,sp
      000583 18               [12] 2187 	dec	r0
      000584 76 00            [12] 2188 	mov	@r0,#0x00
      000586 08               [12] 2189 	inc	r0
      000587 76 08            [12] 2190 	mov	@r0,#0x08
      000589 80 08            [24] 2191 	sjmp	00103$
      00058B                       2192 00102$:
                                   2193 ;	../../core/net/rime/rudolph2.c:266: interval = SEND_INTERVAL;
      00058B A8 81            [24] 2194 	mov	r0,sp
      00058D 18               [12] 2195 	dec	r0
      00058E 76 40            [12] 2196 	mov	@r0,#0x40
      000590 08               [12] 2197 	inc	r0
      000591 76 00            [12] 2198 	mov	@r0,#0x00
      000593                       2199 00103$:
                                   2200 ;	../../core/net/rime/rudolph2.c:270: len = send_data(c, interval);
      000593 A8 81            [24] 2201 	mov	r0,sp
      000595 18               [12] 2202 	dec	r0
      000596 E6               [12] 2203 	mov	a,@r0
      000597 C0 E0            [24] 2204 	push	acc
      000599 08               [12] 2205 	inc	r0
      00059A E6               [12] 2206 	mov	a,@r0
      00059B C0 E0            [24] 2207 	push	acc
      00059D E5 81            [12] 2208 	mov	a,sp
      00059F 24 FA            [12] 2209 	add	a,#0xfa
      0005A1 F8               [12] 2210 	mov	r0,a
      0005A2 86 82            [24] 2211 	mov	dpl,@r0
      0005A4 08               [12] 2212 	inc	r0
      0005A5 86 83            [24] 2213 	mov	dph,@r0
      0005A7 08               [12] 2214 	inc	r0
      0005A8 86 F0            [24] 2215 	mov	b,@r0
      0005AA 12r03rC3         [24] 2216 	lcall	_send_data
      0005AD AF 82            [24] 2217 	mov	r7,dpl
      0005AF AE 83            [24] 2218 	mov	r6,dph
      0005B1 15 81            [12] 2219 	dec	sp
      0005B3 15 81            [12] 2220 	dec	sp
      0005B5 8F 02            [24] 2221 	mov	ar2,r7
      0005B7 8E 04            [24] 2222 	mov	ar4,r6
                                   2223 ;	../../core/net/rime/rudolph2.c:272: if(len < RUDOLPH2_DATASIZE) {
      0005B9 C3               [12] 2224 	clr	c
      0005BA EA               [12] 2225 	mov	a,r2
      0005BB 94 40            [12] 2226 	subb	a,#0x40
      0005BD EC               [12] 2227 	mov	a,r4
      0005BE 64 80            [12] 2228 	xrl	a,#0x80
      0005C0 94 80            [12] 2229 	subb	a,#0x80
      0005C2 50 31            [24] 2230 	jnc	00105$
                                   2231 ;	../../core/net/rime/rudolph2.c:273: c->flags |= FLAG_LAST_SENT;
      0005C4 C0 02            [24] 2232 	push	ar2
      0005C6 C0 04            [24] 2233 	push	ar4
      0005C8 E5 81            [12] 2234 	mov	a,sp
      0005CA 24 FA            [12] 2235 	add	a,#0xfa
      0005CC F8               [12] 2236 	mov	r0,a
      0005CD 74 48            [12] 2237 	mov	a,#0x48
      0005CF 26               [12] 2238 	add	a,@r0
      0005D0 FA               [12] 2239 	mov	r2,a
      0005D1 E4               [12] 2240 	clr	a
      0005D2 08               [12] 2241 	inc	r0
      0005D3 36               [12] 2242 	addc	a,@r0
      0005D4 FB               [12] 2243 	mov	r3,a
      0005D5 08               [12] 2244 	inc	r0
      0005D6 86 04            [24] 2245 	mov	ar4,@r0
      0005D8 8A 82            [24] 2246 	mov	dpl,r2
      0005DA 8B 83            [24] 2247 	mov	dph,r3
      0005DC 8C F0            [24] 2248 	mov	b,r4
      0005DE 12r00r00         [24] 2249 	lcall	__gptrget
      0005E1 FF               [12] 2250 	mov	r7,a
      0005E2 43 07 01         [24] 2251 	orl	ar7,#0x01
      0005E5 8A 82            [24] 2252 	mov	dpl,r2
      0005E7 8B 83            [24] 2253 	mov	dph,r3
      0005E9 8C F0            [24] 2254 	mov	b,r4
      0005EB EF               [12] 2255 	mov	a,r7
      0005EC 12r00r00         [24] 2256 	lcall	__gptrput
      0005EF D0 04            [24] 2257 	pop	ar4
      0005F1 D0 02            [24] 2258 	pop	ar2
      0005F3 80 27            [24] 2259 	sjmp	00106$
      0005F5                       2260 00105$:
                                   2261 ;	../../core/net/rime/rudolph2.c:275: c->flags &= ~FLAG_LAST_SENT;
      0005F5 E5 81            [12] 2262 	mov	a,sp
      0005F7 24 FC            [12] 2263 	add	a,#0xfc
      0005F9 F8               [12] 2264 	mov	r0,a
      0005FA 74 48            [12] 2265 	mov	a,#0x48
      0005FC 26               [12] 2266 	add	a,@r0
      0005FD FD               [12] 2267 	mov	r5,a
      0005FE E4               [12] 2268 	clr	a
      0005FF 08               [12] 2269 	inc	r0
      000600 36               [12] 2270 	addc	a,@r0
      000601 FE               [12] 2271 	mov	r6,a
      000602 08               [12] 2272 	inc	r0
      000603 86 07            [24] 2273 	mov	ar7,@r0
      000605 8D 82            [24] 2274 	mov	dpl,r5
      000607 8E 83            [24] 2275 	mov	dph,r6
      000609 8F F0            [24] 2276 	mov	b,r7
      00060B 12r00r00         [24] 2277 	lcall	__gptrget
      00060E FB               [12] 2278 	mov	r3,a
      00060F 53 03 FE         [24] 2279 	anl	ar3,#0xfe
      000612 8D 82            [24] 2280 	mov	dpl,r5
      000614 8E 83            [24] 2281 	mov	dph,r6
      000616 8F F0            [24] 2282 	mov	b,r7
      000618 EB               [12] 2283 	mov	a,r3
      000619 12r00r00         [24] 2284 	lcall	__gptrput
      00061C                       2285 00106$:
                                   2286 ;	../../core/net/rime/rudolph2.c:278: if(c->nacks == 0 &&
      00061C E5 81            [12] 2287 	mov	a,sp
      00061E 24 FC            [12] 2288 	add	a,#0xfc
      000620 F8               [12] 2289 	mov	r0,a
      000621 74 47            [12] 2290 	mov	a,#0x47
      000623 26               [12] 2291 	add	a,@r0
      000624 FD               [12] 2292 	mov	r5,a
      000625 E4               [12] 2293 	clr	a
      000626 08               [12] 2294 	inc	r0
      000627 36               [12] 2295 	addc	a,@r0
      000628 FE               [12] 2296 	mov	r6,a
      000629 08               [12] 2297 	inc	r0
      00062A 86 07            [24] 2298 	mov	ar7,@r0
      00062C 8D 82            [24] 2299 	mov	dpl,r5
      00062E 8E 83            [24] 2300 	mov	dph,r6
      000630 8F F0            [24] 2301 	mov	b,r7
      000632 12r00r00         [24] 2302 	lcall	__gptrget
      000635 60 03            [24] 2303 	jz	00148$
      000637 02r06rE6         [24] 2304 	ljmp	00108$
      00063A                       2305 00148$:
                                   2306 ;	../../core/net/rime/rudolph2.c:279: len == RUDOLPH2_DATASIZE &&
      00063A BA 40 05         [24] 2307 	cjne	r2,#0x40,00149$
      00063D BC 00 02         [24] 2308 	cjne	r4,#0x00,00149$
      000640 80 03            [24] 2309 	sjmp	00150$
      000642                       2310 00149$:
      000642 02r06rE6         [24] 2311 	ljmp	00108$
      000645                       2312 00150$:
                                   2313 ;	../../core/net/rime/rudolph2.c:280: c->snd_nxt + 1 < c->rcv_nxt) {
      000645 C0 05            [24] 2314 	push	ar5
      000647 C0 06            [24] 2315 	push	ar6
      000649 C0 07            [24] 2316 	push	ar7
      00064B E5 81            [12] 2317 	mov	a,sp
      00064D 24 F9            [12] 2318 	add	a,#0xf9
      00064F F8               [12] 2319 	mov	r0,a
      000650 E5 81            [12] 2320 	mov	a,sp
      000652 24 F6            [12] 2321 	add	a,#0xf6
      000654 F9               [12] 2322 	mov	r1,a
      000655 74 40            [12] 2323 	mov	a,#0x40
      000657 26               [12] 2324 	add	a,@r0
      000658 F7               [12] 2325 	mov	@r1,a
      000659 E4               [12] 2326 	clr	a
      00065A 08               [12] 2327 	inc	r0
      00065B 36               [12] 2328 	addc	a,@r0
      00065C 09               [12] 2329 	inc	r1
      00065D F7               [12] 2330 	mov	@r1,a
      00065E 08               [12] 2331 	inc	r0
      00065F 09               [12] 2332 	inc	r1
      000660 E6               [12] 2333 	mov	a,@r0
      000661 F7               [12] 2334 	mov	@r1,a
      000662 E5 81            [12] 2335 	mov	a,sp
      000664 24 F6            [12] 2336 	add	a,#0xf6
      000666 F8               [12] 2337 	mov	r0,a
      000667 86 82            [24] 2338 	mov	dpl,@r0
      000669 08               [12] 2339 	inc	r0
      00066A 86 83            [24] 2340 	mov	dph,@r0
      00066C 08               [12] 2341 	inc	r0
      00066D 86 F0            [24] 2342 	mov	b,@r0
      00066F 12r00r00         [24] 2343 	lcall	__gptrget
      000672 FC               [12] 2344 	mov	r4,a
      000673 A3               [24] 2345 	inc	dptr
      000674 12r00r00         [24] 2346 	lcall	__gptrget
      000677 FB               [12] 2347 	mov	r3,a
      000678 8C 06            [24] 2348 	mov	ar6,r4
      00067A 8B 07            [24] 2349 	mov	ar7,r3
      00067C E5 81            [12] 2350 	mov	a,sp
      00067E 24 F2            [12] 2351 	add	a,#0xf2
      000680 F8               [12] 2352 	mov	r0,a
      000681 74 01            [12] 2353 	mov	a,#0x01
      000683 2E               [12] 2354 	add	a,r6
      000684 F6               [12] 2355 	mov	@r0,a
      000685 E4               [12] 2356 	clr	a
      000686 3F               [12] 2357 	addc	a,r7
      000687 08               [12] 2358 	inc	r0
      000688 F6               [12] 2359 	mov	@r0,a
      000689 E5 81            [12] 2360 	mov	a,sp
      00068B 24 F9            [12] 2361 	add	a,#0xf9
      00068D F8               [12] 2362 	mov	r0,a
      00068E 74 42            [12] 2363 	mov	a,#0x42
      000690 26               [12] 2364 	add	a,@r0
      000691 FD               [12] 2365 	mov	r5,a
      000692 E4               [12] 2366 	clr	a
      000693 08               [12] 2367 	inc	r0
      000694 36               [12] 2368 	addc	a,@r0
      000695 FE               [12] 2369 	mov	r6,a
      000696 08               [12] 2370 	inc	r0
      000697 86 07            [24] 2371 	mov	ar7,@r0
      000699 8D 82            [24] 2372 	mov	dpl,r5
      00069B 8E 83            [24] 2373 	mov	dph,r6
      00069D 8F F0            [24] 2374 	mov	b,r7
      00069F E5 81            [12] 2375 	mov	a,sp
      0006A1 24 F4            [12] 2376 	add	a,#0xf4
      0006A3 F8               [12] 2377 	mov	r0,a
      0006A4 12r00r00         [24] 2378 	lcall	__gptrget
      0006A7 F6               [12] 2379 	mov	@r0,a
      0006A8 A3               [24] 2380 	inc	dptr
      0006A9 12r00r00         [24] 2381 	lcall	__gptrget
      0006AC 08               [12] 2382 	inc	r0
      0006AD F6               [12] 2383 	mov	@r0,a
      0006AE E5 81            [12] 2384 	mov	a,sp
      0006B0 24 F2            [12] 2385 	add	a,#0xf2
      0006B2 F8               [12] 2386 	mov	r0,a
      0006B3 86 06            [24] 2387 	mov	ar6,@r0
      0006B5 08               [12] 2388 	inc	r0
      0006B6 86 07            [24] 2389 	mov	ar7,@r0
      0006B8 E5 81            [12] 2390 	mov	a,sp
      0006BA 24 F4            [12] 2391 	add	a,#0xf4
      0006BC F8               [12] 2392 	mov	r0,a
      0006BD C3               [12] 2393 	clr	c
      0006BE EE               [12] 2394 	mov	a,r6
      0006BF 96               [12] 2395 	subb	a,@r0
      0006C0 EF               [12] 2396 	mov	a,r7
      0006C1 08               [12] 2397 	inc	r0
      0006C2 96               [12] 2398 	subb	a,@r0
      0006C3 D0 07            [24] 2399 	pop	ar7
      0006C5 D0 06            [24] 2400 	pop	ar6
      0006C7 D0 05            [24] 2401 	pop	ar5
      0006C9 50 1B            [24] 2402 	jnc	00108$
                                   2403 ;	../../core/net/rime/rudolph2.c:281: c->snd_nxt++;
      0006CB 0C               [12] 2404 	inc	r4
      0006CC BC 00 01         [24] 2405 	cjne	r4,#0x00,00152$
      0006CF 0B               [12] 2406 	inc	r3
      0006D0                       2407 00152$:
      0006D0 E5 81            [12] 2408 	mov	a,sp
      0006D2 24 F9            [12] 2409 	add	a,#0xf9
      0006D4 F8               [12] 2410 	mov	r0,a
      0006D5 86 82            [24] 2411 	mov	dpl,@r0
      0006D7 08               [12] 2412 	inc	r0
      0006D8 86 83            [24] 2413 	mov	dph,@r0
      0006DA 08               [12] 2414 	inc	r0
      0006DB 86 F0            [24] 2415 	mov	b,@r0
      0006DD EC               [12] 2416 	mov	a,r4
      0006DE 12r00r00         [24] 2417 	lcall	__gptrput
      0006E1 A3               [24] 2418 	inc	dptr
      0006E2 EB               [12] 2419 	mov	a,r3
      0006E3 12r00r00         [24] 2420 	lcall	__gptrput
      0006E6                       2421 00108$:
                                   2422 ;	../../core/net/rime/rudolph2.c:283: c->nacks = 0;
      0006E6 8D 82            [24] 2423 	mov	dpl,r5
      0006E8 8E 83            [24] 2424 	mov	dph,r6
      0006EA 8F F0            [24] 2425 	mov	b,r7
      0006EC E4               [12] 2426 	clr	a
      0006ED 12r00r00         [24] 2427 	lcall	__gptrput
                                   2428 ;	../../core/net/rime/rudolph2.c:284: ctimer_set(&c->t, interval, timed_send, c);
      0006F0 E5 81            [12] 2429 	mov	a,sp
      0006F2 24 FC            [12] 2430 	add	a,#0xfc
      0006F4 F8               [12] 2431 	mov	r0,a
      0006F5 86 05            [24] 2432 	mov	ar5,@r0
      0006F7 08               [12] 2433 	inc	r0
      0006F8 86 06            [24] 2434 	mov	ar6,@r0
      0006FA 08               [12] 2435 	inc	r0
      0006FB 86 07            [24] 2436 	mov	ar7,@r0
      0006FD E5 81            [12] 2437 	mov	a,sp
      0006FF 24 FC            [12] 2438 	add	a,#0xfc
      000701 F8               [12] 2439 	mov	r0,a
      000702 74 2B            [12] 2440 	mov	a,#0x2b
      000704 26               [12] 2441 	add	a,@r0
      000705 FA               [12] 2442 	mov	r2,a
      000706 E4               [12] 2443 	clr	a
      000707 08               [12] 2444 	inc	r0
      000708 36               [12] 2445 	addc	a,@r0
      000709 FB               [12] 2446 	mov	r3,a
      00070A 08               [12] 2447 	inc	r0
      00070B 86 04            [24] 2448 	mov	ar4,@r0
      00070D C0 05            [24] 2449 	push	ar5
      00070F C0 06            [24] 2450 	push	ar6
      000711 C0 07            [24] 2451 	push	ar7
      000713 74r3D            [12] 2452 	mov	a,#_timed_send
      000715 C0 E0            [24] 2453 	push	acc
      000717 74s05            [12] 2454 	mov	a,#(_timed_send >> 8)
      000719 C0 E0            [24] 2455 	push	acc
      00071B E5 81            [12] 2456 	mov	a,sp
      00071D 24 FA            [12] 2457 	add	a,#0xfa
      00071F F8               [12] 2458 	mov	r0,a
      000720 E6               [12] 2459 	mov	a,@r0
      000721 C0 E0            [24] 2460 	push	acc
      000723 08               [12] 2461 	inc	r0
      000724 E6               [12] 2462 	mov	a,@r0
      000725 C0 E0            [24] 2463 	push	acc
      000727 8A 82            [24] 2464 	mov	dpl,r2
      000729 8B 83            [24] 2465 	mov	dph,r3
      00072B 8C F0            [24] 2466 	mov	b,r4
      00072D 12r00r00         [24] 2467 	lcall	_ctimer_set
      000730 E5 81            [12] 2468 	mov	a,sp
      000732 24 F9            [12] 2469 	add	a,#0xf9
      000734 F5 81            [12] 2470 	mov	sp,a
      000736                       2471 00114$:
                                   2472 ;	../../core/net/rime/rudolph2.c:286: }
      000736 E5 81            [12] 2473 	mov	a,sp
      000738 24 F4            [12] 2474 	add	a,#0xf4
      00073A F5 81            [12] 2475 	mov	sp,a
      00073C 22               [24] 2476 	ret
                                   2477 ;------------------------------------------------------------
                                   2478 ;Allocation info for local variables in function 'recv'
                                   2479 ;------------------------------------------------------------
                                   2480 ;polite                    Allocated to registers r5 r6 r7 
                                   2481 ;c                         Allocated to stack - sp -5
                                   2482 ;hdr                       Allocated to stack - sp -2
                                   2483 ;len                       Allocated to registers r4 r3 
                                   2484 ;sloc0                     Allocated to stack - sp -13
                                   2485 ;sloc1                     Allocated to stack - sp +1
                                   2486 ;sloc2                     Allocated to stack - sp -10
                                   2487 ;sloc3                     Allocated to stack - sp -8
                                   2488 ;------------------------------------------------------------
                                   2489 ;	../../core/net/rime/rudolph2.c:289: recv(struct polite_conn *polite)
                                   2490 ;	-----------------------------------------
                                   2491 ;	 function recv
                                   2492 ;	-----------------------------------------
      00073D                       2493 _recv:
      00073D E5 81            [12] 2494 	mov	a,sp
      00073F 24 0E            [12] 2495 	add	a,#0x0e
      000741 F5 81            [12] 2496 	mov	sp,a
      000743 AD 82            [24] 2497 	mov	r5,dpl
      000745 AE 83            [24] 2498 	mov	r6,dph
      000747 AF F0            [24] 2499 	mov	r7,b
                                   2500 ;	../../core/net/rime/rudolph2.c:291: struct rudolph2_conn *c = (struct rudolph2_conn *)polite;
      000749 E5 81            [12] 2501 	mov	a,sp
      00074B 24 FB            [12] 2502 	add	a,#0xfb
      00074D F8               [12] 2503 	mov	r0,a
      00074E A6 05            [24] 2504 	mov	@r0,ar5
      000750 08               [12] 2505 	inc	r0
      000751 A6 06            [24] 2506 	mov	@r0,ar6
      000753 08               [12] 2507 	inc	r0
      000754 A6 07            [24] 2508 	mov	@r0,ar7
                                   2509 ;	../../core/net/rime/rudolph2.c:292: struct rudolph2_hdr *hdr = packetbuf_dataptr();
      000756 12r00r00         [24] 2510 	lcall	_packetbuf_dataptr
      000759 AA 82            [24] 2511 	mov	r2,dpl
      00075B AB 83            [24] 2512 	mov	r3,dph
      00075D AC F0            [24] 2513 	mov	r4,b
      00075F A8 81            [24] 2514 	mov	r0,sp
      000761 18               [12] 2515 	dec	r0
      000762 18               [12] 2516 	dec	r0
      000763 A6 02            [24] 2517 	mov	@r0,ar2
      000765 08               [12] 2518 	inc	r0
      000766 A6 03            [24] 2519 	mov	@r0,ar3
      000768 08               [12] 2520 	inc	r0
      000769 A6 04            [24] 2521 	mov	@r0,ar4
                                   2522 ;	../../core/net/rime/rudolph2.c:297: if(hdr->type == TYPE_NACK && hdr->hops_from_base > c->hops_from_base) {
      00076B A8 81            [24] 2523 	mov	r0,sp
      00076D 18               [12] 2524 	dec	r0
      00076E 18               [12] 2525 	dec	r0
      00076F 86 82            [24] 2526 	mov	dpl,@r0
      000771 08               [12] 2527 	inc	r0
      000772 86 83            [24] 2528 	mov	dph,@r0
      000774 08               [12] 2529 	inc	r0
      000775 86 F0            [24] 2530 	mov	b,@r0
      000777 12r00r00         [24] 2531 	lcall	__gptrget
      00077A FF               [12] 2532 	mov	r7,a
      00077B BF 01 02         [24] 2533 	cjne	r7,#0x01,00186$
      00077E 80 03            [24] 2534 	sjmp	00187$
      000780                       2535 00186$:
      000780 02r08rFE         [24] 2536 	ljmp	00129$
      000783                       2537 00187$:
      000783 C0 07            [24] 2538 	push	ar7
      000785 E5 81            [12] 2539 	mov	a,sp
      000787 24 FD            [12] 2540 	add	a,#0xfd
      000789 F8               [12] 2541 	mov	r0,a
      00078A 74 01            [12] 2542 	mov	a,#0x01
      00078C 26               [12] 2543 	add	a,@r0
      00078D FD               [12] 2544 	mov	r5,a
      00078E E4               [12] 2545 	clr	a
      00078F 08               [12] 2546 	inc	r0
      000790 36               [12] 2547 	addc	a,@r0
      000791 FE               [12] 2548 	mov	r6,a
      000792 08               [12] 2549 	inc	r0
      000793 86 07            [24] 2550 	mov	ar7,@r0
      000795 8D 82            [24] 2551 	mov	dpl,r5
      000797 8E 83            [24] 2552 	mov	dph,r6
      000799 8F F0            [24] 2553 	mov	b,r7
      00079B 12r00r00         [24] 2554 	lcall	__gptrget
      00079E FD               [12] 2555 	mov	r5,a
      00079F E5 81            [12] 2556 	mov	a,sp
      0007A1 24 FA            [12] 2557 	add	a,#0xfa
      0007A3 F8               [12] 2558 	mov	r0,a
      0007A4 74 46            [12] 2559 	mov	a,#0x46
      0007A6 26               [12] 2560 	add	a,@r0
      0007A7 FC               [12] 2561 	mov	r4,a
      0007A8 E4               [12] 2562 	clr	a
      0007A9 08               [12] 2563 	inc	r0
      0007AA 36               [12] 2564 	addc	a,@r0
      0007AB FE               [12] 2565 	mov	r6,a
      0007AC 08               [12] 2566 	inc	r0
      0007AD 86 07            [24] 2567 	mov	ar7,@r0
      0007AF 8C 82            [24] 2568 	mov	dpl,r4
      0007B1 8E 83            [24] 2569 	mov	dph,r6
      0007B3 8F F0            [24] 2570 	mov	b,r7
      0007B5 12r00r00         [24] 2571 	lcall	__gptrget
      0007B8 FC               [12] 2572 	mov	r4,a
      0007B9 C3               [12] 2573 	clr	c
      0007BA 9D               [12] 2574 	subb	a,r5
      0007BB D0 07            [24] 2575 	pop	ar7
      0007BD 40 03            [24] 2576 	jc	00188$
      0007BF 02r08rFE         [24] 2577 	ljmp	00129$
      0007C2                       2578 00188$:
                                   2579 ;	../../core/net/rime/rudolph2.c:298: c->nacks++;
      0007C2 E5 81            [12] 2580 	mov	a,sp
      0007C4 24 FB            [12] 2581 	add	a,#0xfb
      0007C6 F8               [12] 2582 	mov	r0,a
      0007C7 74 47            [12] 2583 	mov	a,#0x47
      0007C9 26               [12] 2584 	add	a,@r0
      0007CA FC               [12] 2585 	mov	r4,a
      0007CB E4               [12] 2586 	clr	a
      0007CC 08               [12] 2587 	inc	r0
      0007CD 36               [12] 2588 	addc	a,@r0
      0007CE FD               [12] 2589 	mov	r5,a
      0007CF 08               [12] 2590 	inc	r0
      0007D0 86 06            [24] 2591 	mov	ar6,@r0
      0007D2 8C 82            [24] 2592 	mov	dpl,r4
      0007D4 8D 83            [24] 2593 	mov	dph,r5
      0007D6 8E F0            [24] 2594 	mov	b,r6
      0007D8 12r00r00         [24] 2595 	lcall	__gptrget
      0007DB FB               [12] 2596 	mov	r3,a
      0007DC 0B               [12] 2597 	inc	r3
      0007DD 8C 82            [24] 2598 	mov	dpl,r4
      0007DF 8D 83            [24] 2599 	mov	dph,r5
      0007E1 8E F0            [24] 2600 	mov	b,r6
      0007E3 EB               [12] 2601 	mov	a,r3
      0007E4 12r00r00         [24] 2602 	lcall	__gptrput
                                   2603 ;	../../core/net/rime/rudolph2.c:303: if(hdr->version == c->version) {
      0007E7 A8 81            [24] 2604 	mov	r0,sp
      0007E9 18               [12] 2605 	dec	r0
      0007EA 18               [12] 2606 	dec	r0
      0007EB 74 02            [12] 2607 	mov	a,#0x02
      0007ED 26               [12] 2608 	add	a,@r0
      0007EE FD               [12] 2609 	mov	r5,a
      0007EF E4               [12] 2610 	clr	a
      0007F0 08               [12] 2611 	inc	r0
      0007F1 36               [12] 2612 	addc	a,@r0
      0007F2 FC               [12] 2613 	mov	r4,a
      0007F3 08               [12] 2614 	inc	r0
      0007F4 86 06            [24] 2615 	mov	ar6,@r0
      0007F6 8D 82            [24] 2616 	mov	dpl,r5
      0007F8 8C 83            [24] 2617 	mov	dph,r4
      0007FA 8E F0            [24] 2618 	mov	b,r6
      0007FC 12r00r00         [24] 2619 	lcall	__gptrget
      0007FF FD               [12] 2620 	mov	r5,a
      000800 A3               [24] 2621 	inc	dptr
      000801 12r00r00         [24] 2622 	lcall	__gptrget
      000804 FE               [12] 2623 	mov	r6,a
      000805 E5 81            [12] 2624 	mov	a,sp
      000807 24 FB            [12] 2625 	add	a,#0xfb
      000809 F8               [12] 2626 	mov	r0,a
      00080A 74 44            [12] 2627 	mov	a,#0x44
      00080C 26               [12] 2628 	add	a,@r0
      00080D FB               [12] 2629 	mov	r3,a
      00080E E4               [12] 2630 	clr	a
      00080F 08               [12] 2631 	inc	r0
      000810 36               [12] 2632 	addc	a,@r0
      000811 FA               [12] 2633 	mov	r2,a
      000812 08               [12] 2634 	inc	r0
      000813 86 04            [24] 2635 	mov	ar4,@r0
      000815 8B 82            [24] 2636 	mov	dpl,r3
      000817 8A 83            [24] 2637 	mov	dph,r2
      000819 8C F0            [24] 2638 	mov	b,r4
      00081B 12r00r00         [24] 2639 	lcall	__gptrget
      00081E FB               [12] 2640 	mov	r3,a
      00081F A3               [24] 2641 	inc	dptr
      000820 12r00r00         [24] 2642 	lcall	__gptrget
      000823 FC               [12] 2643 	mov	r4,a
      000824 ED               [12] 2644 	mov	a,r5
      000825 B5 03 06         [24] 2645 	cjne	a,ar3,00189$
      000828 EE               [12] 2646 	mov	a,r6
      000829 B5 04 02         [24] 2647 	cjne	a,ar4,00189$
      00082C 80 03            [24] 2648 	sjmp	00190$
      00082E                       2649 00189$:
      00082E 02r08rB5         [24] 2650 	ljmp	00106$
      000831                       2651 00190$:
                                   2652 ;	../../core/net/rime/rudolph2.c:304: if(hdr->chunk < c->rcv_nxt) {
      000831 A8 81            [24] 2653 	mov	r0,sp
      000833 18               [12] 2654 	dec	r0
      000834 18               [12] 2655 	dec	r0
      000835 74 04            [12] 2656 	mov	a,#0x04
      000837 26               [12] 2657 	add	a,@r0
      000838 FF               [12] 2658 	mov	r7,a
      000839 E4               [12] 2659 	clr	a
      00083A 08               [12] 2660 	inc	r0
      00083B 36               [12] 2661 	addc	a,@r0
      00083C FE               [12] 2662 	mov	r6,a
      00083D 08               [12] 2663 	inc	r0
      00083E 86 05            [24] 2664 	mov	ar5,@r0
      000840 8F 82            [24] 2665 	mov	dpl,r7
      000842 8E 83            [24] 2666 	mov	dph,r6
      000844 8D F0            [24] 2667 	mov	b,r5
      000846 12r00r00         [24] 2668 	lcall	__gptrget
      000849 FF               [12] 2669 	mov	r7,a
      00084A A3               [24] 2670 	inc	dptr
      00084B 12r00r00         [24] 2671 	lcall	__gptrget
      00084E FE               [12] 2672 	mov	r6,a
      00084F E5 81            [12] 2673 	mov	a,sp
      000851 24 FB            [12] 2674 	add	a,#0xfb
      000853 F8               [12] 2675 	mov	r0,a
      000854 74 42            [12] 2676 	mov	a,#0x42
      000856 26               [12] 2677 	add	a,@r0
      000857 FD               [12] 2678 	mov	r5,a
      000858 E4               [12] 2679 	clr	a
      000859 08               [12] 2680 	inc	r0
      00085A 36               [12] 2681 	addc	a,@r0
      00085B FC               [12] 2682 	mov	r4,a
      00085C 08               [12] 2683 	inc	r0
      00085D 86 03            [24] 2684 	mov	ar3,@r0
      00085F 8D 82            [24] 2685 	mov	dpl,r5
      000861 8C 83            [24] 2686 	mov	dph,r4
      000863 8B F0            [24] 2687 	mov	b,r3
      000865 12r00r00         [24] 2688 	lcall	__gptrget
      000868 FD               [12] 2689 	mov	r5,a
      000869 A3               [24] 2690 	inc	dptr
      00086A 12r00r00         [24] 2691 	lcall	__gptrget
      00086D FC               [12] 2692 	mov	r4,a
      00086E C3               [12] 2693 	clr	c
      00086F EF               [12] 2694 	mov	a,r7
      000870 9D               [12] 2695 	subb	a,r5
      000871 EE               [12] 2696 	mov	a,r6
      000872 9C               [12] 2697 	subb	a,r4
      000873 40 03            [24] 2698 	jc	00191$
      000875 02r0Cr8B         [24] 2699 	ljmp	00132$
      000878                       2700 00191$:
                                   2701 ;	../../core/net/rime/rudolph2.c:305: c->snd_nxt = hdr->chunk;
      000878 E5 81            [12] 2702 	mov	a,sp
      00087A 24 FB            [12] 2703 	add	a,#0xfb
      00087C F8               [12] 2704 	mov	r0,a
      00087D 74 40            [12] 2705 	mov	a,#0x40
      00087F 26               [12] 2706 	add	a,@r0
      000880 FD               [12] 2707 	mov	r5,a
      000881 E4               [12] 2708 	clr	a
      000882 08               [12] 2709 	inc	r0
      000883 36               [12] 2710 	addc	a,@r0
      000884 FC               [12] 2711 	mov	r4,a
      000885 08               [12] 2712 	inc	r0
      000886 86 03            [24] 2713 	mov	ar3,@r0
      000888 8D 82            [24] 2714 	mov	dpl,r5
      00088A 8C 83            [24] 2715 	mov	dph,r4
      00088C 8B F0            [24] 2716 	mov	b,r3
      00088E EF               [12] 2717 	mov	a,r7
      00088F 12r00r00         [24] 2718 	lcall	__gptrput
      000892 A3               [24] 2719 	inc	dptr
      000893 EE               [12] 2720 	mov	a,r6
      000894 12r00r00         [24] 2721 	lcall	__gptrput
                                   2722 ;	../../core/net/rime/rudolph2.c:306: send_data(c, SEND_INTERVAL);
      000897 74 40            [12] 2723 	mov	a,#0x40
      000899 C0 E0            [24] 2724 	push	acc
      00089B E4               [12] 2725 	clr	a
      00089C C0 E0            [24] 2726 	push	acc
      00089E E5 81            [12] 2727 	mov	a,sp
      0008A0 24 F9            [12] 2728 	add	a,#0xf9
      0008A2 F8               [12] 2729 	mov	r0,a
      0008A3 86 82            [24] 2730 	mov	dpl,@r0
      0008A5 08               [12] 2731 	inc	r0
      0008A6 86 83            [24] 2732 	mov	dph,@r0
      0008A8 08               [12] 2733 	inc	r0
      0008A9 86 F0            [24] 2734 	mov	b,@r0
      0008AB 12r03rC3         [24] 2735 	lcall	_send_data
      0008AE 15 81            [12] 2736 	dec	sp
      0008B0 15 81            [12] 2737 	dec	sp
      0008B2 02r0Cr8B         [24] 2738 	ljmp	00132$
      0008B5                       2739 00106$:
                                   2740 ;	../../core/net/rime/rudolph2.c:308: } else if(LT(hdr->version, c->version)) {
      0008B5 ED               [12] 2741 	mov	a,r5
      0008B6 C3               [12] 2742 	clr	c
      0008B7 9B               [12] 2743 	subb	a,r3
      0008B8 FD               [12] 2744 	mov	r5,a
      0008B9 EE               [12] 2745 	mov	a,r6
      0008BA 9C               [12] 2746 	subb	a,r4
      0008BB FE               [12] 2747 	mov	r6,a
      0008BC 20 E7 03         [24] 2748 	jb	acc.7,00192$
      0008BF 02r0Cr8B         [24] 2749 	ljmp	00132$
      0008C2                       2750 00192$:
                                   2751 ;	../../core/net/rime/rudolph2.c:309: c->snd_nxt = 0;
      0008C2 E5 81            [12] 2752 	mov	a,sp
      0008C4 24 FB            [12] 2753 	add	a,#0xfb
      0008C6 F8               [12] 2754 	mov	r0,a
      0008C7 74 40            [12] 2755 	mov	a,#0x40
      0008C9 26               [12] 2756 	add	a,@r0
      0008CA FC               [12] 2757 	mov	r4,a
      0008CB E4               [12] 2758 	clr	a
      0008CC 08               [12] 2759 	inc	r0
      0008CD 36               [12] 2760 	addc	a,@r0
      0008CE FD               [12] 2761 	mov	r5,a
      0008CF 08               [12] 2762 	inc	r0
      0008D0 86 06            [24] 2763 	mov	ar6,@r0
      0008D2 8C 82            [24] 2764 	mov	dpl,r4
      0008D4 8D 83            [24] 2765 	mov	dph,r5
      0008D6 8E F0            [24] 2766 	mov	b,r6
      0008D8 E4               [12] 2767 	clr	a
      0008D9 12r00r00         [24] 2768 	lcall	__gptrput
      0008DC A3               [24] 2769 	inc	dptr
      0008DD 12r00r00         [24] 2770 	lcall	__gptrput
                                   2771 ;	../../core/net/rime/rudolph2.c:310: send_data(c, SEND_INTERVAL);
      0008E0 74 40            [12] 2772 	mov	a,#0x40
      0008E2 C0 E0            [24] 2773 	push	acc
      0008E4 E4               [12] 2774 	clr	a
      0008E5 C0 E0            [24] 2775 	push	acc
      0008E7 E5 81            [12] 2776 	mov	a,sp
      0008E9 24 F9            [12] 2777 	add	a,#0xf9
      0008EB F8               [12] 2778 	mov	r0,a
      0008EC 86 82            [24] 2779 	mov	dpl,@r0
      0008EE 08               [12] 2780 	inc	r0
      0008EF 86 83            [24] 2781 	mov	dph,@r0
      0008F1 08               [12] 2782 	inc	r0
      0008F2 86 F0            [24] 2783 	mov	b,@r0
      0008F4 12r03rC3         [24] 2784 	lcall	_send_data
      0008F7 15 81            [12] 2785 	dec	sp
      0008F9 15 81            [12] 2786 	dec	sp
      0008FB 02r0Cr8B         [24] 2787 	ljmp	00132$
      0008FE                       2788 00129$:
                                   2789 ;	../../core/net/rime/rudolph2.c:312: } else if(hdr->type == TYPE_DATA) {
      0008FE EF               [12] 2790 	mov	a,r7
      0008FF 60 03            [24] 2791 	jz	00193$
      000901 02r0Cr8B         [24] 2792 	ljmp	00132$
      000904                       2793 00193$:
                                   2794 ;	../../core/net/rime/rudolph2.c:313: if(hdr->hops_from_base < c->hops_from_base) {
      000904 A8 81            [24] 2795 	mov	r0,sp
      000906 18               [12] 2796 	dec	r0
      000907 18               [12] 2797 	dec	r0
      000908 74 01            [12] 2798 	mov	a,#0x01
      00090A 26               [12] 2799 	add	a,@r0
      00090B FD               [12] 2800 	mov	r5,a
      00090C E4               [12] 2801 	clr	a
      00090D 08               [12] 2802 	inc	r0
      00090E 36               [12] 2803 	addc	a,@r0
      00090F FE               [12] 2804 	mov	r6,a
      000910 08               [12] 2805 	inc	r0
      000911 86 07            [24] 2806 	mov	ar7,@r0
      000913 8D 82            [24] 2807 	mov	dpl,r5
      000915 8E 83            [24] 2808 	mov	dph,r6
      000917 8F F0            [24] 2809 	mov	b,r7
      000919 12r00r00         [24] 2810 	lcall	__gptrget
      00091C FF               [12] 2811 	mov	r7,a
      00091D E5 81            [12] 2812 	mov	a,sp
      00091F 24 FB            [12] 2813 	add	a,#0xfb
      000921 F8               [12] 2814 	mov	r0,a
      000922 74 46            [12] 2815 	mov	a,#0x46
      000924 26               [12] 2816 	add	a,@r0
      000925 FC               [12] 2817 	mov	r4,a
      000926 E4               [12] 2818 	clr	a
      000927 08               [12] 2819 	inc	r0
      000928 36               [12] 2820 	addc	a,@r0
      000929 FD               [12] 2821 	mov	r5,a
      00092A 08               [12] 2822 	inc	r0
      00092B 86 06            [24] 2823 	mov	ar6,@r0
      00092D 8C 82            [24] 2824 	mov	dpl,r4
      00092F 8D 83            [24] 2825 	mov	dph,r5
      000931 8E F0            [24] 2826 	mov	b,r6
      000933 12r00r00         [24] 2827 	lcall	__gptrget
      000936 FB               [12] 2828 	mov	r3,a
      000937 C3               [12] 2829 	clr	c
      000938 EF               [12] 2830 	mov	a,r7
      000939 9B               [12] 2831 	subb	a,r3
      00093A 40 03            [24] 2832 	jc	00194$
      00093C 02r0Cr8B         [24] 2833 	ljmp	00132$
      00093F                       2834 00194$:
                                   2835 ;	../../core/net/rime/rudolph2.c:316: c->hops_from_base = hdr->hops_from_base + 1;
      00093F 0F               [12] 2836 	inc	r7
      000940 8C 82            [24] 2837 	mov	dpl,r4
      000942 8D 83            [24] 2838 	mov	dph,r5
      000944 8E F0            [24] 2839 	mov	b,r6
      000946 EF               [12] 2840 	mov	a,r7
      000947 12r00r00         [24] 2841 	lcall	__gptrput
                                   2842 ;	../../core/net/rime/rudolph2.c:317: if(LT(c->version, hdr->version)) {
      00094A E5 81            [12] 2843 	mov	a,sp
      00094C 24 FB            [12] 2844 	add	a,#0xfb
      00094E F8               [12] 2845 	mov	r0,a
      00094F E5 81            [12] 2846 	mov	a,sp
      000951 24 F3            [12] 2847 	add	a,#0xf3
      000953 F9               [12] 2848 	mov	r1,a
      000954 74 44            [12] 2849 	mov	a,#0x44
      000956 26               [12] 2850 	add	a,@r0
      000957 F7               [12] 2851 	mov	@r1,a
      000958 E4               [12] 2852 	clr	a
      000959 08               [12] 2853 	inc	r0
      00095A 36               [12] 2854 	addc	a,@r0
      00095B 09               [12] 2855 	inc	r1
      00095C F7               [12] 2856 	mov	@r1,a
      00095D 08               [12] 2857 	inc	r0
      00095E 09               [12] 2858 	inc	r1
      00095F E6               [12] 2859 	mov	a,@r0
      000960 F7               [12] 2860 	mov	@r1,a
      000961 E5 81            [12] 2861 	mov	a,sp
      000963 24 F3            [12] 2862 	add	a,#0xf3
      000965 F8               [12] 2863 	mov	r0,a
      000966 86 82            [24] 2864 	mov	dpl,@r0
      000968 08               [12] 2865 	inc	r0
      000969 86 83            [24] 2866 	mov	dph,@r0
      00096B 08               [12] 2867 	inc	r0
      00096C 86 F0            [24] 2868 	mov	b,@r0
      00096E 12r00r00         [24] 2869 	lcall	__gptrget
      000971 FE               [12] 2870 	mov	r6,a
      000972 A3               [24] 2871 	inc	dptr
      000973 12r00r00         [24] 2872 	lcall	__gptrget
      000976 FD               [12] 2873 	mov	r5,a
      000977 A8 81            [24] 2874 	mov	r0,sp
      000979 18               [12] 2875 	dec	r0
      00097A 18               [12] 2876 	dec	r0
      00097B 74 02            [12] 2877 	mov	a,#0x02
      00097D 26               [12] 2878 	add	a,@r0
      00097E FB               [12] 2879 	mov	r3,a
      00097F E4               [12] 2880 	clr	a
      000980 08               [12] 2881 	inc	r0
      000981 36               [12] 2882 	addc	a,@r0
      000982 FA               [12] 2883 	mov	r2,a
      000983 08               [12] 2884 	inc	r0
      000984 86 04            [24] 2885 	mov	ar4,@r0
      000986 8B 82            [24] 2886 	mov	dpl,r3
      000988 8A 83            [24] 2887 	mov	dph,r2
      00098A 8C F0            [24] 2888 	mov	b,r4
      00098C 12r00r00         [24] 2889 	lcall	__gptrget
      00098F FB               [12] 2890 	mov	r3,a
      000990 A3               [24] 2891 	inc	dptr
      000991 12r00r00         [24] 2892 	lcall	__gptrget
      000994 FC               [12] 2893 	mov	r4,a
      000995 EE               [12] 2894 	mov	a,r6
      000996 C3               [12] 2895 	clr	c
      000997 9B               [12] 2896 	subb	a,r3
      000998 FA               [12] 2897 	mov	r2,a
      000999 ED               [12] 2898 	mov	a,r5
      00099A 9C               [12] 2899 	subb	a,r4
      00099B FF               [12] 2900 	mov	r7,a
      00099C 20 E7 03         [24] 2901 	jb	acc.7,00195$
      00099F 02r0Ar9A         [24] 2902 	ljmp	00122$
      0009A2                       2903 00195$:
                                   2904 ;	../../core/net/rime/rudolph2.c:321: c->version = hdr->version;
      0009A2 E5 81            [12] 2905 	mov	a,sp
      0009A4 24 F3            [12] 2906 	add	a,#0xf3
      0009A6 F8               [12] 2907 	mov	r0,a
      0009A7 86 82            [24] 2908 	mov	dpl,@r0
      0009A9 08               [12] 2909 	inc	r0
      0009AA 86 83            [24] 2910 	mov	dph,@r0
      0009AC 08               [12] 2911 	inc	r0
      0009AD 86 F0            [24] 2912 	mov	b,@r0
      0009AF EB               [12] 2913 	mov	a,r3
      0009B0 12r00r00         [24] 2914 	lcall	__gptrput
      0009B3 A3               [24] 2915 	inc	dptr
      0009B4 EC               [12] 2916 	mov	a,r4
      0009B5 12r00r00         [24] 2917 	lcall	__gptrput
                                   2918 ;	../../core/net/rime/rudolph2.c:322: c->snd_nxt = c->rcv_nxt = 0;
      0009B8 E5 81            [12] 2919 	mov	a,sp
      0009BA 24 FB            [12] 2920 	add	a,#0xfb
      0009BC F8               [12] 2921 	mov	r0,a
      0009BD 74 40            [12] 2922 	mov	a,#0x40
      0009BF 26               [12] 2923 	add	a,@r0
      0009C0 FD               [12] 2924 	mov	r5,a
      0009C1 E4               [12] 2925 	clr	a
      0009C2 08               [12] 2926 	inc	r0
      0009C3 36               [12] 2927 	addc	a,@r0
      0009C4 FC               [12] 2928 	mov	r4,a
      0009C5 08               [12] 2929 	inc	r0
      0009C6 86 03            [24] 2930 	mov	ar3,@r0
      0009C8 E5 81            [12] 2931 	mov	a,sp
      0009CA 24 FB            [12] 2932 	add	a,#0xfb
      0009CC F8               [12] 2933 	mov	r0,a
      0009CD 74 42            [12] 2934 	mov	a,#0x42
      0009CF 26               [12] 2935 	add	a,@r0
      0009D0 FA               [12] 2936 	mov	r2,a
      0009D1 E4               [12] 2937 	clr	a
      0009D2 08               [12] 2938 	inc	r0
      0009D3 36               [12] 2939 	addc	a,@r0
      0009D4 FE               [12] 2940 	mov	r6,a
      0009D5 08               [12] 2941 	inc	r0
      0009D6 86 07            [24] 2942 	mov	ar7,@r0
      0009D8 8A 82            [24] 2943 	mov	dpl,r2
      0009DA 8E 83            [24] 2944 	mov	dph,r6
      0009DC 8F F0            [24] 2945 	mov	b,r7
      0009DE E4               [12] 2946 	clr	a
      0009DF 12r00r00         [24] 2947 	lcall	__gptrput
      0009E2 A3               [24] 2948 	inc	dptr
      0009E3 12r00r00         [24] 2949 	lcall	__gptrput
      0009E6 8D 82            [24] 2950 	mov	dpl,r5
      0009E8 8C 83            [24] 2951 	mov	dph,r4
      0009EA 8B F0            [24] 2952 	mov	b,r3
      0009EC 12r00r00         [24] 2953 	lcall	__gptrput
      0009EF A3               [24] 2954 	inc	dptr
      0009F0 12r00r00         [24] 2955 	lcall	__gptrput
                                   2956 ;	../../core/net/rime/rudolph2.c:323: c->flags &= ~FLAG_LAST_RECEIVED;
      0009F3 E5 81            [12] 2957 	mov	a,sp
      0009F5 24 FB            [12] 2958 	add	a,#0xfb
      0009F7 F8               [12] 2959 	mov	r0,a
      0009F8 74 48            [12] 2960 	mov	a,#0x48
      0009FA 26               [12] 2961 	add	a,@r0
      0009FB FD               [12] 2962 	mov	r5,a
      0009FC E4               [12] 2963 	clr	a
      0009FD 08               [12] 2964 	inc	r0
      0009FE 36               [12] 2965 	addc	a,@r0
      0009FF FE               [12] 2966 	mov	r6,a
      000A00 08               [12] 2967 	inc	r0
      000A01 86 07            [24] 2968 	mov	ar7,@r0
      000A03 8D 82            [24] 2969 	mov	dpl,r5
      000A05 8E 83            [24] 2970 	mov	dph,r6
      000A07 8F F0            [24] 2971 	mov	b,r7
      000A09 12r00r00         [24] 2972 	lcall	__gptrget
      000A0C FA               [12] 2973 	mov	r2,a
      000A0D 53 02 FD         [24] 2974 	anl	ar2,#0xfd
      000A10 8D 82            [24] 2975 	mov	dpl,r5
      000A12 8E 83            [24] 2976 	mov	dph,r6
      000A14 8F F0            [24] 2977 	mov	b,r7
      000A16 EA               [12] 2978 	mov	a,r2
      000A17 12r00r00         [24] 2979 	lcall	__gptrput
                                   2980 ;	../../core/net/rime/rudolph2.c:324: c->flags &= ~FLAG_LAST_SENT;
      000A1A 53 02 FE         [24] 2981 	anl	ar2,#0xfe
      000A1D 8D 82            [24] 2982 	mov	dpl,r5
      000A1F 8E 83            [24] 2983 	mov	dph,r6
      000A21 8F F0            [24] 2984 	mov	b,r7
      000A23 EA               [12] 2985 	mov	a,r2
      000A24 12r00r00         [24] 2986 	lcall	__gptrput
                                   2987 ;	../../core/net/rime/rudolph2.c:325: if(hdr->chunk != 0) {
      000A27 A8 81            [24] 2988 	mov	r0,sp
      000A29 18               [12] 2989 	dec	r0
      000A2A 18               [12] 2990 	dec	r0
      000A2B 74 04            [12] 2991 	mov	a,#0x04
      000A2D 26               [12] 2992 	add	a,@r0
      000A2E FD               [12] 2993 	mov	r5,a
      000A2F E4               [12] 2994 	clr	a
      000A30 08               [12] 2995 	inc	r0
      000A31 36               [12] 2996 	addc	a,@r0
      000A32 FE               [12] 2997 	mov	r6,a
      000A33 08               [12] 2998 	inc	r0
      000A34 86 07            [24] 2999 	mov	ar7,@r0
      000A36 8D 82            [24] 3000 	mov	dpl,r5
      000A38 8E 83            [24] 3001 	mov	dph,r6
      000A3A 8F F0            [24] 3002 	mov	b,r7
      000A3C 12r00r00         [24] 3003 	lcall	__gptrget
      000A3F FD               [12] 3004 	mov	r5,a
      000A40 A3               [24] 3005 	inc	dptr
      000A41 12r00r00         [24] 3006 	lcall	__gptrget
      000A44 4D               [12] 3007 	orl	a,r5
      000A45 60 13            [24] 3008 	jz	00109$
                                   3009 ;	../../core/net/rime/rudolph2.c:326: send_nack(c);
      000A47 E5 81            [12] 3010 	mov	a,sp
      000A49 24 FB            [12] 3011 	add	a,#0xfb
      000A4B F8               [12] 3012 	mov	r0,a
      000A4C 86 82            [24] 3013 	mov	dpl,@r0
      000A4E 08               [12] 3014 	inc	r0
      000A4F 86 83            [24] 3015 	mov	dph,@r0
      000A51 08               [12] 3016 	inc	r0
      000A52 86 F0            [24] 3017 	mov	b,@r0
      000A54 12r04r2E         [24] 3018 	lcall	_send_nack
      000A57 02r0Cr8B         [24] 3019 	ljmp	00132$
      000A5A                       3020 00109$:
                                   3021 ;	../../core/net/rime/rudolph2.c:328: packetbuf_hdrreduce(sizeof(struct rudolph2_hdr));
      000A5A 90 00 06         [24] 3022 	mov	dptr,#0x0006
      000A5D 12r00r00         [24] 3023 	lcall	_packetbuf_hdrreduce
                                   3024 ;	../../core/net/rime/rudolph2.c:329: write_data(c, 0, packetbuf_dataptr(), packetbuf_totlen());
      000A60 12r00r00         [24] 3025 	lcall	_packetbuf_totlen
      000A63 AE 82            [24] 3026 	mov	r6,dpl
      000A65 AF 83            [24] 3027 	mov	r7,dph
      000A67 8F 04            [24] 3028 	mov	ar4,r7
      000A69 C0 06            [24] 3029 	push	ar6
      000A6B C0 04            [24] 3030 	push	ar4
      000A6D 12r00r00         [24] 3031 	lcall	_packetbuf_dataptr
      000A70 AA 82            [24] 3032 	mov	r2,dpl
      000A72 AD 83            [24] 3033 	mov	r5,dph
      000A74 AF F0            [24] 3034 	mov	r7,b
      000A76 C0 02            [24] 3035 	push	ar2
      000A78 C0 05            [24] 3036 	push	ar5
      000A7A C0 07            [24] 3037 	push	ar7
      000A7C E4               [12] 3038 	clr	a
      000A7D C0 E0            [24] 3039 	push	acc
      000A7F C0 E0            [24] 3040 	push	acc
      000A81 E5 81            [12] 3041 	mov	a,sp
      000A83 24 F4            [12] 3042 	add	a,#0xf4
      000A85 F8               [12] 3043 	mov	r0,a
      000A86 86 82            [24] 3044 	mov	dpl,@r0
      000A88 08               [12] 3045 	inc	r0
      000A89 86 83            [24] 3046 	mov	dph,@r0
      000A8B 08               [12] 3047 	inc	r0
      000A8C 86 F0            [24] 3048 	mov	b,@r0
      000A8E 12r01rD3         [24] 3049 	lcall	_write_data
      000A91 E5 81            [12] 3050 	mov	a,sp
      000A93 24 F9            [12] 3051 	add	a,#0xf9
      000A95 F5 81            [12] 3052 	mov	sp,a
      000A97 02r0Cr8B         [24] 3053 	ljmp	00132$
      000A9A                       3054 00122$:
                                   3055 ;	../../core/net/rime/rudolph2.c:331: } else if(hdr->version == c->version) {
      000A9A EB               [12] 3056 	mov	a,r3
      000A9B B5 06 06         [24] 3057 	cjne	a,ar6,00197$
      000A9E EC               [12] 3058 	mov	a,r4
      000A9F B5 05 02         [24] 3059 	cjne	a,ar5,00197$
      000AA2 80 03            [24] 3060 	sjmp	00198$
      000AA4                       3061 00197$:
      000AA4 02r0Cr8B         [24] 3062 	ljmp	00132$
      000AA7                       3063 00198$:
                                   3064 ;	../../core/net/rime/rudolph2.c:336: if(hdr->chunk == c->rcv_nxt) {
      000AA7 A8 81            [24] 3065 	mov	r0,sp
      000AA9 18               [12] 3066 	dec	r0
      000AAA 18               [12] 3067 	dec	r0
      000AAB E5 81            [12] 3068 	mov	a,sp
      000AAD 24 F3            [12] 3069 	add	a,#0xf3
      000AAF F9               [12] 3070 	mov	r1,a
      000AB0 74 04            [12] 3071 	mov	a,#0x04
      000AB2 26               [12] 3072 	add	a,@r0
      000AB3 F7               [12] 3073 	mov	@r1,a
      000AB4 E4               [12] 3074 	clr	a
      000AB5 08               [12] 3075 	inc	r0
      000AB6 36               [12] 3076 	addc	a,@r0
      000AB7 09               [12] 3077 	inc	r1
      000AB8 F7               [12] 3078 	mov	@r1,a
      000AB9 08               [12] 3079 	inc	r0
      000ABA 09               [12] 3080 	inc	r1
      000ABB E6               [12] 3081 	mov	a,@r0
      000ABC F7               [12] 3082 	mov	@r1,a
      000ABD E5 81            [12] 3083 	mov	a,sp
      000ABF 24 F3            [12] 3084 	add	a,#0xf3
      000AC1 F8               [12] 3085 	mov	r0,a
      000AC2 86 82            [24] 3086 	mov	dpl,@r0
      000AC4 08               [12] 3087 	inc	r0
      000AC5 86 83            [24] 3088 	mov	dph,@r0
      000AC7 08               [12] 3089 	inc	r0
      000AC8 86 F0            [24] 3090 	mov	b,@r0
      000ACA 12r00r00         [24] 3091 	lcall	__gptrget
      000ACD FF               [12] 3092 	mov	r7,a
      000ACE A3               [24] 3093 	inc	dptr
      000ACF 12r00r00         [24] 3094 	lcall	__gptrget
      000AD2 FE               [12] 3095 	mov	r6,a
      000AD3 E5 81            [12] 3096 	mov	a,sp
      000AD5 24 FB            [12] 3097 	add	a,#0xfb
      000AD7 F8               [12] 3098 	mov	r0,a
      000AD8 74 42            [12] 3099 	mov	a,#0x42
      000ADA 26               [12] 3100 	add	a,@r0
      000ADB FB               [12] 3101 	mov	r3,a
      000ADC E4               [12] 3102 	clr	a
      000ADD 08               [12] 3103 	inc	r0
      000ADE 36               [12] 3104 	addc	a,@r0
      000ADF FA               [12] 3105 	mov	r2,a
      000AE0 08               [12] 3106 	inc	r0
      000AE1 86 04            [24] 3107 	mov	ar4,@r0
      000AE3 8B 82            [24] 3108 	mov	dpl,r3
      000AE5 8A 83            [24] 3109 	mov	dph,r2
      000AE7 8C F0            [24] 3110 	mov	b,r4
      000AE9 12r00r00         [24] 3111 	lcall	__gptrget
      000AEC FB               [12] 3112 	mov	r3,a
      000AED A3               [24] 3113 	inc	dptr
      000AEE 12r00r00         [24] 3114 	lcall	__gptrget
      000AF1 FC               [12] 3115 	mov	r4,a
      000AF2 EF               [12] 3116 	mov	a,r7
      000AF3 B5 03 06         [24] 3117 	cjne	a,ar3,00199$
      000AF6 EE               [12] 3118 	mov	a,r6
      000AF7 B5 04 02         [24] 3119 	cjne	a,ar4,00199$
      000AFA 80 03            [24] 3120 	sjmp	00200$
      000AFC                       3121 00199$:
      000AFC 02r0Cr74         [24] 3122 	ljmp	00117$
      000AFF                       3123 00200$:
                                   3124 ;	../../core/net/rime/rudolph2.c:338: packetbuf_hdrreduce(sizeof(struct rudolph2_hdr));
      000AFF 90 00 06         [24] 3125 	mov	dptr,#0x0006
      000B02 12r00r00         [24] 3126 	lcall	_packetbuf_hdrreduce
                                   3127 ;	../../core/net/rime/rudolph2.c:342: len = packetbuf_totlen();
      000B05 12r00r00         [24] 3128 	lcall	_packetbuf_totlen
      000B08 AA 82            [24] 3129 	mov	r2,dpl
      000B0A AF 83            [24] 3130 	mov	r7,dph
      000B0C 8A 04            [24] 3131 	mov	ar4,r2
      000B0E 8F 03            [24] 3132 	mov	ar3,r7
                                   3133 ;	../../core/net/rime/rudolph2.c:343: write_data(c, hdr->chunk, packetbuf_dataptr(), packetbuf_totlen());
      000B10 C0 04            [24] 3134 	push	ar4
      000B12 C0 03            [24] 3135 	push	ar3
      000B14 12r00r00         [24] 3136 	lcall	_packetbuf_totlen
      000B17 AD 82            [24] 3137 	mov	r5,dpl
      000B19 AE 83            [24] 3138 	mov	r6,dph
      000B1B D0 03            [24] 3139 	pop	ar3
      000B1D D0 04            [24] 3140 	pop	ar4
      000B1F E5 81            [12] 3141 	mov	a,sp
      000B21 24 F6            [12] 3142 	add	a,#0xf6
      000B23 F8               [12] 3143 	mov	r0,a
      000B24 A6 05            [24] 3144 	mov	@r0,ar5
      000B26 08               [12] 3145 	inc	r0
      000B27 A6 06            [24] 3146 	mov	@r0,ar6
      000B29 C0 04            [24] 3147 	push	ar4
      000B2B C0 03            [24] 3148 	push	ar3
      000B2D 12r00r00         [24] 3149 	lcall	_packetbuf_dataptr
      000B30 AA 82            [24] 3150 	mov	r2,dpl
      000B32 AE 83            [24] 3151 	mov	r6,dph
      000B34 AF F0            [24] 3152 	mov	r7,b
      000B36 D0 03            [24] 3153 	pop	ar3
      000B38 D0 04            [24] 3154 	pop	ar4
      000B3A E5 81            [12] 3155 	mov	a,sp
      000B3C 24 F8            [12] 3156 	add	a,#0xf8
      000B3E F8               [12] 3157 	mov	r0,a
      000B3F A6 02            [24] 3158 	mov	@r0,ar2
      000B41 08               [12] 3159 	inc	r0
      000B42 A6 06            [24] 3160 	mov	@r0,ar6
      000B44 08               [12] 3161 	inc	r0
      000B45 A6 07            [24] 3162 	mov	@r0,ar7
      000B47 E5 81            [12] 3163 	mov	a,sp
      000B49 24 F3            [12] 3164 	add	a,#0xf3
      000B4B F8               [12] 3165 	mov	r0,a
      000B4C 86 82            [24] 3166 	mov	dpl,@r0
      000B4E 08               [12] 3167 	inc	r0
      000B4F 86 83            [24] 3168 	mov	dph,@r0
      000B51 08               [12] 3169 	inc	r0
      000B52 86 F0            [24] 3170 	mov	b,@r0
      000B54 12r00r00         [24] 3171 	lcall	__gptrget
      000B57 FD               [12] 3172 	mov	r5,a
      000B58 A3               [24] 3173 	inc	dptr
      000B59 12r00r00         [24] 3174 	lcall	__gptrget
      000B5C FF               [12] 3175 	mov	r7,a
      000B5D C0 04            [24] 3176 	push	ar4
      000B5F C0 03            [24] 3177 	push	ar3
      000B61 E5 81            [12] 3178 	mov	a,sp
      000B63 24 F4            [12] 3179 	add	a,#0xf4
      000B65 F8               [12] 3180 	mov	r0,a
      000B66 E6               [12] 3181 	mov	a,@r0
      000B67 C0 E0            [24] 3182 	push	acc
      000B69 08               [12] 3183 	inc	r0
      000B6A E6               [12] 3184 	mov	a,@r0
      000B6B C0 E0            [24] 3185 	push	acc
      000B6D E5 81            [12] 3186 	mov	a,sp
      000B6F 24 F4            [12] 3187 	add	a,#0xf4
      000B71 F8               [12] 3188 	mov	r0,a
      000B72 E6               [12] 3189 	mov	a,@r0
      000B73 C0 E0            [24] 3190 	push	acc
      000B75 08               [12] 3191 	inc	r0
      000B76 E6               [12] 3192 	mov	a,@r0
      000B77 C0 E0            [24] 3193 	push	acc
      000B79 08               [12] 3194 	inc	r0
      000B7A E6               [12] 3195 	mov	a,@r0
      000B7B C0 E0            [24] 3196 	push	acc
      000B7D C0 05            [24] 3197 	push	ar5
      000B7F C0 07            [24] 3198 	push	ar7
      000B81 E5 81            [12] 3199 	mov	a,sp
      000B83 24 F2            [12] 3200 	add	a,#0xf2
      000B85 F8               [12] 3201 	mov	r0,a
      000B86 86 82            [24] 3202 	mov	dpl,@r0
      000B88 08               [12] 3203 	inc	r0
      000B89 86 83            [24] 3204 	mov	dph,@r0
      000B8B 08               [12] 3205 	inc	r0
      000B8C 86 F0            [24] 3206 	mov	b,@r0
      000B8E 12r01rD3         [24] 3207 	lcall	_write_data
      000B91 E5 81            [12] 3208 	mov	a,sp
      000B93 24 F9            [12] 3209 	add	a,#0xf9
      000B95 F5 81            [12] 3210 	mov	sp,a
      000B97 D0 03            [24] 3211 	pop	ar3
      000B99 D0 04            [24] 3212 	pop	ar4
                                   3213 ;	../../core/net/rime/rudolph2.c:344: c->rcv_nxt++;
      000B9B E5 81            [12] 3214 	mov	a,sp
      000B9D 24 FB            [12] 3215 	add	a,#0xfb
      000B9F F8               [12] 3216 	mov	r0,a
      000BA0 E5 81            [12] 3217 	mov	a,sp
      000BA2 24 F8            [12] 3218 	add	a,#0xf8
      000BA4 F9               [12] 3219 	mov	r1,a
      000BA5 74 42            [12] 3220 	mov	a,#0x42
      000BA7 26               [12] 3221 	add	a,@r0
      000BA8 F7               [12] 3222 	mov	@r1,a
      000BA9 E4               [12] 3223 	clr	a
      000BAA 08               [12] 3224 	inc	r0
      000BAB 36               [12] 3225 	addc	a,@r0
      000BAC 09               [12] 3226 	inc	r1
      000BAD F7               [12] 3227 	mov	@r1,a
      000BAE 08               [12] 3228 	inc	r0
      000BAF 09               [12] 3229 	inc	r1
      000BB0 E6               [12] 3230 	mov	a,@r0
      000BB1 F7               [12] 3231 	mov	@r1,a
      000BB2 E5 81            [12] 3232 	mov	a,sp
      000BB4 24 F8            [12] 3233 	add	a,#0xf8
      000BB6 F8               [12] 3234 	mov	r0,a
      000BB7 86 82            [24] 3235 	mov	dpl,@r0
      000BB9 08               [12] 3236 	inc	r0
      000BBA 86 83            [24] 3237 	mov	dph,@r0
      000BBC 08               [12] 3238 	inc	r0
      000BBD 86 F0            [24] 3239 	mov	b,@r0
      000BBF 12r00r00         [24] 3240 	lcall	__gptrget
      000BC2 FA               [12] 3241 	mov	r2,a
      000BC3 A3               [24] 3242 	inc	dptr
      000BC4 12r00r00         [24] 3243 	lcall	__gptrget
      000BC7 FF               [12] 3244 	mov	r7,a
      000BC8 0A               [12] 3245 	inc	r2
      000BC9 BA 00 01         [24] 3246 	cjne	r2,#0x00,00201$
      000BCC 0F               [12] 3247 	inc	r7
      000BCD                       3248 00201$:
      000BCD E5 81            [12] 3249 	mov	a,sp
      000BCF 24 F8            [12] 3250 	add	a,#0xf8
      000BD1 F8               [12] 3251 	mov	r0,a
      000BD2 86 82            [24] 3252 	mov	dpl,@r0
      000BD4 08               [12] 3253 	inc	r0
      000BD5 86 83            [24] 3254 	mov	dph,@r0
      000BD7 08               [12] 3255 	inc	r0
      000BD8 86 F0            [24] 3256 	mov	b,@r0
      000BDA EA               [12] 3257 	mov	a,r2
      000BDB 12r00r00         [24] 3258 	lcall	__gptrput
      000BDE A3               [24] 3259 	inc	dptr
      000BDF EF               [12] 3260 	mov	a,r7
      000BE0 12r00r00         [24] 3261 	lcall	__gptrput
                                   3262 ;	../../core/net/rime/rudolph2.c:345: if(len < RUDOLPH2_DATASIZE) {
      000BE3 C3               [12] 3263 	clr	c
      000BE4 EC               [12] 3264 	mov	a,r4
      000BE5 94 40            [12] 3265 	subb	a,#0x40
      000BE7 EB               [12] 3266 	mov	a,r3
      000BE8 64 80            [12] 3267 	xrl	a,#0x80
      000BEA 94 80            [12] 3268 	subb	a,#0x80
      000BEC 40 03            [24] 3269 	jc	00202$
      000BEE 02r0Cr8B         [24] 3270 	ljmp	00132$
      000BF1                       3271 00202$:
                                   3272 ;	../../core/net/rime/rudolph2.c:346: c->flags |= FLAG_LAST_RECEIVED;
      000BF1 E5 81            [12] 3273 	mov	a,sp
      000BF3 24 FB            [12] 3274 	add	a,#0xfb
      000BF5 F8               [12] 3275 	mov	r0,a
      000BF6 74 48            [12] 3276 	mov	a,#0x48
      000BF8 26               [12] 3277 	add	a,@r0
      000BF9 FD               [12] 3278 	mov	r5,a
      000BFA E4               [12] 3279 	clr	a
      000BFB 08               [12] 3280 	inc	r0
      000BFC 36               [12] 3281 	addc	a,@r0
      000BFD FE               [12] 3282 	mov	r6,a
      000BFE 08               [12] 3283 	inc	r0
      000BFF 86 07            [24] 3284 	mov	ar7,@r0
      000C01 8D 82            [24] 3285 	mov	dpl,r5
      000C03 8E 83            [24] 3286 	mov	dph,r6
      000C05 8F F0            [24] 3287 	mov	b,r7
      000C07 12r00r00         [24] 3288 	lcall	__gptrget
      000C0A FA               [12] 3289 	mov	r2,a
      000C0B 43 02 02         [24] 3290 	orl	ar2,#0x02
      000C0E 8D 82            [24] 3291 	mov	dpl,r5
      000C10 8E 83            [24] 3292 	mov	dph,r6
      000C12 8F F0            [24] 3293 	mov	b,r7
      000C14 EA               [12] 3294 	mov	a,r2
      000C15 12r00r00         [24] 3295 	lcall	__gptrput
                                   3296 ;	../../core/net/rime/rudolph2.c:347: send_data(c, RESEND_INTERVAL);
      000C18 E4               [12] 3297 	clr	a
      000C19 C0 E0            [24] 3298 	push	acc
      000C1B 04               [12] 3299 	inc	a
      000C1C C0 E0            [24] 3300 	push	acc
      000C1E E5 81            [12] 3301 	mov	a,sp
      000C20 24 F9            [12] 3302 	add	a,#0xf9
      000C22 F8               [12] 3303 	mov	r0,a
      000C23 86 82            [24] 3304 	mov	dpl,@r0
      000C25 08               [12] 3305 	inc	r0
      000C26 86 83            [24] 3306 	mov	dph,@r0
      000C28 08               [12] 3307 	inc	r0
      000C29 86 F0            [24] 3308 	mov	b,@r0
      000C2B 12r03rC3         [24] 3309 	lcall	_send_data
      000C2E 15 81            [12] 3310 	dec	sp
      000C30 15 81            [12] 3311 	dec	sp
                                   3312 ;	../../core/net/rime/rudolph2.c:348: ctimer_set(&c->t, RESEND_INTERVAL, timed_send, c);
      000C32 E5 81            [12] 3313 	mov	a,sp
      000C34 24 FB            [12] 3314 	add	a,#0xfb
      000C36 F8               [12] 3315 	mov	r0,a
      000C37 86 05            [24] 3316 	mov	ar5,@r0
      000C39 08               [12] 3317 	inc	r0
      000C3A 86 04            [24] 3318 	mov	ar4,@r0
      000C3C 08               [12] 3319 	inc	r0
      000C3D 86 03            [24] 3320 	mov	ar3,@r0
      000C3F E5 81            [12] 3321 	mov	a,sp
      000C41 24 FB            [12] 3322 	add	a,#0xfb
      000C43 F8               [12] 3323 	mov	r0,a
      000C44 74 2B            [12] 3324 	mov	a,#0x2b
      000C46 26               [12] 3325 	add	a,@r0
      000C47 FA               [12] 3326 	mov	r2,a
      000C48 E4               [12] 3327 	clr	a
      000C49 08               [12] 3328 	inc	r0
      000C4A 36               [12] 3329 	addc	a,@r0
      000C4B FE               [12] 3330 	mov	r6,a
      000C4C 08               [12] 3331 	inc	r0
      000C4D 86 07            [24] 3332 	mov	ar7,@r0
      000C4F C0 05            [24] 3333 	push	ar5
      000C51 C0 04            [24] 3334 	push	ar4
      000C53 C0 03            [24] 3335 	push	ar3
      000C55 74r3D            [12] 3336 	mov	a,#_timed_send
      000C57 C0 E0            [24] 3337 	push	acc
      000C59 74s05            [12] 3338 	mov	a,#(_timed_send >> 8)
      000C5B C0 E0            [24] 3339 	push	acc
      000C5D E4               [12] 3340 	clr	a
      000C5E C0 E0            [24] 3341 	push	acc
      000C60 04               [12] 3342 	inc	a
      000C61 C0 E0            [24] 3343 	push	acc
      000C63 8A 82            [24] 3344 	mov	dpl,r2
      000C65 8E 83            [24] 3345 	mov	dph,r6
      000C67 8F F0            [24] 3346 	mov	b,r7
      000C69 12r00r00         [24] 3347 	lcall	_ctimer_set
      000C6C E5 81            [12] 3348 	mov	a,sp
      000C6E 24 F9            [12] 3349 	add	a,#0xf9
      000C70 F5 81            [12] 3350 	mov	sp,a
      000C72 80 17            [24] 3351 	sjmp	00132$
      000C74                       3352 00117$:
                                   3353 ;	../../core/net/rime/rudolph2.c:350: } else if(hdr->chunk > c->rcv_nxt) {
      000C74 C3               [12] 3354 	clr	c
      000C75 EB               [12] 3355 	mov	a,r3
      000C76 9F               [12] 3356 	subb	a,r7
      000C77 EC               [12] 3357 	mov	a,r4
      000C78 9E               [12] 3358 	subb	a,r6
      000C79 50 10            [24] 3359 	jnc	00132$
                                   3360 ;	../../core/net/rime/rudolph2.c:354: send_nack(c);
      000C7B E5 81            [12] 3361 	mov	a,sp
      000C7D 24 FB            [12] 3362 	add	a,#0xfb
      000C7F F8               [12] 3363 	mov	r0,a
      000C80 86 82            [24] 3364 	mov	dpl,@r0
      000C82 08               [12] 3365 	inc	r0
      000C83 86 83            [24] 3366 	mov	dph,@r0
      000C85 08               [12] 3367 	inc	r0
      000C86 86 F0            [24] 3368 	mov	b,@r0
      000C88 12r04r2E         [24] 3369 	lcall	_send_nack
                                   3370 ;	../../core/net/rime/rudolph2.c:355: } else if(hdr->chunk < c->rcv_nxt) {
      000C8B                       3371 00132$:
                                   3372 ;	../../core/net/rime/rudolph2.c:361: }
      000C8B E5 81            [12] 3373 	mov	a,sp
      000C8D 24 F2            [12] 3374 	add	a,#0xf2
      000C8F F5 81            [12] 3375 	mov	sp,a
      000C91 22               [24] 3376 	ret
                                   3377 ;------------------------------------------------------------
                                   3378 ;Allocation info for local variables in function 'rudolph2_open'
                                   3379 ;------------------------------------------------------------
                                   3380 ;channel                   Allocated to stack - sp -3
                                   3381 ;cb                        Allocated to stack - sp -6
                                   3382 ;c                         Allocated to registers r5 r6 r7 
                                   3383 ;------------------------------------------------------------
                                   3384 ;	../../core/net/rime/rudolph2.c:366: rudolph2_open(struct rudolph2_conn *c, uint16_t channel,
                                   3385 ;	-----------------------------------------
                                   3386 ;	 function rudolph2_open
                                   3387 ;	-----------------------------------------
      000C92                       3388 _rudolph2_open:
      000C92 AD 82            [24] 3389 	mov	r5,dpl
      000C94 AE 83            [24] 3390 	mov	r6,dph
      000C96 AF F0            [24] 3391 	mov	r7,b
                                   3392 ;	../../core/net/rime/rudolph2.c:369: polite_open(&c->c, channel, &polite);
      000C98 C0 07            [24] 3393 	push	ar7
      000C9A C0 06            [24] 3394 	push	ar6
      000C9C C0 05            [24] 3395 	push	ar5
      000C9E 74r00            [12] 3396 	mov	a,#_polite
      000CA0 C0 E0            [24] 3397 	push	acc
      000CA2 74s00            [12] 3398 	mov	a,#(_polite >> 8)
      000CA4 C0 E0            [24] 3399 	push	acc
      000CA6 74 80            [12] 3400 	mov	a,#0x80
      000CA8 C0 E0            [24] 3401 	push	acc
      000CAA E5 81            [12] 3402 	mov	a,sp
      000CAC 24 F7            [12] 3403 	add	a,#0xf7
      000CAE F8               [12] 3404 	mov	r0,a
      000CAF E6               [12] 3405 	mov	a,@r0
      000CB0 C0 E0            [24] 3406 	push	acc
      000CB2 08               [12] 3407 	inc	r0
      000CB3 E6               [12] 3408 	mov	a,@r0
      000CB4 C0 E0            [24] 3409 	push	acc
      000CB6 8D 82            [24] 3410 	mov	dpl,r5
      000CB8 8E 83            [24] 3411 	mov	dph,r6
      000CBA 8F F0            [24] 3412 	mov	b,r7
      000CBC 12r00r00         [24] 3413 	lcall	_polite_open
      000CBF E5 81            [12] 3414 	mov	a,sp
      000CC1 24 FB            [12] 3415 	add	a,#0xfb
      000CC3 F5 81            [12] 3416 	mov	sp,a
      000CC5 D0 05            [24] 3417 	pop	ar5
      000CC7 D0 06            [24] 3418 	pop	ar6
      000CC9 D0 07            [24] 3419 	pop	ar7
                                   3420 ;	../../core/net/rime/rudolph2.c:370: c->cb = cb;
      000CCB 74 28            [12] 3421 	mov	a,#0x28
      000CCD 2D               [12] 3422 	add	a,r5
      000CCE FA               [12] 3423 	mov	r2,a
      000CCF E4               [12] 3424 	clr	a
      000CD0 3E               [12] 3425 	addc	a,r6
      000CD1 FB               [12] 3426 	mov	r3,a
      000CD2 8F 04            [24] 3427 	mov	ar4,r7
      000CD4 8A 82            [24] 3428 	mov	dpl,r2
      000CD6 8B 83            [24] 3429 	mov	dph,r3
      000CD8 8C F0            [24] 3430 	mov	b,r4
      000CDA E5 81            [12] 3431 	mov	a,sp
      000CDC 24 FA            [12] 3432 	add	a,#0xfa
      000CDE F8               [12] 3433 	mov	r0,a
      000CDF E6               [12] 3434 	mov	a,@r0
      000CE0 12r00r00         [24] 3435 	lcall	__gptrput
      000CE3 A3               [24] 3436 	inc	dptr
      000CE4 08               [12] 3437 	inc	r0
      000CE5 E6               [12] 3438 	mov	a,@r0
      000CE6 12r00r00         [24] 3439 	lcall	__gptrput
      000CE9 A3               [24] 3440 	inc	dptr
      000CEA 08               [12] 3441 	inc	r0
      000CEB E6               [12] 3442 	mov	a,@r0
      000CEC 12r00r00         [24] 3443 	lcall	__gptrput
                                   3444 ;	../../core/net/rime/rudolph2.c:371: c->version = 0;
      000CEF 74 44            [12] 3445 	mov	a,#0x44
      000CF1 2D               [12] 3446 	add	a,r5
      000CF2 FA               [12] 3447 	mov	r2,a
      000CF3 E4               [12] 3448 	clr	a
      000CF4 3E               [12] 3449 	addc	a,r6
      000CF5 FB               [12] 3450 	mov	r3,a
      000CF6 8F 04            [24] 3451 	mov	ar4,r7
      000CF8 8A 82            [24] 3452 	mov	dpl,r2
      000CFA 8B 83            [24] 3453 	mov	dph,r3
      000CFC 8C F0            [24] 3454 	mov	b,r4
      000CFE E4               [12] 3455 	clr	a
      000CFF 12r00r00         [24] 3456 	lcall	__gptrput
      000D02 A3               [24] 3457 	inc	dptr
      000D03 12r00r00         [24] 3458 	lcall	__gptrput
                                   3459 ;	../../core/net/rime/rudolph2.c:372: c->hops_from_base = HOPS_MAX;
      000D06 74 46            [12] 3460 	mov	a,#0x46
      000D08 2D               [12] 3461 	add	a,r5
      000D09 FD               [12] 3462 	mov	r5,a
      000D0A E4               [12] 3463 	clr	a
      000D0B 3E               [12] 3464 	addc	a,r6
      000D0C FE               [12] 3465 	mov	r6,a
      000D0D 8D 82            [24] 3466 	mov	dpl,r5
      000D0F 8E 83            [24] 3467 	mov	dph,r6
      000D11 8F F0            [24] 3468 	mov	b,r7
      000D13 74 40            [12] 3469 	mov	a,#0x40
                                   3470 ;	../../core/net/rime/rudolph2.c:373: }
      000D15 02r00r00         [24] 3471 	ljmp	__gptrput
                                   3472 ;------------------------------------------------------------
                                   3473 ;Allocation info for local variables in function 'rudolph2_close'
                                   3474 ;------------------------------------------------------------
                                   3475 ;c                         Allocated to registers r5 r6 r7 
                                   3476 ;------------------------------------------------------------
                                   3477 ;	../../core/net/rime/rudolph2.c:376: rudolph2_close(struct rudolph2_conn *c)
                                   3478 ;	-----------------------------------------
                                   3479 ;	 function rudolph2_close
                                   3480 ;	-----------------------------------------
      000D18                       3481 _rudolph2_close:
                                   3482 ;	../../core/net/rime/rudolph2.c:378: polite_close(&c->c);
                                   3483 ;	../../core/net/rime/rudolph2.c:379: }
      000D18 02r00r00         [24] 3484 	ljmp	_polite_close
                                   3485 ;------------------------------------------------------------
                                   3486 ;Allocation info for local variables in function 'rudolph2_send'
                                   3487 ;------------------------------------------------------------
                                   3488 ;send_interval             Allocated to stack - sp -8
                                   3489 ;c                         Allocated to stack - sp -4
                                   3490 ;len                       Allocated to stack - sp -1
                                   3491 ;sloc0                     Allocated to stack - sp -1
                                   3492 ;------------------------------------------------------------
                                   3493 ;	../../core/net/rime/rudolph2.c:382: rudolph2_send(struct rudolph2_conn *c, clock_time_t send_interval)
                                   3494 ;	-----------------------------------------
                                   3495 ;	 function rudolph2_send
                                   3496 ;	-----------------------------------------
      000D1B                       3497 _rudolph2_send:
      000D1B C0 82            [24] 3498 	push	dpl
      000D1D C0 83            [24] 3499 	push	dph
      000D1F C0 F0            [24] 3500 	push	b
      000D21 05 81            [12] 3501 	inc	sp
      000D23 05 81            [12] 3502 	inc	sp
                                   3503 ;	../../core/net/rime/rudolph2.c:386: c->hops_from_base = 0;
      000D25 E5 81            [12] 3504 	mov	a,sp
      000D27 24 FC            [12] 3505 	add	a,#0xfc
      000D29 F8               [12] 3506 	mov	r0,a
      000D2A 74 46            [12] 3507 	mov	a,#0x46
      000D2C 26               [12] 3508 	add	a,@r0
      000D2D FA               [12] 3509 	mov	r2,a
      000D2E E4               [12] 3510 	clr	a
      000D2F 08               [12] 3511 	inc	r0
      000D30 36               [12] 3512 	addc	a,@r0
      000D31 FB               [12] 3513 	mov	r3,a
      000D32 08               [12] 3514 	inc	r0
      000D33 86 04            [24] 3515 	mov	ar4,@r0
      000D35 8A 82            [24] 3516 	mov	dpl,r2
      000D37 8B 83            [24] 3517 	mov	dph,r3
      000D39 8C F0            [24] 3518 	mov	b,r4
      000D3B E4               [12] 3519 	clr	a
      000D3C 12r00r00         [24] 3520 	lcall	__gptrput
                                   3521 ;	../../core/net/rime/rudolph2.c:387: c->version++;
      000D3F E5 81            [12] 3522 	mov	a,sp
      000D41 24 FC            [12] 3523 	add	a,#0xfc
      000D43 F8               [12] 3524 	mov	r0,a
      000D44 74 44            [12] 3525 	mov	a,#0x44
      000D46 26               [12] 3526 	add	a,@r0
      000D47 FA               [12] 3527 	mov	r2,a
      000D48 E4               [12] 3528 	clr	a
      000D49 08               [12] 3529 	inc	r0
      000D4A 36               [12] 3530 	addc	a,@r0
      000D4B FB               [12] 3531 	mov	r3,a
      000D4C 08               [12] 3532 	inc	r0
      000D4D 86 04            [24] 3533 	mov	ar4,@r0
      000D4F 8A 82            [24] 3534 	mov	dpl,r2
      000D51 8B 83            [24] 3535 	mov	dph,r3
      000D53 8C F0            [24] 3536 	mov	b,r4
      000D55 12r00r00         [24] 3537 	lcall	__gptrget
      000D58 FE               [12] 3538 	mov	r6,a
      000D59 A3               [24] 3539 	inc	dptr
      000D5A 12r00r00         [24] 3540 	lcall	__gptrget
      000D5D FF               [12] 3541 	mov	r7,a
      000D5E 0E               [12] 3542 	inc	r6
      000D5F BE 00 01         [24] 3543 	cjne	r6,#0x00,00115$
      000D62 0F               [12] 3544 	inc	r7
      000D63                       3545 00115$:
      000D63 8A 82            [24] 3546 	mov	dpl,r2
      000D65 8B 83            [24] 3547 	mov	dph,r3
      000D67 8C F0            [24] 3548 	mov	b,r4
      000D69 EE               [12] 3549 	mov	a,r6
      000D6A 12r00r00         [24] 3550 	lcall	__gptrput
      000D6D A3               [24] 3551 	inc	dptr
      000D6E EF               [12] 3552 	mov	a,r7
      000D6F 12r00r00         [24] 3553 	lcall	__gptrput
                                   3554 ;	../../core/net/rime/rudolph2.c:388: c->snd_nxt = 0;
      000D72 E5 81            [12] 3555 	mov	a,sp
      000D74 24 FC            [12] 3556 	add	a,#0xfc
      000D76 F8               [12] 3557 	mov	r0,a
      000D77 74 40            [12] 3558 	mov	a,#0x40
      000D79 26               [12] 3559 	add	a,@r0
      000D7A FD               [12] 3560 	mov	r5,a
      000D7B E4               [12] 3561 	clr	a
      000D7C 08               [12] 3562 	inc	r0
      000D7D 36               [12] 3563 	addc	a,@r0
      000D7E FE               [12] 3564 	mov	r6,a
      000D7F 08               [12] 3565 	inc	r0
      000D80 86 07            [24] 3566 	mov	ar7,@r0
      000D82 8D 82            [24] 3567 	mov	dpl,r5
      000D84 8E 83            [24] 3568 	mov	dph,r6
      000D86 8F F0            [24] 3569 	mov	b,r7
      000D88 E4               [12] 3570 	clr	a
      000D89 12r00r00         [24] 3571 	lcall	__gptrput
      000D8C A3               [24] 3572 	inc	dptr
      000D8D 12r00r00         [24] 3573 	lcall	__gptrput
                                   3574 ;	../../core/net/rime/rudolph2.c:389: len = RUDOLPH2_DATASIZE;
      000D90 A8 81            [24] 3575 	mov	r0,sp
      000D92 18               [12] 3576 	dec	r0
      000D93 76 40            [12] 3577 	mov	@r0,#0x40
      000D95 08               [12] 3578 	inc	r0
      000D96 76 00            [12] 3579 	mov	@r0,#0x00
                                   3580 ;	../../core/net/rime/rudolph2.c:390: packetbuf_clear();
      000D98 12r00r00         [24] 3581 	lcall	_packetbuf_clear
                                   3582 ;	../../core/net/rime/rudolph2.c:391: for(c->rcv_nxt = 0; len == RUDOLPH2_DATASIZE; c->rcv_nxt++) {
      000D9B E5 81            [12] 3583 	mov	a,sp
      000D9D 24 FC            [12] 3584 	add	a,#0xfc
      000D9F F8               [12] 3585 	mov	r0,a
      000DA0 74 42            [12] 3586 	mov	a,#0x42
      000DA2 26               [12] 3587 	add	a,@r0
      000DA3 FB               [12] 3588 	mov	r3,a
      000DA4 E4               [12] 3589 	clr	a
      000DA5 08               [12] 3590 	inc	r0
      000DA6 36               [12] 3591 	addc	a,@r0
      000DA7 FC               [12] 3592 	mov	r4,a
      000DA8 08               [12] 3593 	inc	r0
      000DA9 86 05            [24] 3594 	mov	ar5,@r0
      000DAB 8B 82            [24] 3595 	mov	dpl,r3
      000DAD 8C 83            [24] 3596 	mov	dph,r4
      000DAF 8D F0            [24] 3597 	mov	b,r5
      000DB1 E4               [12] 3598 	clr	a
      000DB2 12r00r00         [24] 3599 	lcall	__gptrput
      000DB5 A3               [24] 3600 	inc	dptr
      000DB6 12r00r00         [24] 3601 	lcall	__gptrput
      000DB9                       3602 00103$:
      000DB9 A8 81            [24] 3603 	mov	r0,sp
      000DBB 18               [12] 3604 	dec	r0
      000DBC B6 40 06         [24] 3605 	cjne	@r0,#0x40,00116$
      000DBF 08               [12] 3606 	inc	r0
      000DC0 B6 00 02         [24] 3607 	cjne	@r0,#0x00,00116$
      000DC3 80 03            [24] 3608 	sjmp	00117$
      000DC5                       3609 00116$:
      000DC5 02r0Er5A         [24] 3610 	ljmp	00101$
      000DC8                       3611 00117$:
                                   3612 ;	../../core/net/rime/rudolph2.c:392: len = read_data(c, packetbuf_dataptr(), c->rcv_nxt);
      000DC8 E5 81            [12] 3613 	mov	a,sp
      000DCA 24 FC            [12] 3614 	add	a,#0xfc
      000DCC F8               [12] 3615 	mov	r0,a
      000DCD 74 42            [12] 3616 	mov	a,#0x42
      000DCF 26               [12] 3617 	add	a,@r0
      000DD0 FB               [12] 3618 	mov	r3,a
      000DD1 E4               [12] 3619 	clr	a
      000DD2 08               [12] 3620 	inc	r0
      000DD3 36               [12] 3621 	addc	a,@r0
      000DD4 FC               [12] 3622 	mov	r4,a
      000DD5 08               [12] 3623 	inc	r0
      000DD6 86 05            [24] 3624 	mov	ar5,@r0
      000DD8 8B 82            [24] 3625 	mov	dpl,r3
      000DDA 8C 83            [24] 3626 	mov	dph,r4
      000DDC 8D F0            [24] 3627 	mov	b,r5
      000DDE 12r00r00         [24] 3628 	lcall	__gptrget
      000DE1 FB               [12] 3629 	mov	r3,a
      000DE2 A3               [24] 3630 	inc	dptr
      000DE3 12r00r00         [24] 3631 	lcall	__gptrget
      000DE6 FF               [12] 3632 	mov	r7,a
      000DE7 C0 07            [24] 3633 	push	ar7
      000DE9 C0 03            [24] 3634 	push	ar3
      000DEB 12r00r00         [24] 3635 	lcall	_packetbuf_dataptr
      000DEE AA 82            [24] 3636 	mov	r2,dpl
      000DF0 AC 83            [24] 3637 	mov	r4,dph
      000DF2 AD F0            [24] 3638 	mov	r5,b
      000DF4 D0 03            [24] 3639 	pop	ar3
      000DF6 D0 07            [24] 3640 	pop	ar7
      000DF8 C0 03            [24] 3641 	push	ar3
      000DFA C0 07            [24] 3642 	push	ar7
      000DFC C0 02            [24] 3643 	push	ar2
      000DFE C0 04            [24] 3644 	push	ar4
      000E00 C0 05            [24] 3645 	push	ar5
      000E02 E5 81            [12] 3646 	mov	a,sp
      000E04 24 F7            [12] 3647 	add	a,#0xf7
      000E06 F8               [12] 3648 	mov	r0,a
      000E07 86 82            [24] 3649 	mov	dpl,@r0
      000E09 08               [12] 3650 	inc	r0
      000E0A 86 83            [24] 3651 	mov	dph,@r0
      000E0C 08               [12] 3652 	inc	r0
      000E0D 86 F0            [24] 3653 	mov	b,@r0
      000E0F 12r00r00         [24] 3654 	lcall	_read_data
      000E12 AC 82            [24] 3655 	mov	r4,dpl
      000E14 AD 83            [24] 3656 	mov	r5,dph
      000E16 E5 81            [12] 3657 	mov	a,sp
      000E18 24 FB            [12] 3658 	add	a,#0xfb
      000E1A F5 81            [12] 3659 	mov	sp,a
      000E1C A8 81            [24] 3660 	mov	r0,sp
      000E1E 18               [12] 3661 	dec	r0
      000E1F A6 04            [24] 3662 	mov	@r0,ar4
      000E21 08               [12] 3663 	inc	r0
      000E22 A6 05            [24] 3664 	mov	@r0,ar5
                                   3665 ;	../../core/net/rime/rudolph2.c:391: for(c->rcv_nxt = 0; len == RUDOLPH2_DATASIZE; c->rcv_nxt++) {
      000E24 E5 81            [12] 3666 	mov	a,sp
      000E26 24 FC            [12] 3667 	add	a,#0xfc
      000E28 F8               [12] 3668 	mov	r0,a
      000E29 74 42            [12] 3669 	mov	a,#0x42
      000E2B 26               [12] 3670 	add	a,@r0
      000E2C FB               [12] 3671 	mov	r3,a
      000E2D E4               [12] 3672 	clr	a
      000E2E 08               [12] 3673 	inc	r0
      000E2F 36               [12] 3674 	addc	a,@r0
      000E30 FC               [12] 3675 	mov	r4,a
      000E31 08               [12] 3676 	inc	r0
      000E32 86 05            [24] 3677 	mov	ar5,@r0
      000E34 8B 82            [24] 3678 	mov	dpl,r3
      000E36 8C 83            [24] 3679 	mov	dph,r4
      000E38 8D F0            [24] 3680 	mov	b,r5
      000E3A 12r00r00         [24] 3681 	lcall	__gptrget
      000E3D FA               [12] 3682 	mov	r2,a
      000E3E A3               [24] 3683 	inc	dptr
      000E3F 12r00r00         [24] 3684 	lcall	__gptrget
      000E42 FF               [12] 3685 	mov	r7,a
      000E43 0A               [12] 3686 	inc	r2
      000E44 BA 00 01         [24] 3687 	cjne	r2,#0x00,00118$
      000E47 0F               [12] 3688 	inc	r7
      000E48                       3689 00118$:
      000E48 8B 82            [24] 3690 	mov	dpl,r3
      000E4A 8C 83            [24] 3691 	mov	dph,r4
      000E4C 8D F0            [24] 3692 	mov	b,r5
      000E4E EA               [12] 3693 	mov	a,r2
      000E4F 12r00r00         [24] 3694 	lcall	__gptrput
      000E52 A3               [24] 3695 	inc	dptr
      000E53 EF               [12] 3696 	mov	a,r7
      000E54 12r00r00         [24] 3697 	lcall	__gptrput
      000E57 02r0DrB9         [24] 3698 	ljmp	00103$
      000E5A                       3699 00101$:
                                   3700 ;	../../core/net/rime/rudolph2.c:394: c->flags = FLAG_LAST_RECEIVED;
      000E5A E5 81            [12] 3701 	mov	a,sp
      000E5C 24 FC            [12] 3702 	add	a,#0xfc
      000E5E F8               [12] 3703 	mov	r0,a
      000E5F 74 48            [12] 3704 	mov	a,#0x48
      000E61 26               [12] 3705 	add	a,@r0
      000E62 FD               [12] 3706 	mov	r5,a
      000E63 E4               [12] 3707 	clr	a
      000E64 08               [12] 3708 	inc	r0
      000E65 36               [12] 3709 	addc	a,@r0
      000E66 FE               [12] 3710 	mov	r6,a
      000E67 08               [12] 3711 	inc	r0
      000E68 86 07            [24] 3712 	mov	ar7,@r0
      000E6A 8D 82            [24] 3713 	mov	dpl,r5
      000E6C 8E 83            [24] 3714 	mov	dph,r6
      000E6E 8F F0            [24] 3715 	mov	b,r7
      000E70 74 02            [12] 3716 	mov	a,#0x02
      000E72 12r00r00         [24] 3717 	lcall	__gptrput
                                   3718 ;	../../core/net/rime/rudolph2.c:396: send_data(c, SEND_INTERVAL);
      000E75 74 40            [12] 3719 	mov	a,#0x40
      000E77 C0 E0            [24] 3720 	push	acc
      000E79 E4               [12] 3721 	clr	a
      000E7A C0 E0            [24] 3722 	push	acc
      000E7C E5 81            [12] 3723 	mov	a,sp
      000E7E 24 FA            [12] 3724 	add	a,#0xfa
      000E80 F8               [12] 3725 	mov	r0,a
      000E81 86 82            [24] 3726 	mov	dpl,@r0
      000E83 08               [12] 3727 	inc	r0
      000E84 86 83            [24] 3728 	mov	dph,@r0
      000E86 08               [12] 3729 	inc	r0
      000E87 86 F0            [24] 3730 	mov	b,@r0
      000E89 12r03rC3         [24] 3731 	lcall	_send_data
      000E8C 15 81            [12] 3732 	dec	sp
      000E8E 15 81            [12] 3733 	dec	sp
                                   3734 ;	../../core/net/rime/rudolph2.c:397: ctimer_set(&c->t, SEND_INTERVAL, timed_send, c);
      000E90 E5 81            [12] 3735 	mov	a,sp
      000E92 24 FC            [12] 3736 	add	a,#0xfc
      000E94 F8               [12] 3737 	mov	r0,a
      000E95 86 05            [24] 3738 	mov	ar5,@r0
      000E97 08               [12] 3739 	inc	r0
      000E98 86 06            [24] 3740 	mov	ar6,@r0
      000E9A 08               [12] 3741 	inc	r0
      000E9B 86 07            [24] 3742 	mov	ar7,@r0
      000E9D E5 81            [12] 3743 	mov	a,sp
      000E9F 24 FC            [12] 3744 	add	a,#0xfc
      000EA1 F8               [12] 3745 	mov	r0,a
      000EA2 74 2B            [12] 3746 	mov	a,#0x2b
      000EA4 26               [12] 3747 	add	a,@r0
      000EA5 FA               [12] 3748 	mov	r2,a
      000EA6 E4               [12] 3749 	clr	a
      000EA7 08               [12] 3750 	inc	r0
      000EA8 36               [12] 3751 	addc	a,@r0
      000EA9 FB               [12] 3752 	mov	r3,a
      000EAA 08               [12] 3753 	inc	r0
      000EAB 86 04            [24] 3754 	mov	ar4,@r0
      000EAD C0 05            [24] 3755 	push	ar5
      000EAF C0 06            [24] 3756 	push	ar6
      000EB1 C0 07            [24] 3757 	push	ar7
      000EB3 74r3D            [12] 3758 	mov	a,#_timed_send
      000EB5 C0 E0            [24] 3759 	push	acc
      000EB7 74s05            [12] 3760 	mov	a,#(_timed_send >> 8)
      000EB9 C0 E0            [24] 3761 	push	acc
      000EBB 74 40            [12] 3762 	mov	a,#0x40
      000EBD C0 E0            [24] 3763 	push	acc
      000EBF E4               [12] 3764 	clr	a
      000EC0 C0 E0            [24] 3765 	push	acc
      000EC2 8A 82            [24] 3766 	mov	dpl,r2
      000EC4 8B 83            [24] 3767 	mov	dph,r3
      000EC6 8C F0            [24] 3768 	mov	b,r4
      000EC8 12r00r00         [24] 3769 	lcall	_ctimer_set
      000ECB E5 81            [12] 3770 	mov	a,sp
      000ECD 24 F9            [12] 3771 	add	a,#0xf9
      000ECF F5 81            [12] 3772 	mov	sp,a
                                   3773 ;	../../core/net/rime/rudolph2.c:398: }
      000ED1 E5 81            [12] 3774 	mov	a,sp
      000ED3 24 FB            [12] 3775 	add	a,#0xfb
      000ED5 F5 81            [12] 3776 	mov	sp,a
      000ED7 22               [24] 3777 	ret
                                   3778 ;------------------------------------------------------------
                                   3779 ;Allocation info for local variables in function 'rudolph2_stop'
                                   3780 ;------------------------------------------------------------
                                   3781 ;c                         Allocated to registers r5 r6 r7 
                                   3782 ;------------------------------------------------------------
                                   3783 ;	../../core/net/rime/rudolph2.c:401: rudolph2_stop(struct rudolph2_conn *c)
                                   3784 ;	-----------------------------------------
                                   3785 ;	 function rudolph2_stop
                                   3786 ;	-----------------------------------------
      000ED8                       3787 _rudolph2_stop:
                                   3788 ;	../../core/net/rime/rudolph2.c:403: polite_cancel(&c->c);
      000ED8 AD 82            [24] 3789 	mov	r5,dpl
      000EDA AE 83            [24] 3790 	mov	r6,dph
      000EDC AF F0            [24] 3791 	mov	r7,b
      000EDE C0 07            [24] 3792 	push	ar7
      000EE0 C0 06            [24] 3793 	push	ar6
      000EE2 C0 05            [24] 3794 	push	ar5
      000EE4 12r00r00         [24] 3795 	lcall	_polite_cancel
      000EE7 D0 05            [24] 3796 	pop	ar5
      000EE9 D0 06            [24] 3797 	pop	ar6
      000EEB D0 07            [24] 3798 	pop	ar7
                                   3799 ;	../../core/net/rime/rudolph2.c:404: c->flags |= FLAG_IS_STOPPED;
      000EED 74 48            [12] 3800 	mov	a,#0x48
      000EEF 2D               [12] 3801 	add	a,r5
      000EF0 FD               [12] 3802 	mov	r5,a
      000EF1 E4               [12] 3803 	clr	a
      000EF2 3E               [12] 3804 	addc	a,r6
      000EF3 FE               [12] 3805 	mov	r6,a
      000EF4 8D 82            [24] 3806 	mov	dpl,r5
      000EF6 8E 83            [24] 3807 	mov	dph,r6
      000EF8 8F F0            [24] 3808 	mov	b,r7
      000EFA 12r00r00         [24] 3809 	lcall	__gptrget
      000EFD FC               [12] 3810 	mov	r4,a
      000EFE 43 04 04         [24] 3811 	orl	ar4,#0x04
      000F01 8D 82            [24] 3812 	mov	dpl,r5
      000F03 8E 83            [24] 3813 	mov	dph,r6
      000F05 8F F0            [24] 3814 	mov	b,r7
      000F07 EC               [12] 3815 	mov	a,r4
                                   3816 ;	../../core/net/rime/rudolph2.c:405: }
      000F08 02r00r00         [24] 3817 	ljmp	__gptrput
                                   3818 	.area CSEG    (CODE)
                                   3819 	.area CONST   (CODE)
      000000                       3820 _polite:
      000000r3Ds07                 3821 	.byte _recv, (_recv >> 8)
      000002r3Bs05                 3822 	.byte _sent, (_sent >> 8)
      000004r3Cs05                 3823 	.byte _dropped, (_dropped >> 8)
                                   3824 	.area XINIT   (CODE)
                                   3825 	.area CABS    (ABS,CODE)
