                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module rudolph1
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _trickle_send
                                     12 	.globl _trickle_close
                                     13 	.globl _trickle_open
                                     14 	.globl _ipolite_send
                                     15 	.globl _ipolite_close
                                     16 	.globl _ipolite_open
                                     17 	.globl _packetbuf_hdralloc
                                     18 	.globl _packetbuf_set_datalen
                                     19 	.globl _packetbuf_hdrptr
                                     20 	.globl _packetbuf_dataptr
                                     21 	.globl _packetbuf_clear
                                     22 	.globl _ctimer_stop
                                     23 	.globl _ctimer_set
                                     24 	.globl _ACTIVE
                                     25 	.globl _TX_BYTE
                                     26 	.globl _RX_BYTE
                                     27 	.globl _ERR
                                     28 	.globl _FE
                                     29 	.globl _SLAVE
                                     30 	.globl _RE
                                     31 	.globl _MODE
                                     32 	.globl _T3OVFIF
                                     33 	.globl _T3CH0IF
                                     34 	.globl _T3CH1IF
                                     35 	.globl _T4OVFIF
                                     36 	.globl _T4CH0IF
                                     37 	.globl _T4CH1IF
                                     38 	.globl _OVFIM
                                     39 	.globl _B_0
                                     40 	.globl _B_1
                                     41 	.globl _B_2
                                     42 	.globl _B_3
                                     43 	.globl _B_4
                                     44 	.globl _B_5
                                     45 	.globl _B_6
                                     46 	.globl _B_7
                                     47 	.globl _P2IF
                                     48 	.globl _UTX0IF
                                     49 	.globl _UTX1IF
                                     50 	.globl _P1IF
                                     51 	.globl _WDTIF
                                     52 	.globl _ACC_0
                                     53 	.globl _ACC_1
                                     54 	.globl _ACC_2
                                     55 	.globl _ACC_3
                                     56 	.globl _ACC_4
                                     57 	.globl _ACC_5
                                     58 	.globl _ACC_6
                                     59 	.globl _ACC_7
                                     60 	.globl _P
                                     61 	.globl _F1
                                     62 	.globl _OV
                                     63 	.globl _RS0
                                     64 	.globl _RS1
                                     65 	.globl _F0
                                     66 	.globl _AC
                                     67 	.globl _CY
                                     68 	.globl _DMAIF
                                     69 	.globl _T1IF
                                     70 	.globl _T2IF
                                     71 	.globl _T3IF
                                     72 	.globl _T4IF
                                     73 	.globl _P0IF
                                     74 	.globl _STIF
                                     75 	.globl _DMAIE
                                     76 	.globl _T1IE
                                     77 	.globl _T2IE
                                     78 	.globl _T3IE
                                     79 	.globl _T4IE
                                     80 	.globl _P0IE
                                     81 	.globl _RFERRIE
                                     82 	.globl _ADCIE
                                     83 	.globl _URX0IE
                                     84 	.globl _URX1IE
                                     85 	.globl _ENCIE
                                     86 	.globl _STIE
                                     87 	.globl _EA
                                     88 	.globl _P2_0
                                     89 	.globl _P2_1
                                     90 	.globl _P2_2
                                     91 	.globl _P2_3
                                     92 	.globl _P2_4
                                     93 	.globl _P2_5
                                     94 	.globl _P2_6
                                     95 	.globl _P2_7
                                     96 	.globl _ENCIF_0
                                     97 	.globl _ENCIF_1
                                     98 	.globl _P1_0
                                     99 	.globl _P1_1
                                    100 	.globl _P1_2
                                    101 	.globl _P1_3
                                    102 	.globl _P1_4
                                    103 	.globl _P1_5
                                    104 	.globl _P1_6
                                    105 	.globl _P1_7
                                    106 	.globl _IT0
                                    107 	.globl _RFERRIF
                                    108 	.globl _IT1
                                    109 	.globl _URX0IF
                                    110 	.globl _ADCIF
                                    111 	.globl _URX1IF
                                    112 	.globl _P0_0
                                    113 	.globl _P0_1
                                    114 	.globl _P0_2
                                    115 	.globl _P0_3
                                    116 	.globl _P0_4
                                    117 	.globl _P0_5
                                    118 	.globl _P0_6
                                    119 	.globl _P0_7
                                    120 	.globl _WDCTL
                                    121 	.globl _U1GCR
                                    122 	.globl _U1UCR
                                    123 	.globl _U1BAUD
                                    124 	.globl _U1DBUF
                                    125 	.globl _U1CSR
                                    126 	.globl _U0GCR
                                    127 	.globl _U0UCR
                                    128 	.globl _U0BAUD
                                    129 	.globl _U0DBUF
                                    130 	.globl _U0CSR
                                    131 	.globl _TIMIF
                                    132 	.globl _T4CC1
                                    133 	.globl _T4CCTL1
                                    134 	.globl _T4CC0
                                    135 	.globl _T4CCTL0
                                    136 	.globl _T4CTL
                                    137 	.globl _T4CNT
                                    138 	.globl _T3CC1
                                    139 	.globl _T3CCTL1
                                    140 	.globl _T3CC0
                                    141 	.globl _T3CCTL0
                                    142 	.globl _T3CTL
                                    143 	.globl _T3CNT
                                    144 	.globl _T2MSEL
                                    145 	.globl _T2IRQM
                                    146 	.globl _T2MOVF2
                                    147 	.globl _T2MOVF1
                                    148 	.globl _T2MOVF0
                                    149 	.globl _T2M1
                                    150 	.globl _T2M0
                                    151 	.globl _T2IRQF
                                    152 	.globl _T2EVTCFG
                                    153 	.globl _T2CTRL
                                    154 	.globl _T1STAT
                                    155 	.globl _T1CCTL2
                                    156 	.globl _T1CCTL1
                                    157 	.globl _T1CCTL0
                                    158 	.globl _T1CTL
                                    159 	.globl _T1CNTH
                                    160 	.globl _T1CNTL
                                    161 	.globl _T1CC2H
                                    162 	.globl _T1CC2L
                                    163 	.globl _T1CC1H
                                    164 	.globl _T1CC1L
                                    165 	.globl _T1CC0H
                                    166 	.globl _T1CC0L
                                    167 	.globl _CLKCONSTA
                                    168 	.globl _CLKCONCMD
                                    169 	.globl _SLEEPSTA
                                    170 	.globl _SLEEPCMD
                                    171 	.globl _STLOAD
                                    172 	.globl _ST2
                                    173 	.globl _ST1
                                    174 	.globl _ST0
                                    175 	.globl _RFERRF
                                    176 	.globl _RFIRQF0
                                    177 	.globl _RFST
                                    178 	.globl _RFD
                                    179 	.globl _RFIRQF1
                                    180 	.globl _PSBANK
                                    181 	.globl _FMAP
                                    182 	.globl _MEMCTR
                                    183 	.globl __XPAGE
                                    184 	.globl _MPAGE
                                    185 	.globl _PMUX
                                    186 	.globl _P2DIR
                                    187 	.globl _P1DIR
                                    188 	.globl _P0DIR
                                    189 	.globl _P2INP
                                    190 	.globl _P1INP
                                    191 	.globl _P2SEL
                                    192 	.globl _P1SEL
                                    193 	.globl _P0SEL
                                    194 	.globl _APCFG
                                    195 	.globl _PERCFG
                                    196 	.globl _P0INP
                                    197 	.globl _P2IEN
                                    198 	.globl _P1IEN
                                    199 	.globl _P0IEN
                                    200 	.globl _PICTL
                                    201 	.globl _P2IFG
                                    202 	.globl _P1IFG
                                    203 	.globl _P0IFG
                                    204 	.globl _DMAREQ
                                    205 	.globl _DMAARM
                                    206 	.globl _DMA0CFGH
                                    207 	.globl _DMA0CFGL
                                    208 	.globl _DMA1CFGH
                                    209 	.globl _DMA1CFGL
                                    210 	.globl _DMAIRQ
                                    211 	.globl _ENCCS
                                    212 	.globl _ENCDO
                                    213 	.globl _ENCDI
                                    214 	.globl _RNDH
                                    215 	.globl _RNDL
                                    216 	.globl _ADCH
                                    217 	.globl _ADCL
                                    218 	.globl _ADCCON3
                                    219 	.globl _ADCCON2
                                    220 	.globl _ADCCON1
                                    221 	.globl _B
                                    222 	.globl _IRCON2
                                    223 	.globl _ACC
                                    224 	.globl _PSW
                                    225 	.globl _IRCON
                                    226 	.globl _IP1
                                    227 	.globl _IEN1
                                    228 	.globl _IP0
                                    229 	.globl _IEN0
                                    230 	.globl _P2
                                    231 	.globl _S1CON
                                    232 	.globl _IEN2
                                    233 	.globl _S0CON
                                    234 	.globl _DPS
                                    235 	.globl _P1
                                    236 	.globl _TCON
                                    237 	.globl _PCON
                                    238 	.globl _DPH1
                                    239 	.globl _DPL1
                                    240 	.globl _DPH0
                                    241 	.globl _DPL0
                                    242 	.globl _SP
                                    243 	.globl _P0
                                    244 	.globl _X_IEEE_ADDR
                                    245 	.globl _X_INFOPAGE
                                    246 	.globl _X_P2DIR
                                    247 	.globl _X_P1DIR
                                    248 	.globl _X_P0DIR
                                    249 	.globl _X_U1GCR
                                    250 	.globl _X_U1UCR
                                    251 	.globl _X_U1BAUD
                                    252 	.globl _X_U1DBUF
                                    253 	.globl _X_U1CSR
                                    254 	.globl _X_P2INP
                                    255 	.globl _X_P1INP
                                    256 	.globl _X_P2SEL
                                    257 	.globl _X_P1SEL
                                    258 	.globl _X_P0SEL
                                    259 	.globl _X_APCFG
                                    260 	.globl _X_PERCFG
                                    261 	.globl _X_T4CC1
                                    262 	.globl _X_T4CCTL1
                                    263 	.globl _X_T4CC0
                                    264 	.globl _X_T4CCTL0
                                    265 	.globl _X_T4CTL
                                    266 	.globl _X_T4CNT
                                    267 	.globl _X_RFIRQF0
                                    268 	.globl _X_T1CCTL2
                                    269 	.globl _X_T1CCTL1
                                    270 	.globl _X_T1CCTL0
                                    271 	.globl _X_T1CTL
                                    272 	.globl _X_T1CNTH
                                    273 	.globl _X_T1CNTL
                                    274 	.globl _X_RFST
                                    275 	.globl _X_T1CC2H
                                    276 	.globl _X_T1CC2L
                                    277 	.globl _X_T1CC1H
                                    278 	.globl _X_T1CC1L
                                    279 	.globl _X_T1CC0H
                                    280 	.globl _X_T1CC0L
                                    281 	.globl _X_RFD
                                    282 	.globl _X_TIMIF
                                    283 	.globl _X_DMAREQ
                                    284 	.globl _X_DMAARM
                                    285 	.globl _X_DMA0CFGH
                                    286 	.globl _X_DMA0CFGL
                                    287 	.globl _X_DMA1CFGH
                                    288 	.globl _X_DMA1CFGL
                                    289 	.globl _X_DMAIRQ
                                    290 	.globl _X_T3CC1
                                    291 	.globl _X_T3CCTL1
                                    292 	.globl _X_T3CC0
                                    293 	.globl _X_T3CCTL0
                                    294 	.globl _X_T3CTL
                                    295 	.globl _X_T3CNT
                                    296 	.globl _X_WDCTL
                                    297 	.globl _X_MEMCTR
                                    298 	.globl _X_CLKCONCMD
                                    299 	.globl _X_U0GCR
                                    300 	.globl _X_U0UCR
                                    301 	.globl _X_T2MSEL
                                    302 	.globl _X_U0BAUD
                                    303 	.globl _X_U0DBUF
                                    304 	.globl _X_RFERRF
                                    305 	.globl _X_SLEEPCMD
                                    306 	.globl _X_RNDH
                                    307 	.globl _X_RNDL
                                    308 	.globl _X_ADCH
                                    309 	.globl _X_ADCL
                                    310 	.globl _X_ADCCON3
                                    311 	.globl _X_ADCCON2
                                    312 	.globl _X_ADCCON1
                                    313 	.globl _X_ENCCS
                                    314 	.globl _X_ENCDO
                                    315 	.globl _X_ENCDI
                                    316 	.globl _X_T1STAT
                                    317 	.globl _X_PMUX
                                    318 	.globl _X_STLOAD
                                    319 	.globl _X_P2IEN
                                    320 	.globl _X_P0IEN
                                    321 	.globl _X_T2IRQM
                                    322 	.globl _X_T2MOVF2
                                    323 	.globl _X_T2MOVF1
                                    324 	.globl _X_T2MOVF0
                                    325 	.globl _X_T2M1
                                    326 	.globl _X_T2M0
                                    327 	.globl _X_T2IRQF
                                    328 	.globl _X_P2
                                    329 	.globl _X_PSBANK
                                    330 	.globl _X_FMAP
                                    331 	.globl _X_CLKCONSTA
                                    332 	.globl _X_SLEEPSTA
                                    333 	.globl _X_T2EVTCFG
                                    334 	.globl _X_ST2
                                    335 	.globl _X_ST1
                                    336 	.globl _X_ST0
                                    337 	.globl _X_T2CTRL
                                    338 	.globl _X__XPAGE
                                    339 	.globl _X_MPAGE
                                    340 	.globl _X_RFIRQF1
                                    341 	.globl _X_P1
                                    342 	.globl _X_P0INP
                                    343 	.globl _X_P1IEN
                                    344 	.globl _X_PICTL
                                    345 	.globl _X_P2IFG
                                    346 	.globl _X_P1IFG
                                    347 	.globl _X_P0IFG
                                    348 	.globl _X_U0CSR
                                    349 	.globl _X_P0
                                    350 	.globl _USBF5
                                    351 	.globl _USBF4
                                    352 	.globl _USBF3
                                    353 	.globl _USBF2
                                    354 	.globl _USBF1
                                    355 	.globl _USBF0
                                    356 	.globl _USBCNTH
                                    357 	.globl _USBCNTL
                                    358 	.globl _USBCNT0
                                    359 	.globl _USBCSOH
                                    360 	.globl _USBCSOL
                                    361 	.globl _USBMAXO
                                    362 	.globl _USBCSIH
                                    363 	.globl _USBCSIL
                                    364 	.globl _USBCS0
                                    365 	.globl _USBMAXI
                                    366 	.globl _USBCTRL
                                    367 	.globl _USBINDEX
                                    368 	.globl _USBFRMH
                                    369 	.globl _USBFRML
                                    370 	.globl _USBCIE
                                    371 	.globl _USBOIE
                                    372 	.globl _USBIIE
                                    373 	.globl _USBCIF
                                    374 	.globl _USBOIF
                                    375 	.globl _USBIIF
                                    376 	.globl _USBPOW
                                    377 	.globl _USBADDR
                                    378 	.globl _CSPT
                                    379 	.globl _CSPZ
                                    380 	.globl _CSPY
                                    381 	.globl _CSPX
                                    382 	.globl _CSPSTAT
                                    383 	.globl _CSPCTRL
                                    384 	.globl _CSPPROG23
                                    385 	.globl _CSPPROG22
                                    386 	.globl _CSPPROG21
                                    387 	.globl _CSPPROG20
                                    388 	.globl _CSPPROG19
                                    389 	.globl _CSPPROG18
                                    390 	.globl _CSPPROG17
                                    391 	.globl _CSPPROG16
                                    392 	.globl _CSPPROG15
                                    393 	.globl _CSPPROG14
                                    394 	.globl _CSPPROG13
                                    395 	.globl _CSPPROG12
                                    396 	.globl _CSPPROG11
                                    397 	.globl _CSPPROG10
                                    398 	.globl _CSPPROG9
                                    399 	.globl _CSPPROG8
                                    400 	.globl _CSPPROG7
                                    401 	.globl _CSPPROG6
                                    402 	.globl _CSPPROG5
                                    403 	.globl _CSPPROG4
                                    404 	.globl _CSPPROG3
                                    405 	.globl _CSPPROG2
                                    406 	.globl _CSPPROG1
                                    407 	.globl _CSPPROG0
                                    408 	.globl _RFC_OBS_CTRL2
                                    409 	.globl _RFC_OBS_CTRL1
                                    410 	.globl _RFC_OBS_CTRL0
                                    411 	.globl _TXFILTCFG
                                    412 	.globl _PTEST1
                                    413 	.globl _PTEST0
                                    414 	.globl _ATEST
                                    415 	.globl _DACTEST2
                                    416 	.globl _DACTEST1
                                    417 	.globl _DACTEST0
                                    418 	.globl _MDMTEST1
                                    419 	.globl _MDMTEST0
                                    420 	.globl _ADCTEST2
                                    421 	.globl _ADCTEST1
                                    422 	.globl _ADCTEST0
                                    423 	.globl _AGCCTRL3
                                    424 	.globl _AGCCTRL2
                                    425 	.globl _AGCCTRL1
                                    426 	.globl _AGCCTRL0
                                    427 	.globl _FSCAL3
                                    428 	.globl _FSCAL2
                                    429 	.globl _FSCAL1
                                    430 	.globl _FSCAL0
                                    431 	.globl _FSCTRL
                                    432 	.globl _RXCTRL
                                    433 	.globl _FREQEST
                                    434 	.globl _MDMCTRL1
                                    435 	.globl _MDMCTRL0
                                    436 	.globl _RFRND
                                    437 	.globl _RFERRM
                                    438 	.globl _RFIRQM1
                                    439 	.globl _RFIRQM0
                                    440 	.globl _TXLAST_PTR
                                    441 	.globl _TXFIRST_PTR
                                    442 	.globl _RXP1_PTR
                                    443 	.globl _RXLAST_PTR
                                    444 	.globl _RXFIRST_PTR
                                    445 	.globl _TXFIFOCNT
                                    446 	.globl _RXFIFOCNT
                                    447 	.globl _RXFIRST
                                    448 	.globl _RSSISTAT
                                    449 	.globl _RSSI
                                    450 	.globl _CCACTRL1
                                    451 	.globl _CCACTRL0
                                    452 	.globl _FSMCTRL
                                    453 	.globl _FIFOPCTRL
                                    454 	.globl _FSMSTAT1
                                    455 	.globl _FSMSTAT0
                                    456 	.globl _TXCTRL
                                    457 	.globl _TXPOWER
                                    458 	.globl _FREQCTRL
                                    459 	.globl _FREQTUNE
                                    460 	.globl _RXMASKCLR
                                    461 	.globl _RXMASKSET
                                    462 	.globl _RXENABLE
                                    463 	.globl _FRMCTRL1
                                    464 	.globl _FRMCTRL0
                                    465 	.globl _SRCEXTEN2
                                    466 	.globl _SRCEXTEN1
                                    467 	.globl _SRCEXTEN0
                                    468 	.globl _SRCSHORTEN2
                                    469 	.globl _SRCSHORTEN1
                                    470 	.globl _SRCSHORTEN0
                                    471 	.globl _SRCMATCH
                                    472 	.globl _FRMFILT1
                                    473 	.globl _FRMFILT0
                                    474 	.globl _SHORT_ADDR1
                                    475 	.globl _SHORT_ADDR0
                                    476 	.globl _PAN_ID1
                                    477 	.globl _PAN_ID0
                                    478 	.globl _EXT_ADDR7
                                    479 	.globl _EXT_ADDR6
                                    480 	.globl _EXT_ADDR5
                                    481 	.globl _EXT_ADDR4
                                    482 	.globl _EXT_ADDR3
                                    483 	.globl _EXT_ADDR2
                                    484 	.globl _EXT_ADDR1
                                    485 	.globl _EXT_ADDR0
                                    486 	.globl _SRCSHORTPENDEN2
                                    487 	.globl _SRCSHORTPENDEN1
                                    488 	.globl _SRCSHORTPENDEN0
                                    489 	.globl _SRCEXTPENDEN2
                                    490 	.globl _SRCEXTPENDEN1
                                    491 	.globl _SRCEXTPENDEN0
                                    492 	.globl _SRCRESINDEX
                                    493 	.globl _SRCRESMASK2
                                    494 	.globl _SRCRESMASK1
                                    495 	.globl _SRCRESMASK0
                                    496 	.globl _SRC_ADDR_TABLE
                                    497 	.globl _TXFIFO
                                    498 	.globl _RXFIFO
                                    499 	.globl _RFCORE_RAM
                                    500 	.globl _CMPCTL
                                    501 	.globl _OPAMPS
                                    502 	.globl _OPAMPC
                                    503 	.globl _STCV2
                                    504 	.globl _STCV1
                                    505 	.globl _STCV0
                                    506 	.globl _STCS
                                    507 	.globl _STCC
                                    508 	.globl _T1CC4H
                                    509 	.globl _T1CC4L
                                    510 	.globl _T1CC3H
                                    511 	.globl _T1CC3L
                                    512 	.globl _XX_T1CC2H
                                    513 	.globl _XX_T1CC2L
                                    514 	.globl _XX_T1CC1H
                                    515 	.globl _XX_T1CC1L
                                    516 	.globl _XX_T1CC0H
                                    517 	.globl _XX_T1CC0L
                                    518 	.globl _T1CCTL4
                                    519 	.globl _T1CCTL3
                                    520 	.globl _XX_T1CCTL2
                                    521 	.globl _XX_T1CCTL1
                                    522 	.globl _XX_T1CCTL0
                                    523 	.globl _CLD
                                    524 	.globl _IRCTL
                                    525 	.globl _CHIPINFO1
                                    526 	.globl _CHIPINFO0
                                    527 	.globl _FWDATA
                                    528 	.globl _FADDRH
                                    529 	.globl _FADDRL
                                    530 	.globl _FCTL
                                    531 	.globl _IVCTRL
                                    532 	.globl _BATTMON
                                    533 	.globl _SRCRC
                                    534 	.globl _DBGDATA
                                    535 	.globl _TESTREG0
                                    536 	.globl _CHIPID
                                    537 	.globl _CHVER
                                    538 	.globl _OBSSEL5
                                    539 	.globl _OBSSEL4
                                    540 	.globl _OBSSEL3
                                    541 	.globl _OBSSEL2
                                    542 	.globl _OBSSEL1
                                    543 	.globl _OBSSEL0
                                    544 	.globl _I2CIO
                                    545 	.globl _I2CWC
                                    546 	.globl _I2CADDR
                                    547 	.globl _I2CDATA
                                    548 	.globl _I2CSTAT
                                    549 	.globl _I2CCFG
                                    550 	.globl _OPAMPMC
                                    551 	.globl _MONMUX
                                    552 	.globl _rudolph1_open
                                    553 	.globl _rudolph1_close
                                    554 	.globl _rudolph1_send
                                    555 	.globl _rudolph1_stop
                                    556 ;--------------------------------------------------------
                                    557 ; special function registers
                                    558 ;--------------------------------------------------------
                                    559 	.area RSEG    (ABS,DATA)
      000000                        560 	.org 0x0000
                           000080   561 _P0	=	0x0080
                           000081   562 _SP	=	0x0081
                           000082   563 _DPL0	=	0x0082
                           000083   564 _DPH0	=	0x0083
                           000084   565 _DPL1	=	0x0084
                           000085   566 _DPH1	=	0x0085
                           000087   567 _PCON	=	0x0087
                           000088   568 _TCON	=	0x0088
                           000090   569 _P1	=	0x0090
                           000092   570 _DPS	=	0x0092
                           000098   571 _S0CON	=	0x0098
                           00009A   572 _IEN2	=	0x009a
                           00009B   573 _S1CON	=	0x009b
                           0000A0   574 _P2	=	0x00a0
                           0000A8   575 _IEN0	=	0x00a8
                           0000A9   576 _IP0	=	0x00a9
                           0000B8   577 _IEN1	=	0x00b8
                           0000B9   578 _IP1	=	0x00b9
                           0000C0   579 _IRCON	=	0x00c0
                           0000D0   580 _PSW	=	0x00d0
                           0000E0   581 _ACC	=	0x00e0
                           0000E8   582 _IRCON2	=	0x00e8
                           0000F0   583 _B	=	0x00f0
                           0000B4   584 _ADCCON1	=	0x00b4
                           0000B5   585 _ADCCON2	=	0x00b5
                           0000B6   586 _ADCCON3	=	0x00b6
                           0000BA   587 _ADCL	=	0x00ba
                           0000BB   588 _ADCH	=	0x00bb
                           0000BC   589 _RNDL	=	0x00bc
                           0000BD   590 _RNDH	=	0x00bd
                           0000B1   591 _ENCDI	=	0x00b1
                           0000B2   592 _ENCDO	=	0x00b2
                           0000B3   593 _ENCCS	=	0x00b3
                           0000D1   594 _DMAIRQ	=	0x00d1
                           0000D2   595 _DMA1CFGL	=	0x00d2
                           0000D3   596 _DMA1CFGH	=	0x00d3
                           0000D4   597 _DMA0CFGL	=	0x00d4
                           0000D5   598 _DMA0CFGH	=	0x00d5
                           0000D6   599 _DMAARM	=	0x00d6
                           0000D7   600 _DMAREQ	=	0x00d7
                           000089   601 _P0IFG	=	0x0089
                           00008A   602 _P1IFG	=	0x008a
                           00008B   603 _P2IFG	=	0x008b
                           00008C   604 _PICTL	=	0x008c
                           0000AB   605 _P0IEN	=	0x00ab
                           00008D   606 _P1IEN	=	0x008d
                           0000AC   607 _P2IEN	=	0x00ac
                           00008F   608 _P0INP	=	0x008f
                           0000F1   609 _PERCFG	=	0x00f1
                           0000F2   610 _APCFG	=	0x00f2
                           0000F3   611 _P0SEL	=	0x00f3
                           0000F4   612 _P1SEL	=	0x00f4
                           0000F5   613 _P2SEL	=	0x00f5
                           0000F6   614 _P1INP	=	0x00f6
                           0000F7   615 _P2INP	=	0x00f7
                           0000FD   616 _P0DIR	=	0x00fd
                           0000FE   617 _P1DIR	=	0x00fe
                           0000FF   618 _P2DIR	=	0x00ff
                           0000AE   619 _PMUX	=	0x00ae
                           000093   620 _MPAGE	=	0x0093
                           000093   621 __XPAGE	=	0x0093
                           0000C7   622 _MEMCTR	=	0x00c7
                           00009F   623 _FMAP	=	0x009f
                           00009F   624 _PSBANK	=	0x009f
                           000091   625 _RFIRQF1	=	0x0091
                           0000D9   626 _RFD	=	0x00d9
                           0000E1   627 _RFST	=	0x00e1
                           0000E9   628 _RFIRQF0	=	0x00e9
                           0000BF   629 _RFERRF	=	0x00bf
                           000095   630 _ST0	=	0x0095
                           000096   631 _ST1	=	0x0096
                           000097   632 _ST2	=	0x0097
                           0000AD   633 _STLOAD	=	0x00ad
                           0000BE   634 _SLEEPCMD	=	0x00be
                           00009D   635 _SLEEPSTA	=	0x009d
                           0000C6   636 _CLKCONCMD	=	0x00c6
                           00009E   637 _CLKCONSTA	=	0x009e
                           0000DA   638 _T1CC0L	=	0x00da
                           0000DB   639 _T1CC0H	=	0x00db
                           0000DC   640 _T1CC1L	=	0x00dc
                           0000DD   641 _T1CC1H	=	0x00dd
                           0000DE   642 _T1CC2L	=	0x00de
                           0000DF   643 _T1CC2H	=	0x00df
                           0000E2   644 _T1CNTL	=	0x00e2
                           0000E3   645 _T1CNTH	=	0x00e3
                           0000E4   646 _T1CTL	=	0x00e4
                           0000E5   647 _T1CCTL0	=	0x00e5
                           0000E6   648 _T1CCTL1	=	0x00e6
                           0000E7   649 _T1CCTL2	=	0x00e7
                           0000AF   650 _T1STAT	=	0x00af
                           000094   651 _T2CTRL	=	0x0094
                           00009C   652 _T2EVTCFG	=	0x009c
                           0000A1   653 _T2IRQF	=	0x00a1
                           0000A2   654 _T2M0	=	0x00a2
                           0000A3   655 _T2M1	=	0x00a3
                           0000A4   656 _T2MOVF0	=	0x00a4
                           0000A5   657 _T2MOVF1	=	0x00a5
                           0000A6   658 _T2MOVF2	=	0x00a6
                           0000A7   659 _T2IRQM	=	0x00a7
                           0000C3   660 _T2MSEL	=	0x00c3
                           0000CA   661 _T3CNT	=	0x00ca
                           0000CB   662 _T3CTL	=	0x00cb
                           0000CC   663 _T3CCTL0	=	0x00cc
                           0000CD   664 _T3CC0	=	0x00cd
                           0000CE   665 _T3CCTL1	=	0x00ce
                           0000CF   666 _T3CC1	=	0x00cf
                           0000EA   667 _T4CNT	=	0x00ea
                           0000EB   668 _T4CTL	=	0x00eb
                           0000EC   669 _T4CCTL0	=	0x00ec
                           0000ED   670 _T4CC0	=	0x00ed
                           0000EE   671 _T4CCTL1	=	0x00ee
                           0000EF   672 _T4CC1	=	0x00ef
                           0000D8   673 _TIMIF	=	0x00d8
                           000086   674 _U0CSR	=	0x0086
                           0000C1   675 _U0DBUF	=	0x00c1
                           0000C2   676 _U0BAUD	=	0x00c2
                           0000C4   677 _U0UCR	=	0x00c4
                           0000C5   678 _U0GCR	=	0x00c5
                           0000F8   679 _U1CSR	=	0x00f8
                           0000F9   680 _U1DBUF	=	0x00f9
                           0000FA   681 _U1BAUD	=	0x00fa
                           0000FB   682 _U1UCR	=	0x00fb
                           0000FC   683 _U1GCR	=	0x00fc
                           0000C9   684 _WDCTL	=	0x00c9
                                    685 ;--------------------------------------------------------
                                    686 ; special function bits
                                    687 ;--------------------------------------------------------
                                    688 	.area RSEG    (ABS,DATA)
      000000                        689 	.org 0x0000
                           000087   690 _P0_7	=	0x0087
                           000086   691 _P0_6	=	0x0086
                           000085   692 _P0_5	=	0x0085
                           000084   693 _P0_4	=	0x0084
                           000083   694 _P0_3	=	0x0083
                           000082   695 _P0_2	=	0x0082
                           000081   696 _P0_1	=	0x0081
                           000080   697 _P0_0	=	0x0080
                           00008F   698 _URX1IF	=	0x008f
                           00008D   699 _ADCIF	=	0x008d
                           00008B   700 _URX0IF	=	0x008b
                           00008A   701 _IT1	=	0x008a
                           000089   702 _RFERRIF	=	0x0089
                           000088   703 _IT0	=	0x0088
                           000097   704 _P1_7	=	0x0097
                           000096   705 _P1_6	=	0x0096
                           000095   706 _P1_5	=	0x0095
                           000094   707 _P1_4	=	0x0094
                           000093   708 _P1_3	=	0x0093
                           000092   709 _P1_2	=	0x0092
                           000091   710 _P1_1	=	0x0091
                           000090   711 _P1_0	=	0x0090
                           000099   712 _ENCIF_1	=	0x0099
                           000098   713 _ENCIF_0	=	0x0098
                           0000A7   714 _P2_7	=	0x00a7
                           0000A6   715 _P2_6	=	0x00a6
                           0000A5   716 _P2_5	=	0x00a5
                           0000A4   717 _P2_4	=	0x00a4
                           0000A3   718 _P2_3	=	0x00a3
                           0000A2   719 _P2_2	=	0x00a2
                           0000A1   720 _P2_1	=	0x00a1
                           0000A0   721 _P2_0	=	0x00a0
                           0000AF   722 _EA	=	0x00af
                           0000AD   723 _STIE	=	0x00ad
                           0000AC   724 _ENCIE	=	0x00ac
                           0000AB   725 _URX1IE	=	0x00ab
                           0000AA   726 _URX0IE	=	0x00aa
                           0000A9   727 _ADCIE	=	0x00a9
                           0000A8   728 _RFERRIE	=	0x00a8
                           0000BD   729 _P0IE	=	0x00bd
                           0000BC   730 _T4IE	=	0x00bc
                           0000BB   731 _T3IE	=	0x00bb
                           0000BA   732 _T2IE	=	0x00ba
                           0000B9   733 _T1IE	=	0x00b9
                           0000B8   734 _DMAIE	=	0x00b8
                           0000C7   735 _STIF	=	0x00c7
                           0000C5   736 _P0IF	=	0x00c5
                           0000C4   737 _T4IF	=	0x00c4
                           0000C3   738 _T3IF	=	0x00c3
                           0000C2   739 _T2IF	=	0x00c2
                           0000C1   740 _T1IF	=	0x00c1
                           0000C0   741 _DMAIF	=	0x00c0
                           0000D7   742 _CY	=	0x00d7
                           0000D6   743 _AC	=	0x00d6
                           0000D5   744 _F0	=	0x00d5
                           0000D4   745 _RS1	=	0x00d4
                           0000D3   746 _RS0	=	0x00d3
                           0000D2   747 _OV	=	0x00d2
                           0000D1   748 _F1	=	0x00d1
                           0000D0   749 _P	=	0x00d0
                           0000E7   750 _ACC_7	=	0x00e7
                           0000E6   751 _ACC_6	=	0x00e6
                           0000E5   752 _ACC_5	=	0x00e5
                           0000E4   753 _ACC_4	=	0x00e4
                           0000E3   754 _ACC_3	=	0x00e3
                           0000E2   755 _ACC_2	=	0x00e2
                           0000E1   756 _ACC_1	=	0x00e1
                           0000E0   757 _ACC_0	=	0x00e0
                           0000EC   758 _WDTIF	=	0x00ec
                           0000EB   759 _P1IF	=	0x00eb
                           0000EA   760 _UTX1IF	=	0x00ea
                           0000E9   761 _UTX0IF	=	0x00e9
                           0000E8   762 _P2IF	=	0x00e8
                           0000F7   763 _B_7	=	0x00f7
                           0000F6   764 _B_6	=	0x00f6
                           0000F5   765 _B_5	=	0x00f5
                           0000F4   766 _B_4	=	0x00f4
                           0000F3   767 _B_3	=	0x00f3
                           0000F2   768 _B_2	=	0x00f2
                           0000F1   769 _B_1	=	0x00f1
                           0000F0   770 _B_0	=	0x00f0
                           0000DE   771 _OVFIM	=	0x00de
                           0000DD   772 _T4CH1IF	=	0x00dd
                           0000DC   773 _T4CH0IF	=	0x00dc
                           0000DB   774 _T4OVFIF	=	0x00db
                           0000DA   775 _T3CH1IF	=	0x00da
                           0000D9   776 _T3CH0IF	=	0x00d9
                           0000D8   777 _T3OVFIF	=	0x00d8
                           0000FF   778 _MODE	=	0x00ff
                           0000FE   779 _RE	=	0x00fe
                           0000FD   780 _SLAVE	=	0x00fd
                           0000FC   781 _FE	=	0x00fc
                           0000FB   782 _ERR	=	0x00fb
                           0000FA   783 _RX_BYTE	=	0x00fa
                           0000F9   784 _TX_BYTE	=	0x00f9
                           0000F8   785 _ACTIVE	=	0x00f8
                                    786 ;--------------------------------------------------------
                                    787 ; overlayable register banks
                                    788 ;--------------------------------------------------------
                                    789 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        790 	.ds 8
                                    791 ;--------------------------------------------------------
                                    792 ; internal ram data
                                    793 ;--------------------------------------------------------
                                    794 	.area DSEG    (DATA)
                                    795 ;--------------------------------------------------------
                                    796 ; overlayable items in internal ram 
                                    797 ;--------------------------------------------------------
                                    798 ;--------------------------------------------------------
                                    799 ; indirectly addressable internal ram data
                                    800 ;--------------------------------------------------------
                                    801 	.area ISEG    (DATA)
                                    802 ;--------------------------------------------------------
                                    803 ; absolute internal ram data
                                    804 ;--------------------------------------------------------
                                    805 	.area IABS    (ABS,DATA)
                                    806 	.area IABS    (ABS,DATA)
                                    807 ;--------------------------------------------------------
                                    808 ; bit data
                                    809 ;--------------------------------------------------------
                                    810 	.area BSEG    (BIT)
                                    811 ;--------------------------------------------------------
                                    812 ; paged external ram data
                                    813 ;--------------------------------------------------------
                                    814 	.area PSEG    (PAG,XDATA)
                                    815 ;--------------------------------------------------------
                                    816 ; external ram data
                                    817 ;--------------------------------------------------------
                                    818 	.area XSEG    (XDATA)
                           0061A6   819 _MONMUX	=	0x61a6
                           0061A6   820 _OPAMPMC	=	0x61a6
                           006230   821 _I2CCFG	=	0x6230
                           006231   822 _I2CSTAT	=	0x6231
                           006232   823 _I2CDATA	=	0x6232
                           006233   824 _I2CADDR	=	0x6233
                           006234   825 _I2CWC	=	0x6234
                           006235   826 _I2CIO	=	0x6235
                           006243   827 _OBSSEL0	=	0x6243
                           006244   828 _OBSSEL1	=	0x6244
                           006245   829 _OBSSEL2	=	0x6245
                           006246   830 _OBSSEL3	=	0x6246
                           006247   831 _OBSSEL4	=	0x6247
                           006248   832 _OBSSEL5	=	0x6248
                           006249   833 _CHVER	=	0x6249
                           00624A   834 _CHIPID	=	0x624a
                           00624B   835 _TESTREG0	=	0x624b
                           006260   836 _DBGDATA	=	0x6260
                           006262   837 _SRCRC	=	0x6262
                           006264   838 _BATTMON	=	0x6264
                           006265   839 _IVCTRL	=	0x6265
                           006270   840 _FCTL	=	0x6270
                           006271   841 _FADDRL	=	0x6271
                           006272   842 _FADDRH	=	0x6272
                           006273   843 _FWDATA	=	0x6273
                           006276   844 _CHIPINFO0	=	0x6276
                           006277   845 _CHIPINFO1	=	0x6277
                           006281   846 _IRCTL	=	0x6281
                           006290   847 _CLD	=	0x6290
                           0062A0   848 _XX_T1CCTL0	=	0x62a0
                           0062A1   849 _XX_T1CCTL1	=	0x62a1
                           0062A2   850 _XX_T1CCTL2	=	0x62a2
                           0062A3   851 _T1CCTL3	=	0x62a3
                           0062A4   852 _T1CCTL4	=	0x62a4
                           0062A6   853 _XX_T1CC0L	=	0x62a6
                           0062A7   854 _XX_T1CC0H	=	0x62a7
                           0062A8   855 _XX_T1CC1L	=	0x62a8
                           0062A9   856 _XX_T1CC1H	=	0x62a9
                           0062AA   857 _XX_T1CC2L	=	0x62aa
                           0062AB   858 _XX_T1CC2H	=	0x62ab
                           0062AC   859 _T1CC3L	=	0x62ac
                           0062AD   860 _T1CC3H	=	0x62ad
                           0062AE   861 _T1CC4L	=	0x62ae
                           0062AF   862 _T1CC4H	=	0x62af
                           0062B0   863 _STCC	=	0x62b0
                           0062B1   864 _STCS	=	0x62b1
                           0062B2   865 _STCV0	=	0x62b2
                           0062B3   866 _STCV1	=	0x62b3
                           0062B4   867 _STCV2	=	0x62b4
                           0062C0   868 _OPAMPC	=	0x62c0
                           0062C1   869 _OPAMPS	=	0x62c1
                           0062D0   870 _CMPCTL	=	0x62d0
                           006000   871 _RFCORE_RAM	=	0x6000
                           006000   872 _RXFIFO	=	0x6000
                           006080   873 _TXFIFO	=	0x6080
                           006100   874 _SRC_ADDR_TABLE	=	0x6100
                           006160   875 _SRCRESMASK0	=	0x6160
                           006161   876 _SRCRESMASK1	=	0x6161
                           006162   877 _SRCRESMASK2	=	0x6162
                           006163   878 _SRCRESINDEX	=	0x6163
                           006164   879 _SRCEXTPENDEN0	=	0x6164
                           006165   880 _SRCEXTPENDEN1	=	0x6165
                           006166   881 _SRCEXTPENDEN2	=	0x6166
                           006167   882 _SRCSHORTPENDEN0	=	0x6167
                           006168   883 _SRCSHORTPENDEN1	=	0x6168
                           006169   884 _SRCSHORTPENDEN2	=	0x6169
                           00616A   885 _EXT_ADDR0	=	0x616a
                           00616B   886 _EXT_ADDR1	=	0x616b
                           00616C   887 _EXT_ADDR2	=	0x616c
                           00616D   888 _EXT_ADDR3	=	0x616d
                           00616E   889 _EXT_ADDR4	=	0x616e
                           00616F   890 _EXT_ADDR5	=	0x616f
                           006170   891 _EXT_ADDR6	=	0x6170
                           006171   892 _EXT_ADDR7	=	0x6171
                           006172   893 _PAN_ID0	=	0x6172
                           006173   894 _PAN_ID1	=	0x6173
                           006174   895 _SHORT_ADDR0	=	0x6174
                           006175   896 _SHORT_ADDR1	=	0x6175
                           006180   897 _FRMFILT0	=	0x6180
                           006181   898 _FRMFILT1	=	0x6181
                           006182   899 _SRCMATCH	=	0x6182
                           006183   900 _SRCSHORTEN0	=	0x6183
                           006184   901 _SRCSHORTEN1	=	0x6184
                           006185   902 _SRCSHORTEN2	=	0x6185
                           006186   903 _SRCEXTEN0	=	0x6186
                           006187   904 _SRCEXTEN1	=	0x6187
                           006188   905 _SRCEXTEN2	=	0x6188
                           006189   906 _FRMCTRL0	=	0x6189
                           00618A   907 _FRMCTRL1	=	0x618a
                           00618B   908 _RXENABLE	=	0x618b
                           00618C   909 _RXMASKSET	=	0x618c
                           00618D   910 _RXMASKCLR	=	0x618d
                           00618E   911 _FREQTUNE	=	0x618e
                           00618F   912 _FREQCTRL	=	0x618f
                           006190   913 _TXPOWER	=	0x6190
                           006191   914 _TXCTRL	=	0x6191
                           006192   915 _FSMSTAT0	=	0x6192
                           006193   916 _FSMSTAT1	=	0x6193
                           006194   917 _FIFOPCTRL	=	0x6194
                           006195   918 _FSMCTRL	=	0x6195
                           006196   919 _CCACTRL0	=	0x6196
                           006197   920 _CCACTRL1	=	0x6197
                           006198   921 _RSSI	=	0x6198
                           006199   922 _RSSISTAT	=	0x6199
                           00619A   923 _RXFIRST	=	0x619a
                           00619B   924 _RXFIFOCNT	=	0x619b
                           00619C   925 _TXFIFOCNT	=	0x619c
                           00619D   926 _RXFIRST_PTR	=	0x619d
                           00619E   927 _RXLAST_PTR	=	0x619e
                           00619F   928 _RXP1_PTR	=	0x619f
                           0061A1   929 _TXFIRST_PTR	=	0x61a1
                           0061A2   930 _TXLAST_PTR	=	0x61a2
                           0061A3   931 _RFIRQM0	=	0x61a3
                           0061A4   932 _RFIRQM1	=	0x61a4
                           0061A5   933 _RFERRM	=	0x61a5
                           0061A7   934 _RFRND	=	0x61a7
                           0061A8   935 _MDMCTRL0	=	0x61a8
                           0061A9   936 _MDMCTRL1	=	0x61a9
                           0061AA   937 _FREQEST	=	0x61aa
                           0061AB   938 _RXCTRL	=	0x61ab
                           0061AC   939 _FSCTRL	=	0x61ac
                           0061AD   940 _FSCAL0	=	0x61ad
                           0061AE   941 _FSCAL1	=	0x61ae
                           0061AF   942 _FSCAL2	=	0x61af
                           0061B0   943 _FSCAL3	=	0x61b0
                           0061B1   944 _AGCCTRL0	=	0x61b1
                           0061B2   945 _AGCCTRL1	=	0x61b2
                           0061B3   946 _AGCCTRL2	=	0x61b3
                           0061B4   947 _AGCCTRL3	=	0x61b4
                           0061B5   948 _ADCTEST0	=	0x61b5
                           0061B6   949 _ADCTEST1	=	0x61b6
                           0061B7   950 _ADCTEST2	=	0x61b7
                           0061B8   951 _MDMTEST0	=	0x61b8
                           0061B9   952 _MDMTEST1	=	0x61b9
                           0061BA   953 _DACTEST0	=	0x61ba
                           0061BB   954 _DACTEST1	=	0x61bb
                           0061BC   955 _DACTEST2	=	0x61bc
                           0061BD   956 _ATEST	=	0x61bd
                           0061BE   957 _PTEST0	=	0x61be
                           0061BF   958 _PTEST1	=	0x61bf
                           0061FA   959 _TXFILTCFG	=	0x61fa
                           0061EB   960 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   961 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   962 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   963 _CSPPROG0	=	0x61c0
                           0061C1   964 _CSPPROG1	=	0x61c1
                           0061C2   965 _CSPPROG2	=	0x61c2
                           0061C3   966 _CSPPROG3	=	0x61c3
                           0061C4   967 _CSPPROG4	=	0x61c4
                           0061C5   968 _CSPPROG5	=	0x61c5
                           0061C6   969 _CSPPROG6	=	0x61c6
                           0061C7   970 _CSPPROG7	=	0x61c7
                           0061C8   971 _CSPPROG8	=	0x61c8
                           0061C9   972 _CSPPROG9	=	0x61c9
                           0061CA   973 _CSPPROG10	=	0x61ca
                           0061CB   974 _CSPPROG11	=	0x61cb
                           0061CC   975 _CSPPROG12	=	0x61cc
                           0061CD   976 _CSPPROG13	=	0x61cd
                           0061CE   977 _CSPPROG14	=	0x61ce
                           0061CF   978 _CSPPROG15	=	0x61cf
                           0061D0   979 _CSPPROG16	=	0x61d0
                           0061D1   980 _CSPPROG17	=	0x61d1
                           0061D2   981 _CSPPROG18	=	0x61d2
                           0061D3   982 _CSPPROG19	=	0x61d3
                           0061D4   983 _CSPPROG20	=	0x61d4
                           0061D5   984 _CSPPROG21	=	0x61d5
                           0061D6   985 _CSPPROG22	=	0x61d6
                           0061D7   986 _CSPPROG23	=	0x61d7
                           0061E0   987 _CSPCTRL	=	0x61e0
                           0061E1   988 _CSPSTAT	=	0x61e1
                           0061E2   989 _CSPX	=	0x61e2
                           0061E3   990 _CSPY	=	0x61e3
                           0061E4   991 _CSPZ	=	0x61e4
                           0061E5   992 _CSPT	=	0x61e5
                           006200   993 _USBADDR	=	0x6200
                           006201   994 _USBPOW	=	0x6201
                           006202   995 _USBIIF	=	0x6202
                           006204   996 _USBOIF	=	0x6204
                           006206   997 _USBCIF	=	0x6206
                           006207   998 _USBIIE	=	0x6207
                           006209   999 _USBOIE	=	0x6209
                           00620B  1000 _USBCIE	=	0x620b
                           00620C  1001 _USBFRML	=	0x620c
                           00620D  1002 _USBFRMH	=	0x620d
                           00620E  1003 _USBINDEX	=	0x620e
                           00620F  1004 _USBCTRL	=	0x620f
                           006210  1005 _USBMAXI	=	0x6210
                           006211  1006 _USBCS0	=	0x6211
                           006211  1007 _USBCSIL	=	0x6211
                           006212  1008 _USBCSIH	=	0x6212
                           006213  1009 _USBMAXO	=	0x6213
                           006214  1010 _USBCSOL	=	0x6214
                           006215  1011 _USBCSOH	=	0x6215
                           006216  1012 _USBCNT0	=	0x6216
                           006216  1013 _USBCNTL	=	0x6216
                           006217  1014 _USBCNTH	=	0x6217
                           006220  1015 _USBF0	=	0x6220
                           006222  1016 _USBF1	=	0x6222
                           006224  1017 _USBF2	=	0x6224
                           006226  1018 _USBF3	=	0x6226
                           006228  1019 _USBF4	=	0x6228
                           00622A  1020 _USBF5	=	0x622a
                           007080  1021 _X_P0	=	0x7080
                           007086  1022 _X_U0CSR	=	0x7086
                           007089  1023 _X_P0IFG	=	0x7089
                           00708A  1024 _X_P1IFG	=	0x708a
                           00708B  1025 _X_P2IFG	=	0x708b
                           00708C  1026 _X_PICTL	=	0x708c
                           00708D  1027 _X_P1IEN	=	0x708d
                           00708F  1028 _X_P0INP	=	0x708f
                           007090  1029 _X_P1	=	0x7090
                           007091  1030 _X_RFIRQF1	=	0x7091
                           007093  1031 _X_MPAGE	=	0x7093
                           007093  1032 _X__XPAGE	=	0x7093
                           007094  1033 _X_T2CTRL	=	0x7094
                           007095  1034 _X_ST0	=	0x7095
                           007096  1035 _X_ST1	=	0x7096
                           007097  1036 _X_ST2	=	0x7097
                           00709C  1037 _X_T2EVTCFG	=	0x709c
                           00709D  1038 _X_SLEEPSTA	=	0x709d
                           00709E  1039 _X_CLKCONSTA	=	0x709e
                           00709F  1040 _X_FMAP	=	0x709f
                           00709F  1041 _X_PSBANK	=	0x709f
                           0070A0  1042 _X_P2	=	0x70a0
                           0070A1  1043 _X_T2IRQF	=	0x70a1
                           0070A2  1044 _X_T2M0	=	0x70a2
                           0070A3  1045 _X_T2M1	=	0x70a3
                           0070A4  1046 _X_T2MOVF0	=	0x70a4
                           0070A5  1047 _X_T2MOVF1	=	0x70a5
                           0070A6  1048 _X_T2MOVF2	=	0x70a6
                           0070A7  1049 _X_T2IRQM	=	0x70a7
                           0070AB  1050 _X_P0IEN	=	0x70ab
                           0070AC  1051 _X_P2IEN	=	0x70ac
                           0070AD  1052 _X_STLOAD	=	0x70ad
                           0070AE  1053 _X_PMUX	=	0x70ae
                           0070AF  1054 _X_T1STAT	=	0x70af
                           0070B1  1055 _X_ENCDI	=	0x70b1
                           0070B2  1056 _X_ENCDO	=	0x70b2
                           0070B3  1057 _X_ENCCS	=	0x70b3
                           0070B4  1058 _X_ADCCON1	=	0x70b4
                           0070B5  1059 _X_ADCCON2	=	0x70b5
                           0070B6  1060 _X_ADCCON3	=	0x70b6
                           0070BA  1061 _X_ADCL	=	0x70ba
                           0070BB  1062 _X_ADCH	=	0x70bb
                           0070BC  1063 _X_RNDL	=	0x70bc
                           0070BD  1064 _X_RNDH	=	0x70bd
                           0070BE  1065 _X_SLEEPCMD	=	0x70be
                           0070BF  1066 _X_RFERRF	=	0x70bf
                           0070C1  1067 _X_U0DBUF	=	0x70c1
                           0070C2  1068 _X_U0BAUD	=	0x70c2
                           0070C3  1069 _X_T2MSEL	=	0x70c3
                           0070C4  1070 _X_U0UCR	=	0x70c4
                           0070C5  1071 _X_U0GCR	=	0x70c5
                           0070C6  1072 _X_CLKCONCMD	=	0x70c6
                           0070C7  1073 _X_MEMCTR	=	0x70c7
                           0070C9  1074 _X_WDCTL	=	0x70c9
                           0070CA  1075 _X_T3CNT	=	0x70ca
                           0070CB  1076 _X_T3CTL	=	0x70cb
                           0070CC  1077 _X_T3CCTL0	=	0x70cc
                           0070CD  1078 _X_T3CC0	=	0x70cd
                           0070CE  1079 _X_T3CCTL1	=	0x70ce
                           0070CF  1080 _X_T3CC1	=	0x70cf
                           0070D1  1081 _X_DMAIRQ	=	0x70d1
                           0070D2  1082 _X_DMA1CFGL	=	0x70d2
                           0070D3  1083 _X_DMA1CFGH	=	0x70d3
                           0070D4  1084 _X_DMA0CFGL	=	0x70d4
                           0070D5  1085 _X_DMA0CFGH	=	0x70d5
                           0070D6  1086 _X_DMAARM	=	0x70d6
                           0070D7  1087 _X_DMAREQ	=	0x70d7
                           0070D8  1088 _X_TIMIF	=	0x70d8
                           0070D9  1089 _X_RFD	=	0x70d9
                           0070DA  1090 _X_T1CC0L	=	0x70da
                           0070DB  1091 _X_T1CC0H	=	0x70db
                           0070DC  1092 _X_T1CC1L	=	0x70dc
                           0070DD  1093 _X_T1CC1H	=	0x70dd
                           0070DE  1094 _X_T1CC2L	=	0x70de
                           0070DF  1095 _X_T1CC2H	=	0x70df
                           0070E1  1096 _X_RFST	=	0x70e1
                           0070E2  1097 _X_T1CNTL	=	0x70e2
                           0070E3  1098 _X_T1CNTH	=	0x70e3
                           0070E4  1099 _X_T1CTL	=	0x70e4
                           0070E5  1100 _X_T1CCTL0	=	0x70e5
                           0070E6  1101 _X_T1CCTL1	=	0x70e6
                           0070E7  1102 _X_T1CCTL2	=	0x70e7
                           0070E9  1103 _X_RFIRQF0	=	0x70e9
                           0070EA  1104 _X_T4CNT	=	0x70ea
                           0070EB  1105 _X_T4CTL	=	0x70eb
                           0070EC  1106 _X_T4CCTL0	=	0x70ec
                           0070ED  1107 _X_T4CC0	=	0x70ed
                           0070EE  1108 _X_T4CCTL1	=	0x70ee
                           0070EF  1109 _X_T4CC1	=	0x70ef
                           0070F1  1110 _X_PERCFG	=	0x70f1
                           0070F2  1111 _X_APCFG	=	0x70f2
                           0070F3  1112 _X_P0SEL	=	0x70f3
                           0070F4  1113 _X_P1SEL	=	0x70f4
                           0070F5  1114 _X_P2SEL	=	0x70f5
                           0070F6  1115 _X_P1INP	=	0x70f6
                           0070F7  1116 _X_P2INP	=	0x70f7
                           0070F8  1117 _X_U1CSR	=	0x70f8
                           0070F9  1118 _X_U1DBUF	=	0x70f9
                           0070FA  1119 _X_U1BAUD	=	0x70fa
                           0070FB  1120 _X_U1UCR	=	0x70fb
                           0070FC  1121 _X_U1GCR	=	0x70fc
                           0070FD  1122 _X_P0DIR	=	0x70fd
                           0070FE  1123 _X_P1DIR	=	0x70fe
                           0070FF  1124 _X_P2DIR	=	0x70ff
                           007800  1125 _X_INFOPAGE	=	0x7800
                           00780C  1126 _X_IEEE_ADDR	=	0x780c
                                   1127 ;--------------------------------------------------------
                                   1128 ; absolute external ram data
                                   1129 ;--------------------------------------------------------
                                   1130 	.area XABS    (ABS,XDATA)
                                   1131 ;--------------------------------------------------------
                                   1132 ; external initialized ram data
                                   1133 ;--------------------------------------------------------
                                   1134 	.area XISEG   (XDATA)
                                   1135 	.area HOME    (CODE)
                                   1136 	.area GSINIT0 (CODE)
                                   1137 	.area GSINIT1 (CODE)
                                   1138 	.area GSINIT2 (CODE)
                                   1139 	.area GSINIT3 (CODE)
                                   1140 	.area GSINIT4 (CODE)
                                   1141 	.area GSINIT5 (CODE)
                                   1142 	.area GSINIT  (CODE)
                                   1143 	.area GSFINAL (CODE)
                                   1144 	.area CSEG    (CODE)
                                   1145 ;--------------------------------------------------------
                                   1146 ; global & static initialisations
                                   1147 ;--------------------------------------------------------
                                   1148 	.area HOME    (CODE)
                                   1149 	.area GSINIT  (CODE)
                                   1150 	.area GSFINAL (CODE)
                                   1151 	.area GSINIT  (CODE)
                                   1152 ;--------------------------------------------------------
                                   1153 ; Home
                                   1154 ;--------------------------------------------------------
                                   1155 	.area HOME    (CODE)
                                   1156 	.area HOME    (CODE)
                                   1157 ;--------------------------------------------------------
                                   1158 ; code
                                   1159 ;--------------------------------------------------------
                                   1160 	.area CSEG    (CODE)
                                   1161 ;------------------------------------------------------------
                                   1162 ;Allocation info for local variables in function 'read_data'
                                   1163 ;------------------------------------------------------------
                                   1164 ;dataptr                   Allocated to stack - sp -7
                                   1165 ;chunk                     Allocated to stack - sp -9
                                   1166 ;c                         Allocated to stack - sp -2
                                   1167 ;len                       Allocated to registers r3 r4 
                                   1168 ;------------------------------------------------------------
                                   1169 ;	../../core/net/rime/rudolph1.c:88: read_data(struct rudolph1_conn *c, uint8_t *dataptr, int chunk)
                                   1170 ;	-----------------------------------------
                                   1171 ;	 function read_data
                                   1172 ;	-----------------------------------------
      000000                       1173 _read_data:
                           000007  1174 	ar7 = 0x07
                           000006  1175 	ar6 = 0x06
                           000005  1176 	ar5 = 0x05
                           000004  1177 	ar4 = 0x04
                           000003  1178 	ar3 = 0x03
                           000002  1179 	ar2 = 0x02
                           000001  1180 	ar1 = 0x01
                           000000  1181 	ar0 = 0x00
      000000 C0 82            [24] 1182 	push	dpl
      000002 C0 83            [24] 1183 	push	dph
      000004 C0 F0            [24] 1184 	push	b
                                   1185 ;	../../core/net/rime/rudolph1.c:90: int len = 0;
      000006 7B 00            [12] 1186 	mov	r3,#0x00
      000008 7C 00            [12] 1187 	mov	r4,#0x00
                                   1188 ;	../../core/net/rime/rudolph1.c:92: if(c->cb->read_chunk) {
      00000A A8 81            [24] 1189 	mov	r0,sp
      00000C 18               [12] 1190 	dec	r0
      00000D 18               [12] 1191 	dec	r0
      00000E 74 88            [12] 1192 	mov	a,#0x88
      000010 26               [12] 1193 	add	a,@r0
      000011 FE               [12] 1194 	mov	r6,a
      000012 E4               [12] 1195 	clr	a
      000013 08               [12] 1196 	inc	r0
      000014 36               [12] 1197 	addc	a,@r0
      000015 FA               [12] 1198 	mov	r2,a
      000016 08               [12] 1199 	inc	r0
      000017 86 07            [24] 1200 	mov	ar7,@r0
      000019 8E 82            [24] 1201 	mov	dpl,r6
      00001B 8A 83            [24] 1202 	mov	dph,r2
      00001D 8F F0            [24] 1203 	mov	b,r7
      00001F 12r00r00         [24] 1204 	lcall	__gptrget
      000022 FE               [12] 1205 	mov	r6,a
      000023 A3               [24] 1206 	inc	dptr
      000024 12r00r00         [24] 1207 	lcall	__gptrget
      000027 FA               [12] 1208 	mov	r2,a
      000028 A3               [24] 1209 	inc	dptr
      000029 12r00r00         [24] 1210 	lcall	__gptrget
      00002C FF               [12] 1211 	mov	r7,a
      00002D 74 02            [12] 1212 	mov	a,#0x02
      00002F 2E               [12] 1213 	add	a,r6
      000030 FE               [12] 1214 	mov	r6,a
      000031 E4               [12] 1215 	clr	a
      000032 3A               [12] 1216 	addc	a,r2
      000033 FA               [12] 1217 	mov	r2,a
      000034 8E 82            [24] 1218 	mov	dpl,r6
      000036 8A 83            [24] 1219 	mov	dph,r2
      000038 8F F0            [24] 1220 	mov	b,r7
      00003A 12r00r00         [24] 1221 	lcall	__gptrget
      00003D FE               [12] 1222 	mov	r6,a
      00003E A3               [24] 1223 	inc	dptr
      00003F 12r00r00         [24] 1224 	lcall	__gptrget
      000042 FF               [12] 1225 	mov	r7,a
      000043 4E               [12] 1226 	orl	a,r6
      000044 60 59            [24] 1227 	jz	00102$
                                   1228 ;	../../core/net/rime/rudolph1.c:93: len = c->cb->read_chunk(c, chunk * RUDOLPH1_DATASIZE,
      000046 E5 81            [12] 1229 	mov	a,sp
      000048 24 F7            [12] 1230 	add	a,#0xf7
      00004A F8               [12] 1231 	mov	r0,a
      00004B 86 02            [24] 1232 	mov	ar2,@r0
      00004D 08               [12] 1233 	inc	r0
      00004E E6               [12] 1234 	mov	a,@r0
      00004F 54 03            [12] 1235 	anl	a,#0x03
      000051 A2 E0            [12] 1236 	mov	c,acc.0
      000053 CA               [12] 1237 	xch	a,r2
      000054 13               [12] 1238 	rrc	a
      000055 CA               [12] 1239 	xch	a,r2
      000056 13               [12] 1240 	rrc	a
      000057 A2 E0            [12] 1241 	mov	c,acc.0
      000059 CA               [12] 1242 	xch	a,r2
      00005A 13               [12] 1243 	rrc	a
      00005B CA               [12] 1244 	xch	a,r2
      00005C 13               [12] 1245 	rrc	a
      00005D CA               [12] 1246 	xch	a,r2
      00005E FD               [12] 1247 	mov	r5,a
      00005F 74 40            [12] 1248 	mov	a,#0x40
      000061 C0 E0            [24] 1249 	push	acc
      000063 E4               [12] 1250 	clr	a
      000064 C0 E0            [24] 1251 	push	acc
      000066 E5 81            [12] 1252 	mov	a,sp
      000068 24 F7            [12] 1253 	add	a,#0xf7
      00006A F8               [12] 1254 	mov	r0,a
      00006B E6               [12] 1255 	mov	a,@r0
      00006C C0 E0            [24] 1256 	push	acc
      00006E 08               [12] 1257 	inc	r0
      00006F E6               [12] 1258 	mov	a,@r0
      000070 C0 E0            [24] 1259 	push	acc
      000072 08               [12] 1260 	inc	r0
      000073 E6               [12] 1261 	mov	a,@r0
      000074 C0 E0            [24] 1262 	push	acc
      000076 C0 02            [24] 1263 	push	ar2
      000078 C0 05            [24] 1264 	push	ar5
      00007A 12r00r7F         [24] 1265 	lcall	00110$
      00007D 80 12            [24] 1266 	sjmp	00111$
      00007F                       1267 00110$:
      00007F C0 06            [24] 1268 	push	ar6
      000081 C0 07            [24] 1269 	push	ar7
      000083 E5 81            [12] 1270 	mov	a,sp
      000085 24 F3            [12] 1271 	add	a,#0xf3
      000087 F8               [12] 1272 	mov	r0,a
      000088 86 82            [24] 1273 	mov	dpl,@r0
      00008A 08               [12] 1274 	inc	r0
      00008B 86 83            [24] 1275 	mov	dph,@r0
      00008D 08               [12] 1276 	inc	r0
      00008E 86 F0            [24] 1277 	mov	b,@r0
      000090 22               [24] 1278 	ret
      000091                       1279 00111$:
      000091 AE 82            [24] 1280 	mov	r6,dpl
      000093 AF 83            [24] 1281 	mov	r7,dph
      000095 E5 81            [12] 1282 	mov	a,sp
      000097 24 F9            [12] 1283 	add	a,#0xf9
      000099 F5 81            [12] 1284 	mov	sp,a
      00009B 8E 03            [24] 1285 	mov	ar3,r6
      00009D 8F 04            [24] 1286 	mov	ar4,r7
      00009F                       1287 00102$:
                                   1288 ;	../../core/net/rime/rudolph1.c:96: return len;
      00009F 8B 82            [24] 1289 	mov	dpl,r3
      0000A1 8C 83            [24] 1290 	mov	dph,r4
                                   1291 ;	../../core/net/rime/rudolph1.c:97: }
      0000A3 15 81            [12] 1292 	dec	sp
      0000A5 15 81            [12] 1293 	dec	sp
      0000A7 15 81            [12] 1294 	dec	sp
      0000A9 22               [24] 1295 	ret
                                   1296 ;------------------------------------------------------------
                                   1297 ;Allocation info for local variables in function 'format_data'
                                   1298 ;------------------------------------------------------------
                                   1299 ;chunk                     Allocated to stack - sp -9
                                   1300 ;c                         Allocated to stack - sp -5
                                   1301 ;p                         Allocated to stack - sp -2
                                   1302 ;------------------------------------------------------------
                                   1303 ;	../../core/net/rime/rudolph1.c:100: format_data(struct rudolph1_conn *c, int chunk)
                                   1304 ;	-----------------------------------------
                                   1305 ;	 function format_data
                                   1306 ;	-----------------------------------------
      0000AA                       1307 _format_data:
      0000AA C0 82            [24] 1308 	push	dpl
      0000AC C0 83            [24] 1309 	push	dph
      0000AE C0 F0            [24] 1310 	push	b
      0000B0 05 81            [12] 1311 	inc	sp
      0000B2 05 81            [12] 1312 	inc	sp
      0000B4 05 81            [12] 1313 	inc	sp
                                   1314 ;	../../core/net/rime/rudolph1.c:104: packetbuf_clear();
      0000B6 12r00r00         [24] 1315 	lcall	_packetbuf_clear
                                   1316 ;	../../core/net/rime/rudolph1.c:105: p = packetbuf_dataptr();
      0000B9 12r00r00         [24] 1317 	lcall	_packetbuf_dataptr
      0000BC AA 82            [24] 1318 	mov	r2,dpl
      0000BE AB 83            [24] 1319 	mov	r3,dph
      0000C0 AC F0            [24] 1320 	mov	r4,b
      0000C2 A8 81            [24] 1321 	mov	r0,sp
      0000C4 18               [12] 1322 	dec	r0
      0000C5 18               [12] 1323 	dec	r0
      0000C6 A6 02            [24] 1324 	mov	@r0,ar2
      0000C8 08               [12] 1325 	inc	r0
      0000C9 A6 03            [24] 1326 	mov	@r0,ar3
      0000CB 08               [12] 1327 	inc	r0
      0000CC A6 04            [24] 1328 	mov	@r0,ar4
                                   1329 ;	../../core/net/rime/rudolph1.c:106: p->h.type = TYPE_DATA;
      0000CE A8 81            [24] 1330 	mov	r0,sp
      0000D0 18               [12] 1331 	dec	r0
      0000D1 18               [12] 1332 	dec	r0
      0000D2 86 82            [24] 1333 	mov	dpl,@r0
      0000D4 08               [12] 1334 	inc	r0
      0000D5 86 83            [24] 1335 	mov	dph,@r0
      0000D7 08               [12] 1336 	inc	r0
      0000D8 86 F0            [24] 1337 	mov	b,@r0
      0000DA E4               [12] 1338 	clr	a
      0000DB 12r00r00         [24] 1339 	lcall	__gptrput
                                   1340 ;	../../core/net/rime/rudolph1.c:107: p->h.version = c->version;
      0000DE A8 81            [24] 1341 	mov	r0,sp
      0000E0 18               [12] 1342 	dec	r0
      0000E1 18               [12] 1343 	dec	r0
      0000E2 04               [12] 1344 	inc	a
      0000E3 26               [12] 1345 	add	a,@r0
      0000E4 FD               [12] 1346 	mov	r5,a
      0000E5 E4               [12] 1347 	clr	a
      0000E6 08               [12] 1348 	inc	r0
      0000E7 36               [12] 1349 	addc	a,@r0
      0000E8 FE               [12] 1350 	mov	r6,a
      0000E9 08               [12] 1351 	inc	r0
      0000EA 86 07            [24] 1352 	mov	ar7,@r0
      0000EC E5 81            [12] 1353 	mov	a,sp
      0000EE 24 FB            [12] 1354 	add	a,#0xfb
      0000F0 F8               [12] 1355 	mov	r0,a
      0000F1 74 A6            [12] 1356 	mov	a,#0xa6
      0000F3 26               [12] 1357 	add	a,@r0
      0000F4 FA               [12] 1358 	mov	r2,a
      0000F5 E4               [12] 1359 	clr	a
      0000F6 08               [12] 1360 	inc	r0
      0000F7 36               [12] 1361 	addc	a,@r0
      0000F8 FB               [12] 1362 	mov	r3,a
      0000F9 08               [12] 1363 	inc	r0
      0000FA 86 04            [24] 1364 	mov	ar4,@r0
      0000FC 8A 82            [24] 1365 	mov	dpl,r2
      0000FE 8B 83            [24] 1366 	mov	dph,r3
      000100 8C F0            [24] 1367 	mov	b,r4
      000102 12r00r00         [24] 1368 	lcall	__gptrget
      000105 8D 82            [24] 1369 	mov	dpl,r5
      000107 8E 83            [24] 1370 	mov	dph,r6
      000109 8F F0            [24] 1371 	mov	b,r7
      00010B 12r00r00         [24] 1372 	lcall	__gptrput
                                   1373 ;	../../core/net/rime/rudolph1.c:108: p->h.chunk = chunk;
      00010E A8 81            [24] 1374 	mov	r0,sp
      000110 18               [12] 1375 	dec	r0
      000111 18               [12] 1376 	dec	r0
      000112 74 02            [12] 1377 	mov	a,#0x02
      000114 26               [12] 1378 	add	a,@r0
      000115 FD               [12] 1379 	mov	r5,a
      000116 E4               [12] 1380 	clr	a
      000117 08               [12] 1381 	inc	r0
      000118 36               [12] 1382 	addc	a,@r0
      000119 FE               [12] 1383 	mov	r6,a
      00011A 08               [12] 1384 	inc	r0
      00011B 86 07            [24] 1385 	mov	ar7,@r0
      00011D E5 81            [12] 1386 	mov	a,sp
      00011F 24 F7            [12] 1387 	add	a,#0xf7
      000121 F8               [12] 1388 	mov	r0,a
      000122 86 03            [24] 1389 	mov	ar3,@r0
      000124 08               [12] 1390 	inc	r0
      000125 86 04            [24] 1391 	mov	ar4,@r0
      000127 8D 82            [24] 1392 	mov	dpl,r5
      000129 8E 83            [24] 1393 	mov	dph,r6
      00012B 8F F0            [24] 1394 	mov	b,r7
      00012D EB               [12] 1395 	mov	a,r3
      00012E 12r00r00         [24] 1396 	lcall	__gptrput
      000131 A3               [24] 1397 	inc	dptr
      000132 EC               [12] 1398 	mov	a,r4
      000133 12r00r00         [24] 1399 	lcall	__gptrput
                                   1400 ;	../../core/net/rime/rudolph1.c:109: p->datalen = read_data(c, p->data, chunk);
      000136 A8 81            [24] 1401 	mov	r0,sp
      000138 18               [12] 1402 	dec	r0
      000139 18               [12] 1403 	dec	r0
      00013A 74 04            [12] 1404 	mov	a,#0x04
      00013C 26               [12] 1405 	add	a,@r0
      00013D FD               [12] 1406 	mov	r5,a
      00013E E4               [12] 1407 	clr	a
      00013F 08               [12] 1408 	inc	r0
      000140 36               [12] 1409 	addc	a,@r0
      000141 FE               [12] 1410 	mov	r6,a
      000142 08               [12] 1411 	inc	r0
      000143 86 07            [24] 1412 	mov	ar7,@r0
      000145 A8 81            [24] 1413 	mov	r0,sp
      000147 18               [12] 1414 	dec	r0
      000148 18               [12] 1415 	dec	r0
      000149 74 05            [12] 1416 	mov	a,#0x05
      00014B 26               [12] 1417 	add	a,@r0
      00014C FA               [12] 1418 	mov	r2,a
      00014D E4               [12] 1419 	clr	a
      00014E 08               [12] 1420 	inc	r0
      00014F 36               [12] 1421 	addc	a,@r0
      000150 FB               [12] 1422 	mov	r3,a
      000151 08               [12] 1423 	inc	r0
      000152 86 04            [24] 1424 	mov	ar4,@r0
      000154 C0 07            [24] 1425 	push	ar7
      000156 C0 06            [24] 1426 	push	ar6
      000158 C0 05            [24] 1427 	push	ar5
      00015A E5 81            [12] 1428 	mov	a,sp
      00015C 24 F4            [12] 1429 	add	a,#0xf4
      00015E F8               [12] 1430 	mov	r0,a
      00015F E6               [12] 1431 	mov	a,@r0
      000160 C0 E0            [24] 1432 	push	acc
      000162 08               [12] 1433 	inc	r0
      000163 E6               [12] 1434 	mov	a,@r0
      000164 C0 E0            [24] 1435 	push	acc
      000166 C0 02            [24] 1436 	push	ar2
      000168 C0 03            [24] 1437 	push	ar3
      00016A C0 04            [24] 1438 	push	ar4
      00016C E5 81            [12] 1439 	mov	a,sp
      00016E 24 F3            [12] 1440 	add	a,#0xf3
      000170 F8               [12] 1441 	mov	r0,a
      000171 86 82            [24] 1442 	mov	dpl,@r0
      000173 08               [12] 1443 	inc	r0
      000174 86 83            [24] 1444 	mov	dph,@r0
      000176 08               [12] 1445 	inc	r0
      000177 86 F0            [24] 1446 	mov	b,@r0
      000179 12r00r00         [24] 1447 	lcall	_read_data
      00017C AB 82            [24] 1448 	mov	r3,dpl
      00017E E5 81            [12] 1449 	mov	a,sp
      000180 24 FB            [12] 1450 	add	a,#0xfb
      000182 F5 81            [12] 1451 	mov	sp,a
      000184 D0 05            [24] 1452 	pop	ar5
      000186 D0 06            [24] 1453 	pop	ar6
      000188 D0 07            [24] 1454 	pop	ar7
      00018A 8D 82            [24] 1455 	mov	dpl,r5
      00018C 8E 83            [24] 1456 	mov	dph,r6
      00018E 8F F0            [24] 1457 	mov	b,r7
      000190 EB               [12] 1458 	mov	a,r3
      000191 12r00r00         [24] 1459 	lcall	__gptrput
                                   1460 ;	../../core/net/rime/rudolph1.c:111: (RUDOLPH1_DATASIZE - p->datalen));
      000194 7C 00            [12] 1461 	mov	r4,#0x00
      000196 74 40            [12] 1462 	mov	a,#0x40
      000198 C3               [12] 1463 	clr	c
      000199 9B               [12] 1464 	subb	a,r3
      00019A FB               [12] 1465 	mov	r3,a
      00019B E4               [12] 1466 	clr	a
      00019C 9C               [12] 1467 	subb	a,r4
      00019D FC               [12] 1468 	mov	r4,a
      00019E 74 45            [12] 1469 	mov	a,#0x45
      0001A0 C3               [12] 1470 	clr	c
      0001A1 9B               [12] 1471 	subb	a,r3
      0001A2 FB               [12] 1472 	mov	r3,a
      0001A3 E4               [12] 1473 	clr	a
      0001A4 9C               [12] 1474 	subb	a,r4
      0001A5 FC               [12] 1475 	mov	r4,a
      0001A6 8B 82            [24] 1476 	mov	dpl,r3
      0001A8 8C 83            [24] 1477 	mov	dph,r4
      0001AA C0 07            [24] 1478 	push	ar7
      0001AC C0 06            [24] 1479 	push	ar6
      0001AE C0 05            [24] 1480 	push	ar5
      0001B0 12r00r00         [24] 1481 	lcall	_packetbuf_set_datalen
      0001B3 D0 05            [24] 1482 	pop	ar5
      0001B5 D0 06            [24] 1483 	pop	ar6
      0001B7 D0 07            [24] 1484 	pop	ar7
                                   1485 ;	../../core/net/rime/rudolph1.c:113: return p->datalen;
      0001B9 8D 82            [24] 1486 	mov	dpl,r5
      0001BB 8E 83            [24] 1487 	mov	dph,r6
      0001BD 8F F0            [24] 1488 	mov	b,r7
      0001BF 12r00r00         [24] 1489 	lcall	__gptrget
      0001C2 FD               [12] 1490 	mov	r5,a
      0001C3 7F 00            [12] 1491 	mov	r7,#0x00
      0001C5 8D 82            [24] 1492 	mov	dpl,r5
      0001C7 8F 83            [24] 1493 	mov	dph,r7
                                   1494 ;	../../core/net/rime/rudolph1.c:114: }
      0001C9 E5 81            [12] 1495 	mov	a,sp
      0001CB 24 FA            [12] 1496 	add	a,#0xfa
      0001CD F5 81            [12] 1497 	mov	sp,a
      0001CF 22               [24] 1498 	ret
                                   1499 ;------------------------------------------------------------
                                   1500 ;Allocation info for local variables in function 'write_data'
                                   1501 ;------------------------------------------------------------
                                   1502 ;chunk                     Allocated to stack - sp -6
                                   1503 ;data                      Allocated to stack - sp -9
                                   1504 ;datalen                   Allocated to stack - sp -11
                                   1505 ;c                         Allocated to stack - sp -2
                                   1506 ;------------------------------------------------------------
                                   1507 ;	../../core/net/rime/rudolph1.c:117: write_data(struct rudolph1_conn *c, int chunk, uint8_t *data, int datalen)
                                   1508 ;	-----------------------------------------
                                   1509 ;	 function write_data
                                   1510 ;	-----------------------------------------
      0001D0                       1511 _write_data:
      0001D0 C0 82            [24] 1512 	push	dpl
      0001D2 C0 83            [24] 1513 	push	dph
      0001D4 C0 F0            [24] 1514 	push	b
                                   1515 ;	../../core/net/rime/rudolph1.c:119: if(chunk == 0) {
      0001D6 E5 81            [12] 1516 	mov	a,sp
      0001D8 24 FA            [12] 1517 	add	a,#0xfa
      0001DA F8               [12] 1518 	mov	r0,a
      0001DB E6               [12] 1519 	mov	a,@r0
      0001DC 08               [12] 1520 	inc	r0
      0001DD 46               [12] 1521 	orl	a,@r0
      0001DE 70 77            [24] 1522 	jnz	00102$
                                   1523 ;	../../core/net/rime/rudolph1.c:120: c->cb->write_chunk(c, 0, RUDOLPH1_FLAG_NEWFILE, data, 0);
      0001E0 A8 81            [24] 1524 	mov	r0,sp
      0001E2 18               [12] 1525 	dec	r0
      0001E3 18               [12] 1526 	dec	r0
      0001E4 74 88            [12] 1527 	mov	a,#0x88
      0001E6 26               [12] 1528 	add	a,@r0
      0001E7 FA               [12] 1529 	mov	r2,a
      0001E8 E4               [12] 1530 	clr	a
      0001E9 08               [12] 1531 	inc	r0
      0001EA 36               [12] 1532 	addc	a,@r0
      0001EB FB               [12] 1533 	mov	r3,a
      0001EC 08               [12] 1534 	inc	r0
      0001ED 86 04            [24] 1535 	mov	ar4,@r0
      0001EF 8A 82            [24] 1536 	mov	dpl,r2
      0001F1 8B 83            [24] 1537 	mov	dph,r3
      0001F3 8C F0            [24] 1538 	mov	b,r4
      0001F5 12r00r00         [24] 1539 	lcall	__gptrget
      0001F8 FA               [12] 1540 	mov	r2,a
      0001F9 A3               [24] 1541 	inc	dptr
      0001FA 12r00r00         [24] 1542 	lcall	__gptrget
      0001FD FB               [12] 1543 	mov	r3,a
      0001FE A3               [24] 1544 	inc	dptr
      0001FF 12r00r00         [24] 1545 	lcall	__gptrget
      000202 FC               [12] 1546 	mov	r4,a
      000203 8A 82            [24] 1547 	mov	dpl,r2
      000205 8B 83            [24] 1548 	mov	dph,r3
      000207 8C F0            [24] 1549 	mov	b,r4
      000209 12r00r00         [24] 1550 	lcall	__gptrget
      00020C FA               [12] 1551 	mov	r2,a
      00020D A3               [24] 1552 	inc	dptr
      00020E 12r00r00         [24] 1553 	lcall	__gptrget
      000211 FB               [12] 1554 	mov	r3,a
      000212 C0 03            [24] 1555 	push	ar3
      000214 C0 02            [24] 1556 	push	ar2
      000216 E4               [12] 1557 	clr	a
      000217 C0 E0            [24] 1558 	push	acc
      000219 C0 E0            [24] 1559 	push	acc
      00021B E5 81            [12] 1560 	mov	a,sp
      00021D 24 F3            [12] 1561 	add	a,#0xf3
      00021F F8               [12] 1562 	mov	r0,a
      000220 E6               [12] 1563 	mov	a,@r0
      000221 C0 E0            [24] 1564 	push	acc
      000223 08               [12] 1565 	inc	r0
      000224 E6               [12] 1566 	mov	a,@r0
      000225 C0 E0            [24] 1567 	push	acc
      000227 08               [12] 1568 	inc	r0
      000228 E6               [12] 1569 	mov	a,@r0
      000229 C0 E0            [24] 1570 	push	acc
      00022B 74 01            [12] 1571 	mov	a,#0x01
      00022D C0 E0            [24] 1572 	push	acc
      00022F E4               [12] 1573 	clr	a
      000230 C0 E0            [24] 1574 	push	acc
      000232 C0 E0            [24] 1575 	push	acc
      000234 C0 E0            [24] 1576 	push	acc
      000236 12r02r3B         [24] 1577 	lcall	00117$
      000239 80 12            [24] 1578 	sjmp	00118$
      00023B                       1579 00117$:
      00023B C0 02            [24] 1580 	push	ar2
      00023D C0 03            [24] 1581 	push	ar3
      00023F E5 81            [12] 1582 	mov	a,sp
      000241 24 EF            [12] 1583 	add	a,#0xef
      000243 F8               [12] 1584 	mov	r0,a
      000244 86 82            [24] 1585 	mov	dpl,@r0
      000246 08               [12] 1586 	inc	r0
      000247 86 83            [24] 1587 	mov	dph,@r0
      000249 08               [12] 1588 	inc	r0
      00024A 86 F0            [24] 1589 	mov	b,@r0
      00024C 22               [24] 1590 	ret
      00024D                       1591 00118$:
      00024D E5 81            [12] 1592 	mov	a,sp
      00024F 24 F7            [12] 1593 	add	a,#0xf7
      000251 F5 81            [12] 1594 	mov	sp,a
      000253 D0 02            [24] 1595 	pop	ar2
      000255 D0 03            [24] 1596 	pop	ar3
      000257                       1597 00102$:
                                   1598 ;	../../core/net/rime/rudolph1.c:123: if(datalen < RUDOLPH1_DATASIZE) {
      000257 E5 81            [12] 1599 	mov	a,sp
      000259 24 F5            [12] 1600 	add	a,#0xf5
      00025B F8               [12] 1601 	mov	r0,a
      00025C C3               [12] 1602 	clr	c
      00025D E6               [12] 1603 	mov	a,@r0
      00025E 94 40            [12] 1604 	subb	a,#0x40
      000260 08               [12] 1605 	inc	r0
      000261 E6               [12] 1606 	mov	a,@r0
      000262 64 80            [12] 1607 	xrl	a,#0x80
      000264 94 80            [12] 1608 	subb	a,#0x80
      000266 40 03            [24] 1609 	jc	00119$
      000268 02r03r05         [24] 1610 	ljmp	00104$
      00026B                       1611 00119$:
                                   1612 ;	../../core/net/rime/rudolph1.c:127: c->cb->write_chunk(c, chunk * RUDOLPH1_DATASIZE,
      00026B A8 81            [24] 1613 	mov	r0,sp
      00026D 18               [12] 1614 	dec	r0
      00026E 18               [12] 1615 	dec	r0
      00026F 74 88            [12] 1616 	mov	a,#0x88
      000271 26               [12] 1617 	add	a,@r0
      000272 FA               [12] 1618 	mov	r2,a
      000273 E4               [12] 1619 	clr	a
      000274 08               [12] 1620 	inc	r0
      000275 36               [12] 1621 	addc	a,@r0
      000276 FB               [12] 1622 	mov	r3,a
      000277 08               [12] 1623 	inc	r0
      000278 86 04            [24] 1624 	mov	ar4,@r0
      00027A 8A 82            [24] 1625 	mov	dpl,r2
      00027C 8B 83            [24] 1626 	mov	dph,r3
      00027E 8C F0            [24] 1627 	mov	b,r4
      000280 12r00r00         [24] 1628 	lcall	__gptrget
      000283 FA               [12] 1629 	mov	r2,a
      000284 A3               [24] 1630 	inc	dptr
      000285 12r00r00         [24] 1631 	lcall	__gptrget
      000288 FB               [12] 1632 	mov	r3,a
      000289 A3               [24] 1633 	inc	dptr
      00028A 12r00r00         [24] 1634 	lcall	__gptrget
      00028D FC               [12] 1635 	mov	r4,a
      00028E 8A 82            [24] 1636 	mov	dpl,r2
      000290 8B 83            [24] 1637 	mov	dph,r3
      000292 8C F0            [24] 1638 	mov	b,r4
      000294 12r00r00         [24] 1639 	lcall	__gptrget
      000297 FA               [12] 1640 	mov	r2,a
      000298 A3               [24] 1641 	inc	dptr
      000299 12r00r00         [24] 1642 	lcall	__gptrget
      00029C FB               [12] 1643 	mov	r3,a
      00029D E5 81            [12] 1644 	mov	a,sp
      00029F 24 FA            [12] 1645 	add	a,#0xfa
      0002A1 F8               [12] 1646 	mov	r0,a
      0002A2 86 04            [24] 1647 	mov	ar4,@r0
      0002A4 08               [12] 1648 	inc	r0
      0002A5 E6               [12] 1649 	mov	a,@r0
      0002A6 54 03            [12] 1650 	anl	a,#0x03
      0002A8 A2 E0            [12] 1651 	mov	c,acc.0
      0002AA CC               [12] 1652 	xch	a,r4
      0002AB 13               [12] 1653 	rrc	a
      0002AC CC               [12] 1654 	xch	a,r4
      0002AD 13               [12] 1655 	rrc	a
      0002AE A2 E0            [12] 1656 	mov	c,acc.0
      0002B0 CC               [12] 1657 	xch	a,r4
      0002B1 13               [12] 1658 	rrc	a
      0002B2 CC               [12] 1659 	xch	a,r4
      0002B3 13               [12] 1660 	rrc	a
      0002B4 CC               [12] 1661 	xch	a,r4
      0002B5 FF               [12] 1662 	mov	r7,a
      0002B6 C0 03            [24] 1663 	push	ar3
      0002B8 C0 02            [24] 1664 	push	ar2
      0002BA E5 81            [12] 1665 	mov	a,sp
      0002BC 24 F3            [12] 1666 	add	a,#0xf3
      0002BE F8               [12] 1667 	mov	r0,a
      0002BF E6               [12] 1668 	mov	a,@r0
      0002C0 C0 E0            [24] 1669 	push	acc
      0002C2 08               [12] 1670 	inc	r0
      0002C3 E6               [12] 1671 	mov	a,@r0
      0002C4 C0 E0            [24] 1672 	push	acc
      0002C6 E5 81            [12] 1673 	mov	a,sp
      0002C8 24 F3            [12] 1674 	add	a,#0xf3
      0002CA F8               [12] 1675 	mov	r0,a
      0002CB E6               [12] 1676 	mov	a,@r0
      0002CC C0 E0            [24] 1677 	push	acc
      0002CE 08               [12] 1678 	inc	r0
      0002CF E6               [12] 1679 	mov	a,@r0
      0002D0 C0 E0            [24] 1680 	push	acc
      0002D2 08               [12] 1681 	inc	r0
      0002D3 E6               [12] 1682 	mov	a,@r0
      0002D4 C0 E0            [24] 1683 	push	acc
      0002D6 74 02            [12] 1684 	mov	a,#0x02
      0002D8 C0 E0            [24] 1685 	push	acc
      0002DA E4               [12] 1686 	clr	a
      0002DB C0 E0            [24] 1687 	push	acc
      0002DD C0 04            [24] 1688 	push	ar4
      0002DF C0 07            [24] 1689 	push	ar7
      0002E1 12r02rE6         [24] 1690 	lcall	00120$
      0002E4 80 12            [24] 1691 	sjmp	00121$
      0002E6                       1692 00120$:
      0002E6 C0 02            [24] 1693 	push	ar2
      0002E8 C0 03            [24] 1694 	push	ar3
      0002EA E5 81            [12] 1695 	mov	a,sp
      0002EC 24 EF            [12] 1696 	add	a,#0xef
      0002EE F8               [12] 1697 	mov	r0,a
      0002EF 86 82            [24] 1698 	mov	dpl,@r0
      0002F1 08               [12] 1699 	inc	r0
      0002F2 86 83            [24] 1700 	mov	dph,@r0
      0002F4 08               [12] 1701 	inc	r0
      0002F5 86 F0            [24] 1702 	mov	b,@r0
      0002F7 22               [24] 1703 	ret
      0002F8                       1704 00121$:
      0002F8 E5 81            [12] 1705 	mov	a,sp
      0002FA 24 F7            [12] 1706 	add	a,#0xf7
      0002FC F5 81            [12] 1707 	mov	sp,a
      0002FE D0 02            [24] 1708 	pop	ar2
      000300 D0 03            [24] 1709 	pop	ar3
      000302 02r03r9A         [24] 1710 	ljmp	00106$
      000305                       1711 00104$:
                                   1712 ;	../../core/net/rime/rudolph1.c:130: c->cb->write_chunk(c, chunk * RUDOLPH1_DATASIZE,
      000305 A8 81            [24] 1713 	mov	r0,sp
      000307 18               [12] 1714 	dec	r0
      000308 18               [12] 1715 	dec	r0
      000309 74 88            [12] 1716 	mov	a,#0x88
      00030B 26               [12] 1717 	add	a,@r0
      00030C FD               [12] 1718 	mov	r5,a
      00030D E4               [12] 1719 	clr	a
      00030E 08               [12] 1720 	inc	r0
      00030F 36               [12] 1721 	addc	a,@r0
      000310 FE               [12] 1722 	mov	r6,a
      000311 08               [12] 1723 	inc	r0
      000312 86 07            [24] 1724 	mov	ar7,@r0
      000314 8D 82            [24] 1725 	mov	dpl,r5
      000316 8E 83            [24] 1726 	mov	dph,r6
      000318 8F F0            [24] 1727 	mov	b,r7
      00031A 12r00r00         [24] 1728 	lcall	__gptrget
      00031D FD               [12] 1729 	mov	r5,a
      00031E A3               [24] 1730 	inc	dptr
      00031F 12r00r00         [24] 1731 	lcall	__gptrget
      000322 FE               [12] 1732 	mov	r6,a
      000323 A3               [24] 1733 	inc	dptr
      000324 12r00r00         [24] 1734 	lcall	__gptrget
      000327 FF               [12] 1735 	mov	r7,a
      000328 8D 82            [24] 1736 	mov	dpl,r5
      00032A 8E 83            [24] 1737 	mov	dph,r6
      00032C 8F F0            [24] 1738 	mov	b,r7
      00032E 12r00r00         [24] 1739 	lcall	__gptrget
      000331 FD               [12] 1740 	mov	r5,a
      000332 A3               [24] 1741 	inc	dptr
      000333 12r00r00         [24] 1742 	lcall	__gptrget
      000336 FE               [12] 1743 	mov	r6,a
      000337 E5 81            [12] 1744 	mov	a,sp
      000339 24 FA            [12] 1745 	add	a,#0xfa
      00033B F8               [12] 1746 	mov	r0,a
      00033C 86 04            [24] 1747 	mov	ar4,@r0
      00033E 08               [12] 1748 	inc	r0
      00033F E6               [12] 1749 	mov	a,@r0
      000340 54 03            [12] 1750 	anl	a,#0x03
      000342 A2 E0            [12] 1751 	mov	c,acc.0
      000344 CC               [12] 1752 	xch	a,r4
      000345 13               [12] 1753 	rrc	a
      000346 CC               [12] 1754 	xch	a,r4
      000347 13               [12] 1755 	rrc	a
      000348 A2 E0            [12] 1756 	mov	c,acc.0
      00034A CC               [12] 1757 	xch	a,r4
      00034B 13               [12] 1758 	rrc	a
      00034C CC               [12] 1759 	xch	a,r4
      00034D 13               [12] 1760 	rrc	a
      00034E CC               [12] 1761 	xch	a,r4
      00034F FF               [12] 1762 	mov	r7,a
      000350 C0 06            [24] 1763 	push	ar6
      000352 C0 05            [24] 1764 	push	ar5
      000354 E5 81            [12] 1765 	mov	a,sp
      000356 24 F3            [12] 1766 	add	a,#0xf3
      000358 F8               [12] 1767 	mov	r0,a
      000359 E6               [12] 1768 	mov	a,@r0
      00035A C0 E0            [24] 1769 	push	acc
      00035C 08               [12] 1770 	inc	r0
      00035D E6               [12] 1771 	mov	a,@r0
      00035E C0 E0            [24] 1772 	push	acc
      000360 E5 81            [12] 1773 	mov	a,sp
      000362 24 F3            [12] 1774 	add	a,#0xf3
      000364 F8               [12] 1775 	mov	r0,a
      000365 E6               [12] 1776 	mov	a,@r0
      000366 C0 E0            [24] 1777 	push	acc
      000368 08               [12] 1778 	inc	r0
      000369 E6               [12] 1779 	mov	a,@r0
      00036A C0 E0            [24] 1780 	push	acc
      00036C 08               [12] 1781 	inc	r0
      00036D E6               [12] 1782 	mov	a,@r0
      00036E C0 E0            [24] 1783 	push	acc
      000370 E4               [12] 1784 	clr	a
      000371 C0 E0            [24] 1785 	push	acc
      000373 C0 E0            [24] 1786 	push	acc
      000375 C0 04            [24] 1787 	push	ar4
      000377 C0 07            [24] 1788 	push	ar7
      000379 12r03r7E         [24] 1789 	lcall	00122$
      00037C 80 12            [24] 1790 	sjmp	00123$
      00037E                       1791 00122$:
      00037E C0 05            [24] 1792 	push	ar5
      000380 C0 06            [24] 1793 	push	ar6
      000382 E5 81            [12] 1794 	mov	a,sp
      000384 24 EF            [12] 1795 	add	a,#0xef
      000386 F8               [12] 1796 	mov	r0,a
      000387 86 82            [24] 1797 	mov	dpl,@r0
      000389 08               [12] 1798 	inc	r0
      00038A 86 83            [24] 1799 	mov	dph,@r0
      00038C 08               [12] 1800 	inc	r0
      00038D 86 F0            [24] 1801 	mov	b,@r0
      00038F 22               [24] 1802 	ret
      000390                       1803 00123$:
      000390 E5 81            [12] 1804 	mov	a,sp
      000392 24 F7            [12] 1805 	add	a,#0xf7
      000394 F5 81            [12] 1806 	mov	sp,a
      000396 D0 05            [24] 1807 	pop	ar5
      000398 D0 06            [24] 1808 	pop	ar6
      00039A                       1809 00106$:
                                   1810 ;	../../core/net/rime/rudolph1.c:133: }
      00039A 15 81            [12] 1811 	dec	sp
      00039C 15 81            [12] 1812 	dec	sp
      00039E 15 81            [12] 1813 	dec	sp
      0003A0 22               [24] 1814 	ret
                                   1815 ;------------------------------------------------------------
                                   1816 ;Allocation info for local variables in function 'send_nack'
                                   1817 ;------------------------------------------------------------
                                   1818 ;c                         Allocated to stack - sp -5
                                   1819 ;hdr                       Allocated to stack - sp -2
                                   1820 ;------------------------------------------------------------
                                   1821 ;	../../core/net/rime/rudolph1.c:136: send_nack(struct rudolph1_conn *c)
                                   1822 ;	-----------------------------------------
                                   1823 ;	 function send_nack
                                   1824 ;	-----------------------------------------
      0003A1                       1825 _send_nack:
      0003A1 C0 82            [24] 1826 	push	dpl
      0003A3 C0 83            [24] 1827 	push	dph
      0003A5 C0 F0            [24] 1828 	push	b
      0003A7 05 81            [12] 1829 	inc	sp
      0003A9 05 81            [12] 1830 	inc	sp
      0003AB 05 81            [12] 1831 	inc	sp
                                   1832 ;	../../core/net/rime/rudolph1.c:139: packetbuf_clear();
      0003AD 12r00r00         [24] 1833 	lcall	_packetbuf_clear
                                   1834 ;	../../core/net/rime/rudolph1.c:140: packetbuf_hdralloc(sizeof(struct rudolph1_hdr));
      0003B0 90 00 04         [24] 1835 	mov	dptr,#0x0004
      0003B3 12r00r00         [24] 1836 	lcall	_packetbuf_hdralloc
                                   1837 ;	../../core/net/rime/rudolph1.c:141: hdr = packetbuf_hdrptr();
      0003B6 12r00r00         [24] 1838 	lcall	_packetbuf_hdrptr
      0003B9 AA 82            [24] 1839 	mov	r2,dpl
      0003BB AB 83            [24] 1840 	mov	r3,dph
      0003BD AC F0            [24] 1841 	mov	r4,b
      0003BF A8 81            [24] 1842 	mov	r0,sp
      0003C1 18               [12] 1843 	dec	r0
      0003C2 18               [12] 1844 	dec	r0
      0003C3 A6 02            [24] 1845 	mov	@r0,ar2
      0003C5 08               [12] 1846 	inc	r0
      0003C6 A6 03            [24] 1847 	mov	@r0,ar3
      0003C8 08               [12] 1848 	inc	r0
      0003C9 A6 04            [24] 1849 	mov	@r0,ar4
                                   1850 ;	../../core/net/rime/rudolph1.c:143: hdr->type = TYPE_NACK;
      0003CB A8 81            [24] 1851 	mov	r0,sp
      0003CD 18               [12] 1852 	dec	r0
      0003CE 18               [12] 1853 	dec	r0
      0003CF 86 82            [24] 1854 	mov	dpl,@r0
      0003D1 08               [12] 1855 	inc	r0
      0003D2 86 83            [24] 1856 	mov	dph,@r0
      0003D4 08               [12] 1857 	inc	r0
      0003D5 86 F0            [24] 1858 	mov	b,@r0
      0003D7 74 01            [12] 1859 	mov	a,#0x01
      0003D9 12r00r00         [24] 1860 	lcall	__gptrput
                                   1861 ;	../../core/net/rime/rudolph1.c:144: hdr->version = c->version;
      0003DC A8 81            [24] 1862 	mov	r0,sp
      0003DE 18               [12] 1863 	dec	r0
      0003DF 18               [12] 1864 	dec	r0
      0003E0 26               [12] 1865 	add	a,@r0
      0003E1 FD               [12] 1866 	mov	r5,a
      0003E2 E4               [12] 1867 	clr	a
      0003E3 08               [12] 1868 	inc	r0
      0003E4 36               [12] 1869 	addc	a,@r0
      0003E5 FE               [12] 1870 	mov	r6,a
      0003E6 08               [12] 1871 	inc	r0
      0003E7 86 07            [24] 1872 	mov	ar7,@r0
      0003E9 E5 81            [12] 1873 	mov	a,sp
      0003EB 24 FB            [12] 1874 	add	a,#0xfb
      0003ED F8               [12] 1875 	mov	r0,a
      0003EE 74 A6            [12] 1876 	mov	a,#0xa6
      0003F0 26               [12] 1877 	add	a,@r0
      0003F1 FA               [12] 1878 	mov	r2,a
      0003F2 E4               [12] 1879 	clr	a
      0003F3 08               [12] 1880 	inc	r0
      0003F4 36               [12] 1881 	addc	a,@r0
      0003F5 FB               [12] 1882 	mov	r3,a
      0003F6 08               [12] 1883 	inc	r0
      0003F7 86 04            [24] 1884 	mov	ar4,@r0
      0003F9 8A 82            [24] 1885 	mov	dpl,r2
      0003FB 8B 83            [24] 1886 	mov	dph,r3
      0003FD 8C F0            [24] 1887 	mov	b,r4
      0003FF 12r00r00         [24] 1888 	lcall	__gptrget
      000402 8D 82            [24] 1889 	mov	dpl,r5
      000404 8E 83            [24] 1890 	mov	dph,r6
      000406 8F F0            [24] 1891 	mov	b,r7
      000408 12r00r00         [24] 1892 	lcall	__gptrput
                                   1893 ;	../../core/net/rime/rudolph1.c:145: hdr->chunk = c->chunk;
      00040B A8 81            [24] 1894 	mov	r0,sp
      00040D 18               [12] 1895 	dec	r0
      00040E 18               [12] 1896 	dec	r0
      00040F 74 02            [12] 1897 	mov	a,#0x02
      000411 26               [12] 1898 	add	a,@r0
      000412 FD               [12] 1899 	mov	r5,a
      000413 E4               [12] 1900 	clr	a
      000414 08               [12] 1901 	inc	r0
      000415 36               [12] 1902 	addc	a,@r0
      000416 FE               [12] 1903 	mov	r6,a
      000417 08               [12] 1904 	inc	r0
      000418 86 07            [24] 1905 	mov	ar7,@r0
      00041A E5 81            [12] 1906 	mov	a,sp
      00041C 24 FB            [12] 1907 	add	a,#0xfb
      00041E F8               [12] 1908 	mov	r0,a
      00041F 74 A2            [12] 1909 	mov	a,#0xa2
      000421 26               [12] 1910 	add	a,@r0
      000422 FA               [12] 1911 	mov	r2,a
      000423 E4               [12] 1912 	clr	a
      000424 08               [12] 1913 	inc	r0
      000425 36               [12] 1914 	addc	a,@r0
      000426 FB               [12] 1915 	mov	r3,a
      000427 08               [12] 1916 	inc	r0
      000428 86 04            [24] 1917 	mov	ar4,@r0
      00042A 8A 82            [24] 1918 	mov	dpl,r2
      00042C 8B 83            [24] 1919 	mov	dph,r3
      00042E 8C F0            [24] 1920 	mov	b,r4
      000430 12r00r00         [24] 1921 	lcall	__gptrget
      000433 FA               [12] 1922 	mov	r2,a
      000434 A3               [24] 1923 	inc	dptr
      000435 12r00r00         [24] 1924 	lcall	__gptrget
      000438 FB               [12] 1925 	mov	r3,a
      000439 8D 82            [24] 1926 	mov	dpl,r5
      00043B 8E 83            [24] 1927 	mov	dph,r6
      00043D 8F F0            [24] 1928 	mov	b,r7
      00043F EA               [12] 1929 	mov	a,r2
      000440 12r00r00         [24] 1930 	lcall	__gptrput
      000443 A3               [24] 1931 	inc	dptr
      000444 EB               [12] 1932 	mov	a,r3
      000445 12r00r00         [24] 1933 	lcall	__gptrput
                                   1934 ;	../../core/net/rime/rudolph1.c:150: ipolite_send(&c->ipolite, NACK_TIMEOUT, sizeof(struct rudolph1_hdr));
      000448 E5 81            [12] 1935 	mov	a,sp
      00044A 24 FB            [12] 1936 	add	a,#0xfb
      00044C F8               [12] 1937 	mov	r0,a
      00044D 74 5B            [12] 1938 	mov	a,#0x5b
      00044F 26               [12] 1939 	add	a,@r0
      000450 FD               [12] 1940 	mov	r5,a
      000451 E4               [12] 1941 	clr	a
      000452 08               [12] 1942 	inc	r0
      000453 36               [12] 1943 	addc	a,@r0
      000454 FE               [12] 1944 	mov	r6,a
      000455 08               [12] 1945 	inc	r0
      000456 86 07            [24] 1946 	mov	ar7,@r0
      000458 74 04            [12] 1947 	mov	a,#0x04
      00045A C0 E0            [24] 1948 	push	acc
      00045C 74 20            [12] 1949 	mov	a,#0x20
      00045E C0 E0            [24] 1950 	push	acc
      000460 E4               [12] 1951 	clr	a
      000461 C0 E0            [24] 1952 	push	acc
      000463 8D 82            [24] 1953 	mov	dpl,r5
      000465 8E 83            [24] 1954 	mov	dph,r6
      000467 8F F0            [24] 1955 	mov	b,r7
      000469 12r00r00         [24] 1956 	lcall	_ipolite_send
      00046C 15 81            [12] 1957 	dec	sp
      00046E 15 81            [12] 1958 	dec	sp
      000470 15 81            [12] 1959 	dec	sp
                                   1960 ;	../../core/net/rime/rudolph1.c:151: }
      000472 E5 81            [12] 1961 	mov	a,sp
      000474 24 FA            [12] 1962 	add	a,#0xfa
      000476 F5 81            [12] 1963 	mov	sp,a
      000478 22               [24] 1964 	ret
                                   1965 ;------------------------------------------------------------
                                   1966 ;Allocation info for local variables in function 'handle_data'
                                   1967 ;------------------------------------------------------------
                                   1968 ;p                         Allocated to stack - sp -19
                                   1969 ;c                         Allocated to stack - sp -14
                                   1970 ;sloc0                     Allocated to stack - sp -11
                                   1971 ;sloc1                     Allocated to stack - sp -10
                                   1972 ;sloc2                     Allocated to stack - sp -7
                                   1973 ;sloc3                     Allocated to stack - sp -4
                                   1974 ;sloc4                     Allocated to stack - sp -2
                                   1975 ;------------------------------------------------------------
                                   1976 ;	../../core/net/rime/rudolph1.c:154: handle_data(struct rudolph1_conn *c, struct rudolph1_datapacket *p)
                                   1977 ;	-----------------------------------------
                                   1978 ;	 function handle_data
                                   1979 ;	-----------------------------------------
      000479                       1980 _handle_data:
      000479 C0 82            [24] 1981 	push	dpl
      00047B C0 83            [24] 1982 	push	dph
      00047D C0 F0            [24] 1983 	push	b
      00047F E5 81            [12] 1984 	mov	a,sp
      000481 24 0C            [12] 1985 	add	a,#0x0c
                                   1986 ;	../../core/net/rime/rudolph1.c:156: if(LT(c->version, p->h.version)) {
      000483 F5 81            [12] 1987 	mov	sp,a
      000485 24 F2            [12] 1988 	add	a,#0xf2
      000487 F8               [12] 1989 	mov	r0,a
      000488 74 A6            [12] 1990 	mov	a,#0xa6
      00048A 26               [12] 1991 	add	a,@r0
      00048B FA               [12] 1992 	mov	r2,a
      00048C E4               [12] 1993 	clr	a
      00048D 08               [12] 1994 	inc	r0
      00048E 36               [12] 1995 	addc	a,@r0
      00048F FB               [12] 1996 	mov	r3,a
      000490 08               [12] 1997 	inc	r0
      000491 86 04            [24] 1998 	mov	ar4,@r0
      000493 8A 82            [24] 1999 	mov	dpl,r2
      000495 8B 83            [24] 2000 	mov	dph,r3
      000497 8C F0            [24] 2001 	mov	b,r4
      000499 E5 81            [12] 2002 	mov	a,sp
      00049B 24 F5            [12] 2003 	add	a,#0xf5
      00049D F8               [12] 2004 	mov	r0,a
      00049E 12r00r00         [24] 2005 	lcall	__gptrget
      0004A1 F6               [12] 2006 	mov	@r0,a
      0004A2 E5 81            [12] 2007 	mov	a,sp
      0004A4 24 ED            [12] 2008 	add	a,#0xed
      0004A6 F8               [12] 2009 	mov	r0,a
      0004A7 E5 81            [12] 2010 	mov	a,sp
      0004A9 24 F6            [12] 2011 	add	a,#0xf6
      0004AB F9               [12] 2012 	mov	r1,a
      0004AC E6               [12] 2013 	mov	a,@r0
      0004AD F7               [12] 2014 	mov	@r1,a
      0004AE 08               [12] 2015 	inc	r0
      0004AF 09               [12] 2016 	inc	r1
      0004B0 E6               [12] 2017 	mov	a,@r0
      0004B1 F7               [12] 2018 	mov	@r1,a
      0004B2 08               [12] 2019 	inc	r0
      0004B3 09               [12] 2020 	inc	r1
      0004B4 E6               [12] 2021 	mov	a,@r0
      0004B5 F7               [12] 2022 	mov	@r1,a
      0004B6 E5 81            [12] 2023 	mov	a,sp
      0004B8 24 F6            [12] 2024 	add	a,#0xf6
      0004BA F8               [12] 2025 	mov	r0,a
      0004BB 74 01            [12] 2026 	mov	a,#0x01
      0004BD 26               [12] 2027 	add	a,@r0
      0004BE FD               [12] 2028 	mov	r5,a
      0004BF E4               [12] 2029 	clr	a
      0004C0 08               [12] 2030 	inc	r0
      0004C1 36               [12] 2031 	addc	a,@r0
      0004C2 FE               [12] 2032 	mov	r6,a
      0004C3 08               [12] 2033 	inc	r0
      0004C4 86 07            [24] 2034 	mov	ar7,@r0
      0004C6 8D 82            [24] 2035 	mov	dpl,r5
      0004C8 8E 83            [24] 2036 	mov	dph,r6
      0004CA 8F F0            [24] 2037 	mov	b,r7
      0004CC 12r00r00         [24] 2038 	lcall	__gptrget
      0004CF FF               [12] 2039 	mov	r7,a
      0004D0 E5 81            [12] 2040 	mov	a,sp
      0004D2 24 F5            [12] 2041 	add	a,#0xf5
      0004D4 F8               [12] 2042 	mov	r0,a
      0004D5 E6               [12] 2043 	mov	a,@r0
      0004D6 C3               [12] 2044 	clr	c
      0004D7 9F               [12] 2045 	subb	a,r7
      0004D8 FE               [12] 2046 	mov	r6,a
      0004D9 20 E7 03         [24] 2047 	jb	acc.7,00149$
      0004DC 02r05rCA         [24] 2048 	ljmp	00117$
      0004DF                       2049 00149$:
                                   2050 ;	../../core/net/rime/rudolph1.c:160: c->version = p->h.version;
      0004DF 8A 82            [24] 2051 	mov	dpl,r2
      0004E1 8B 83            [24] 2052 	mov	dph,r3
      0004E3 8C F0            [24] 2053 	mov	b,r4
      0004E5 EF               [12] 2054 	mov	a,r7
      0004E6 12r00r00         [24] 2055 	lcall	__gptrput
                                   2056 ;	../../core/net/rime/rudolph1.c:161: c->highest_chunk_heard = c->chunk = 0;
      0004E9 E5 81            [12] 2057 	mov	a,sp
      0004EB 24 F2            [12] 2058 	add	a,#0xf2
      0004ED F8               [12] 2059 	mov	r0,a
      0004EE 74 A4            [12] 2060 	mov	a,#0xa4
      0004F0 26               [12] 2061 	add	a,@r0
      0004F1 FF               [12] 2062 	mov	r7,a
      0004F2 E4               [12] 2063 	clr	a
      0004F3 08               [12] 2064 	inc	r0
      0004F4 36               [12] 2065 	addc	a,@r0
      0004F5 FD               [12] 2066 	mov	r5,a
      0004F6 08               [12] 2067 	inc	r0
      0004F7 86 04            [24] 2068 	mov	ar4,@r0
      0004F9 E5 81            [12] 2069 	mov	a,sp
      0004FB 24 F2            [12] 2070 	add	a,#0xf2
      0004FD F8               [12] 2071 	mov	r0,a
      0004FE 74 A2            [12] 2072 	mov	a,#0xa2
      000500 26               [12] 2073 	add	a,@r0
      000501 FA               [12] 2074 	mov	r2,a
      000502 E4               [12] 2075 	clr	a
      000503 08               [12] 2076 	inc	r0
      000504 36               [12] 2077 	addc	a,@r0
      000505 FB               [12] 2078 	mov	r3,a
      000506 08               [12] 2079 	inc	r0
      000507 86 06            [24] 2080 	mov	ar6,@r0
      000509 8A 82            [24] 2081 	mov	dpl,r2
      00050B 8B 83            [24] 2082 	mov	dph,r3
      00050D 8E F0            [24] 2083 	mov	b,r6
      00050F E4               [12] 2084 	clr	a
      000510 12r00r00         [24] 2085 	lcall	__gptrput
      000513 A3               [24] 2086 	inc	dptr
      000514 12r00r00         [24] 2087 	lcall	__gptrput
      000517 8F 82            [24] 2088 	mov	dpl,r7
      000519 8D 83            [24] 2089 	mov	dph,r5
      00051B 8C F0            [24] 2090 	mov	b,r4
      00051D 12r00r00         [24] 2091 	lcall	__gptrput
      000520 A3               [24] 2092 	inc	dptr
      000521 12r00r00         [24] 2093 	lcall	__gptrput
                                   2094 ;	../../core/net/rime/rudolph1.c:162: if(p->h.chunk != 0) {
      000524 E5 81            [12] 2095 	mov	a,sp
      000526 24 F6            [12] 2096 	add	a,#0xf6
      000528 F8               [12] 2097 	mov	r0,a
      000529 74 02            [12] 2098 	mov	a,#0x02
      00052B 26               [12] 2099 	add	a,@r0
      00052C FC               [12] 2100 	mov	r4,a
      00052D E4               [12] 2101 	clr	a
      00052E 08               [12] 2102 	inc	r0
      00052F 36               [12] 2103 	addc	a,@r0
      000530 FD               [12] 2104 	mov	r5,a
      000531 08               [12] 2105 	inc	r0
      000532 86 06            [24] 2106 	mov	ar6,@r0
      000534 8C 82            [24] 2107 	mov	dpl,r4
      000536 8D 83            [24] 2108 	mov	dph,r5
      000538 8E F0            [24] 2109 	mov	b,r6
      00053A 12r00r00         [24] 2110 	lcall	__gptrget
      00053D FC               [12] 2111 	mov	r4,a
      00053E A3               [24] 2112 	inc	dptr
      00053F 12r00r00         [24] 2113 	lcall	__gptrget
      000542 4C               [12] 2114 	orl	a,r4
      000543 60 13            [24] 2115 	jz	00102$
                                   2116 ;	../../core/net/rime/rudolph1.c:163: send_nack(c);
      000545 E5 81            [12] 2117 	mov	a,sp
      000547 24 F2            [12] 2118 	add	a,#0xf2
      000549 F8               [12] 2119 	mov	r0,a
      00054A 86 82            [24] 2120 	mov	dpl,@r0
      00054C 08               [12] 2121 	inc	r0
      00054D 86 83            [24] 2122 	mov	dph,@r0
      00054F 08               [12] 2123 	inc	r0
      000550 86 F0            [24] 2124 	mov	b,@r0
      000552 12r03rA1         [24] 2125 	lcall	_send_nack
      000555 02r08r03         [24] 2126 	ljmp	00119$
      000558                       2127 00102$:
                                   2128 ;	../../core/net/rime/rudolph1.c:165: write_data(c, 0, p->data, p->datalen);
      000558 E5 81            [12] 2129 	mov	a,sp
      00055A 24 F6            [12] 2130 	add	a,#0xf6
      00055C F8               [12] 2131 	mov	r0,a
      00055D 74 04            [12] 2132 	mov	a,#0x04
      00055F 26               [12] 2133 	add	a,@r0
      000560 FC               [12] 2134 	mov	r4,a
      000561 E4               [12] 2135 	clr	a
      000562 08               [12] 2136 	inc	r0
      000563 36               [12] 2137 	addc	a,@r0
      000564 FD               [12] 2138 	mov	r5,a
      000565 08               [12] 2139 	inc	r0
      000566 86 06            [24] 2140 	mov	ar6,@r0
      000568 8C 82            [24] 2141 	mov	dpl,r4
      00056A 8D 83            [24] 2142 	mov	dph,r5
      00056C 8E F0            [24] 2143 	mov	b,r6
      00056E 12r00r00         [24] 2144 	lcall	__gptrget
      000571 FC               [12] 2145 	mov	r4,a
      000572 7E 00            [12] 2146 	mov	r6,#0x00
      000574 E5 81            [12] 2147 	mov	a,sp
      000576 24 F6            [12] 2148 	add	a,#0xf6
      000578 F8               [12] 2149 	mov	r0,a
      000579 74 05            [12] 2150 	mov	a,#0x05
      00057B 26               [12] 2151 	add	a,@r0
      00057C FA               [12] 2152 	mov	r2,a
      00057D E4               [12] 2153 	clr	a
      00057E 08               [12] 2154 	inc	r0
      00057F 36               [12] 2155 	addc	a,@r0
      000580 FB               [12] 2156 	mov	r3,a
      000581 08               [12] 2157 	inc	r0
      000582 86 05            [24] 2158 	mov	ar5,@r0
      000584 C0 04            [24] 2159 	push	ar4
      000586 C0 06            [24] 2160 	push	ar6
      000588 C0 02            [24] 2161 	push	ar2
      00058A C0 03            [24] 2162 	push	ar3
      00058C C0 05            [24] 2163 	push	ar5
      00058E E4               [12] 2164 	clr	a
      00058F C0 E0            [24] 2165 	push	acc
      000591 C0 E0            [24] 2166 	push	acc
      000593 E5 81            [12] 2167 	mov	a,sp
      000595 24 EB            [12] 2168 	add	a,#0xeb
      000597 F8               [12] 2169 	mov	r0,a
      000598 86 82            [24] 2170 	mov	dpl,@r0
      00059A 08               [12] 2171 	inc	r0
      00059B 86 83            [24] 2172 	mov	dph,@r0
      00059D 08               [12] 2173 	inc	r0
      00059E 86 F0            [24] 2174 	mov	b,@r0
      0005A0 12r01rD0         [24] 2175 	lcall	_write_data
      0005A3 E5 81            [12] 2176 	mov	a,sp
      0005A5 24 F9            [12] 2177 	add	a,#0xf9
                                   2178 ;	../../core/net/rime/rudolph1.c:166: c->chunk = 1; /* Next chunk is 1. */
      0005A7 F5 81            [12] 2179 	mov	sp,a
      0005A9 24 F2            [12] 2180 	add	a,#0xf2
      0005AB F8               [12] 2181 	mov	r0,a
      0005AC 74 A2            [12] 2182 	mov	a,#0xa2
      0005AE 26               [12] 2183 	add	a,@r0
      0005AF FC               [12] 2184 	mov	r4,a
      0005B0 E4               [12] 2185 	clr	a
      0005B1 08               [12] 2186 	inc	r0
      0005B2 36               [12] 2187 	addc	a,@r0
      0005B3 FD               [12] 2188 	mov	r5,a
      0005B4 08               [12] 2189 	inc	r0
      0005B5 86 06            [24] 2190 	mov	ar6,@r0
      0005B7 8C 82            [24] 2191 	mov	dpl,r4
      0005B9 8D 83            [24] 2192 	mov	dph,r5
      0005BB 8E F0            [24] 2193 	mov	b,r6
      0005BD 74 01            [12] 2194 	mov	a,#0x01
      0005BF 12r00r00         [24] 2195 	lcall	__gptrput
      0005C2 A3               [24] 2196 	inc	dptr
      0005C3 E4               [12] 2197 	clr	a
      0005C4 12r00r00         [24] 2198 	lcall	__gptrput
      0005C7 02r08r03         [24] 2199 	ljmp	00119$
      0005CA                       2200 00117$:
                                   2201 ;	../../core/net/rime/rudolph1.c:169: } else if(p->h.version == c->version) {
      0005CA E5 81            [12] 2202 	mov	a,sp
      0005CC 24 F5            [12] 2203 	add	a,#0xf5
      0005CE F8               [12] 2204 	mov	r0,a
      0005CF E6               [12] 2205 	mov	a,@r0
      0005D0 B5 07 02         [24] 2206 	cjne	a,ar7,00151$
      0005D3 80 03            [24] 2207 	sjmp	00152$
      0005D5                       2208 00151$:
      0005D5 02r08r03         [24] 2209 	ljmp	00119$
      0005D8                       2210 00152$:
                                   2211 ;	../../core/net/rime/rudolph1.c:174: if(p->h.chunk == c->chunk) {
      0005D8 E5 81            [12] 2212 	mov	a,sp
      0005DA 24 F6            [12] 2213 	add	a,#0xf6
      0005DC F8               [12] 2214 	mov	r0,a
      0005DD 74 02            [12] 2215 	mov	a,#0x02
      0005DF 26               [12] 2216 	add	a,@r0
      0005E0 FD               [12] 2217 	mov	r5,a
      0005E1 E4               [12] 2218 	clr	a
      0005E2 08               [12] 2219 	inc	r0
      0005E3 36               [12] 2220 	addc	a,@r0
      0005E4 FE               [12] 2221 	mov	r6,a
      0005E5 08               [12] 2222 	inc	r0
      0005E6 86 07            [24] 2223 	mov	ar7,@r0
      0005E8 8D 82            [24] 2224 	mov	dpl,r5
      0005EA 8E 83            [24] 2225 	mov	dph,r6
      0005EC 8F F0            [24] 2226 	mov	b,r7
      0005EE E5 81            [12] 2227 	mov	a,sp
      0005F0 24 F9            [12] 2228 	add	a,#0xf9
      0005F2 F8               [12] 2229 	mov	r0,a
      0005F3 12r00r00         [24] 2230 	lcall	__gptrget
      0005F6 F6               [12] 2231 	mov	@r0,a
      0005F7 A3               [24] 2232 	inc	dptr
      0005F8 12r00r00         [24] 2233 	lcall	__gptrget
      0005FB 08               [12] 2234 	inc	r0
      0005FC F6               [12] 2235 	mov	@r0,a
      0005FD E5 81            [12] 2236 	mov	a,sp
      0005FF 24 F2            [12] 2237 	add	a,#0xf2
      000601 F8               [12] 2238 	mov	r0,a
      000602 74 A2            [12] 2239 	mov	a,#0xa2
      000604 26               [12] 2240 	add	a,@r0
      000605 FB               [12] 2241 	mov	r3,a
      000606 E4               [12] 2242 	clr	a
      000607 08               [12] 2243 	inc	r0
      000608 36               [12] 2244 	addc	a,@r0
      000609 FA               [12] 2245 	mov	r2,a
      00060A 08               [12] 2246 	inc	r0
      00060B 86 04            [24] 2247 	mov	ar4,@r0
      00060D 8B 82            [24] 2248 	mov	dpl,r3
      00060F 8A 83            [24] 2249 	mov	dph,r2
      000611 8C F0            [24] 2250 	mov	b,r4
      000613 12r00r00         [24] 2251 	lcall	__gptrget
      000616 FB               [12] 2252 	mov	r3,a
      000617 A3               [24] 2253 	inc	dptr
      000618 12r00r00         [24] 2254 	lcall	__gptrget
      00061B FC               [12] 2255 	mov	r4,a
      00061C E5 81            [12] 2256 	mov	a,sp
      00061E 24 F9            [12] 2257 	add	a,#0xf9
      000620 F8               [12] 2258 	mov	r0,a
      000621 E6               [12] 2259 	mov	a,@r0
      000622 B5 03 07         [24] 2260 	cjne	a,ar3,00153$
      000625 08               [12] 2261 	inc	r0
      000626 E6               [12] 2262 	mov	a,@r0
      000627 B5 04 02         [24] 2263 	cjne	a,ar4,00153$
      00062A 80 03            [24] 2264 	sjmp	00154$
      00062C                       2265 00153$:
      00062C 02r07r5B         [24] 2266 	ljmp	00110$
      00062F                       2267 00154$:
                                   2268 ;	../../core/net/rime/rudolph1.c:178: write_data(c, p->h.chunk, p->data, p->datalen);
      00062F C0 05            [24] 2269 	push	ar5
      000631 C0 06            [24] 2270 	push	ar6
      000633 C0 07            [24] 2271 	push	ar7
      000635 E5 81            [12] 2272 	mov	a,sp
      000637 24 F3            [12] 2273 	add	a,#0xf3
      000639 F8               [12] 2274 	mov	r0,a
      00063A 74 04            [12] 2275 	mov	a,#0x04
      00063C 26               [12] 2276 	add	a,@r0
      00063D FA               [12] 2277 	mov	r2,a
      00063E E4               [12] 2278 	clr	a
      00063F 08               [12] 2279 	inc	r0
      000640 36               [12] 2280 	addc	a,@r0
      000641 FE               [12] 2281 	mov	r6,a
      000642 08               [12] 2282 	inc	r0
      000643 86 07            [24] 2283 	mov	ar7,@r0
      000645 8A 82            [24] 2284 	mov	dpl,r2
      000647 8E 83            [24] 2285 	mov	dph,r6
      000649 8F F0            [24] 2286 	mov	b,r7
      00064B 12r00r00         [24] 2287 	lcall	__gptrget
      00064E FC               [12] 2288 	mov	r4,a
      00064F 7B 00            [12] 2289 	mov	r3,#0x00
      000651 E5 81            [12] 2290 	mov	a,sp
      000653 24 F3            [12] 2291 	add	a,#0xf3
      000655 F8               [12] 2292 	mov	r0,a
      000656 74 05            [12] 2293 	mov	a,#0x05
      000658 26               [12] 2294 	add	a,@r0
      000659 F6               [12] 2295 	mov	@r0,a
      00065A E4               [12] 2296 	clr	a
      00065B 08               [12] 2297 	inc	r0
      00065C 36               [12] 2298 	addc	a,@r0
      00065D F6               [12] 2299 	mov	@r0,a
      00065E E5 81            [12] 2300 	mov	a,sp
      000660 24 F6            [12] 2301 	add	a,#0xf6
      000662 F8               [12] 2302 	mov	r0,a
      000663 86 02            [24] 2303 	mov	ar2,@r0
      000665 08               [12] 2304 	inc	r0
      000666 86 07            [24] 2305 	mov	ar7,@r0
      000668 C0 07            [24] 2306 	push	ar7
      00066A C0 06            [24] 2307 	push	ar6
      00066C C0 05            [24] 2308 	push	ar5
      00066E C0 04            [24] 2309 	push	ar4
      000670 C0 03            [24] 2310 	push	ar3
      000672 E5 81            [12] 2311 	mov	a,sp
      000674 24 EE            [12] 2312 	add	a,#0xee
      000676 F8               [12] 2313 	mov	r0,a
      000677 E6               [12] 2314 	mov	a,@r0
      000678 C0 E0            [24] 2315 	push	acc
      00067A 08               [12] 2316 	inc	r0
      00067B E6               [12] 2317 	mov	a,@r0
      00067C C0 E0            [24] 2318 	push	acc
      00067E 08               [12] 2319 	inc	r0
      00067F E6               [12] 2320 	mov	a,@r0
      000680 C0 E0            [24] 2321 	push	acc
      000682 C0 02            [24] 2322 	push	ar2
      000684 C0 07            [24] 2323 	push	ar7
      000686 E5 81            [12] 2324 	mov	a,sp
      000688 24 E5            [12] 2325 	add	a,#0xe5
      00068A F8               [12] 2326 	mov	r0,a
      00068B 86 82            [24] 2327 	mov	dpl,@r0
      00068D 08               [12] 2328 	inc	r0
      00068E 86 83            [24] 2329 	mov	dph,@r0
      000690 08               [12] 2330 	inc	r0
      000691 86 F0            [24] 2331 	mov	b,@r0
      000693 12r01rD0         [24] 2332 	lcall	_write_data
      000696 E5 81            [12] 2333 	mov	a,sp
      000698 24 F9            [12] 2334 	add	a,#0xf9
      00069A F5 81            [12] 2335 	mov	sp,a
      00069C D0 05            [24] 2336 	pop	ar5
      00069E D0 06            [24] 2337 	pop	ar6
      0006A0 D0 07            [24] 2338 	pop	ar7
                                   2339 ;	../../core/net/rime/rudolph1.c:179: if(c->highest_chunk_heard < c->chunk) {
      0006A2 E5 81            [12] 2340 	mov	a,sp
      0006A4 24 EF            [12] 2341 	add	a,#0xef
      0006A6 F8               [12] 2342 	mov	r0,a
      0006A7 74 A4            [12] 2343 	mov	a,#0xa4
      0006A9 26               [12] 2344 	add	a,@r0
      0006AA FC               [12] 2345 	mov	r4,a
      0006AB E4               [12] 2346 	clr	a
      0006AC 08               [12] 2347 	inc	r0
      0006AD 36               [12] 2348 	addc	a,@r0
      0006AE FB               [12] 2349 	mov	r3,a
      0006AF 08               [12] 2350 	inc	r0
      0006B0 86 02            [24] 2351 	mov	ar2,@r0
      0006B2 8C 82            [24] 2352 	mov	dpl,r4
      0006B4 8B 83            [24] 2353 	mov	dph,r3
      0006B6 8A F0            [24] 2354 	mov	b,r2
      0006B8 12r00r00         [24] 2355 	lcall	__gptrget
      0006BB FE               [12] 2356 	mov	r6,a
      0006BC A3               [24] 2357 	inc	dptr
      0006BD 12r00r00         [24] 2358 	lcall	__gptrget
      0006C0 FF               [12] 2359 	mov	r7,a
      0006C1 E5 81            [12] 2360 	mov	a,sp
      0006C3 24 EF            [12] 2361 	add	a,#0xef
      0006C5 F8               [12] 2362 	mov	r0,a
      0006C6 E5 81            [12] 2363 	mov	a,sp
      0006C8 24 FB            [12] 2364 	add	a,#0xfb
      0006CA F9               [12] 2365 	mov	r1,a
      0006CB 74 A2            [12] 2366 	mov	a,#0xa2
      0006CD 26               [12] 2367 	add	a,@r0
      0006CE F7               [12] 2368 	mov	@r1,a
      0006CF E4               [12] 2369 	clr	a
      0006D0 08               [12] 2370 	inc	r0
      0006D1 36               [12] 2371 	addc	a,@r0
      0006D2 09               [12] 2372 	inc	r1
      0006D3 F7               [12] 2373 	mov	@r1,a
      0006D4 08               [12] 2374 	inc	r0
      0006D5 09               [12] 2375 	inc	r1
      0006D6 E6               [12] 2376 	mov	a,@r0
      0006D7 F7               [12] 2377 	mov	@r1,a
      0006D8 E5 81            [12] 2378 	mov	a,sp
      0006DA 24 FB            [12] 2379 	add	a,#0xfb
      0006DC F8               [12] 2380 	mov	r0,a
      0006DD 86 82            [24] 2381 	mov	dpl,@r0
      0006DF 08               [12] 2382 	inc	r0
      0006E0 86 83            [24] 2383 	mov	dph,@r0
      0006E2 08               [12] 2384 	inc	r0
      0006E3 86 F0            [24] 2385 	mov	b,@r0
      0006E5 E5 81            [12] 2386 	mov	a,sp
      0006E7 24 F9            [12] 2387 	add	a,#0xf9
      0006E9 F9               [12] 2388 	mov	r1,a
      0006EA 12r00r00         [24] 2389 	lcall	__gptrget
      0006ED F7               [12] 2390 	mov	@r1,a
      0006EE A3               [24] 2391 	inc	dptr
      0006EF 12r00r00         [24] 2392 	lcall	__gptrget
      0006F2 09               [12] 2393 	inc	r1
      0006F3 F7               [12] 2394 	mov	@r1,a
      0006F4 E5 81            [12] 2395 	mov	a,sp
      0006F6 24 F9            [12] 2396 	add	a,#0xf9
      0006F8 F8               [12] 2397 	mov	r0,a
      0006F9 C3               [12] 2398 	clr	c
      0006FA EE               [12] 2399 	mov	a,r6
      0006FB 96               [12] 2400 	subb	a,@r0
      0006FC EF               [12] 2401 	mov	a,r7
      0006FD 08               [12] 2402 	inc	r0
      0006FE 96               [12] 2403 	subb	a,@r0
      0006FF D0 07            [24] 2404 	pop	ar7
      000701 D0 06            [24] 2405 	pop	ar6
      000703 D0 05            [24] 2406 	pop	ar5
      000705 50 15            [24] 2407 	jnc	00105$
                                   2408 ;	../../core/net/rime/rudolph1.c:180: c->highest_chunk_heard = c->chunk;
      000707 8C 82            [24] 2409 	mov	dpl,r4
      000709 8B 83            [24] 2410 	mov	dph,r3
      00070B 8A F0            [24] 2411 	mov	b,r2
      00070D E5 81            [12] 2412 	mov	a,sp
      00070F 24 FC            [12] 2413 	add	a,#0xfc
      000711 F8               [12] 2414 	mov	r0,a
      000712 E6               [12] 2415 	mov	a,@r0
      000713 12r00r00         [24] 2416 	lcall	__gptrput
      000716 A3               [24] 2417 	inc	dptr
      000717 08               [12] 2418 	inc	r0
      000718 E6               [12] 2419 	mov	a,@r0
      000719 12r00r00         [24] 2420 	lcall	__gptrput
      00071C                       2421 00105$:
                                   2422 ;	../../core/net/rime/rudolph1.c:182: c->chunk++;
      00071C C0 05            [24] 2423 	push	ar5
      00071E C0 06            [24] 2424 	push	ar6
      000720 C0 07            [24] 2425 	push	ar7
      000722 E5 81            [12] 2426 	mov	a,sp
      000724 24 FB            [12] 2427 	add	a,#0xfb
      000726 F8               [12] 2428 	mov	r0,a
      000727 86 82            [24] 2429 	mov	dpl,@r0
      000729 08               [12] 2430 	inc	r0
      00072A 86 83            [24] 2431 	mov	dph,@r0
      00072C 08               [12] 2432 	inc	r0
      00072D 86 F0            [24] 2433 	mov	b,@r0
      00072F 12r00r00         [24] 2434 	lcall	__gptrget
      000732 FA               [12] 2435 	mov	r2,a
      000733 A3               [24] 2436 	inc	dptr
      000734 12r00r00         [24] 2437 	lcall	__gptrget
      000737 FF               [12] 2438 	mov	r7,a
      000738 0A               [12] 2439 	inc	r2
      000739 BA 00 01         [24] 2440 	cjne	r2,#0x00,00156$
      00073C 0F               [12] 2441 	inc	r7
      00073D                       2442 00156$:
      00073D E5 81            [12] 2443 	mov	a,sp
      00073F 24 FB            [12] 2444 	add	a,#0xfb
      000741 F8               [12] 2445 	mov	r0,a
      000742 86 82            [24] 2446 	mov	dpl,@r0
      000744 08               [12] 2447 	inc	r0
      000745 86 83            [24] 2448 	mov	dph,@r0
      000747 08               [12] 2449 	inc	r0
      000748 86 F0            [24] 2450 	mov	b,@r0
      00074A EA               [12] 2451 	mov	a,r2
      00074B 12r00r00         [24] 2452 	lcall	__gptrput
      00074E A3               [24] 2453 	inc	dptr
      00074F EF               [12] 2454 	mov	a,r7
      000750 12r00r00         [24] 2455 	lcall	__gptrput
      000753 D0 07            [24] 2456 	pop	ar7
      000755 D0 06            [24] 2457 	pop	ar6
      000757 D0 05            [24] 2458 	pop	ar5
      000759 80 63            [24] 2459 	sjmp	00111$
      00075B                       2460 00110$:
                                   2461 ;	../../core/net/rime/rudolph1.c:183: } else if(p->h.chunk > c->chunk) {
      00075B E5 81            [12] 2462 	mov	a,sp
      00075D 24 F9            [12] 2463 	add	a,#0xf9
      00075F F8               [12] 2464 	mov	r0,a
      000760 C3               [12] 2465 	clr	c
      000761 EB               [12] 2466 	mov	a,r3
      000762 96               [12] 2467 	subb	a,@r0
      000763 EC               [12] 2468 	mov	a,r4
      000764 08               [12] 2469 	inc	r0
      000765 96               [12] 2470 	subb	a,@r0
      000766 50 56            [24] 2471 	jnc	00111$
                                   2472 ;	../../core/net/rime/rudolph1.c:187: send_nack(c);
      000768 E5 81            [12] 2473 	mov	a,sp
      00076A 24 F2            [12] 2474 	add	a,#0xf2
      00076C F8               [12] 2475 	mov	r0,a
      00076D 86 82            [24] 2476 	mov	dpl,@r0
      00076F 08               [12] 2477 	inc	r0
      000770 86 83            [24] 2478 	mov	dph,@r0
      000772 08               [12] 2479 	inc	r0
      000773 86 F0            [24] 2480 	mov	b,@r0
      000775 C0 07            [24] 2481 	push	ar7
      000777 C0 06            [24] 2482 	push	ar6
      000779 C0 05            [24] 2483 	push	ar5
      00077B 12r03rA1         [24] 2484 	lcall	_send_nack
      00077E D0 05            [24] 2485 	pop	ar5
      000780 D0 06            [24] 2486 	pop	ar6
      000782 D0 07            [24] 2487 	pop	ar7
                                   2488 ;	../../core/net/rime/rudolph1.c:188: c->highest_chunk_heard = p->h.chunk;
      000784 E5 81            [12] 2489 	mov	a,sp
      000786 24 F2            [12] 2490 	add	a,#0xf2
      000788 F8               [12] 2491 	mov	r0,a
      000789 A9 81            [24] 2492 	mov	r1,sp
      00078B 19               [12] 2493 	dec	r1
      00078C 19               [12] 2494 	dec	r1
      00078D 74 A4            [12] 2495 	mov	a,#0xa4
      00078F 26               [12] 2496 	add	a,@r0
      000790 F7               [12] 2497 	mov	@r1,a
      000791 E4               [12] 2498 	clr	a
      000792 08               [12] 2499 	inc	r0
      000793 36               [12] 2500 	addc	a,@r0
      000794 09               [12] 2501 	inc	r1
      000795 F7               [12] 2502 	mov	@r1,a
      000796 08               [12] 2503 	inc	r0
      000797 09               [12] 2504 	inc	r1
      000798 E6               [12] 2505 	mov	a,@r0
      000799 F7               [12] 2506 	mov	@r1,a
      00079A 8D 82            [24] 2507 	mov	dpl,r5
      00079C 8E 83            [24] 2508 	mov	dph,r6
      00079E 8F F0            [24] 2509 	mov	b,r7
      0007A0 12r00r00         [24] 2510 	lcall	__gptrget
      0007A3 FC               [12] 2511 	mov	r4,a
      0007A4 A3               [24] 2512 	inc	dptr
      0007A5 12r00r00         [24] 2513 	lcall	__gptrget
      0007A8 FB               [12] 2514 	mov	r3,a
      0007A9 A8 81            [24] 2515 	mov	r0,sp
      0007AB 18               [12] 2516 	dec	r0
      0007AC 18               [12] 2517 	dec	r0
      0007AD 86 82            [24] 2518 	mov	dpl,@r0
      0007AF 08               [12] 2519 	inc	r0
      0007B0 86 83            [24] 2520 	mov	dph,@r0
      0007B2 08               [12] 2521 	inc	r0
      0007B3 86 F0            [24] 2522 	mov	b,@r0
      0007B5 EC               [12] 2523 	mov	a,r4
      0007B6 12r00r00         [24] 2524 	lcall	__gptrput
      0007B9 A3               [24] 2525 	inc	dptr
      0007BA EB               [12] 2526 	mov	a,r3
      0007BB 12r00r00         [24] 2527 	lcall	__gptrput
                                   2528 ;	../../core/net/rime/rudolph1.c:189: } else if(p->h.chunk < c->chunk) {
      0007BE                       2529 00111$:
                                   2530 ;	../../core/net/rime/rudolph1.c:196: if(c->highest_chunk_heard > p->h.chunk) {
      0007BE E5 81            [12] 2531 	mov	a,sp
      0007C0 24 F2            [12] 2532 	add	a,#0xf2
      0007C2 F8               [12] 2533 	mov	r0,a
      0007C3 74 A4            [12] 2534 	mov	a,#0xa4
      0007C5 26               [12] 2535 	add	a,@r0
      0007C6 FA               [12] 2536 	mov	r2,a
      0007C7 E4               [12] 2537 	clr	a
      0007C8 08               [12] 2538 	inc	r0
      0007C9 36               [12] 2539 	addc	a,@r0
      0007CA FB               [12] 2540 	mov	r3,a
      0007CB 08               [12] 2541 	inc	r0
      0007CC 86 04            [24] 2542 	mov	ar4,@r0
      0007CE 8A 82            [24] 2543 	mov	dpl,r2
      0007D0 8B 83            [24] 2544 	mov	dph,r3
      0007D2 8C F0            [24] 2545 	mov	b,r4
      0007D4 12r00r00         [24] 2546 	lcall	__gptrget
      0007D7 FA               [12] 2547 	mov	r2,a
      0007D8 A3               [24] 2548 	inc	dptr
      0007D9 12r00r00         [24] 2549 	lcall	__gptrget
      0007DC FB               [12] 2550 	mov	r3,a
      0007DD 8D 82            [24] 2551 	mov	dpl,r5
      0007DF 8E 83            [24] 2552 	mov	dph,r6
      0007E1 8F F0            [24] 2553 	mov	b,r7
      0007E3 12r00r00         [24] 2554 	lcall	__gptrget
      0007E6 FD               [12] 2555 	mov	r5,a
      0007E7 A3               [24] 2556 	inc	dptr
      0007E8 12r00r00         [24] 2557 	lcall	__gptrget
      0007EB FE               [12] 2558 	mov	r6,a
      0007EC C3               [12] 2559 	clr	c
      0007ED ED               [12] 2560 	mov	a,r5
      0007EE 9A               [12] 2561 	subb	a,r2
      0007EF EE               [12] 2562 	mov	a,r6
      0007F0 9B               [12] 2563 	subb	a,r3
      0007F1 50 10            [24] 2564 	jnc	00119$
                                   2565 ;	../../core/net/rime/rudolph1.c:197: send_nack(c);
      0007F3 E5 81            [12] 2566 	mov	a,sp
      0007F5 24 F2            [12] 2567 	add	a,#0xf2
      0007F7 F8               [12] 2568 	mov	r0,a
      0007F8 86 82            [24] 2569 	mov	dpl,@r0
      0007FA 08               [12] 2570 	inc	r0
      0007FB 86 83            [24] 2571 	mov	dph,@r0
      0007FD 08               [12] 2572 	inc	r0
      0007FE 86 F0            [24] 2573 	mov	b,@r0
      000800 12r03rA1         [24] 2574 	lcall	_send_nack
      000803                       2575 00119$:
                                   2576 ;	../../core/net/rime/rudolph1.c:203: }
      000803 E5 81            [12] 2577 	mov	a,sp
      000805 24 F1            [12] 2578 	add	a,#0xf1
      000807 F5 81            [12] 2579 	mov	sp,a
      000809 22               [24] 2580 	ret
                                   2581 ;------------------------------------------------------------
                                   2582 ;Allocation info for local variables in function 'recv_trickle'
                                   2583 ;------------------------------------------------------------
                                   2584 ;trickle                   Allocated to registers r5 r6 r7 
                                   2585 ;c                         Allocated to registers r5 r6 r7 
                                   2586 ;p                         Allocated to registers r2 r3 r4 
                                   2587 ;------------------------------------------------------------
                                   2588 ;	../../core/net/rime/rudolph1.c:206: recv_trickle(struct trickle_conn *trickle)
                                   2589 ;	-----------------------------------------
                                   2590 ;	 function recv_trickle
                                   2591 ;	-----------------------------------------
      00080A                       2592 _recv_trickle:
      00080A AD 82            [24] 2593 	mov	r5,dpl
      00080C AE 83            [24] 2594 	mov	r6,dph
      00080E AF F0            [24] 2595 	mov	r7,b
                                   2596 ;	../../core/net/rime/rudolph1.c:208: struct rudolph1_conn *c = (struct rudolph1_conn *)trickle;
                                   2597 ;	../../core/net/rime/rudolph1.c:209: struct rudolph1_datapacket *p = packetbuf_dataptr();
      000810 C0 07            [24] 2598 	push	ar7
      000812 C0 06            [24] 2599 	push	ar6
      000814 C0 05            [24] 2600 	push	ar5
      000816 12r00r00         [24] 2601 	lcall	_packetbuf_dataptr
      000819 AA 82            [24] 2602 	mov	r2,dpl
      00081B AB 83            [24] 2603 	mov	r3,dph
      00081D AC F0            [24] 2604 	mov	r4,b
      00081F D0 05            [24] 2605 	pop	ar5
      000821 D0 06            [24] 2606 	pop	ar6
      000823 D0 07            [24] 2607 	pop	ar7
                                   2608 ;	../../core/net/rime/rudolph1.c:211: if(p->h.type == TYPE_DATA) {
      000825 8A 82            [24] 2609 	mov	dpl,r2
      000827 8B 83            [24] 2610 	mov	dph,r3
      000829 8C F0            [24] 2611 	mov	b,r4
      00082B 12r00r00         [24] 2612 	lcall	__gptrget
      00082E 70 15            [24] 2613 	jnz	00103$
                                   2614 ;	../../core/net/rime/rudolph1.c:215: handle_data(c, p);
      000830 C0 02            [24] 2615 	push	ar2
      000832 C0 03            [24] 2616 	push	ar3
      000834 C0 04            [24] 2617 	push	ar4
      000836 8D 82            [24] 2618 	mov	dpl,r5
      000838 8E 83            [24] 2619 	mov	dph,r6
      00083A 8F F0            [24] 2620 	mov	b,r7
      00083C 12r04r79         [24] 2621 	lcall	_handle_data
      00083F 15 81            [12] 2622 	dec	sp
      000841 15 81            [12] 2623 	dec	sp
      000843 15 81            [12] 2624 	dec	sp
      000845                       2625 00103$:
                                   2626 ;	../../core/net/rime/rudolph1.c:217: }
      000845 22               [24] 2627 	ret
                                   2628 ;------------------------------------------------------------
                                   2629 ;Allocation info for local variables in function 'sent_ipolite'
                                   2630 ;------------------------------------------------------------
                                   2631 ;ipolite                   Allocated to registers 
                                   2632 ;------------------------------------------------------------
                                   2633 ;	../../core/net/rime/rudolph1.c:220: sent_ipolite(struct ipolite_conn *ipolite)
                                   2634 ;	-----------------------------------------
                                   2635 ;	 function sent_ipolite
                                   2636 ;	-----------------------------------------
      000846                       2637 _sent_ipolite:
                                   2638 ;	../../core/net/rime/rudolph1.c:224: }
      000846 22               [24] 2639 	ret
                                   2640 ;------------------------------------------------------------
                                   2641 ;Allocation info for local variables in function 'dropped_ipolite'
                                   2642 ;------------------------------------------------------------
                                   2643 ;ipolite                   Allocated to registers 
                                   2644 ;------------------------------------------------------------
                                   2645 ;	../../core/net/rime/rudolph1.c:227: dropped_ipolite(struct ipolite_conn *ipolite)
                                   2646 ;	-----------------------------------------
                                   2647 ;	 function dropped_ipolite
                                   2648 ;	-----------------------------------------
      000847                       2649 _dropped_ipolite:
                                   2650 ;	../../core/net/rime/rudolph1.c:231: }
      000847 22               [24] 2651 	ret
                                   2652 ;------------------------------------------------------------
                                   2653 ;Allocation info for local variables in function 'recv_ipolite'
                                   2654 ;------------------------------------------------------------
                                   2655 ;from                      Allocated to stack - sp -10
                                   2656 ;ipolite                   Allocated to registers r5 r6 r7 
                                   2657 ;c                         Allocated to stack - sp -5
                                   2658 ;p                         Allocated to stack - sp -2
                                   2659 ;sloc0                     Allocated to stack - sp +4
                                   2660 ;------------------------------------------------------------
                                   2661 ;	../../core/net/rime/rudolph1.c:234: recv_ipolite(struct ipolite_conn *ipolite, const rimeaddr_t *from)
                                   2662 ;	-----------------------------------------
                                   2663 ;	 function recv_ipolite
                                   2664 ;	-----------------------------------------
      000848                       2665 _recv_ipolite:
      000848 E5 81            [12] 2666 	mov	a,sp
      00084A 24 06            [12] 2667 	add	a,#0x06
      00084C F5 81            [12] 2668 	mov	sp,a
      00084E AD 82            [24] 2669 	mov	r5,dpl
      000850 AE 83            [24] 2670 	mov	r6,dph
      000852 AF F0            [24] 2671 	mov	r7,b
                                   2672 ;	../../core/net/rime/rudolph1.c:236: struct rudolph1_conn *c = (struct rudolph1_conn *)
      000854 ED               [12] 2673 	mov	a,r5
      000855 24 A5            [12] 2674 	add	a,#0xa5
      000857 FD               [12] 2675 	mov	r5,a
      000858 EE               [12] 2676 	mov	a,r6
      000859 34 FF            [12] 2677 	addc	a,#0xff
      00085B FE               [12] 2678 	mov	r6,a
      00085C E5 81            [12] 2679 	mov	a,sp
      00085E 24 FB            [12] 2680 	add	a,#0xfb
      000860 F8               [12] 2681 	mov	r0,a
      000861 A6 05            [24] 2682 	mov	@r0,ar5
      000863 08               [12] 2683 	inc	r0
      000864 A6 06            [24] 2684 	mov	@r0,ar6
      000866 08               [12] 2685 	inc	r0
      000867 A6 07            [24] 2686 	mov	@r0,ar7
                                   2687 ;	../../core/net/rime/rudolph1.c:238: struct rudolph1_datapacket *p = packetbuf_dataptr();
      000869 12r00r00         [24] 2688 	lcall	_packetbuf_dataptr
      00086C AA 82            [24] 2689 	mov	r2,dpl
      00086E AB 83            [24] 2690 	mov	r3,dph
      000870 AC F0            [24] 2691 	mov	r4,b
      000872 A8 81            [24] 2692 	mov	r0,sp
      000874 18               [12] 2693 	dec	r0
      000875 18               [12] 2694 	dec	r0
      000876 A6 02            [24] 2695 	mov	@r0,ar2
      000878 08               [12] 2696 	inc	r0
      000879 A6 03            [24] 2697 	mov	@r0,ar3
      00087B 08               [12] 2698 	inc	r0
      00087C A6 04            [24] 2699 	mov	@r0,ar4
                                   2700 ;	../../core/net/rime/rudolph1.c:244: c->nacks++;
      00087E E5 81            [12] 2701 	mov	a,sp
      000880 24 FB            [12] 2702 	add	a,#0xfb
      000882 F8               [12] 2703 	mov	r0,a
      000883 74 A7            [12] 2704 	mov	a,#0xa7
      000885 26               [12] 2705 	add	a,@r0
      000886 FD               [12] 2706 	mov	r5,a
      000887 E4               [12] 2707 	clr	a
      000888 08               [12] 2708 	inc	r0
      000889 36               [12] 2709 	addc	a,@r0
      00088A FE               [12] 2710 	mov	r6,a
      00088B 08               [12] 2711 	inc	r0
      00088C 86 07            [24] 2712 	mov	ar7,@r0
      00088E 8D 82            [24] 2713 	mov	dpl,r5
      000890 8E 83            [24] 2714 	mov	dph,r6
      000892 8F F0            [24] 2715 	mov	b,r7
      000894 12r00r00         [24] 2716 	lcall	__gptrget
      000897 FC               [12] 2717 	mov	r4,a
      000898 0C               [12] 2718 	inc	r4
      000899 8D 82            [24] 2719 	mov	dpl,r5
      00089B 8E 83            [24] 2720 	mov	dph,r6
      00089D 8F F0            [24] 2721 	mov	b,r7
      00089F EC               [12] 2722 	mov	a,r4
      0008A0 12r00r00         [24] 2723 	lcall	__gptrput
                                   2724 ;	../../core/net/rime/rudolph1.c:246: if(p->h.type == TYPE_NACK) {
      0008A3 A8 81            [24] 2725 	mov	r0,sp
      0008A5 18               [12] 2726 	dec	r0
      0008A6 18               [12] 2727 	dec	r0
      0008A7 86 82            [24] 2728 	mov	dpl,@r0
      0008A9 08               [12] 2729 	inc	r0
      0008AA 86 83            [24] 2730 	mov	dph,@r0
      0008AC 08               [12] 2731 	inc	r0
      0008AD 86 F0            [24] 2732 	mov	b,@r0
      0008AF 12r00r00         [24] 2733 	lcall	__gptrget
      0008B2 FF               [12] 2734 	mov	r7,a
      0008B3 BF 01 02         [24] 2735 	cjne	r7,#0x01,00135$
      0008B6 80 03            [24] 2736 	sjmp	00136$
      0008B8                       2737 00135$:
      0008B8 02r09rF7         [24] 2738 	ljmp	00111$
      0008BB                       2739 00136$:
                                   2740 ;	../../core/net/rime/rudolph1.c:251: if(p->h.version == c->version) {
      0008BB A8 81            [24] 2741 	mov	r0,sp
      0008BD 18               [12] 2742 	dec	r0
      0008BE 18               [12] 2743 	dec	r0
      0008BF 74 01            [12] 2744 	mov	a,#0x01
      0008C1 26               [12] 2745 	add	a,@r0
      0008C2 FC               [12] 2746 	mov	r4,a
      0008C3 E4               [12] 2747 	clr	a
      0008C4 08               [12] 2748 	inc	r0
      0008C5 36               [12] 2749 	addc	a,@r0
      0008C6 FD               [12] 2750 	mov	r5,a
      0008C7 08               [12] 2751 	inc	r0
      0008C8 86 06            [24] 2752 	mov	ar6,@r0
      0008CA 8C 82            [24] 2753 	mov	dpl,r4
      0008CC 8D 83            [24] 2754 	mov	dph,r5
      0008CE 8E F0            [24] 2755 	mov	b,r6
      0008D0 12r00r00         [24] 2756 	lcall	__gptrget
      0008D3 FE               [12] 2757 	mov	r6,a
      0008D4 E5 81            [12] 2758 	mov	a,sp
      0008D6 24 FB            [12] 2759 	add	a,#0xfb
      0008D8 F8               [12] 2760 	mov	r0,a
      0008D9 74 A6            [12] 2761 	mov	a,#0xa6
      0008DB 26               [12] 2762 	add	a,@r0
      0008DC FB               [12] 2763 	mov	r3,a
      0008DD E4               [12] 2764 	clr	a
      0008DE 08               [12] 2765 	inc	r0
      0008DF 36               [12] 2766 	addc	a,@r0
      0008E0 FC               [12] 2767 	mov	r4,a
      0008E1 08               [12] 2768 	inc	r0
      0008E2 86 05            [24] 2769 	mov	ar5,@r0
      0008E4 8B 82            [24] 2770 	mov	dpl,r3
      0008E6 8C 83            [24] 2771 	mov	dph,r4
      0008E8 8D F0            [24] 2772 	mov	b,r5
      0008EA 12r00r00         [24] 2773 	lcall	__gptrget
      0008ED FD               [12] 2774 	mov	r5,a
      0008EE EE               [12] 2775 	mov	a,r6
      0008EF B5 05 02         [24] 2776 	cjne	a,ar5,00137$
      0008F2 80 03            [24] 2777 	sjmp	00138$
      0008F4                       2778 00137$:
      0008F4 02r09r87         [24] 2779 	ljmp	00106$
      0008F7                       2780 00138$:
                                   2781 ;	../../core/net/rime/rudolph1.c:252: if(p->h.chunk < c->chunk) {
      0008F7 A8 81            [24] 2782 	mov	r0,sp
      0008F9 18               [12] 2783 	dec	r0
      0008FA 18               [12] 2784 	dec	r0
      0008FB 74 02            [12] 2785 	mov	a,#0x02
      0008FD 26               [12] 2786 	add	a,@r0
      0008FE FA               [12] 2787 	mov	r2,a
      0008FF E4               [12] 2788 	clr	a
      000900 08               [12] 2789 	inc	r0
      000901 36               [12] 2790 	addc	a,@r0
      000902 FB               [12] 2791 	mov	r3,a
      000903 08               [12] 2792 	inc	r0
      000904 86 04            [24] 2793 	mov	ar4,@r0
      000906 8A 82            [24] 2794 	mov	dpl,r2
      000908 8B 83            [24] 2795 	mov	dph,r3
      00090A 8C F0            [24] 2796 	mov	b,r4
      00090C 12r00r00         [24] 2797 	lcall	__gptrget
      00090F FF               [12] 2798 	mov	r7,a
      000910 A3               [24] 2799 	inc	dptr
      000911 12r00r00         [24] 2800 	lcall	__gptrget
      000914 FE               [12] 2801 	mov	r6,a
      000915 E5 81            [12] 2802 	mov	a,sp
      000917 24 FB            [12] 2803 	add	a,#0xfb
      000919 F8               [12] 2804 	mov	r0,a
      00091A 74 A2            [12] 2805 	mov	a,#0xa2
      00091C 26               [12] 2806 	add	a,@r0
      00091D FA               [12] 2807 	mov	r2,a
      00091E E4               [12] 2808 	clr	a
      00091F 08               [12] 2809 	inc	r0
      000920 36               [12] 2810 	addc	a,@r0
      000921 FB               [12] 2811 	mov	r3,a
      000922 08               [12] 2812 	inc	r0
      000923 86 04            [24] 2813 	mov	ar4,@r0
      000925 8A 82            [24] 2814 	mov	dpl,r2
      000927 8B 83            [24] 2815 	mov	dph,r3
      000929 8C F0            [24] 2816 	mov	b,r4
      00092B 12r00r00         [24] 2817 	lcall	__gptrget
      00092E FA               [12] 2818 	mov	r2,a
      00092F A3               [24] 2819 	inc	dptr
      000930 12r00r00         [24] 2820 	lcall	__gptrget
      000933 FB               [12] 2821 	mov	r3,a
      000934 C3               [12] 2822 	clr	c
      000935 EF               [12] 2823 	mov	a,r7
      000936 9A               [12] 2824 	subb	a,r2
      000937 EE               [12] 2825 	mov	a,r6
      000938 9B               [12] 2826 	subb	a,r3
      000939 40 03            [24] 2827 	jc	00139$
      00093B 02r0Ar1F         [24] 2828 	ljmp	00113$
      00093E                       2829 00139$:
                                   2830 ;	../../core/net/rime/rudolph1.c:257: format_data(c, p->h.chunk);
      00093E 8F 03            [24] 2831 	mov	ar3,r7
      000940 8E 04            [24] 2832 	mov	ar4,r6
      000942 C0 03            [24] 2833 	push	ar3
      000944 C0 04            [24] 2834 	push	ar4
      000946 E5 81            [12] 2835 	mov	a,sp
      000948 24 F9            [12] 2836 	add	a,#0xf9
      00094A F8               [12] 2837 	mov	r0,a
      00094B 86 82            [24] 2838 	mov	dpl,@r0
      00094D 08               [12] 2839 	inc	r0
      00094E 86 83            [24] 2840 	mov	dph,@r0
      000950 08               [12] 2841 	inc	r0
      000951 86 F0            [24] 2842 	mov	b,@r0
      000953 12r00rAA         [24] 2843 	lcall	_format_data
      000956 15 81            [12] 2844 	dec	sp
      000958 15 81            [12] 2845 	dec	sp
                                   2846 ;	../../core/net/rime/rudolph1.c:258: ipolite_send(&c->ipolite, REPAIR_TIMEOUT, sizeof(struct rudolph1_hdr));
      00095A E5 81            [12] 2847 	mov	a,sp
      00095C 24 FB            [12] 2848 	add	a,#0xfb
      00095E F8               [12] 2849 	mov	r0,a
      00095F 74 5B            [12] 2850 	mov	a,#0x5b
      000961 26               [12] 2851 	add	a,@r0
      000962 FA               [12] 2852 	mov	r2,a
      000963 E4               [12] 2853 	clr	a
      000964 08               [12] 2854 	inc	r0
      000965 36               [12] 2855 	addc	a,@r0
      000966 FB               [12] 2856 	mov	r3,a
      000967 08               [12] 2857 	inc	r0
      000968 86 04            [24] 2858 	mov	ar4,@r0
      00096A 74 04            [12] 2859 	mov	a,#0x04
      00096C C0 E0            [24] 2860 	push	acc
      00096E 74 20            [12] 2861 	mov	a,#0x20
      000970 C0 E0            [24] 2862 	push	acc
      000972 E4               [12] 2863 	clr	a
      000973 C0 E0            [24] 2864 	push	acc
      000975 8A 82            [24] 2865 	mov	dpl,r2
      000977 8B 83            [24] 2866 	mov	dph,r3
      000979 8C F0            [24] 2867 	mov	b,r4
      00097B 12r00r00         [24] 2868 	lcall	_ipolite_send
      00097E 15 81            [12] 2869 	dec	sp
      000980 15 81            [12] 2870 	dec	sp
      000982 15 81            [12] 2871 	dec	sp
      000984 02r0Ar1F         [24] 2872 	ljmp	00113$
      000987                       2873 00106$:
                                   2874 ;	../../core/net/rime/rudolph1.c:260: } else if(LT(p->h.version, c->version)) {
      000987 EE               [12] 2875 	mov	a,r6
      000988 C3               [12] 2876 	clr	c
      000989 9D               [12] 2877 	subb	a,r5
      00098A FE               [12] 2878 	mov	r6,a
      00098B 20 E7 03         [24] 2879 	jb	acc.7,00140$
      00098E 02r0Ar1F         [24] 2880 	ljmp	00113$
      000991                       2881 00140$:
                                   2882 ;	../../core/net/rime/rudolph1.c:261: format_data(c, 0);
      000991 E4               [12] 2883 	clr	a
      000992 C0 E0            [24] 2884 	push	acc
      000994 C0 E0            [24] 2885 	push	acc
      000996 E5 81            [12] 2886 	mov	a,sp
      000998 24 F9            [12] 2887 	add	a,#0xf9
      00099A F8               [12] 2888 	mov	r0,a
      00099B 86 82            [24] 2889 	mov	dpl,@r0
      00099D 08               [12] 2890 	inc	r0
      00099E 86 83            [24] 2891 	mov	dph,@r0
      0009A0 08               [12] 2892 	inc	r0
      0009A1 86 F0            [24] 2893 	mov	b,@r0
      0009A3 12r00rAA         [24] 2894 	lcall	_format_data
      0009A6 15 81            [12] 2895 	dec	sp
      0009A8 15 81            [12] 2896 	dec	sp
                                   2897 ;	../../core/net/rime/rudolph1.c:262: ipolite_send(&c->ipolite, c->send_interval / 2, sizeof(struct rudolph1_hdr));
      0009AA E5 81            [12] 2898 	mov	a,sp
      0009AC 24 FB            [12] 2899 	add	a,#0xfb
      0009AE F8               [12] 2900 	mov	r0,a
      0009AF 74 A0            [12] 2901 	mov	a,#0xa0
      0009B1 26               [12] 2902 	add	a,@r0
      0009B2 FC               [12] 2903 	mov	r4,a
      0009B3 E4               [12] 2904 	clr	a
      0009B4 08               [12] 2905 	inc	r0
      0009B5 36               [12] 2906 	addc	a,@r0
      0009B6 FD               [12] 2907 	mov	r5,a
      0009B7 08               [12] 2908 	inc	r0
      0009B8 86 06            [24] 2909 	mov	ar6,@r0
      0009BA 8C 82            [24] 2910 	mov	dpl,r4
      0009BC 8D 83            [24] 2911 	mov	dph,r5
      0009BE 8E F0            [24] 2912 	mov	b,r6
      0009C0 12r00r00         [24] 2913 	lcall	__gptrget
      0009C3 FC               [12] 2914 	mov	r4,a
      0009C4 A3               [24] 2915 	inc	dptr
      0009C5 12r00r00         [24] 2916 	lcall	__gptrget
      0009C8 C3               [12] 2917 	clr	c
      0009C9 13               [12] 2918 	rrc	a
      0009CA CC               [12] 2919 	xch	a,r4
      0009CB 13               [12] 2920 	rrc	a
      0009CC CC               [12] 2921 	xch	a,r4
      0009CD FD               [12] 2922 	mov	r5,a
      0009CE E5 81            [12] 2923 	mov	a,sp
      0009D0 24 FB            [12] 2924 	add	a,#0xfb
      0009D2 F8               [12] 2925 	mov	r0,a
      0009D3 74 5B            [12] 2926 	mov	a,#0x5b
      0009D5 26               [12] 2927 	add	a,@r0
      0009D6 FA               [12] 2928 	mov	r2,a
      0009D7 E4               [12] 2929 	clr	a
      0009D8 08               [12] 2930 	inc	r0
      0009D9 36               [12] 2931 	addc	a,@r0
      0009DA FB               [12] 2932 	mov	r3,a
      0009DB 08               [12] 2933 	inc	r0
      0009DC 86 06            [24] 2934 	mov	ar6,@r0
      0009DE 74 04            [12] 2935 	mov	a,#0x04
      0009E0 C0 E0            [24] 2936 	push	acc
      0009E2 C0 04            [24] 2937 	push	ar4
      0009E4 C0 05            [24] 2938 	push	ar5
      0009E6 8A 82            [24] 2939 	mov	dpl,r2
      0009E8 8B 83            [24] 2940 	mov	dph,r3
      0009EA 8E F0            [24] 2941 	mov	b,r6
      0009EC 12r00r00         [24] 2942 	lcall	_ipolite_send
      0009EF 15 81            [12] 2943 	dec	sp
      0009F1 15 81            [12] 2944 	dec	sp
      0009F3 15 81            [12] 2945 	dec	sp
      0009F5 80 28            [24] 2946 	sjmp	00113$
      0009F7                       2947 00111$:
                                   2948 ;	../../core/net/rime/rudolph1.c:264: } else if(p->h.type == TYPE_DATA) {
      0009F7 EF               [12] 2949 	mov	a,r7
      0009F8 70 25            [24] 2950 	jnz	00113$
                                   2951 ;	../../core/net/rime/rudolph1.c:269: handle_data(c, p);
      0009FA A8 81            [24] 2952 	mov	r0,sp
      0009FC 18               [12] 2953 	dec	r0
      0009FD 18               [12] 2954 	dec	r0
      0009FE E6               [12] 2955 	mov	a,@r0
      0009FF C0 E0            [24] 2956 	push	acc
      000A01 08               [12] 2957 	inc	r0
      000A02 E6               [12] 2958 	mov	a,@r0
      000A03 C0 E0            [24] 2959 	push	acc
      000A05 08               [12] 2960 	inc	r0
      000A06 E6               [12] 2961 	mov	a,@r0
      000A07 C0 E0            [24] 2962 	push	acc
      000A09 E5 81            [12] 2963 	mov	a,sp
      000A0B 24 F8            [12] 2964 	add	a,#0xf8
      000A0D F8               [12] 2965 	mov	r0,a
      000A0E 86 82            [24] 2966 	mov	dpl,@r0
      000A10 08               [12] 2967 	inc	r0
      000A11 86 83            [24] 2968 	mov	dph,@r0
      000A13 08               [12] 2969 	inc	r0
      000A14 86 F0            [24] 2970 	mov	b,@r0
      000A16 12r04r79         [24] 2971 	lcall	_handle_data
      000A19 15 81            [12] 2972 	dec	sp
      000A1B 15 81            [12] 2973 	dec	sp
      000A1D 15 81            [12] 2974 	dec	sp
      000A1F                       2975 00113$:
                                   2976 ;	../../core/net/rime/rudolph1.c:271: }
      000A1F E5 81            [12] 2977 	mov	a,sp
      000A21 24 FA            [12] 2978 	add	a,#0xfa
      000A23 F5 81            [12] 2979 	mov	sp,a
      000A25 22               [24] 2980 	ret
                                   2981 ;------------------------------------------------------------
                                   2982 ;Allocation info for local variables in function 'send_next_packet'
                                   2983 ;------------------------------------------------------------
                                   2984 ;ptr                       Allocated to registers r5 r6 r7 
                                   2985 ;c                         Allocated to stack - sp -2
                                   2986 ;len                       Allocated to registers r3 r4 
                                   2987 ;sloc0                     Allocated to stack - sp -7
                                   2988 ;sloc1                     Allocated to stack - sp -5
                                   2989 ;------------------------------------------------------------
                                   2990 ;	../../core/net/rime/rudolph1.c:274: send_next_packet(void *ptr)
                                   2991 ;	-----------------------------------------
                                   2992 ;	 function send_next_packet
                                   2993 ;	-----------------------------------------
      000A26                       2994 _send_next_packet:
      000A26 E5 81            [12] 2995 	mov	a,sp
      000A28 24 08            [12] 2996 	add	a,#0x08
      000A2A F5 81            [12] 2997 	mov	sp,a
      000A2C AD 82            [24] 2998 	mov	r5,dpl
      000A2E AE 83            [24] 2999 	mov	r6,dph
      000A30 AF F0            [24] 3000 	mov	r7,b
                                   3001 ;	../../core/net/rime/rudolph1.c:276: struct rudolph1_conn *c = ptr;
      000A32 A8 81            [24] 3002 	mov	r0,sp
      000A34 18               [12] 3003 	dec	r0
      000A35 18               [12] 3004 	dec	r0
      000A36 A6 05            [24] 3005 	mov	@r0,ar5
      000A38 08               [12] 3006 	inc	r0
      000A39 A6 06            [24] 3007 	mov	@r0,ar6
      000A3B 08               [12] 3008 	inc	r0
      000A3C A6 07            [24] 3009 	mov	@r0,ar7
                                   3010 ;	../../core/net/rime/rudolph1.c:278: if(c->nacks == 0) {
      000A3E A8 81            [24] 3011 	mov	r0,sp
      000A40 18               [12] 3012 	dec	r0
      000A41 18               [12] 3013 	dec	r0
      000A42 74 A7            [12] 3014 	mov	a,#0xa7
      000A44 26               [12] 3015 	add	a,@r0
      000A45 FA               [12] 3016 	mov	r2,a
      000A46 E4               [12] 3017 	clr	a
      000A47 08               [12] 3018 	inc	r0
      000A48 36               [12] 3019 	addc	a,@r0
      000A49 FB               [12] 3020 	mov	r3,a
      000A4A 08               [12] 3021 	inc	r0
      000A4B 86 04            [24] 3022 	mov	ar4,@r0
      000A4D 8A 82            [24] 3023 	mov	dpl,r2
      000A4F 8B 83            [24] 3024 	mov	dph,r3
      000A51 8C F0            [24] 3025 	mov	b,r4
      000A53 12r00r00         [24] 3026 	lcall	__gptrget
      000A56 60 03            [24] 3027 	jz	00116$
      000A58 02r0Br89         [24] 3028 	ljmp	00104$
      000A5B                       3029 00116$:
                                   3030 ;	../../core/net/rime/rudolph1.c:279: len = format_data(c, c->chunk);
      000A5B A8 81            [24] 3031 	mov	r0,sp
      000A5D 18               [12] 3032 	dec	r0
      000A5E 18               [12] 3033 	dec	r0
      000A5F 74 A2            [12] 3034 	mov	a,#0xa2
      000A61 26               [12] 3035 	add	a,@r0
      000A62 FA               [12] 3036 	mov	r2,a
      000A63 E4               [12] 3037 	clr	a
      000A64 08               [12] 3038 	inc	r0
      000A65 36               [12] 3039 	addc	a,@r0
      000A66 FB               [12] 3040 	mov	r3,a
      000A67 08               [12] 3041 	inc	r0
      000A68 86 04            [24] 3042 	mov	ar4,@r0
      000A6A 8A 82            [24] 3043 	mov	dpl,r2
      000A6C 8B 83            [24] 3044 	mov	dph,r3
      000A6E 8C F0            [24] 3045 	mov	b,r4
      000A70 12r00r00         [24] 3046 	lcall	__gptrget
      000A73 FA               [12] 3047 	mov	r2,a
      000A74 A3               [24] 3048 	inc	dptr
      000A75 12r00r00         [24] 3049 	lcall	__gptrget
      000A78 FB               [12] 3050 	mov	r3,a
      000A79 C0 02            [24] 3051 	push	ar2
      000A7B C0 03            [24] 3052 	push	ar3
      000A7D E5 81            [12] 3053 	mov	a,sp
      000A7F 24 FC            [12] 3054 	add	a,#0xfc
      000A81 F8               [12] 3055 	mov	r0,a
      000A82 86 82            [24] 3056 	mov	dpl,@r0
      000A84 08               [12] 3057 	inc	r0
      000A85 86 83            [24] 3058 	mov	dph,@r0
      000A87 08               [12] 3059 	inc	r0
      000A88 86 F0            [24] 3060 	mov	b,@r0
      000A8A 12r00rAA         [24] 3061 	lcall	_format_data
      000A8D AB 82            [24] 3062 	mov	r3,dpl
      000A8F AC 83            [24] 3063 	mov	r4,dph
      000A91 15 81            [12] 3064 	dec	sp
      000A93 15 81            [12] 3065 	dec	sp
                                   3066 ;	../../core/net/rime/rudolph1.c:280: trickle_send(&c->trickle);
      000A95 A8 81            [24] 3067 	mov	r0,sp
      000A97 18               [12] 3068 	dec	r0
      000A98 18               [12] 3069 	dec	r0
      000A99 86 82            [24] 3070 	mov	dpl,@r0
      000A9B 08               [12] 3071 	inc	r0
      000A9C 86 83            [24] 3072 	mov	dph,@r0
      000A9E 08               [12] 3073 	inc	r0
      000A9F 86 F0            [24] 3074 	mov	b,@r0
      000AA1 C0 04            [24] 3075 	push	ar4
      000AA3 C0 03            [24] 3076 	push	ar3
      000AA5 12r00r00         [24] 3077 	lcall	_trickle_send
      000AA8 D0 03            [24] 3078 	pop	ar3
      000AAA D0 04            [24] 3079 	pop	ar4
                                   3080 ;	../../core/net/rime/rudolph1.c:281: if(len == RUDOLPH1_DATASIZE) {
      000AAC BB 40 6B         [24] 3081 	cjne	r3,#0x40,00102$
      000AAF BC 00 68         [24] 3082 	cjne	r4,#0x00,00102$
                                   3083 ;	../../core/net/rime/rudolph1.c:282: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
      000AB2 A8 81            [24] 3084 	mov	r0,sp
      000AB4 18               [12] 3085 	dec	r0
      000AB5 18               [12] 3086 	dec	r0
      000AB6 86 02            [24] 3087 	mov	ar2,@r0
      000AB8 08               [12] 3088 	inc	r0
      000AB9 86 03            [24] 3089 	mov	ar3,@r0
      000ABB 08               [12] 3090 	inc	r0
      000ABC 86 04            [24] 3091 	mov	ar4,@r0
      000ABE A8 81            [24] 3092 	mov	r0,sp
      000AC0 18               [12] 3093 	dec	r0
      000AC1 18               [12] 3094 	dec	r0
      000AC2 74 A0            [12] 3095 	mov	a,#0xa0
      000AC4 26               [12] 3096 	add	a,@r0
      000AC5 FD               [12] 3097 	mov	r5,a
      000AC6 E4               [12] 3098 	clr	a
      000AC7 08               [12] 3099 	inc	r0
      000AC8 36               [12] 3100 	addc	a,@r0
      000AC9 FE               [12] 3101 	mov	r6,a
      000ACA 08               [12] 3102 	inc	r0
      000ACB 86 07            [24] 3103 	mov	ar7,@r0
      000ACD 8D 82            [24] 3104 	mov	dpl,r5
      000ACF 8E 83            [24] 3105 	mov	dph,r6
      000AD1 8F F0            [24] 3106 	mov	b,r7
      000AD3 E5 81            [12] 3107 	mov	a,sp
      000AD5 24 F9            [12] 3108 	add	a,#0xf9
      000AD7 F8               [12] 3109 	mov	r0,a
      000AD8 12r00r00         [24] 3110 	lcall	__gptrget
      000ADB F6               [12] 3111 	mov	@r0,a
      000ADC A3               [24] 3112 	inc	dptr
      000ADD 12r00r00         [24] 3113 	lcall	__gptrget
      000AE0 08               [12] 3114 	inc	r0
      000AE1 F6               [12] 3115 	mov	@r0,a
      000AE2 A8 81            [24] 3116 	mov	r0,sp
      000AE4 18               [12] 3117 	dec	r0
      000AE5 18               [12] 3118 	dec	r0
      000AE6 74 8B            [12] 3119 	mov	a,#0x8b
      000AE8 26               [12] 3120 	add	a,@r0
      000AE9 FD               [12] 3121 	mov	r5,a
      000AEA E4               [12] 3122 	clr	a
      000AEB 08               [12] 3123 	inc	r0
      000AEC 36               [12] 3124 	addc	a,@r0
      000AED FE               [12] 3125 	mov	r6,a
      000AEE 08               [12] 3126 	inc	r0
      000AEF 86 07            [24] 3127 	mov	ar7,@r0
      000AF1 C0 02            [24] 3128 	push	ar2
      000AF3 C0 03            [24] 3129 	push	ar3
      000AF5 C0 04            [24] 3130 	push	ar4
      000AF7 74r26            [12] 3131 	mov	a,#_send_next_packet
      000AF9 C0 E0            [24] 3132 	push	acc
      000AFB 74s0A            [12] 3133 	mov	a,#(_send_next_packet >> 8)
      000AFD C0 E0            [24] 3134 	push	acc
      000AFF E5 81            [12] 3135 	mov	a,sp
      000B01 24 F4            [12] 3136 	add	a,#0xf4
      000B03 F8               [12] 3137 	mov	r0,a
      000B04 E6               [12] 3138 	mov	a,@r0
      000B05 C0 E0            [24] 3139 	push	acc
      000B07 08               [12] 3140 	inc	r0
      000B08 E6               [12] 3141 	mov	a,@r0
      000B09 C0 E0            [24] 3142 	push	acc
      000B0B 8D 82            [24] 3143 	mov	dpl,r5
      000B0D 8E 83            [24] 3144 	mov	dph,r6
      000B0F 8F F0            [24] 3145 	mov	b,r7
      000B11 12r00r00         [24] 3146 	lcall	_ctimer_set
      000B14 E5 81            [12] 3147 	mov	a,sp
      000B16 24 F9            [12] 3148 	add	a,#0xf9
      000B18 F5 81            [12] 3149 	mov	sp,a
      000B1A                       3150 00102$:
                                   3151 ;	../../core/net/rime/rudolph1.c:288: c->highest_chunk_heard = c->chunk;
      000B1A A8 81            [24] 3152 	mov	r0,sp
      000B1C 18               [12] 3153 	dec	r0
      000B1D 18               [12] 3154 	dec	r0
      000B1E E5 81            [12] 3155 	mov	a,sp
      000B20 24 FB            [12] 3156 	add	a,#0xfb
      000B22 F9               [12] 3157 	mov	r1,a
      000B23 74 A4            [12] 3158 	mov	a,#0xa4
      000B25 26               [12] 3159 	add	a,@r0
      000B26 F7               [12] 3160 	mov	@r1,a
      000B27 E4               [12] 3161 	clr	a
      000B28 08               [12] 3162 	inc	r0
      000B29 36               [12] 3163 	addc	a,@r0
      000B2A 09               [12] 3164 	inc	r1
      000B2B F7               [12] 3165 	mov	@r1,a
      000B2C 08               [12] 3166 	inc	r0
      000B2D 09               [12] 3167 	inc	r1
      000B2E E6               [12] 3168 	mov	a,@r0
      000B2F F7               [12] 3169 	mov	@r1,a
      000B30 A8 81            [24] 3170 	mov	r0,sp
      000B32 18               [12] 3171 	dec	r0
      000B33 18               [12] 3172 	dec	r0
      000B34 74 A2            [12] 3173 	mov	a,#0xa2
      000B36 26               [12] 3174 	add	a,@r0
      000B37 FA               [12] 3175 	mov	r2,a
      000B38 E4               [12] 3176 	clr	a
      000B39 08               [12] 3177 	inc	r0
      000B3A 36               [12] 3178 	addc	a,@r0
      000B3B FB               [12] 3179 	mov	r3,a
      000B3C 08               [12] 3180 	inc	r0
      000B3D 86 04            [24] 3181 	mov	ar4,@r0
      000B3F 8A 82            [24] 3182 	mov	dpl,r2
      000B41 8B 83            [24] 3183 	mov	dph,r3
      000B43 8C F0            [24] 3184 	mov	b,r4
      000B45 12r00r00         [24] 3185 	lcall	__gptrget
      000B48 FF               [12] 3186 	mov	r7,a
      000B49 A3               [24] 3187 	inc	dptr
      000B4A 12r00r00         [24] 3188 	lcall	__gptrget
      000B4D FE               [12] 3189 	mov	r6,a
      000B4E E5 81            [12] 3190 	mov	a,sp
      000B50 24 FB            [12] 3191 	add	a,#0xfb
      000B52 F8               [12] 3192 	mov	r0,a
      000B53 86 82            [24] 3193 	mov	dpl,@r0
      000B55 08               [12] 3194 	inc	r0
      000B56 86 83            [24] 3195 	mov	dph,@r0
      000B58 08               [12] 3196 	inc	r0
      000B59 86 F0            [24] 3197 	mov	b,@r0
      000B5B EF               [12] 3198 	mov	a,r7
      000B5C 12r00r00         [24] 3199 	lcall	__gptrput
      000B5F A3               [24] 3200 	inc	dptr
      000B60 EE               [12] 3201 	mov	a,r6
      000B61 12r00r00         [24] 3202 	lcall	__gptrput
                                   3203 ;	../../core/net/rime/rudolph1.c:289: c->chunk++;
      000B64 8A 82            [24] 3204 	mov	dpl,r2
      000B66 8B 83            [24] 3205 	mov	dph,r3
      000B68 8C F0            [24] 3206 	mov	b,r4
      000B6A 12r00r00         [24] 3207 	lcall	__gptrget
      000B6D FE               [12] 3208 	mov	r6,a
      000B6E A3               [24] 3209 	inc	dptr
      000B6F 12r00r00         [24] 3210 	lcall	__gptrget
      000B72 FF               [12] 3211 	mov	r7,a
      000B73 0E               [12] 3212 	inc	r6
      000B74 BE 00 01         [24] 3213 	cjne	r6,#0x00,00119$
      000B77 0F               [12] 3214 	inc	r7
      000B78                       3215 00119$:
      000B78 8A 82            [24] 3216 	mov	dpl,r2
      000B7A 8B 83            [24] 3217 	mov	dph,r3
      000B7C 8C F0            [24] 3218 	mov	b,r4
      000B7E EE               [12] 3219 	mov	a,r6
      000B7F 12r00r00         [24] 3220 	lcall	__gptrput
      000B82 A3               [24] 3221 	inc	dptr
      000B83 EF               [12] 3222 	mov	a,r7
      000B84 12r00r00         [24] 3223 	lcall	__gptrput
      000B87 80 68            [24] 3224 	sjmp	00105$
      000B89                       3225 00104$:
                                   3226 ;	../../core/net/rime/rudolph1.c:292: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
      000B89 A8 81            [24] 3227 	mov	r0,sp
      000B8B 18               [12] 3228 	dec	r0
      000B8C 18               [12] 3229 	dec	r0
      000B8D 86 05            [24] 3230 	mov	ar5,@r0
      000B8F 08               [12] 3231 	inc	r0
      000B90 86 06            [24] 3232 	mov	ar6,@r0
      000B92 08               [12] 3233 	inc	r0
      000B93 86 07            [24] 3234 	mov	ar7,@r0
      000B95 A8 81            [24] 3235 	mov	r0,sp
      000B97 18               [12] 3236 	dec	r0
      000B98 18               [12] 3237 	dec	r0
      000B99 74 A0            [12] 3238 	mov	a,#0xa0
      000B9B 26               [12] 3239 	add	a,@r0
      000B9C FA               [12] 3240 	mov	r2,a
      000B9D E4               [12] 3241 	clr	a
      000B9E 08               [12] 3242 	inc	r0
      000B9F 36               [12] 3243 	addc	a,@r0
      000BA0 FB               [12] 3244 	mov	r3,a
      000BA1 08               [12] 3245 	inc	r0
      000BA2 86 04            [24] 3246 	mov	ar4,@r0
      000BA4 8A 82            [24] 3247 	mov	dpl,r2
      000BA6 8B 83            [24] 3248 	mov	dph,r3
      000BA8 8C F0            [24] 3249 	mov	b,r4
      000BAA E5 81            [12] 3250 	mov	a,sp
      000BAC 24 FB            [12] 3251 	add	a,#0xfb
      000BAE F8               [12] 3252 	mov	r0,a
      000BAF 12r00r00         [24] 3253 	lcall	__gptrget
      000BB2 F6               [12] 3254 	mov	@r0,a
      000BB3 A3               [24] 3255 	inc	dptr
      000BB4 12r00r00         [24] 3256 	lcall	__gptrget
      000BB7 08               [12] 3257 	inc	r0
      000BB8 F6               [12] 3258 	mov	@r0,a
      000BB9 A8 81            [24] 3259 	mov	r0,sp
      000BBB 18               [12] 3260 	dec	r0
      000BBC 18               [12] 3261 	dec	r0
      000BBD 74 8B            [12] 3262 	mov	a,#0x8b
      000BBF 26               [12] 3263 	add	a,@r0
      000BC0 FA               [12] 3264 	mov	r2,a
      000BC1 E4               [12] 3265 	clr	a
      000BC2 08               [12] 3266 	inc	r0
      000BC3 36               [12] 3267 	addc	a,@r0
      000BC4 FB               [12] 3268 	mov	r3,a
      000BC5 08               [12] 3269 	inc	r0
      000BC6 86 04            [24] 3270 	mov	ar4,@r0
      000BC8 C0 05            [24] 3271 	push	ar5
      000BCA C0 06            [24] 3272 	push	ar6
      000BCC C0 07            [24] 3273 	push	ar7
      000BCE 74r26            [12] 3274 	mov	a,#_send_next_packet
      000BD0 C0 E0            [24] 3275 	push	acc
      000BD2 74s0A            [12] 3276 	mov	a,#(_send_next_packet >> 8)
      000BD4 C0 E0            [24] 3277 	push	acc
      000BD6 E5 81            [12] 3278 	mov	a,sp
      000BD8 24 F6            [12] 3279 	add	a,#0xf6
      000BDA F8               [12] 3280 	mov	r0,a
      000BDB E6               [12] 3281 	mov	a,@r0
      000BDC C0 E0            [24] 3282 	push	acc
      000BDE 08               [12] 3283 	inc	r0
      000BDF E6               [12] 3284 	mov	a,@r0
      000BE0 C0 E0            [24] 3285 	push	acc
      000BE2 8A 82            [24] 3286 	mov	dpl,r2
      000BE4 8B 83            [24] 3287 	mov	dph,r3
      000BE6 8C F0            [24] 3288 	mov	b,r4
      000BE8 12r00r00         [24] 3289 	lcall	_ctimer_set
      000BEB E5 81            [12] 3290 	mov	a,sp
      000BED 24 F9            [12] 3291 	add	a,#0xf9
      000BEF F5 81            [12] 3292 	mov	sp,a
      000BF1                       3293 00105$:
                                   3294 ;	../../core/net/rime/rudolph1.c:294: c->nacks = 0;
      000BF1 A8 81            [24] 3295 	mov	r0,sp
      000BF3 18               [12] 3296 	dec	r0
      000BF4 18               [12] 3297 	dec	r0
      000BF5 74 A7            [12] 3298 	mov	a,#0xa7
      000BF7 26               [12] 3299 	add	a,@r0
      000BF8 FD               [12] 3300 	mov	r5,a
      000BF9 E4               [12] 3301 	clr	a
      000BFA 08               [12] 3302 	inc	r0
      000BFB 36               [12] 3303 	addc	a,@r0
      000BFC FE               [12] 3304 	mov	r6,a
      000BFD 08               [12] 3305 	inc	r0
      000BFE 86 07            [24] 3306 	mov	ar7,@r0
      000C00 8D 82            [24] 3307 	mov	dpl,r5
      000C02 8E 83            [24] 3308 	mov	dph,r6
      000C04 8F F0            [24] 3309 	mov	b,r7
      000C06 E4               [12] 3310 	clr	a
      000C07 12r00r00         [24] 3311 	lcall	__gptrput
                                   3312 ;	../../core/net/rime/rudolph1.c:295: }
      000C0A E5 81            [12] 3313 	mov	a,sp
      000C0C 24 F8            [12] 3314 	add	a,#0xf8
      000C0E F5 81            [12] 3315 	mov	sp,a
      000C10 22               [24] 3316 	ret
                                   3317 ;------------------------------------------------------------
                                   3318 ;Allocation info for local variables in function 'rudolph1_open'
                                   3319 ;------------------------------------------------------------
                                   3320 ;channel                   Allocated to stack - sp -6
                                   3321 ;cb                        Allocated to stack - sp -9
                                   3322 ;c                         Allocated to stack - sp -2
                                   3323 ;------------------------------------------------------------
                                   3324 ;	../../core/net/rime/rudolph1.c:302: rudolph1_open(struct rudolph1_conn *c, uint16_t channel,
                                   3325 ;	-----------------------------------------
                                   3326 ;	 function rudolph1_open
                                   3327 ;	-----------------------------------------
      000C11                       3328 _rudolph1_open:
      000C11 C0 82            [24] 3329 	push	dpl
      000C13 C0 83            [24] 3330 	push	dph
      000C15 C0 F0            [24] 3331 	push	b
                                   3332 ;	../../core/net/rime/rudolph1.c:305: trickle_open(&c->trickle, TRICKLE_INTERVAL, channel, &trickle);
      000C17 74r06            [12] 3333 	mov	a,#_trickle
      000C19 C0 E0            [24] 3334 	push	acc
      000C1B 74s00            [12] 3335 	mov	a,#(_trickle >> 8)
      000C1D C0 E0            [24] 3336 	push	acc
      000C1F 74 80            [12] 3337 	mov	a,#0x80
      000C21 C0 E0            [24] 3338 	push	acc
      000C23 E5 81            [12] 3339 	mov	a,sp
      000C25 24 F7            [12] 3340 	add	a,#0xf7
      000C27 F8               [12] 3341 	mov	r0,a
      000C28 E6               [12] 3342 	mov	a,@r0
      000C29 C0 E0            [24] 3343 	push	acc
      000C2B 08               [12] 3344 	inc	r0
      000C2C E6               [12] 3345 	mov	a,@r0
      000C2D C0 E0            [24] 3346 	push	acc
      000C2F 74 40            [12] 3347 	mov	a,#0x40
      000C31 C0 E0            [24] 3348 	push	acc
      000C33 E4               [12] 3349 	clr	a
      000C34 C0 E0            [24] 3350 	push	acc
      000C36 E5 81            [12] 3351 	mov	a,sp
      000C38 24 F7            [12] 3352 	add	a,#0xf7
      000C3A F8               [12] 3353 	mov	r0,a
      000C3B 86 82            [24] 3354 	mov	dpl,@r0
      000C3D 08               [12] 3355 	inc	r0
      000C3E 86 83            [24] 3356 	mov	dph,@r0
      000C40 08               [12] 3357 	inc	r0
      000C41 86 F0            [24] 3358 	mov	b,@r0
      000C43 12r00r00         [24] 3359 	lcall	_trickle_open
      000C46 E5 81            [12] 3360 	mov	a,sp
      000C48 24 F9            [12] 3361 	add	a,#0xf9
                                   3362 ;	../../core/net/rime/rudolph1.c:306: ipolite_open(&c->ipolite, channel + 1, 1, &ipolite);
      000C4A F5 81            [12] 3363 	mov	sp,a
      000C4C 24 FA            [12] 3364 	add	a,#0xfa
      000C4E F8               [12] 3365 	mov	r0,a
      000C4F 86 03            [24] 3366 	mov	ar3,@r0
      000C51 08               [12] 3367 	inc	r0
      000C52 86 04            [24] 3368 	mov	ar4,@r0
      000C54 0B               [12] 3369 	inc	r3
      000C55 BB 00 01         [24] 3370 	cjne	r3,#0x00,00103$
      000C58 0C               [12] 3371 	inc	r4
      000C59                       3372 00103$:
      000C59 A8 81            [24] 3373 	mov	r0,sp
      000C5B 18               [12] 3374 	dec	r0
      000C5C 18               [12] 3375 	dec	r0
      000C5D 74 5B            [12] 3376 	mov	a,#0x5b
      000C5F 26               [12] 3377 	add	a,@r0
      000C60 FA               [12] 3378 	mov	r2,a
      000C61 E4               [12] 3379 	clr	a
      000C62 08               [12] 3380 	inc	r0
      000C63 36               [12] 3381 	addc	a,@r0
      000C64 FE               [12] 3382 	mov	r6,a
      000C65 08               [12] 3383 	inc	r0
      000C66 86 07            [24] 3384 	mov	ar7,@r0
      000C68 74r00            [12] 3385 	mov	a,#_ipolite
      000C6A C0 E0            [24] 3386 	push	acc
      000C6C 74s00            [12] 3387 	mov	a,#(_ipolite >> 8)
      000C6E C0 E0            [24] 3388 	push	acc
      000C70 74 80            [12] 3389 	mov	a,#0x80
      000C72 C0 E0            [24] 3390 	push	acc
      000C74 23               [12] 3391 	rl	a
      000C75 C0 E0            [24] 3392 	push	acc
      000C77 C0 03            [24] 3393 	push	ar3
      000C79 C0 04            [24] 3394 	push	ar4
      000C7B 8A 82            [24] 3395 	mov	dpl,r2
      000C7D 8E 83            [24] 3396 	mov	dph,r6
      000C7F 8F F0            [24] 3397 	mov	b,r7
      000C81 12r00r00         [24] 3398 	lcall	_ipolite_open
      000C84 E5 81            [12] 3399 	mov	a,sp
      000C86 24 FA            [12] 3400 	add	a,#0xfa
      000C88 F5 81            [12] 3401 	mov	sp,a
                                   3402 ;	../../core/net/rime/rudolph1.c:307: c->cb = cb;
      000C8A A8 81            [24] 3403 	mov	r0,sp
      000C8C 18               [12] 3404 	dec	r0
      000C8D 18               [12] 3405 	dec	r0
      000C8E 74 88            [12] 3406 	mov	a,#0x88
      000C90 26               [12] 3407 	add	a,@r0
      000C91 FD               [12] 3408 	mov	r5,a
      000C92 E4               [12] 3409 	clr	a
      000C93 08               [12] 3410 	inc	r0
      000C94 36               [12] 3411 	addc	a,@r0
      000C95 FE               [12] 3412 	mov	r6,a
      000C96 08               [12] 3413 	inc	r0
      000C97 86 07            [24] 3414 	mov	ar7,@r0
      000C99 8D 82            [24] 3415 	mov	dpl,r5
      000C9B 8E 83            [24] 3416 	mov	dph,r6
      000C9D 8F F0            [24] 3417 	mov	b,r7
      000C9F E5 81            [12] 3418 	mov	a,sp
      000CA1 24 F7            [12] 3419 	add	a,#0xf7
      000CA3 F8               [12] 3420 	mov	r0,a
      000CA4 E6               [12] 3421 	mov	a,@r0
      000CA5 12r00r00         [24] 3422 	lcall	__gptrput
      000CA8 A3               [24] 3423 	inc	dptr
      000CA9 08               [12] 3424 	inc	r0
      000CAA E6               [12] 3425 	mov	a,@r0
      000CAB 12r00r00         [24] 3426 	lcall	__gptrput
      000CAE A3               [24] 3427 	inc	dptr
      000CAF 08               [12] 3428 	inc	r0
      000CB0 E6               [12] 3429 	mov	a,@r0
      000CB1 12r00r00         [24] 3430 	lcall	__gptrput
                                   3431 ;	../../core/net/rime/rudolph1.c:308: c->version = 0;
      000CB4 A8 81            [24] 3432 	mov	r0,sp
      000CB6 18               [12] 3433 	dec	r0
      000CB7 18               [12] 3434 	dec	r0
      000CB8 74 A6            [12] 3435 	mov	a,#0xa6
      000CBA 26               [12] 3436 	add	a,@r0
      000CBB FD               [12] 3437 	mov	r5,a
      000CBC E4               [12] 3438 	clr	a
      000CBD 08               [12] 3439 	inc	r0
      000CBE 36               [12] 3440 	addc	a,@r0
      000CBF FE               [12] 3441 	mov	r6,a
      000CC0 08               [12] 3442 	inc	r0
      000CC1 86 07            [24] 3443 	mov	ar7,@r0
      000CC3 8D 82            [24] 3444 	mov	dpl,r5
      000CC5 8E 83            [24] 3445 	mov	dph,r6
      000CC7 8F F0            [24] 3446 	mov	b,r7
      000CC9 E4               [12] 3447 	clr	a
      000CCA 12r00r00         [24] 3448 	lcall	__gptrput
                                   3449 ;	../../core/net/rime/rudolph1.c:309: c->send_interval = DEFAULT_SEND_INTERVAL;
      000CCD A8 81            [24] 3450 	mov	r0,sp
      000CCF 18               [12] 3451 	dec	r0
      000CD0 18               [12] 3452 	dec	r0
      000CD1 74 A0            [12] 3453 	mov	a,#0xa0
      000CD3 26               [12] 3454 	add	a,@r0
      000CD4 FD               [12] 3455 	mov	r5,a
      000CD5 E4               [12] 3456 	clr	a
      000CD6 08               [12] 3457 	inc	r0
      000CD7 36               [12] 3458 	addc	a,@r0
      000CD8 FE               [12] 3459 	mov	r6,a
      000CD9 08               [12] 3460 	inc	r0
      000CDA 86 07            [24] 3461 	mov	ar7,@r0
      000CDC 8D 82            [24] 3462 	mov	dpl,r5
      000CDE 8E 83            [24] 3463 	mov	dph,r6
      000CE0 8F F0            [24] 3464 	mov	b,r7
      000CE2 E4               [12] 3465 	clr	a
      000CE3 12r00r00         [24] 3466 	lcall	__gptrput
      000CE6 A3               [24] 3467 	inc	dptr
      000CE7 04               [12] 3468 	inc	a
      000CE8 12r00r00         [24] 3469 	lcall	__gptrput
                                   3470 ;	../../core/net/rime/rudolph1.c:310: }
      000CEB 15 81            [12] 3471 	dec	sp
      000CED 15 81            [12] 3472 	dec	sp
      000CEF 15 81            [12] 3473 	dec	sp
      000CF1 22               [24] 3474 	ret
                                   3475 ;------------------------------------------------------------
                                   3476 ;Allocation info for local variables in function 'rudolph1_close'
                                   3477 ;------------------------------------------------------------
                                   3478 ;c                         Allocated to registers r5 r6 r7 
                                   3479 ;------------------------------------------------------------
                                   3480 ;	../../core/net/rime/rudolph1.c:313: rudolph1_close(struct rudolph1_conn *c)
                                   3481 ;	-----------------------------------------
                                   3482 ;	 function rudolph1_close
                                   3483 ;	-----------------------------------------
      000CF2                       3484 _rudolph1_close:
                                   3485 ;	../../core/net/rime/rudolph1.c:315: trickle_close(&c->trickle);
      000CF2 AD 82            [24] 3486 	mov	r5,dpl
      000CF4 AE 83            [24] 3487 	mov	r6,dph
      000CF6 AF F0            [24] 3488 	mov	r7,b
      000CF8 C0 07            [24] 3489 	push	ar7
      000CFA C0 06            [24] 3490 	push	ar6
      000CFC C0 05            [24] 3491 	push	ar5
      000CFE 12r00r00         [24] 3492 	lcall	_trickle_close
      000D01 D0 05            [24] 3493 	pop	ar5
      000D03 D0 06            [24] 3494 	pop	ar6
      000D05 D0 07            [24] 3495 	pop	ar7
                                   3496 ;	../../core/net/rime/rudolph1.c:316: ipolite_close(&c->ipolite);
      000D07 74 5B            [12] 3497 	mov	a,#0x5b
      000D09 2D               [12] 3498 	add	a,r5
      000D0A FD               [12] 3499 	mov	r5,a
      000D0B E4               [12] 3500 	clr	a
      000D0C 3E               [12] 3501 	addc	a,r6
      000D0D FE               [12] 3502 	mov	r6,a
      000D0E 8D 82            [24] 3503 	mov	dpl,r5
      000D10 8E 83            [24] 3504 	mov	dph,r6
      000D12 8F F0            [24] 3505 	mov	b,r7
                                   3506 ;	../../core/net/rime/rudolph1.c:317: }
      000D14 02r00r00         [24] 3507 	ljmp	_ipolite_close
                                   3508 ;------------------------------------------------------------
                                   3509 ;Allocation info for local variables in function 'rudolph1_send'
                                   3510 ;------------------------------------------------------------
                                   3511 ;send_interval             Allocated to stack - sp -6
                                   3512 ;c                         Allocated to stack - sp -2
                                   3513 ;------------------------------------------------------------
                                   3514 ;	../../core/net/rime/rudolph1.c:320: rudolph1_send(struct rudolph1_conn *c, clock_time_t send_interval)
                                   3515 ;	-----------------------------------------
                                   3516 ;	 function rudolph1_send
                                   3517 ;	-----------------------------------------
      000D17                       3518 _rudolph1_send:
      000D17 C0 82            [24] 3519 	push	dpl
      000D19 C0 83            [24] 3520 	push	dph
      000D1B C0 F0            [24] 3521 	push	b
                                   3522 ;	../../core/net/rime/rudolph1.c:322: c->version++;
      000D1D A8 81            [24] 3523 	mov	r0,sp
      000D1F 18               [12] 3524 	dec	r0
      000D20 18               [12] 3525 	dec	r0
      000D21 74 A6            [12] 3526 	mov	a,#0xa6
      000D23 26               [12] 3527 	add	a,@r0
      000D24 FA               [12] 3528 	mov	r2,a
      000D25 E4               [12] 3529 	clr	a
      000D26 08               [12] 3530 	inc	r0
      000D27 36               [12] 3531 	addc	a,@r0
      000D28 FB               [12] 3532 	mov	r3,a
      000D29 08               [12] 3533 	inc	r0
      000D2A 86 04            [24] 3534 	mov	ar4,@r0
      000D2C 8A 82            [24] 3535 	mov	dpl,r2
      000D2E 8B 83            [24] 3536 	mov	dph,r3
      000D30 8C F0            [24] 3537 	mov	b,r4
      000D32 12r00r00         [24] 3538 	lcall	__gptrget
      000D35 FF               [12] 3539 	mov	r7,a
      000D36 0F               [12] 3540 	inc	r7
      000D37 8A 82            [24] 3541 	mov	dpl,r2
      000D39 8B 83            [24] 3542 	mov	dph,r3
      000D3B 8C F0            [24] 3543 	mov	b,r4
      000D3D EF               [12] 3544 	mov	a,r7
      000D3E 12r00r00         [24] 3545 	lcall	__gptrput
                                   3546 ;	../../core/net/rime/rudolph1.c:323: c->chunk = c->highest_chunk_heard = 0;
      000D41 A8 81            [24] 3547 	mov	r0,sp
      000D43 18               [12] 3548 	dec	r0
      000D44 18               [12] 3549 	dec	r0
      000D45 74 A2            [12] 3550 	mov	a,#0xa2
      000D47 26               [12] 3551 	add	a,@r0
      000D48 FD               [12] 3552 	mov	r5,a
      000D49 E4               [12] 3553 	clr	a
      000D4A 08               [12] 3554 	inc	r0
      000D4B 36               [12] 3555 	addc	a,@r0
      000D4C FE               [12] 3556 	mov	r6,a
      000D4D 08               [12] 3557 	inc	r0
      000D4E 86 07            [24] 3558 	mov	ar7,@r0
      000D50 A8 81            [24] 3559 	mov	r0,sp
      000D52 18               [12] 3560 	dec	r0
      000D53 18               [12] 3561 	dec	r0
      000D54 74 A4            [12] 3562 	mov	a,#0xa4
      000D56 26               [12] 3563 	add	a,@r0
      000D57 FA               [12] 3564 	mov	r2,a
      000D58 E4               [12] 3565 	clr	a
      000D59 08               [12] 3566 	inc	r0
      000D5A 36               [12] 3567 	addc	a,@r0
      000D5B FB               [12] 3568 	mov	r3,a
      000D5C 08               [12] 3569 	inc	r0
      000D5D 86 04            [24] 3570 	mov	ar4,@r0
      000D5F 8A 82            [24] 3571 	mov	dpl,r2
      000D61 8B 83            [24] 3572 	mov	dph,r3
      000D63 8C F0            [24] 3573 	mov	b,r4
      000D65 E4               [12] 3574 	clr	a
      000D66 12r00r00         [24] 3575 	lcall	__gptrput
      000D69 A3               [24] 3576 	inc	dptr
      000D6A 12r00r00         [24] 3577 	lcall	__gptrput
      000D6D 8D 82            [24] 3578 	mov	dpl,r5
      000D6F 8E 83            [24] 3579 	mov	dph,r6
      000D71 8F F0            [24] 3580 	mov	b,r7
      000D73 12r00r00         [24] 3581 	lcall	__gptrput
      000D76 A3               [24] 3582 	inc	dptr
      000D77 12r00r00         [24] 3583 	lcall	__gptrput
                                   3584 ;	../../core/net/rime/rudolph1.c:325: format_data(c, 0);
      000D7A C0 E0            [24] 3585 	push	acc
      000D7C C0 E0            [24] 3586 	push	acc
      000D7E E5 81            [12] 3587 	mov	a,sp
      000D80 24 FC            [12] 3588 	add	a,#0xfc
      000D82 F8               [12] 3589 	mov	r0,a
      000D83 86 82            [24] 3590 	mov	dpl,@r0
      000D85 08               [12] 3591 	inc	r0
      000D86 86 83            [24] 3592 	mov	dph,@r0
      000D88 08               [12] 3593 	inc	r0
      000D89 86 F0            [24] 3594 	mov	b,@r0
      000D8B 12r00rAA         [24] 3595 	lcall	_format_data
      000D8E 15 81            [12] 3596 	dec	sp
      000D90 15 81            [12] 3597 	dec	sp
                                   3598 ;	../../core/net/rime/rudolph1.c:326: trickle_send(&c->trickle);
      000D92 A8 81            [24] 3599 	mov	r0,sp
      000D94 18               [12] 3600 	dec	r0
      000D95 18               [12] 3601 	dec	r0
      000D96 86 82            [24] 3602 	mov	dpl,@r0
      000D98 08               [12] 3603 	inc	r0
      000D99 86 83            [24] 3604 	mov	dph,@r0
      000D9B 08               [12] 3605 	inc	r0
      000D9C 86 F0            [24] 3606 	mov	b,@r0
      000D9E 12r00r00         [24] 3607 	lcall	_trickle_send
                                   3608 ;	../../core/net/rime/rudolph1.c:327: c->chunk++;
      000DA1 A8 81            [24] 3609 	mov	r0,sp
      000DA3 18               [12] 3610 	dec	r0
      000DA4 18               [12] 3611 	dec	r0
      000DA5 74 A2            [12] 3612 	mov	a,#0xa2
      000DA7 26               [12] 3613 	add	a,@r0
      000DA8 FD               [12] 3614 	mov	r5,a
      000DA9 E4               [12] 3615 	clr	a
      000DAA 08               [12] 3616 	inc	r0
      000DAB 36               [12] 3617 	addc	a,@r0
      000DAC FE               [12] 3618 	mov	r6,a
      000DAD 08               [12] 3619 	inc	r0
      000DAE 86 07            [24] 3620 	mov	ar7,@r0
      000DB0 8D 82            [24] 3621 	mov	dpl,r5
      000DB2 8E 83            [24] 3622 	mov	dph,r6
      000DB4 8F F0            [24] 3623 	mov	b,r7
      000DB6 12r00r00         [24] 3624 	lcall	__gptrget
      000DB9 FB               [12] 3625 	mov	r3,a
      000DBA A3               [24] 3626 	inc	dptr
      000DBB 12r00r00         [24] 3627 	lcall	__gptrget
      000DBE FC               [12] 3628 	mov	r4,a
      000DBF 0B               [12] 3629 	inc	r3
      000DC0 BB 00 01         [24] 3630 	cjne	r3,#0x00,00103$
      000DC3 0C               [12] 3631 	inc	r4
      000DC4                       3632 00103$:
      000DC4 8D 82            [24] 3633 	mov	dpl,r5
      000DC6 8E 83            [24] 3634 	mov	dph,r6
      000DC8 8F F0            [24] 3635 	mov	b,r7
      000DCA EB               [12] 3636 	mov	a,r3
      000DCB 12r00r00         [24] 3637 	lcall	__gptrput
      000DCE A3               [24] 3638 	inc	dptr
      000DCF EC               [12] 3639 	mov	a,r4
      000DD0 12r00r00         [24] 3640 	lcall	__gptrput
                                   3641 ;	../../core/net/rime/rudolph1.c:328: c->send_interval = send_interval;
      000DD3 A8 81            [24] 3642 	mov	r0,sp
      000DD5 18               [12] 3643 	dec	r0
      000DD6 18               [12] 3644 	dec	r0
      000DD7 74 A0            [12] 3645 	mov	a,#0xa0
      000DD9 26               [12] 3646 	add	a,@r0
      000DDA FD               [12] 3647 	mov	r5,a
      000DDB E4               [12] 3648 	clr	a
      000DDC 08               [12] 3649 	inc	r0
      000DDD 36               [12] 3650 	addc	a,@r0
      000DDE FE               [12] 3651 	mov	r6,a
      000DDF 08               [12] 3652 	inc	r0
      000DE0 86 07            [24] 3653 	mov	ar7,@r0
      000DE2 8D 82            [24] 3654 	mov	dpl,r5
      000DE4 8E 83            [24] 3655 	mov	dph,r6
      000DE6 8F F0            [24] 3656 	mov	b,r7
      000DE8 E5 81            [12] 3657 	mov	a,sp
      000DEA 24 FA            [12] 3658 	add	a,#0xfa
      000DEC F8               [12] 3659 	mov	r0,a
      000DED E6               [12] 3660 	mov	a,@r0
      000DEE 12r00r00         [24] 3661 	lcall	__gptrput
      000DF1 A3               [24] 3662 	inc	dptr
      000DF2 08               [12] 3663 	inc	r0
      000DF3 E6               [12] 3664 	mov	a,@r0
      000DF4 12r00r00         [24] 3665 	lcall	__gptrput
                                   3666 ;	../../core/net/rime/rudolph1.c:329: ctimer_set(&c->t, send_interval, send_next_packet, c);
      000DF7 A8 81            [24] 3667 	mov	r0,sp
      000DF9 18               [12] 3668 	dec	r0
      000DFA 18               [12] 3669 	dec	r0
      000DFB 86 05            [24] 3670 	mov	ar5,@r0
      000DFD 08               [12] 3671 	inc	r0
      000DFE 86 06            [24] 3672 	mov	ar6,@r0
      000E00 08               [12] 3673 	inc	r0
      000E01 86 07            [24] 3674 	mov	ar7,@r0
      000E03 A8 81            [24] 3675 	mov	r0,sp
      000E05 18               [12] 3676 	dec	r0
      000E06 18               [12] 3677 	dec	r0
      000E07 74 8B            [12] 3678 	mov	a,#0x8b
      000E09 26               [12] 3679 	add	a,@r0
      000E0A FA               [12] 3680 	mov	r2,a
      000E0B E4               [12] 3681 	clr	a
      000E0C 08               [12] 3682 	inc	r0
      000E0D 36               [12] 3683 	addc	a,@r0
      000E0E FB               [12] 3684 	mov	r3,a
      000E0F 08               [12] 3685 	inc	r0
      000E10 86 04            [24] 3686 	mov	ar4,@r0
      000E12 C0 05            [24] 3687 	push	ar5
      000E14 C0 06            [24] 3688 	push	ar6
      000E16 C0 07            [24] 3689 	push	ar7
      000E18 74r26            [12] 3690 	mov	a,#_send_next_packet
      000E1A C0 E0            [24] 3691 	push	acc
      000E1C 74s0A            [12] 3692 	mov	a,#(_send_next_packet >> 8)
      000E1E C0 E0            [24] 3693 	push	acc
      000E20 E5 81            [12] 3694 	mov	a,sp
      000E22 24 F5            [12] 3695 	add	a,#0xf5
      000E24 F8               [12] 3696 	mov	r0,a
      000E25 E6               [12] 3697 	mov	a,@r0
      000E26 C0 E0            [24] 3698 	push	acc
      000E28 08               [12] 3699 	inc	r0
      000E29 E6               [12] 3700 	mov	a,@r0
      000E2A C0 E0            [24] 3701 	push	acc
      000E2C 8A 82            [24] 3702 	mov	dpl,r2
      000E2E 8B 83            [24] 3703 	mov	dph,r3
      000E30 8C F0            [24] 3704 	mov	b,r4
      000E32 12r00r00         [24] 3705 	lcall	_ctimer_set
      000E35 E5 81            [12] 3706 	mov	a,sp
      000E37 24 F9            [12] 3707 	add	a,#0xf9
      000E39 F5 81            [12] 3708 	mov	sp,a
                                   3709 ;	../../core/net/rime/rudolph1.c:330: }
      000E3B 15 81            [12] 3710 	dec	sp
      000E3D 15 81            [12] 3711 	dec	sp
      000E3F 15 81            [12] 3712 	dec	sp
      000E41 22               [24] 3713 	ret
                                   3714 ;------------------------------------------------------------
                                   3715 ;Allocation info for local variables in function 'rudolph1_stop'
                                   3716 ;------------------------------------------------------------
                                   3717 ;c                         Allocated to registers r5 r6 r7 
                                   3718 ;------------------------------------------------------------
                                   3719 ;	../../core/net/rime/rudolph1.c:333: rudolph1_stop(struct rudolph1_conn *c)
                                   3720 ;	-----------------------------------------
                                   3721 ;	 function rudolph1_stop
                                   3722 ;	-----------------------------------------
      000E42                       3723 _rudolph1_stop:
      000E42 AD 82            [24] 3724 	mov	r5,dpl
      000E44 AE 83            [24] 3725 	mov	r6,dph
      000E46 AF F0            [24] 3726 	mov	r7,b
                                   3727 ;	../../core/net/rime/rudolph1.c:335: ctimer_stop(&c->t);
      000E48 74 8B            [12] 3728 	mov	a,#0x8b
      000E4A 2D               [12] 3729 	add	a,r5
      000E4B FD               [12] 3730 	mov	r5,a
      000E4C E4               [12] 3731 	clr	a
      000E4D 3E               [12] 3732 	addc	a,r6
      000E4E FE               [12] 3733 	mov	r6,a
      000E4F 8D 82            [24] 3734 	mov	dpl,r5
      000E51 8E 83            [24] 3735 	mov	dph,r6
      000E53 8F F0            [24] 3736 	mov	b,r7
                                   3737 ;	../../core/net/rime/rudolph1.c:336: }
      000E55 02r00r00         [24] 3738 	ljmp	_ctimer_stop
                                   3739 	.area CSEG    (CODE)
                                   3740 	.area CONST   (CODE)
      000000                       3741 _ipolite:
      000000r48s08                 3742 	.byte _recv_ipolite, (_recv_ipolite >> 8)
      000002r46s08                 3743 	.byte _sent_ipolite, (_sent_ipolite >> 8)
      000004r47s08                 3744 	.byte _dropped_ipolite, (_dropped_ipolite >> 8)
      000006                       3745 _trickle:
      000006r0As08                 3746 	.byte _recv_trickle, (_recv_trickle >> 8)
                                   3747 	.area XINIT   (CODE)
                                   3748 	.area CABS    (ABS,CODE)
