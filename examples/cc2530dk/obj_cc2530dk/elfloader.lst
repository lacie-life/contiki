                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module elfloader
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _symtab_lookup
                                     12 	.globl _elfloader_arch_write_rom
                                     13 	.globl _elfloader_arch_relocate
                                     14 	.globl _elfloader_arch_allocate_rom
                                     15 	.globl _elfloader_arch_allocate_ram
                                     16 	.globl _cfs_seek
                                     17 	.globl _cfs_read
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _strncmp
                                     21 	.globl _strcmp
                                     22 	.globl _memcmp
                                     23 	.globl _ACTIVE
                                     24 	.globl _TX_BYTE
                                     25 	.globl _RX_BYTE
                                     26 	.globl _ERR
                                     27 	.globl _FE
                                     28 	.globl _SLAVE
                                     29 	.globl _RE
                                     30 	.globl _MODE
                                     31 	.globl _T3OVFIF
                                     32 	.globl _T3CH0IF
                                     33 	.globl _T3CH1IF
                                     34 	.globl _T4OVFIF
                                     35 	.globl _T4CH0IF
                                     36 	.globl _T4CH1IF
                                     37 	.globl _OVFIM
                                     38 	.globl _B_0
                                     39 	.globl _B_1
                                     40 	.globl _B_2
                                     41 	.globl _B_3
                                     42 	.globl _B_4
                                     43 	.globl _B_5
                                     44 	.globl _B_6
                                     45 	.globl _B_7
                                     46 	.globl _P2IF
                                     47 	.globl _UTX0IF
                                     48 	.globl _UTX1IF
                                     49 	.globl _P1IF
                                     50 	.globl _WDTIF
                                     51 	.globl _ACC_0
                                     52 	.globl _ACC_1
                                     53 	.globl _ACC_2
                                     54 	.globl _ACC_3
                                     55 	.globl _ACC_4
                                     56 	.globl _ACC_5
                                     57 	.globl _ACC_6
                                     58 	.globl _ACC_7
                                     59 	.globl _P
                                     60 	.globl _F1
                                     61 	.globl _OV
                                     62 	.globl _RS0
                                     63 	.globl _RS1
                                     64 	.globl _F0
                                     65 	.globl _AC
                                     66 	.globl _CY
                                     67 	.globl _DMAIF
                                     68 	.globl _T1IF
                                     69 	.globl _T2IF
                                     70 	.globl _T3IF
                                     71 	.globl _T4IF
                                     72 	.globl _P0IF
                                     73 	.globl _STIF
                                     74 	.globl _DMAIE
                                     75 	.globl _T1IE
                                     76 	.globl _T2IE
                                     77 	.globl _T3IE
                                     78 	.globl _T4IE
                                     79 	.globl _P0IE
                                     80 	.globl _RFERRIE
                                     81 	.globl _ADCIE
                                     82 	.globl _URX0IE
                                     83 	.globl _URX1IE
                                     84 	.globl _ENCIE
                                     85 	.globl _STIE
                                     86 	.globl _EA
                                     87 	.globl _P2_0
                                     88 	.globl _P2_1
                                     89 	.globl _P2_2
                                     90 	.globl _P2_3
                                     91 	.globl _P2_4
                                     92 	.globl _P2_5
                                     93 	.globl _P2_6
                                     94 	.globl _P2_7
                                     95 	.globl _ENCIF_0
                                     96 	.globl _ENCIF_1
                                     97 	.globl _P1_0
                                     98 	.globl _P1_1
                                     99 	.globl _P1_2
                                    100 	.globl _P1_3
                                    101 	.globl _P1_4
                                    102 	.globl _P1_5
                                    103 	.globl _P1_6
                                    104 	.globl _P1_7
                                    105 	.globl _IT0
                                    106 	.globl _RFERRIF
                                    107 	.globl _IT1
                                    108 	.globl _URX0IF
                                    109 	.globl _ADCIF
                                    110 	.globl _URX1IF
                                    111 	.globl _P0_0
                                    112 	.globl _P0_1
                                    113 	.globl _P0_2
                                    114 	.globl _P0_3
                                    115 	.globl _P0_4
                                    116 	.globl _P0_5
                                    117 	.globl _P0_6
                                    118 	.globl _P0_7
                                    119 	.globl _WDCTL
                                    120 	.globl _U1GCR
                                    121 	.globl _U1UCR
                                    122 	.globl _U1BAUD
                                    123 	.globl _U1DBUF
                                    124 	.globl _U1CSR
                                    125 	.globl _U0GCR
                                    126 	.globl _U0UCR
                                    127 	.globl _U0BAUD
                                    128 	.globl _U0DBUF
                                    129 	.globl _U0CSR
                                    130 	.globl _TIMIF
                                    131 	.globl _T4CC1
                                    132 	.globl _T4CCTL1
                                    133 	.globl _T4CC0
                                    134 	.globl _T4CCTL0
                                    135 	.globl _T4CTL
                                    136 	.globl _T4CNT
                                    137 	.globl _T3CC1
                                    138 	.globl _T3CCTL1
                                    139 	.globl _T3CC0
                                    140 	.globl _T3CCTL0
                                    141 	.globl _T3CTL
                                    142 	.globl _T3CNT
                                    143 	.globl _T2MSEL
                                    144 	.globl _T2IRQM
                                    145 	.globl _T2MOVF2
                                    146 	.globl _T2MOVF1
                                    147 	.globl _T2MOVF0
                                    148 	.globl _T2M1
                                    149 	.globl _T2M0
                                    150 	.globl _T2IRQF
                                    151 	.globl _T2EVTCFG
                                    152 	.globl _T2CTRL
                                    153 	.globl _T1STAT
                                    154 	.globl _T1CCTL2
                                    155 	.globl _T1CCTL1
                                    156 	.globl _T1CCTL0
                                    157 	.globl _T1CTL
                                    158 	.globl _T1CNTH
                                    159 	.globl _T1CNTL
                                    160 	.globl _T1CC2H
                                    161 	.globl _T1CC2L
                                    162 	.globl _T1CC1H
                                    163 	.globl _T1CC1L
                                    164 	.globl _T1CC0H
                                    165 	.globl _T1CC0L
                                    166 	.globl _CLKCONSTA
                                    167 	.globl _CLKCONCMD
                                    168 	.globl _SLEEPSTA
                                    169 	.globl _SLEEPCMD
                                    170 	.globl _STLOAD
                                    171 	.globl _ST2
                                    172 	.globl _ST1
                                    173 	.globl _ST0
                                    174 	.globl _RFERRF
                                    175 	.globl _RFIRQF0
                                    176 	.globl _RFST
                                    177 	.globl _RFD
                                    178 	.globl _RFIRQF1
                                    179 	.globl _PSBANK
                                    180 	.globl _FMAP
                                    181 	.globl _MEMCTR
                                    182 	.globl __XPAGE
                                    183 	.globl _MPAGE
                                    184 	.globl _PMUX
                                    185 	.globl _P2DIR
                                    186 	.globl _P1DIR
                                    187 	.globl _P0DIR
                                    188 	.globl _P2INP
                                    189 	.globl _P1INP
                                    190 	.globl _P2SEL
                                    191 	.globl _P1SEL
                                    192 	.globl _P0SEL
                                    193 	.globl _APCFG
                                    194 	.globl _PERCFG
                                    195 	.globl _P0INP
                                    196 	.globl _P2IEN
                                    197 	.globl _P1IEN
                                    198 	.globl _P0IEN
                                    199 	.globl _PICTL
                                    200 	.globl _P2IFG
                                    201 	.globl _P1IFG
                                    202 	.globl _P0IFG
                                    203 	.globl _DMAREQ
                                    204 	.globl _DMAARM
                                    205 	.globl _DMA0CFGH
                                    206 	.globl _DMA0CFGL
                                    207 	.globl _DMA1CFGH
                                    208 	.globl _DMA1CFGL
                                    209 	.globl _DMAIRQ
                                    210 	.globl _ENCCS
                                    211 	.globl _ENCDO
                                    212 	.globl _ENCDI
                                    213 	.globl _RNDH
                                    214 	.globl _RNDL
                                    215 	.globl _ADCH
                                    216 	.globl _ADCL
                                    217 	.globl _ADCCON3
                                    218 	.globl _ADCCON2
                                    219 	.globl _ADCCON1
                                    220 	.globl _B
                                    221 	.globl _IRCON2
                                    222 	.globl _ACC
                                    223 	.globl _PSW
                                    224 	.globl _IRCON
                                    225 	.globl _IP1
                                    226 	.globl _IEN1
                                    227 	.globl _IP0
                                    228 	.globl _IEN0
                                    229 	.globl _P2
                                    230 	.globl _S1CON
                                    231 	.globl _IEN2
                                    232 	.globl _S0CON
                                    233 	.globl _DPS
                                    234 	.globl _P1
                                    235 	.globl _TCON
                                    236 	.globl _PCON
                                    237 	.globl _DPH1
                                    238 	.globl _DPL1
                                    239 	.globl _DPH0
                                    240 	.globl _DPL0
                                    241 	.globl _SP
                                    242 	.globl _P0
                                    243 	.globl _elfloader_autostart_processes
                                    244 	.globl _elfloader_unknown
                                    245 	.globl _X_IEEE_ADDR
                                    246 	.globl _X_INFOPAGE
                                    247 	.globl _X_P2DIR
                                    248 	.globl _X_P1DIR
                                    249 	.globl _X_P0DIR
                                    250 	.globl _X_U1GCR
                                    251 	.globl _X_U1UCR
                                    252 	.globl _X_U1BAUD
                                    253 	.globl _X_U1DBUF
                                    254 	.globl _X_U1CSR
                                    255 	.globl _X_P2INP
                                    256 	.globl _X_P1INP
                                    257 	.globl _X_P2SEL
                                    258 	.globl _X_P1SEL
                                    259 	.globl _X_P0SEL
                                    260 	.globl _X_APCFG
                                    261 	.globl _X_PERCFG
                                    262 	.globl _X_T4CC1
                                    263 	.globl _X_T4CCTL1
                                    264 	.globl _X_T4CC0
                                    265 	.globl _X_T4CCTL0
                                    266 	.globl _X_T4CTL
                                    267 	.globl _X_T4CNT
                                    268 	.globl _X_RFIRQF0
                                    269 	.globl _X_T1CCTL2
                                    270 	.globl _X_T1CCTL1
                                    271 	.globl _X_T1CCTL0
                                    272 	.globl _X_T1CTL
                                    273 	.globl _X_T1CNTH
                                    274 	.globl _X_T1CNTL
                                    275 	.globl _X_RFST
                                    276 	.globl _X_T1CC2H
                                    277 	.globl _X_T1CC2L
                                    278 	.globl _X_T1CC1H
                                    279 	.globl _X_T1CC1L
                                    280 	.globl _X_T1CC0H
                                    281 	.globl _X_T1CC0L
                                    282 	.globl _X_RFD
                                    283 	.globl _X_TIMIF
                                    284 	.globl _X_DMAREQ
                                    285 	.globl _X_DMAARM
                                    286 	.globl _X_DMA0CFGH
                                    287 	.globl _X_DMA0CFGL
                                    288 	.globl _X_DMA1CFGH
                                    289 	.globl _X_DMA1CFGL
                                    290 	.globl _X_DMAIRQ
                                    291 	.globl _X_T3CC1
                                    292 	.globl _X_T3CCTL1
                                    293 	.globl _X_T3CC0
                                    294 	.globl _X_T3CCTL0
                                    295 	.globl _X_T3CTL
                                    296 	.globl _X_T3CNT
                                    297 	.globl _X_WDCTL
                                    298 	.globl _X_MEMCTR
                                    299 	.globl _X_CLKCONCMD
                                    300 	.globl _X_U0GCR
                                    301 	.globl _X_U0UCR
                                    302 	.globl _X_T2MSEL
                                    303 	.globl _X_U0BAUD
                                    304 	.globl _X_U0DBUF
                                    305 	.globl _X_RFERRF
                                    306 	.globl _X_SLEEPCMD
                                    307 	.globl _X_RNDH
                                    308 	.globl _X_RNDL
                                    309 	.globl _X_ADCH
                                    310 	.globl _X_ADCL
                                    311 	.globl _X_ADCCON3
                                    312 	.globl _X_ADCCON2
                                    313 	.globl _X_ADCCON1
                                    314 	.globl _X_ENCCS
                                    315 	.globl _X_ENCDO
                                    316 	.globl _X_ENCDI
                                    317 	.globl _X_T1STAT
                                    318 	.globl _X_PMUX
                                    319 	.globl _X_STLOAD
                                    320 	.globl _X_P2IEN
                                    321 	.globl _X_P0IEN
                                    322 	.globl _X_T2IRQM
                                    323 	.globl _X_T2MOVF2
                                    324 	.globl _X_T2MOVF1
                                    325 	.globl _X_T2MOVF0
                                    326 	.globl _X_T2M1
                                    327 	.globl _X_T2M0
                                    328 	.globl _X_T2IRQF
                                    329 	.globl _X_P2
                                    330 	.globl _X_PSBANK
                                    331 	.globl _X_FMAP
                                    332 	.globl _X_CLKCONSTA
                                    333 	.globl _X_SLEEPSTA
                                    334 	.globl _X_T2EVTCFG
                                    335 	.globl _X_ST2
                                    336 	.globl _X_ST1
                                    337 	.globl _X_ST0
                                    338 	.globl _X_T2CTRL
                                    339 	.globl _X__XPAGE
                                    340 	.globl _X_MPAGE
                                    341 	.globl _X_RFIRQF1
                                    342 	.globl _X_P1
                                    343 	.globl _X_P0INP
                                    344 	.globl _X_P1IEN
                                    345 	.globl _X_PICTL
                                    346 	.globl _X_P2IFG
                                    347 	.globl _X_P1IFG
                                    348 	.globl _X_P0IFG
                                    349 	.globl _X_U0CSR
                                    350 	.globl _X_P0
                                    351 	.globl _USBF5
                                    352 	.globl _USBF4
                                    353 	.globl _USBF3
                                    354 	.globl _USBF2
                                    355 	.globl _USBF1
                                    356 	.globl _USBF0
                                    357 	.globl _USBCNTH
                                    358 	.globl _USBCNTL
                                    359 	.globl _USBCNT0
                                    360 	.globl _USBCSOH
                                    361 	.globl _USBCSOL
                                    362 	.globl _USBMAXO
                                    363 	.globl _USBCSIH
                                    364 	.globl _USBCSIL
                                    365 	.globl _USBCS0
                                    366 	.globl _USBMAXI
                                    367 	.globl _USBCTRL
                                    368 	.globl _USBINDEX
                                    369 	.globl _USBFRMH
                                    370 	.globl _USBFRML
                                    371 	.globl _USBCIE
                                    372 	.globl _USBOIE
                                    373 	.globl _USBIIE
                                    374 	.globl _USBCIF
                                    375 	.globl _USBOIF
                                    376 	.globl _USBIIF
                                    377 	.globl _USBPOW
                                    378 	.globl _USBADDR
                                    379 	.globl _CSPT
                                    380 	.globl _CSPZ
                                    381 	.globl _CSPY
                                    382 	.globl _CSPX
                                    383 	.globl _CSPSTAT
                                    384 	.globl _CSPCTRL
                                    385 	.globl _CSPPROG23
                                    386 	.globl _CSPPROG22
                                    387 	.globl _CSPPROG21
                                    388 	.globl _CSPPROG20
                                    389 	.globl _CSPPROG19
                                    390 	.globl _CSPPROG18
                                    391 	.globl _CSPPROG17
                                    392 	.globl _CSPPROG16
                                    393 	.globl _CSPPROG15
                                    394 	.globl _CSPPROG14
                                    395 	.globl _CSPPROG13
                                    396 	.globl _CSPPROG12
                                    397 	.globl _CSPPROG11
                                    398 	.globl _CSPPROG10
                                    399 	.globl _CSPPROG9
                                    400 	.globl _CSPPROG8
                                    401 	.globl _CSPPROG7
                                    402 	.globl _CSPPROG6
                                    403 	.globl _CSPPROG5
                                    404 	.globl _CSPPROG4
                                    405 	.globl _CSPPROG3
                                    406 	.globl _CSPPROG2
                                    407 	.globl _CSPPROG1
                                    408 	.globl _CSPPROG0
                                    409 	.globl _RFC_OBS_CTRL2
                                    410 	.globl _RFC_OBS_CTRL1
                                    411 	.globl _RFC_OBS_CTRL0
                                    412 	.globl _TXFILTCFG
                                    413 	.globl _PTEST1
                                    414 	.globl _PTEST0
                                    415 	.globl _ATEST
                                    416 	.globl _DACTEST2
                                    417 	.globl _DACTEST1
                                    418 	.globl _DACTEST0
                                    419 	.globl _MDMTEST1
                                    420 	.globl _MDMTEST0
                                    421 	.globl _ADCTEST2
                                    422 	.globl _ADCTEST1
                                    423 	.globl _ADCTEST0
                                    424 	.globl _AGCCTRL3
                                    425 	.globl _AGCCTRL2
                                    426 	.globl _AGCCTRL1
                                    427 	.globl _AGCCTRL0
                                    428 	.globl _FSCAL3
                                    429 	.globl _FSCAL2
                                    430 	.globl _FSCAL1
                                    431 	.globl _FSCAL0
                                    432 	.globl _FSCTRL
                                    433 	.globl _RXCTRL
                                    434 	.globl _FREQEST
                                    435 	.globl _MDMCTRL1
                                    436 	.globl _MDMCTRL0
                                    437 	.globl _RFRND
                                    438 	.globl _RFERRM
                                    439 	.globl _RFIRQM1
                                    440 	.globl _RFIRQM0
                                    441 	.globl _TXLAST_PTR
                                    442 	.globl _TXFIRST_PTR
                                    443 	.globl _RXP1_PTR
                                    444 	.globl _RXLAST_PTR
                                    445 	.globl _RXFIRST_PTR
                                    446 	.globl _TXFIFOCNT
                                    447 	.globl _RXFIFOCNT
                                    448 	.globl _RXFIRST
                                    449 	.globl _RSSISTAT
                                    450 	.globl _RSSI
                                    451 	.globl _CCACTRL1
                                    452 	.globl _CCACTRL0
                                    453 	.globl _FSMCTRL
                                    454 	.globl _FIFOPCTRL
                                    455 	.globl _FSMSTAT1
                                    456 	.globl _FSMSTAT0
                                    457 	.globl _TXCTRL
                                    458 	.globl _TXPOWER
                                    459 	.globl _FREQCTRL
                                    460 	.globl _FREQTUNE
                                    461 	.globl _RXMASKCLR
                                    462 	.globl _RXMASKSET
                                    463 	.globl _RXENABLE
                                    464 	.globl _FRMCTRL1
                                    465 	.globl _FRMCTRL0
                                    466 	.globl _SRCEXTEN2
                                    467 	.globl _SRCEXTEN1
                                    468 	.globl _SRCEXTEN0
                                    469 	.globl _SRCSHORTEN2
                                    470 	.globl _SRCSHORTEN1
                                    471 	.globl _SRCSHORTEN0
                                    472 	.globl _SRCMATCH
                                    473 	.globl _FRMFILT1
                                    474 	.globl _FRMFILT0
                                    475 	.globl _SHORT_ADDR1
                                    476 	.globl _SHORT_ADDR0
                                    477 	.globl _PAN_ID1
                                    478 	.globl _PAN_ID0
                                    479 	.globl _EXT_ADDR7
                                    480 	.globl _EXT_ADDR6
                                    481 	.globl _EXT_ADDR5
                                    482 	.globl _EXT_ADDR4
                                    483 	.globl _EXT_ADDR3
                                    484 	.globl _EXT_ADDR2
                                    485 	.globl _EXT_ADDR1
                                    486 	.globl _EXT_ADDR0
                                    487 	.globl _SRCSHORTPENDEN2
                                    488 	.globl _SRCSHORTPENDEN1
                                    489 	.globl _SRCSHORTPENDEN0
                                    490 	.globl _SRCEXTPENDEN2
                                    491 	.globl _SRCEXTPENDEN1
                                    492 	.globl _SRCEXTPENDEN0
                                    493 	.globl _SRCRESINDEX
                                    494 	.globl _SRCRESMASK2
                                    495 	.globl _SRCRESMASK1
                                    496 	.globl _SRCRESMASK0
                                    497 	.globl _SRC_ADDR_TABLE
                                    498 	.globl _TXFIFO
                                    499 	.globl _RXFIFO
                                    500 	.globl _RFCORE_RAM
                                    501 	.globl _CMPCTL
                                    502 	.globl _OPAMPS
                                    503 	.globl _OPAMPC
                                    504 	.globl _STCV2
                                    505 	.globl _STCV1
                                    506 	.globl _STCV0
                                    507 	.globl _STCS
                                    508 	.globl _STCC
                                    509 	.globl _T1CC4H
                                    510 	.globl _T1CC4L
                                    511 	.globl _T1CC3H
                                    512 	.globl _T1CC3L
                                    513 	.globl _XX_T1CC2H
                                    514 	.globl _XX_T1CC2L
                                    515 	.globl _XX_T1CC1H
                                    516 	.globl _XX_T1CC1L
                                    517 	.globl _XX_T1CC0H
                                    518 	.globl _XX_T1CC0L
                                    519 	.globl _T1CCTL4
                                    520 	.globl _T1CCTL3
                                    521 	.globl _XX_T1CCTL2
                                    522 	.globl _XX_T1CCTL1
                                    523 	.globl _XX_T1CCTL0
                                    524 	.globl _CLD
                                    525 	.globl _IRCTL
                                    526 	.globl _CHIPINFO1
                                    527 	.globl _CHIPINFO0
                                    528 	.globl _FWDATA
                                    529 	.globl _FADDRH
                                    530 	.globl _FADDRL
                                    531 	.globl _FCTL
                                    532 	.globl _IVCTRL
                                    533 	.globl _BATTMON
                                    534 	.globl _SRCRC
                                    535 	.globl _DBGDATA
                                    536 	.globl _TESTREG0
                                    537 	.globl _CHIPID
                                    538 	.globl _CHVER
                                    539 	.globl _OBSSEL5
                                    540 	.globl _OBSSEL4
                                    541 	.globl _OBSSEL3
                                    542 	.globl _OBSSEL2
                                    543 	.globl _OBSSEL1
                                    544 	.globl _OBSSEL0
                                    545 	.globl _I2CIO
                                    546 	.globl _I2CWC
                                    547 	.globl _I2CADDR
                                    548 	.globl _I2CDATA
                                    549 	.globl _I2CSTAT
                                    550 	.globl _I2CCFG
                                    551 	.globl _OPAMPMC
                                    552 	.globl _MONMUX
                                    553 	.globl _elfloader_init
                                    554 	.globl _elfloader_load
                                    555 ;--------------------------------------------------------
                                    556 ; special function registers
                                    557 ;--------------------------------------------------------
                                    558 	.area RSEG    (ABS,DATA)
      000000                        559 	.org 0x0000
                           000080   560 _P0	=	0x0080
                           000081   561 _SP	=	0x0081
                           000082   562 _DPL0	=	0x0082
                           000083   563 _DPH0	=	0x0083
                           000084   564 _DPL1	=	0x0084
                           000085   565 _DPH1	=	0x0085
                           000087   566 _PCON	=	0x0087
                           000088   567 _TCON	=	0x0088
                           000090   568 _P1	=	0x0090
                           000092   569 _DPS	=	0x0092
                           000098   570 _S0CON	=	0x0098
                           00009A   571 _IEN2	=	0x009a
                           00009B   572 _S1CON	=	0x009b
                           0000A0   573 _P2	=	0x00a0
                           0000A8   574 _IEN0	=	0x00a8
                           0000A9   575 _IP0	=	0x00a9
                           0000B8   576 _IEN1	=	0x00b8
                           0000B9   577 _IP1	=	0x00b9
                           0000C0   578 _IRCON	=	0x00c0
                           0000D0   579 _PSW	=	0x00d0
                           0000E0   580 _ACC	=	0x00e0
                           0000E8   581 _IRCON2	=	0x00e8
                           0000F0   582 _B	=	0x00f0
                           0000B4   583 _ADCCON1	=	0x00b4
                           0000B5   584 _ADCCON2	=	0x00b5
                           0000B6   585 _ADCCON3	=	0x00b6
                           0000BA   586 _ADCL	=	0x00ba
                           0000BB   587 _ADCH	=	0x00bb
                           0000BC   588 _RNDL	=	0x00bc
                           0000BD   589 _RNDH	=	0x00bd
                           0000B1   590 _ENCDI	=	0x00b1
                           0000B2   591 _ENCDO	=	0x00b2
                           0000B3   592 _ENCCS	=	0x00b3
                           0000D1   593 _DMAIRQ	=	0x00d1
                           0000D2   594 _DMA1CFGL	=	0x00d2
                           0000D3   595 _DMA1CFGH	=	0x00d3
                           0000D4   596 _DMA0CFGL	=	0x00d4
                           0000D5   597 _DMA0CFGH	=	0x00d5
                           0000D6   598 _DMAARM	=	0x00d6
                           0000D7   599 _DMAREQ	=	0x00d7
                           000089   600 _P0IFG	=	0x0089
                           00008A   601 _P1IFG	=	0x008a
                           00008B   602 _P2IFG	=	0x008b
                           00008C   603 _PICTL	=	0x008c
                           0000AB   604 _P0IEN	=	0x00ab
                           00008D   605 _P1IEN	=	0x008d
                           0000AC   606 _P2IEN	=	0x00ac
                           00008F   607 _P0INP	=	0x008f
                           0000F1   608 _PERCFG	=	0x00f1
                           0000F2   609 _APCFG	=	0x00f2
                           0000F3   610 _P0SEL	=	0x00f3
                           0000F4   611 _P1SEL	=	0x00f4
                           0000F5   612 _P2SEL	=	0x00f5
                           0000F6   613 _P1INP	=	0x00f6
                           0000F7   614 _P2INP	=	0x00f7
                           0000FD   615 _P0DIR	=	0x00fd
                           0000FE   616 _P1DIR	=	0x00fe
                           0000FF   617 _P2DIR	=	0x00ff
                           0000AE   618 _PMUX	=	0x00ae
                           000093   619 _MPAGE	=	0x0093
                           000093   620 __XPAGE	=	0x0093
                           0000C7   621 _MEMCTR	=	0x00c7
                           00009F   622 _FMAP	=	0x009f
                           00009F   623 _PSBANK	=	0x009f
                           000091   624 _RFIRQF1	=	0x0091
                           0000D9   625 _RFD	=	0x00d9
                           0000E1   626 _RFST	=	0x00e1
                           0000E9   627 _RFIRQF0	=	0x00e9
                           0000BF   628 _RFERRF	=	0x00bf
                           000095   629 _ST0	=	0x0095
                           000096   630 _ST1	=	0x0096
                           000097   631 _ST2	=	0x0097
                           0000AD   632 _STLOAD	=	0x00ad
                           0000BE   633 _SLEEPCMD	=	0x00be
                           00009D   634 _SLEEPSTA	=	0x009d
                           0000C6   635 _CLKCONCMD	=	0x00c6
                           00009E   636 _CLKCONSTA	=	0x009e
                           0000DA   637 _T1CC0L	=	0x00da
                           0000DB   638 _T1CC0H	=	0x00db
                           0000DC   639 _T1CC1L	=	0x00dc
                           0000DD   640 _T1CC1H	=	0x00dd
                           0000DE   641 _T1CC2L	=	0x00de
                           0000DF   642 _T1CC2H	=	0x00df
                           0000E2   643 _T1CNTL	=	0x00e2
                           0000E3   644 _T1CNTH	=	0x00e3
                           0000E4   645 _T1CTL	=	0x00e4
                           0000E5   646 _T1CCTL0	=	0x00e5
                           0000E6   647 _T1CCTL1	=	0x00e6
                           0000E7   648 _T1CCTL2	=	0x00e7
                           0000AF   649 _T1STAT	=	0x00af
                           000094   650 _T2CTRL	=	0x0094
                           00009C   651 _T2EVTCFG	=	0x009c
                           0000A1   652 _T2IRQF	=	0x00a1
                           0000A2   653 _T2M0	=	0x00a2
                           0000A3   654 _T2M1	=	0x00a3
                           0000A4   655 _T2MOVF0	=	0x00a4
                           0000A5   656 _T2MOVF1	=	0x00a5
                           0000A6   657 _T2MOVF2	=	0x00a6
                           0000A7   658 _T2IRQM	=	0x00a7
                           0000C3   659 _T2MSEL	=	0x00c3
                           0000CA   660 _T3CNT	=	0x00ca
                           0000CB   661 _T3CTL	=	0x00cb
                           0000CC   662 _T3CCTL0	=	0x00cc
                           0000CD   663 _T3CC0	=	0x00cd
                           0000CE   664 _T3CCTL1	=	0x00ce
                           0000CF   665 _T3CC1	=	0x00cf
                           0000EA   666 _T4CNT	=	0x00ea
                           0000EB   667 _T4CTL	=	0x00eb
                           0000EC   668 _T4CCTL0	=	0x00ec
                           0000ED   669 _T4CC0	=	0x00ed
                           0000EE   670 _T4CCTL1	=	0x00ee
                           0000EF   671 _T4CC1	=	0x00ef
                           0000D8   672 _TIMIF	=	0x00d8
                           000086   673 _U0CSR	=	0x0086
                           0000C1   674 _U0DBUF	=	0x00c1
                           0000C2   675 _U0BAUD	=	0x00c2
                           0000C4   676 _U0UCR	=	0x00c4
                           0000C5   677 _U0GCR	=	0x00c5
                           0000F8   678 _U1CSR	=	0x00f8
                           0000F9   679 _U1DBUF	=	0x00f9
                           0000FA   680 _U1BAUD	=	0x00fa
                           0000FB   681 _U1UCR	=	0x00fb
                           0000FC   682 _U1GCR	=	0x00fc
                           0000C9   683 _WDCTL	=	0x00c9
                                    684 ;--------------------------------------------------------
                                    685 ; special function bits
                                    686 ;--------------------------------------------------------
                                    687 	.area RSEG    (ABS,DATA)
      000000                        688 	.org 0x0000
                           000087   689 _P0_7	=	0x0087
                           000086   690 _P0_6	=	0x0086
                           000085   691 _P0_5	=	0x0085
                           000084   692 _P0_4	=	0x0084
                           000083   693 _P0_3	=	0x0083
                           000082   694 _P0_2	=	0x0082
                           000081   695 _P0_1	=	0x0081
                           000080   696 _P0_0	=	0x0080
                           00008F   697 _URX1IF	=	0x008f
                           00008D   698 _ADCIF	=	0x008d
                           00008B   699 _URX0IF	=	0x008b
                           00008A   700 _IT1	=	0x008a
                           000089   701 _RFERRIF	=	0x0089
                           000088   702 _IT0	=	0x0088
                           000097   703 _P1_7	=	0x0097
                           000096   704 _P1_6	=	0x0096
                           000095   705 _P1_5	=	0x0095
                           000094   706 _P1_4	=	0x0094
                           000093   707 _P1_3	=	0x0093
                           000092   708 _P1_2	=	0x0092
                           000091   709 _P1_1	=	0x0091
                           000090   710 _P1_0	=	0x0090
                           000099   711 _ENCIF_1	=	0x0099
                           000098   712 _ENCIF_0	=	0x0098
                           0000A7   713 _P2_7	=	0x00a7
                           0000A6   714 _P2_6	=	0x00a6
                           0000A5   715 _P2_5	=	0x00a5
                           0000A4   716 _P2_4	=	0x00a4
                           0000A3   717 _P2_3	=	0x00a3
                           0000A2   718 _P2_2	=	0x00a2
                           0000A1   719 _P2_1	=	0x00a1
                           0000A0   720 _P2_0	=	0x00a0
                           0000AF   721 _EA	=	0x00af
                           0000AD   722 _STIE	=	0x00ad
                           0000AC   723 _ENCIE	=	0x00ac
                           0000AB   724 _URX1IE	=	0x00ab
                           0000AA   725 _URX0IE	=	0x00aa
                           0000A9   726 _ADCIE	=	0x00a9
                           0000A8   727 _RFERRIE	=	0x00a8
                           0000BD   728 _P0IE	=	0x00bd
                           0000BC   729 _T4IE	=	0x00bc
                           0000BB   730 _T3IE	=	0x00bb
                           0000BA   731 _T2IE	=	0x00ba
                           0000B9   732 _T1IE	=	0x00b9
                           0000B8   733 _DMAIE	=	0x00b8
                           0000C7   734 _STIF	=	0x00c7
                           0000C5   735 _P0IF	=	0x00c5
                           0000C4   736 _T4IF	=	0x00c4
                           0000C3   737 _T3IF	=	0x00c3
                           0000C2   738 _T2IF	=	0x00c2
                           0000C1   739 _T1IF	=	0x00c1
                           0000C0   740 _DMAIF	=	0x00c0
                           0000D7   741 _CY	=	0x00d7
                           0000D6   742 _AC	=	0x00d6
                           0000D5   743 _F0	=	0x00d5
                           0000D4   744 _RS1	=	0x00d4
                           0000D3   745 _RS0	=	0x00d3
                           0000D2   746 _OV	=	0x00d2
                           0000D1   747 _F1	=	0x00d1
                           0000D0   748 _P	=	0x00d0
                           0000E7   749 _ACC_7	=	0x00e7
                           0000E6   750 _ACC_6	=	0x00e6
                           0000E5   751 _ACC_5	=	0x00e5
                           0000E4   752 _ACC_4	=	0x00e4
                           0000E3   753 _ACC_3	=	0x00e3
                           0000E2   754 _ACC_2	=	0x00e2
                           0000E1   755 _ACC_1	=	0x00e1
                           0000E0   756 _ACC_0	=	0x00e0
                           0000EC   757 _WDTIF	=	0x00ec
                           0000EB   758 _P1IF	=	0x00eb
                           0000EA   759 _UTX1IF	=	0x00ea
                           0000E9   760 _UTX0IF	=	0x00e9
                           0000E8   761 _P2IF	=	0x00e8
                           0000F7   762 _B_7	=	0x00f7
                           0000F6   763 _B_6	=	0x00f6
                           0000F5   764 _B_5	=	0x00f5
                           0000F4   765 _B_4	=	0x00f4
                           0000F3   766 _B_3	=	0x00f3
                           0000F2   767 _B_2	=	0x00f2
                           0000F1   768 _B_1	=	0x00f1
                           0000F0   769 _B_0	=	0x00f0
                           0000DE   770 _OVFIM	=	0x00de
                           0000DD   771 _T4CH1IF	=	0x00dd
                           0000DC   772 _T4CH0IF	=	0x00dc
                           0000DB   773 _T4OVFIF	=	0x00db
                           0000DA   774 _T3CH1IF	=	0x00da
                           0000D9   775 _T3CH0IF	=	0x00d9
                           0000D8   776 _T3OVFIF	=	0x00d8
                           0000FF   777 _MODE	=	0x00ff
                           0000FE   778 _RE	=	0x00fe
                           0000FD   779 _SLAVE	=	0x00fd
                           0000FC   780 _FE	=	0x00fc
                           0000FB   781 _ERR	=	0x00fb
                           0000FA   782 _RX_BYTE	=	0x00fa
                           0000F9   783 _TX_BYTE	=	0x00f9
                           0000F8   784 _ACTIVE	=	0x00f8
                                    785 ;--------------------------------------------------------
                                    786 ; overlayable register banks
                                    787 ;--------------------------------------------------------
                                    788 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        789 	.ds 8
                                    790 ;--------------------------------------------------------
                                    791 ; internal ram data
                                    792 ;--------------------------------------------------------
                                    793 	.area DSEG    (DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; overlayable items in internal ram 
                                    796 ;--------------------------------------------------------
                                    797 ;--------------------------------------------------------
                                    798 ; indirectly addressable internal ram data
                                    799 ;--------------------------------------------------------
                                    800 	.area ISEG    (DATA)
                                    801 ;--------------------------------------------------------
                                    802 ; absolute internal ram data
                                    803 ;--------------------------------------------------------
                                    804 	.area IABS    (ABS,DATA)
                                    805 	.area IABS    (ABS,DATA)
                                    806 ;--------------------------------------------------------
                                    807 ; bit data
                                    808 ;--------------------------------------------------------
                                    809 	.area BSEG    (BIT)
                                    810 ;--------------------------------------------------------
                                    811 ; paged external ram data
                                    812 ;--------------------------------------------------------
                                    813 	.area PSEG    (PAG,XDATA)
                                    814 ;--------------------------------------------------------
                                    815 ; external ram data
                                    816 ;--------------------------------------------------------
                                    817 	.area XSEG    (XDATA)
                           0061A6   818 _MONMUX	=	0x61a6
                           0061A6   819 _OPAMPMC	=	0x61a6
                           006230   820 _I2CCFG	=	0x6230
                           006231   821 _I2CSTAT	=	0x6231
                           006232   822 _I2CDATA	=	0x6232
                           006233   823 _I2CADDR	=	0x6233
                           006234   824 _I2CWC	=	0x6234
                           006235   825 _I2CIO	=	0x6235
                           006243   826 _OBSSEL0	=	0x6243
                           006244   827 _OBSSEL1	=	0x6244
                           006245   828 _OBSSEL2	=	0x6245
                           006246   829 _OBSSEL3	=	0x6246
                           006247   830 _OBSSEL4	=	0x6247
                           006248   831 _OBSSEL5	=	0x6248
                           006249   832 _CHVER	=	0x6249
                           00624A   833 _CHIPID	=	0x624a
                           00624B   834 _TESTREG0	=	0x624b
                           006260   835 _DBGDATA	=	0x6260
                           006262   836 _SRCRC	=	0x6262
                           006264   837 _BATTMON	=	0x6264
                           006265   838 _IVCTRL	=	0x6265
                           006270   839 _FCTL	=	0x6270
                           006271   840 _FADDRL	=	0x6271
                           006272   841 _FADDRH	=	0x6272
                           006273   842 _FWDATA	=	0x6273
                           006276   843 _CHIPINFO0	=	0x6276
                           006277   844 _CHIPINFO1	=	0x6277
                           006281   845 _IRCTL	=	0x6281
                           006290   846 _CLD	=	0x6290
                           0062A0   847 _XX_T1CCTL0	=	0x62a0
                           0062A1   848 _XX_T1CCTL1	=	0x62a1
                           0062A2   849 _XX_T1CCTL2	=	0x62a2
                           0062A3   850 _T1CCTL3	=	0x62a3
                           0062A4   851 _T1CCTL4	=	0x62a4
                           0062A6   852 _XX_T1CC0L	=	0x62a6
                           0062A7   853 _XX_T1CC0H	=	0x62a7
                           0062A8   854 _XX_T1CC1L	=	0x62a8
                           0062A9   855 _XX_T1CC1H	=	0x62a9
                           0062AA   856 _XX_T1CC2L	=	0x62aa
                           0062AB   857 _XX_T1CC2H	=	0x62ab
                           0062AC   858 _T1CC3L	=	0x62ac
                           0062AD   859 _T1CC3H	=	0x62ad
                           0062AE   860 _T1CC4L	=	0x62ae
                           0062AF   861 _T1CC4H	=	0x62af
                           0062B0   862 _STCC	=	0x62b0
                           0062B1   863 _STCS	=	0x62b1
                           0062B2   864 _STCV0	=	0x62b2
                           0062B3   865 _STCV1	=	0x62b3
                           0062B4   866 _STCV2	=	0x62b4
                           0062C0   867 _OPAMPC	=	0x62c0
                           0062C1   868 _OPAMPS	=	0x62c1
                           0062D0   869 _CMPCTL	=	0x62d0
                           006000   870 _RFCORE_RAM	=	0x6000
                           006000   871 _RXFIFO	=	0x6000
                           006080   872 _TXFIFO	=	0x6080
                           006100   873 _SRC_ADDR_TABLE	=	0x6100
                           006160   874 _SRCRESMASK0	=	0x6160
                           006161   875 _SRCRESMASK1	=	0x6161
                           006162   876 _SRCRESMASK2	=	0x6162
                           006163   877 _SRCRESINDEX	=	0x6163
                           006164   878 _SRCEXTPENDEN0	=	0x6164
                           006165   879 _SRCEXTPENDEN1	=	0x6165
                           006166   880 _SRCEXTPENDEN2	=	0x6166
                           006167   881 _SRCSHORTPENDEN0	=	0x6167
                           006168   882 _SRCSHORTPENDEN1	=	0x6168
                           006169   883 _SRCSHORTPENDEN2	=	0x6169
                           00616A   884 _EXT_ADDR0	=	0x616a
                           00616B   885 _EXT_ADDR1	=	0x616b
                           00616C   886 _EXT_ADDR2	=	0x616c
                           00616D   887 _EXT_ADDR3	=	0x616d
                           00616E   888 _EXT_ADDR4	=	0x616e
                           00616F   889 _EXT_ADDR5	=	0x616f
                           006170   890 _EXT_ADDR6	=	0x6170
                           006171   891 _EXT_ADDR7	=	0x6171
                           006172   892 _PAN_ID0	=	0x6172
                           006173   893 _PAN_ID1	=	0x6173
                           006174   894 _SHORT_ADDR0	=	0x6174
                           006175   895 _SHORT_ADDR1	=	0x6175
                           006180   896 _FRMFILT0	=	0x6180
                           006181   897 _FRMFILT1	=	0x6181
                           006182   898 _SRCMATCH	=	0x6182
                           006183   899 _SRCSHORTEN0	=	0x6183
                           006184   900 _SRCSHORTEN1	=	0x6184
                           006185   901 _SRCSHORTEN2	=	0x6185
                           006186   902 _SRCEXTEN0	=	0x6186
                           006187   903 _SRCEXTEN1	=	0x6187
                           006188   904 _SRCEXTEN2	=	0x6188
                           006189   905 _FRMCTRL0	=	0x6189
                           00618A   906 _FRMCTRL1	=	0x618a
                           00618B   907 _RXENABLE	=	0x618b
                           00618C   908 _RXMASKSET	=	0x618c
                           00618D   909 _RXMASKCLR	=	0x618d
                           00618E   910 _FREQTUNE	=	0x618e
                           00618F   911 _FREQCTRL	=	0x618f
                           006190   912 _TXPOWER	=	0x6190
                           006191   913 _TXCTRL	=	0x6191
                           006192   914 _FSMSTAT0	=	0x6192
                           006193   915 _FSMSTAT1	=	0x6193
                           006194   916 _FIFOPCTRL	=	0x6194
                           006195   917 _FSMCTRL	=	0x6195
                           006196   918 _CCACTRL0	=	0x6196
                           006197   919 _CCACTRL1	=	0x6197
                           006198   920 _RSSI	=	0x6198
                           006199   921 _RSSISTAT	=	0x6199
                           00619A   922 _RXFIRST	=	0x619a
                           00619B   923 _RXFIFOCNT	=	0x619b
                           00619C   924 _TXFIFOCNT	=	0x619c
                           00619D   925 _RXFIRST_PTR	=	0x619d
                           00619E   926 _RXLAST_PTR	=	0x619e
                           00619F   927 _RXP1_PTR	=	0x619f
                           0061A1   928 _TXFIRST_PTR	=	0x61a1
                           0061A2   929 _TXLAST_PTR	=	0x61a2
                           0061A3   930 _RFIRQM0	=	0x61a3
                           0061A4   931 _RFIRQM1	=	0x61a4
                           0061A5   932 _RFERRM	=	0x61a5
                           0061A7   933 _RFRND	=	0x61a7
                           0061A8   934 _MDMCTRL0	=	0x61a8
                           0061A9   935 _MDMCTRL1	=	0x61a9
                           0061AA   936 _FREQEST	=	0x61aa
                           0061AB   937 _RXCTRL	=	0x61ab
                           0061AC   938 _FSCTRL	=	0x61ac
                           0061AD   939 _FSCAL0	=	0x61ad
                           0061AE   940 _FSCAL1	=	0x61ae
                           0061AF   941 _FSCAL2	=	0x61af
                           0061B0   942 _FSCAL3	=	0x61b0
                           0061B1   943 _AGCCTRL0	=	0x61b1
                           0061B2   944 _AGCCTRL1	=	0x61b2
                           0061B3   945 _AGCCTRL2	=	0x61b3
                           0061B4   946 _AGCCTRL3	=	0x61b4
                           0061B5   947 _ADCTEST0	=	0x61b5
                           0061B6   948 _ADCTEST1	=	0x61b6
                           0061B7   949 _ADCTEST2	=	0x61b7
                           0061B8   950 _MDMTEST0	=	0x61b8
                           0061B9   951 _MDMTEST1	=	0x61b9
                           0061BA   952 _DACTEST0	=	0x61ba
                           0061BB   953 _DACTEST1	=	0x61bb
                           0061BC   954 _DACTEST2	=	0x61bc
                           0061BD   955 _ATEST	=	0x61bd
                           0061BE   956 _PTEST0	=	0x61be
                           0061BF   957 _PTEST1	=	0x61bf
                           0061FA   958 _TXFILTCFG	=	0x61fa
                           0061EB   959 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   960 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   961 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   962 _CSPPROG0	=	0x61c0
                           0061C1   963 _CSPPROG1	=	0x61c1
                           0061C2   964 _CSPPROG2	=	0x61c2
                           0061C3   965 _CSPPROG3	=	0x61c3
                           0061C4   966 _CSPPROG4	=	0x61c4
                           0061C5   967 _CSPPROG5	=	0x61c5
                           0061C6   968 _CSPPROG6	=	0x61c6
                           0061C7   969 _CSPPROG7	=	0x61c7
                           0061C8   970 _CSPPROG8	=	0x61c8
                           0061C9   971 _CSPPROG9	=	0x61c9
                           0061CA   972 _CSPPROG10	=	0x61ca
                           0061CB   973 _CSPPROG11	=	0x61cb
                           0061CC   974 _CSPPROG12	=	0x61cc
                           0061CD   975 _CSPPROG13	=	0x61cd
                           0061CE   976 _CSPPROG14	=	0x61ce
                           0061CF   977 _CSPPROG15	=	0x61cf
                           0061D0   978 _CSPPROG16	=	0x61d0
                           0061D1   979 _CSPPROG17	=	0x61d1
                           0061D2   980 _CSPPROG18	=	0x61d2
                           0061D3   981 _CSPPROG19	=	0x61d3
                           0061D4   982 _CSPPROG20	=	0x61d4
                           0061D5   983 _CSPPROG21	=	0x61d5
                           0061D6   984 _CSPPROG22	=	0x61d6
                           0061D7   985 _CSPPROG23	=	0x61d7
                           0061E0   986 _CSPCTRL	=	0x61e0
                           0061E1   987 _CSPSTAT	=	0x61e1
                           0061E2   988 _CSPX	=	0x61e2
                           0061E3   989 _CSPY	=	0x61e3
                           0061E4   990 _CSPZ	=	0x61e4
                           0061E5   991 _CSPT	=	0x61e5
                           006200   992 _USBADDR	=	0x6200
                           006201   993 _USBPOW	=	0x6201
                           006202   994 _USBIIF	=	0x6202
                           006204   995 _USBOIF	=	0x6204
                           006206   996 _USBCIF	=	0x6206
                           006207   997 _USBIIE	=	0x6207
                           006209   998 _USBOIE	=	0x6209
                           00620B   999 _USBCIE	=	0x620b
                           00620C  1000 _USBFRML	=	0x620c
                           00620D  1001 _USBFRMH	=	0x620d
                           00620E  1002 _USBINDEX	=	0x620e
                           00620F  1003 _USBCTRL	=	0x620f
                           006210  1004 _USBMAXI	=	0x6210
                           006211  1005 _USBCS0	=	0x6211
                           006211  1006 _USBCSIL	=	0x6211
                           006212  1007 _USBCSIH	=	0x6212
                           006213  1008 _USBMAXO	=	0x6213
                           006214  1009 _USBCSOL	=	0x6214
                           006215  1010 _USBCSOH	=	0x6215
                           006216  1011 _USBCNT0	=	0x6216
                           006216  1012 _USBCNTL	=	0x6216
                           006217  1013 _USBCNTH	=	0x6217
                           006220  1014 _USBF0	=	0x6220
                           006222  1015 _USBF1	=	0x6222
                           006224  1016 _USBF2	=	0x6224
                           006226  1017 _USBF3	=	0x6226
                           006228  1018 _USBF4	=	0x6228
                           00622A  1019 _USBF5	=	0x622a
                           007080  1020 _X_P0	=	0x7080
                           007086  1021 _X_U0CSR	=	0x7086
                           007089  1022 _X_P0IFG	=	0x7089
                           00708A  1023 _X_P1IFG	=	0x708a
                           00708B  1024 _X_P2IFG	=	0x708b
                           00708C  1025 _X_PICTL	=	0x708c
                           00708D  1026 _X_P1IEN	=	0x708d
                           00708F  1027 _X_P0INP	=	0x708f
                           007090  1028 _X_P1	=	0x7090
                           007091  1029 _X_RFIRQF1	=	0x7091
                           007093  1030 _X_MPAGE	=	0x7093
                           007093  1031 _X__XPAGE	=	0x7093
                           007094  1032 _X_T2CTRL	=	0x7094
                           007095  1033 _X_ST0	=	0x7095
                           007096  1034 _X_ST1	=	0x7096
                           007097  1035 _X_ST2	=	0x7097
                           00709C  1036 _X_T2EVTCFG	=	0x709c
                           00709D  1037 _X_SLEEPSTA	=	0x709d
                           00709E  1038 _X_CLKCONSTA	=	0x709e
                           00709F  1039 _X_FMAP	=	0x709f
                           00709F  1040 _X_PSBANK	=	0x709f
                           0070A0  1041 _X_P2	=	0x70a0
                           0070A1  1042 _X_T2IRQF	=	0x70a1
                           0070A2  1043 _X_T2M0	=	0x70a2
                           0070A3  1044 _X_T2M1	=	0x70a3
                           0070A4  1045 _X_T2MOVF0	=	0x70a4
                           0070A5  1046 _X_T2MOVF1	=	0x70a5
                           0070A6  1047 _X_T2MOVF2	=	0x70a6
                           0070A7  1048 _X_T2IRQM	=	0x70a7
                           0070AB  1049 _X_P0IEN	=	0x70ab
                           0070AC  1050 _X_P2IEN	=	0x70ac
                           0070AD  1051 _X_STLOAD	=	0x70ad
                           0070AE  1052 _X_PMUX	=	0x70ae
                           0070AF  1053 _X_T1STAT	=	0x70af
                           0070B1  1054 _X_ENCDI	=	0x70b1
                           0070B2  1055 _X_ENCDO	=	0x70b2
                           0070B3  1056 _X_ENCCS	=	0x70b3
                           0070B4  1057 _X_ADCCON1	=	0x70b4
                           0070B5  1058 _X_ADCCON2	=	0x70b5
                           0070B6  1059 _X_ADCCON3	=	0x70b6
                           0070BA  1060 _X_ADCL	=	0x70ba
                           0070BB  1061 _X_ADCH	=	0x70bb
                           0070BC  1062 _X_RNDL	=	0x70bc
                           0070BD  1063 _X_RNDH	=	0x70bd
                           0070BE  1064 _X_SLEEPCMD	=	0x70be
                           0070BF  1065 _X_RFERRF	=	0x70bf
                           0070C1  1066 _X_U0DBUF	=	0x70c1
                           0070C2  1067 _X_U0BAUD	=	0x70c2
                           0070C3  1068 _X_T2MSEL	=	0x70c3
                           0070C4  1069 _X_U0UCR	=	0x70c4
                           0070C5  1070 _X_U0GCR	=	0x70c5
                           0070C6  1071 _X_CLKCONCMD	=	0x70c6
                           0070C7  1072 _X_MEMCTR	=	0x70c7
                           0070C9  1073 _X_WDCTL	=	0x70c9
                           0070CA  1074 _X_T3CNT	=	0x70ca
                           0070CB  1075 _X_T3CTL	=	0x70cb
                           0070CC  1076 _X_T3CCTL0	=	0x70cc
                           0070CD  1077 _X_T3CC0	=	0x70cd
                           0070CE  1078 _X_T3CCTL1	=	0x70ce
                           0070CF  1079 _X_T3CC1	=	0x70cf
                           0070D1  1080 _X_DMAIRQ	=	0x70d1
                           0070D2  1081 _X_DMA1CFGL	=	0x70d2
                           0070D3  1082 _X_DMA1CFGH	=	0x70d3
                           0070D4  1083 _X_DMA0CFGL	=	0x70d4
                           0070D5  1084 _X_DMA0CFGH	=	0x70d5
                           0070D6  1085 _X_DMAARM	=	0x70d6
                           0070D7  1086 _X_DMAREQ	=	0x70d7
                           0070D8  1087 _X_TIMIF	=	0x70d8
                           0070D9  1088 _X_RFD	=	0x70d9
                           0070DA  1089 _X_T1CC0L	=	0x70da
                           0070DB  1090 _X_T1CC0H	=	0x70db
                           0070DC  1091 _X_T1CC1L	=	0x70dc
                           0070DD  1092 _X_T1CC1H	=	0x70dd
                           0070DE  1093 _X_T1CC2L	=	0x70de
                           0070DF  1094 _X_T1CC2H	=	0x70df
                           0070E1  1095 _X_RFST	=	0x70e1
                           0070E2  1096 _X_T1CNTL	=	0x70e2
                           0070E3  1097 _X_T1CNTH	=	0x70e3
                           0070E4  1098 _X_T1CTL	=	0x70e4
                           0070E5  1099 _X_T1CCTL0	=	0x70e5
                           0070E6  1100 _X_T1CCTL1	=	0x70e6
                           0070E7  1101 _X_T1CCTL2	=	0x70e7
                           0070E9  1102 _X_RFIRQF0	=	0x70e9
                           0070EA  1103 _X_T4CNT	=	0x70ea
                           0070EB  1104 _X_T4CTL	=	0x70eb
                           0070EC  1105 _X_T4CCTL0	=	0x70ec
                           0070ED  1106 _X_T4CC0	=	0x70ed
                           0070EE  1107 _X_T4CCTL1	=	0x70ee
                           0070EF  1108 _X_T4CC1	=	0x70ef
                           0070F1  1109 _X_PERCFG	=	0x70f1
                           0070F2  1110 _X_APCFG	=	0x70f2
                           0070F3  1111 _X_P0SEL	=	0x70f3
                           0070F4  1112 _X_P1SEL	=	0x70f4
                           0070F5  1113 _X_P2SEL	=	0x70f5
                           0070F6  1114 _X_P1INP	=	0x70f6
                           0070F7  1115 _X_P2INP	=	0x70f7
                           0070F8  1116 _X_U1CSR	=	0x70f8
                           0070F9  1117 _X_U1DBUF	=	0x70f9
                           0070FA  1118 _X_U1BAUD	=	0x70fa
                           0070FB  1119 _X_U1UCR	=	0x70fb
                           0070FC  1120 _X_U1GCR	=	0x70fc
                           0070FD  1121 _X_P0DIR	=	0x70fd
                           0070FE  1122 _X_P1DIR	=	0x70fe
                           0070FF  1123 _X_P2DIR	=	0x70ff
                           007800  1124 _X_INFOPAGE	=	0x7800
                           00780C  1125 _X_IEEE_ADDR	=	0x780c
      000000                       1126 _elfloader_unknown::
      000000                       1127 	.ds 30
      00001E                       1128 _elfloader_autostart_processes::
      00001E                       1129 	.ds 3
      000021                       1130 _bss:
      000021                       1131 	.ds 6
      000027                       1132 _data:
      000027                       1133 	.ds 6
      00002D                       1134 _rodata:
      00002D                       1135 	.ds 6
      000033                       1136 _text:
      000033                       1137 	.ds 6
                                   1138 ;--------------------------------------------------------
                                   1139 ; absolute external ram data
                                   1140 ;--------------------------------------------------------
                                   1141 	.area XABS    (ABS,XDATA)
                                   1142 ;--------------------------------------------------------
                                   1143 ; external initialized ram data
                                   1144 ;--------------------------------------------------------
                                   1145 	.area XISEG   (XDATA)
                                   1146 	.area HOME    (CODE)
                                   1147 	.area GSINIT0 (CODE)
                                   1148 	.area GSINIT1 (CODE)
                                   1149 	.area GSINIT2 (CODE)
                                   1150 	.area GSINIT3 (CODE)
                                   1151 	.area GSINIT4 (CODE)
                                   1152 	.area GSINIT5 (CODE)
                                   1153 	.area GSINIT  (CODE)
                                   1154 	.area GSFINAL (CODE)
                                   1155 	.area CSEG    (CODE)
                                   1156 ;--------------------------------------------------------
                                   1157 ; global & static initialisations
                                   1158 ;--------------------------------------------------------
                                   1159 	.area HOME    (CODE)
                                   1160 	.area GSINIT  (CODE)
                                   1161 	.area GSFINAL (CODE)
                                   1162 	.area GSINIT  (CODE)
                                   1163 ;--------------------------------------------------------
                                   1164 ; Home
                                   1165 ;--------------------------------------------------------
                                   1166 	.area HOME    (CODE)
                                   1167 	.area HOME    (CODE)
                                   1168 ;--------------------------------------------------------
                                   1169 ; code
                                   1170 ;--------------------------------------------------------
                                   1171 	.area CSEG    (CODE)
                                   1172 ;------------------------------------------------------------
                                   1173 ;Allocation info for local variables in function 'seek_read'
                                   1174 ;------------------------------------------------------------
                                   1175 ;offset                    Allocated to stack - sp -3
                                   1176 ;buf                       Allocated to stack - sp -6
                                   1177 ;len                       Allocated to stack - sp -8
                                   1178 ;fd                        Allocated to registers r6 r7 
                                   1179 ;------------------------------------------------------------
                                   1180 ;	../../core/loader/elfloader.c:149: seek_read(int fd, unsigned int offset, char *buf, int len)
                                   1181 ;	-----------------------------------------
                                   1182 ;	 function seek_read
                                   1183 ;	-----------------------------------------
      000000                       1184 _seek_read:
                           000007  1185 	ar7 = 0x07
                           000006  1186 	ar6 = 0x06
                           000005  1187 	ar5 = 0x05
                           000004  1188 	ar4 = 0x04
                           000003  1189 	ar3 = 0x03
                           000002  1190 	ar2 = 0x02
                           000001  1191 	ar1 = 0x01
                           000000  1192 	ar0 = 0x00
      000000 AE 82            [24] 1193 	mov	r6,dpl
      000002 AF 83            [24] 1194 	mov	r7,dph
                                   1195 ;	../../core/loader/elfloader.c:151: cfs_seek(fd, offset, CFS_SEEK_SET);
      000004 C0 07            [24] 1196 	push	ar7
      000006 C0 06            [24] 1197 	push	ar6
      000008 E4               [12] 1198 	clr	a
      000009 C0 E0            [24] 1199 	push	acc
      00000B C0 E0            [24] 1200 	push	acc
      00000D E5 81            [12] 1201 	mov	a,sp
      00000F 24 F9            [12] 1202 	add	a,#0xf9
      000011 F8               [12] 1203 	mov	r0,a
      000012 E6               [12] 1204 	mov	a,@r0
      000013 C0 E0            [24] 1205 	push	acc
      000015 08               [12] 1206 	inc	r0
      000016 E6               [12] 1207 	mov	a,@r0
      000017 C0 E0            [24] 1208 	push	acc
      000019 8E 82            [24] 1209 	mov	dpl,r6
      00001B 8F 83            [24] 1210 	mov	dph,r7
      00001D 12r00r00         [24] 1211 	lcall	_cfs_seek
      000020 E5 81            [12] 1212 	mov	a,sp
      000022 24 FC            [12] 1213 	add	a,#0xfc
      000024 F5 81            [12] 1214 	mov	sp,a
      000026 D0 06            [24] 1215 	pop	ar6
      000028 D0 07            [24] 1216 	pop	ar7
                                   1217 ;	../../core/loader/elfloader.c:152: cfs_read(fd, buf, len);
      00002A E5 81            [12] 1218 	mov	a,sp
      00002C 24 FA            [12] 1219 	add	a,#0xfa
      00002E F8               [12] 1220 	mov	r0,a
      00002F 86 03            [24] 1221 	mov	ar3,@r0
      000031 08               [12] 1222 	inc	r0
      000032 86 04            [24] 1223 	mov	ar4,@r0
      000034 08               [12] 1224 	inc	r0
      000035 86 05            [24] 1225 	mov	ar5,@r0
      000037 E5 81            [12] 1226 	mov	a,sp
      000039 24 F8            [12] 1227 	add	a,#0xf8
      00003B F8               [12] 1228 	mov	r0,a
      00003C E6               [12] 1229 	mov	a,@r0
      00003D C0 E0            [24] 1230 	push	acc
      00003F 08               [12] 1231 	inc	r0
      000040 E6               [12] 1232 	mov	a,@r0
      000041 C0 E0            [24] 1233 	push	acc
      000043 C0 03            [24] 1234 	push	ar3
      000045 C0 04            [24] 1235 	push	ar4
      000047 C0 05            [24] 1236 	push	ar5
      000049 8E 82            [24] 1237 	mov	dpl,r6
      00004B 8F 83            [24] 1238 	mov	dph,r7
      00004D 12r00r00         [24] 1239 	lcall	_cfs_read
      000050 E5 81            [12] 1240 	mov	a,sp
      000052 24 FB            [12] 1241 	add	a,#0xfb
      000054 F5 81            [12] 1242 	mov	sp,a
                                   1243 ;	../../core/loader/elfloader.c:164: }
      000056 22               [24] 1244 	ret
                                   1245 ;------------------------------------------------------------
                                   1246 ;Allocation info for local variables in function 'find_local_symbol'
                                   1247 ;------------------------------------------------------------
                                   1248 ;symbol                    Allocated to stack - sp -64
                                   1249 ;symtab                    Allocated to stack - sp -66
                                   1250 ;symtabsize                Allocated to stack - sp -68
                                   1251 ;strtab                    Allocated to stack - sp -70
                                   1252 ;fd                        Allocated to stack - sp -59
                                   1253 ;s                         Allocated to stack - sp -45
                                   1254 ;a                         Allocated to registers 
                                   1255 ;name                      Allocated to stack - sp -29
                                   1256 ;sect                      Allocated to registers r2 r6 r7 
                                   1257 ;sloc0                     Allocated to stack - sp -57
                                   1258 ;sloc1                     Allocated to stack - sp -55
                                   1259 ;sloc2                     Allocated to stack - sp -53
                                   1260 ;sloc3                     Allocated to stack - sp -49
                                   1261 ;sloc4                     Allocated to stack - sp -48
                                   1262 ;------------------------------------------------------------
                                   1263 ;	../../core/loader/elfloader.c:176: find_local_symbol(int fd, const char *symbol,
                                   1264 ;	-----------------------------------------
                                   1265 ;	 function find_local_symbol
                                   1266 ;	-----------------------------------------
      000057                       1267 _find_local_symbol:
      000057 C0 82            [24] 1268 	push	dpl
      000059 C0 83            [24] 1269 	push	dph
      00005B E5 81            [12] 1270 	mov	a,sp
      00005D 24 3A            [12] 1271 	add	a,#0x3a
                                   1272 ;	../../core/loader/elfloader.c:185: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
      00005F F5 81            [12] 1273 	mov	sp,a
      000061 24 BE            [12] 1274 	add	a,#0xbe
      000063 F8               [12] 1275 	mov	r0,a
      000064 86 04            [24] 1276 	mov	ar4,@r0
      000066 08               [12] 1277 	inc	r0
      000067 86 05            [24] 1278 	mov	ar5,@r0
      000069 E5 81            [12] 1279 	mov	a,sp
      00006B 24 E3            [12] 1280 	add	a,#0xe3
      00006D FB               [12] 1281 	mov	r3,a
      00006E E5 81            [12] 1282 	mov	a,sp
      000070 24 BA            [12] 1283 	add	a,#0xba
      000072 F8               [12] 1284 	mov	r0,a
      000073 E5 81            [12] 1285 	mov	a,sp
      000075 24 C7            [12] 1286 	add	a,#0xc7
      000077 F9               [12] 1287 	mov	r1,a
      000078 E6               [12] 1288 	mov	a,@r0
      000079 F7               [12] 1289 	mov	@r1,a
      00007A 08               [12] 1290 	inc	r0
      00007B 09               [12] 1291 	inc	r1
      00007C E6               [12] 1292 	mov	a,@r0
      00007D F7               [12] 1293 	mov	@r1,a
      00007E E5 81            [12] 1294 	mov	a,sp
      000080 24 CF            [12] 1295 	add	a,#0xcf
      000082 F8               [12] 1296 	mov	r0,a
      000083 A6 03            [24] 1297 	mov	@r0,ar3
      000085                       1298 00116$:
      000085 E5 81            [12] 1299 	mov	a,sp
      000087 24 BE            [12] 1300 	add	a,#0xbe
      000089 F8               [12] 1301 	mov	r0,a
      00008A 86 02            [24] 1302 	mov	ar2,@r0
      00008C 08               [12] 1303 	inc	r0
      00008D 86 07            [24] 1304 	mov	ar7,@r0
      00008F E5 81            [12] 1305 	mov	a,sp
      000091 24 BC            [12] 1306 	add	a,#0xbc
      000093 F8               [12] 1307 	mov	r0,a
      000094 E5 81            [12] 1308 	mov	a,sp
      000096 24 C9            [12] 1309 	add	a,#0xc9
      000098 F9               [12] 1310 	mov	r1,a
      000099 E6               [12] 1311 	mov	a,@r0
      00009A 2A               [12] 1312 	add	a,r2
      00009B F7               [12] 1313 	mov	@r1,a
      00009C 08               [12] 1314 	inc	r0
      00009D E6               [12] 1315 	mov	a,@r0
      00009E 3F               [12] 1316 	addc	a,r7
      00009F 09               [12] 1317 	inc	r1
      0000A0 F7               [12] 1318 	mov	@r1,a
      0000A1 8C 06            [24] 1319 	mov	ar6,r4
      0000A3 8D 07            [24] 1320 	mov	ar7,r5
      0000A5 E5 81            [12] 1321 	mov	a,sp
      0000A7 24 C9            [12] 1322 	add	a,#0xc9
      0000A9 F8               [12] 1323 	mov	r0,a
      0000AA C3               [12] 1324 	clr	c
      0000AB EE               [12] 1325 	mov	a,r6
      0000AC 96               [12] 1326 	subb	a,@r0
      0000AD EF               [12] 1327 	mov	a,r7
      0000AE 08               [12] 1328 	inc	r0
      0000AF 96               [12] 1329 	subb	a,@r0
      0000B0 40 03            [24] 1330 	jc	00148$
      0000B2 02r02r88         [24] 1331 	ljmp	00114$
      0000B5                       1332 00148$:
                                   1333 ;	../../core/loader/elfloader.c:186: seek_read(fd, a, (char *)&s, sizeof(s));
      0000B5 E5 81            [12] 1334 	mov	a,sp
      0000B7 24 D3            [12] 1335 	add	a,#0xd3
      0000B9 F9               [12] 1336 	mov	r1,a
      0000BA FA               [12] 1337 	mov	r2,a
      0000BB 7E 00            [12] 1338 	mov	r6,#0x00
      0000BD 7F 40            [12] 1339 	mov	r7,#0x40
      0000BF C0 05            [24] 1340 	push	ar5
      0000C1 C0 04            [24] 1341 	push	ar4
      0000C3 C0 03            [24] 1342 	push	ar3
      0000C5 C0 01            [24] 1343 	push	ar1
      0000C7 74 10            [12] 1344 	mov	a,#0x10
      0000C9 C0 E0            [24] 1345 	push	acc
      0000CB E4               [12] 1346 	clr	a
      0000CC C0 E0            [24] 1347 	push	acc
      0000CE C0 02            [24] 1348 	push	ar2
      0000D0 C0 06            [24] 1349 	push	ar6
      0000D2 C0 07            [24] 1350 	push	ar7
      0000D4 C0 04            [24] 1351 	push	ar4
      0000D6 C0 05            [24] 1352 	push	ar5
      0000D8 E5 81            [12] 1353 	mov	a,sp
      0000DA 24 BA            [12] 1354 	add	a,#0xba
      0000DC F8               [12] 1355 	mov	r0,a
      0000DD 86 82            [24] 1356 	mov	dpl,@r0
      0000DF 08               [12] 1357 	inc	r0
      0000E0 86 83            [24] 1358 	mov	dph,@r0
      0000E2 12r00r00         [24] 1359 	lcall	_seek_read
      0000E5 E5 81            [12] 1360 	mov	a,sp
      0000E7 24 F9            [12] 1361 	add	a,#0xf9
      0000E9 F5 81            [12] 1362 	mov	sp,a
      0000EB D0 01            [24] 1363 	pop	ar1
      0000ED D0 03            [24] 1364 	pop	ar3
      0000EF D0 04            [24] 1365 	pop	ar4
      0000F1 D0 05            [24] 1366 	pop	ar5
                                   1367 ;	../../core/loader/elfloader.c:188: if(s.st_name != 0) {
      0000F3 E5 81            [12] 1368 	mov	a,sp
      0000F5 24 CB            [12] 1369 	add	a,#0xcb
      0000F7 F8               [12] 1370 	mov	r0,a
      0000F8 E7               [12] 1371 	mov	a,@r1
      0000F9 F6               [12] 1372 	mov	@r0,a
      0000FA 09               [12] 1373 	inc	r1
      0000FB E7               [12] 1374 	mov	a,@r1
      0000FC 08               [12] 1375 	inc	r0
      0000FD F6               [12] 1376 	mov	@r0,a
      0000FE 09               [12] 1377 	inc	r1
      0000FF E7               [12] 1378 	mov	a,@r1
      000100 08               [12] 1379 	inc	r0
      000101 F6               [12] 1380 	mov	@r0,a
      000102 09               [12] 1381 	inc	r1
      000103 E7               [12] 1382 	mov	a,@r1
      000104 08               [12] 1383 	inc	r0
      000105 F6               [12] 1384 	mov	@r0,a
      000106 19               [12] 1385 	dec	r1
      000107 19               [12] 1386 	dec	r1
      000108 19               [12] 1387 	dec	r1
      000109 E5 81            [12] 1388 	mov	a,sp
      00010B 24 CB            [12] 1389 	add	a,#0xcb
      00010D F8               [12] 1390 	mov	r0,a
      00010E E6               [12] 1391 	mov	a,@r0
      00010F 08               [12] 1392 	inc	r0
      000110 46               [12] 1393 	orl	a,@r0
      000111 08               [12] 1394 	inc	r0
      000112 46               [12] 1395 	orl	a,@r0
      000113 08               [12] 1396 	inc	r0
      000114 46               [12] 1397 	orl	a,@r0
      000115 70 03            [24] 1398 	jnz	00149$
      000117 02r02r7E         [24] 1399 	ljmp	00117$
      00011A                       1400 00149$:
                                   1401 ;	../../core/loader/elfloader.c:189: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      00011A C0 01            [24] 1402 	push	ar1
      00011C E5 81            [12] 1403 	mov	a,sp
      00011E 24 CF            [12] 1404 	add	a,#0xcf
      000120 F8               [12] 1405 	mov	r0,a
      000121 A6 03            [24] 1406 	mov	@r0,ar3
      000123 08               [12] 1407 	inc	r0
      000124 76 00            [12] 1408 	mov	@r0,#0x00
      000126 08               [12] 1409 	inc	r0
      000127 76 40            [12] 1410 	mov	@r0,#0x40
      000129 E5 81            [12] 1411 	mov	a,sp
      00012B 24 CA            [12] 1412 	add	a,#0xca
      00012D F8               [12] 1413 	mov	r0,a
      00012E 86 06            [24] 1414 	mov	ar6,@r0
      000130 08               [12] 1415 	inc	r0
      000131 86 07            [24] 1416 	mov	ar7,@r0
      000133 E5 81            [12] 1417 	mov	a,sp
      000135 24 C6            [12] 1418 	add	a,#0xc6
      000137 F8               [12] 1419 	mov	r0,a
      000138 EE               [12] 1420 	mov	a,r6
      000139 26               [12] 1421 	add	a,@r0
      00013A FE               [12] 1422 	mov	r6,a
      00013B EF               [12] 1423 	mov	a,r7
      00013C 08               [12] 1424 	inc	r0
      00013D 36               [12] 1425 	addc	a,@r0
      00013E FF               [12] 1426 	mov	r7,a
      00013F C0 05            [24] 1427 	push	ar5
      000141 C0 04            [24] 1428 	push	ar4
      000143 C0 03            [24] 1429 	push	ar3
      000145 C0 01            [24] 1430 	push	ar1
      000147 74 1E            [12] 1431 	mov	a,#0x1e
      000149 C0 E0            [24] 1432 	push	acc
      00014B E4               [12] 1433 	clr	a
      00014C C0 E0            [24] 1434 	push	acc
      00014E E5 81            [12] 1435 	mov	a,sp
      000150 24 C9            [12] 1436 	add	a,#0xc9
      000152 F8               [12] 1437 	mov	r0,a
      000153 E6               [12] 1438 	mov	a,@r0
      000154 C0 E0            [24] 1439 	push	acc
      000156 08               [12] 1440 	inc	r0
      000157 E6               [12] 1441 	mov	a,@r0
      000158 C0 E0            [24] 1442 	push	acc
      00015A 08               [12] 1443 	inc	r0
      00015B E6               [12] 1444 	mov	a,@r0
      00015C C0 E0            [24] 1445 	push	acc
      00015E C0 06            [24] 1446 	push	ar6
      000160 C0 07            [24] 1447 	push	ar7
      000162 E5 81            [12] 1448 	mov	a,sp
      000164 24 B9            [12] 1449 	add	a,#0xb9
      000166 F8               [12] 1450 	mov	r0,a
      000167 86 82            [24] 1451 	mov	dpl,@r0
      000169 08               [12] 1452 	inc	r0
      00016A 86 83            [24] 1453 	mov	dph,@r0
      00016C 12r00r00         [24] 1454 	lcall	_seek_read
      00016F E5 81            [12] 1455 	mov	a,sp
      000171 24 F9            [12] 1456 	add	a,#0xf9
      000173 F5 81            [12] 1457 	mov	sp,a
      000175 D0 01            [24] 1458 	pop	ar1
      000177 D0 03            [24] 1459 	pop	ar3
      000179 D0 04            [24] 1460 	pop	ar4
      00017B D0 05            [24] 1461 	pop	ar5
                                   1462 ;	../../core/loader/elfloader.c:190: if(strcmp(name, symbol) == 0) {
      00017D E5 81            [12] 1463 	mov	a,sp
      00017F 24 CE            [12] 1464 	add	a,#0xce
      000181 F8               [12] 1465 	mov	r0,a
      000182 86 02            [24] 1466 	mov	ar2,@r0
      000184 7E 00            [12] 1467 	mov	r6,#0x00
      000186 7F 40            [12] 1468 	mov	r7,#0x40
      000188 C0 05            [24] 1469 	push	ar5
      00018A C0 04            [24] 1470 	push	ar4
      00018C C0 03            [24] 1471 	push	ar3
      00018E C0 01            [24] 1472 	push	ar1
      000190 E5 81            [12] 1473 	mov	a,sp
      000192 24 BB            [12] 1474 	add	a,#0xbb
      000194 F8               [12] 1475 	mov	r0,a
      000195 E6               [12] 1476 	mov	a,@r0
      000196 C0 E0            [24] 1477 	push	acc
      000198 08               [12] 1478 	inc	r0
      000199 E6               [12] 1479 	mov	a,@r0
      00019A C0 E0            [24] 1480 	push	acc
      00019C 08               [12] 1481 	inc	r0
      00019D E6               [12] 1482 	mov	a,@r0
      00019E C0 E0            [24] 1483 	push	acc
      0001A0 8A 82            [24] 1484 	mov	dpl,r2
      0001A2 8E 83            [24] 1485 	mov	dph,r6
      0001A4 8F F0            [24] 1486 	mov	b,r7
      0001A6 12r00r00         [24] 1487 	lcall	_strcmp
      0001A9 AE 82            [24] 1488 	mov	r6,dpl
      0001AB AF 83            [24] 1489 	mov	r7,dph
      0001AD 15 81            [12] 1490 	dec	sp
      0001AF 15 81            [12] 1491 	dec	sp
      0001B1 15 81            [12] 1492 	dec	sp
      0001B3 D0 01            [24] 1493 	pop	ar1
      0001B5 D0 03            [24] 1494 	pop	ar3
      0001B7 D0 04            [24] 1495 	pop	ar4
      0001B9 D0 05            [24] 1496 	pop	ar5
      0001BB D0 01            [24] 1497 	pop	ar1
      0001BD EE               [12] 1498 	mov	a,r6
      0001BE 4F               [12] 1499 	orl	a,r7
      0001BF 60 03            [24] 1500 	jz	00150$
      0001C1 02r02r7E         [24] 1501 	ljmp	00117$
      0001C4                       1502 00150$:
                                   1503 ;	../../core/loader/elfloader.c:191: if(s.st_shndx == bss.number) {
      0001C4 74 0E            [12] 1504 	mov	a,#0x0e
      0001C6 29               [12] 1505 	add	a,r1
      0001C7 F8               [12] 1506 	mov	r0,a
      0001C8 86 06            [24] 1507 	mov	ar6,@r0
      0001CA 08               [12] 1508 	inc	r0
      0001CB 86 05            [24] 1509 	mov	ar5,@r0
      0001CD 90r00r21         [24] 1510 	mov	dptr,#_bss
      0001D0 E0               [24] 1511 	movx	a,@dptr
      0001D1 FA               [12] 1512 	mov	r2,a
      0001D2 C0 01            [24] 1513 	push	ar1
      0001D4 7F 00            [12] 1514 	mov	r7,#0x00
      0001D6 EE               [12] 1515 	mov	a,r6
      0001D7 B5 02 06         [24] 1516 	cjne	a,ar2,00151$
      0001DA ED               [12] 1517 	mov	a,r5
      0001DB B5 07 02         [24] 1518 	cjne	a,ar7,00151$
      0001DE 80 04            [24] 1519 	sjmp	00152$
      0001E0                       1520 00151$:
      0001E0 D0 01            [24] 1521 	pop	ar1
      0001E2 80 0A            [24] 1522 	sjmp	00108$
      0001E4                       1523 00152$:
      0001E4 D0 01            [24] 1524 	pop	ar1
                                   1525 ;	../../core/loader/elfloader.c:192: sect = &bss;
      0001E6 7Ar21            [12] 1526 	mov	r2,#_bss
      0001E8 7Es00            [12] 1527 	mov	r6,#(_bss >> 8)
      0001EA 7F 00            [12] 1528 	mov	r7,#0x00
      0001EC 80 4A            [24] 1529 	sjmp	00109$
      0001EE                       1530 00108$:
                                   1531 ;	../../core/loader/elfloader.c:193: } else if(s.st_shndx == data.number) {
      0001EE C0 01            [24] 1532 	push	ar1
      0001F0 90r00r27         [24] 1533 	mov	dptr,#_data
      0001F3 E0               [24] 1534 	movx	a,@dptr
      0001F4 FF               [12] 1535 	mov	r7,a
      0001F5 7C 00            [12] 1536 	mov	r4,#0x00
      0001F7 EE               [12] 1537 	mov	a,r6
      0001F8 B5 07 06         [24] 1538 	cjne	a,ar7,00153$
      0001FB ED               [12] 1539 	mov	a,r5
      0001FC B5 04 02         [24] 1540 	cjne	a,ar4,00153$
      0001FF 80 04            [24] 1541 	sjmp	00154$
      000201                       1542 00153$:
      000201 D0 01            [24] 1543 	pop	ar1
      000203 80 0A            [24] 1544 	sjmp	00105$
      000205                       1545 00154$:
      000205 D0 01            [24] 1546 	pop	ar1
                                   1547 ;	../../core/loader/elfloader.c:194: sect = &data;
      000207 7Ar27            [12] 1548 	mov	r2,#_data
      000209 7Es00            [12] 1549 	mov	r6,#(_data >> 8)
      00020B 7F 00            [12] 1550 	mov	r7,#0x00
      00020D 80 29            [24] 1551 	sjmp	00109$
      00020F                       1552 00105$:
                                   1553 ;	../../core/loader/elfloader.c:195: } else if(s.st_shndx == text.number) {
      00020F C0 01            [24] 1554 	push	ar1
      000211 90r00r33         [24] 1555 	mov	dptr,#_text
      000214 E0               [24] 1556 	movx	a,@dptr
      000215 FF               [12] 1557 	mov	r7,a
      000216 7C 00            [12] 1558 	mov	r4,#0x00
      000218 EE               [12] 1559 	mov	a,r6
      000219 B5 07 06         [24] 1560 	cjne	a,ar7,00155$
      00021C ED               [12] 1561 	mov	a,r5
      00021D B5 04 02         [24] 1562 	cjne	a,ar4,00155$
      000220 80 04            [24] 1563 	sjmp	00156$
      000222                       1564 00155$:
      000222 D0 01            [24] 1565 	pop	ar1
      000224 80 0A            [24] 1566 	sjmp	00102$
      000226                       1567 00156$:
      000226 D0 01            [24] 1568 	pop	ar1
                                   1569 ;	../../core/loader/elfloader.c:196: sect = &text;
      000228 7Ar33            [12] 1570 	mov	r2,#_text
      00022A 7Es00            [12] 1571 	mov	r6,#(_text >> 8)
      00022C 7F 00            [12] 1572 	mov	r7,#0x00
      00022E 80 08            [24] 1573 	sjmp	00109$
      000230                       1574 00102$:
                                   1575 ;	../../core/loader/elfloader.c:198: return NULL;
      000230 90 00 00         [24] 1576 	mov	dptr,#0x0000
      000233 75 F0 00         [24] 1577 	mov	b,#0x00
      000236 80 56            [24] 1578 	sjmp	00118$
      000238                       1579 00109$:
                                   1580 ;	../../core/loader/elfloader.c:200: return &(sect->address[s.st_value]);
      000238 74 03            [12] 1581 	mov	a,#0x03
      00023A 2A               [12] 1582 	add	a,r2
      00023B FA               [12] 1583 	mov	r2,a
      00023C E4               [12] 1584 	clr	a
      00023D 3E               [12] 1585 	addc	a,r6
      00023E FE               [12] 1586 	mov	r6,a
      00023F 8A 82            [24] 1587 	mov	dpl,r2
      000241 8E 83            [24] 1588 	mov	dph,r6
      000243 8F F0            [24] 1589 	mov	b,r7
      000245 12r00r00         [24] 1590 	lcall	__gptrget
      000248 FD               [12] 1591 	mov	r5,a
      000249 A3               [24] 1592 	inc	dptr
      00024A 12r00r00         [24] 1593 	lcall	__gptrget
      00024D FE               [12] 1594 	mov	r6,a
      00024E A3               [24] 1595 	inc	dptr
      00024F 12r00r00         [24] 1596 	lcall	__gptrget
      000252 FF               [12] 1597 	mov	r7,a
      000253 E9               [12] 1598 	mov	a,r1
      000254 24 04            [12] 1599 	add	a,#0x04
      000256 F9               [12] 1600 	mov	r1,a
      000257 E5 81            [12] 1601 	mov	a,sp
      000259 24 CB            [12] 1602 	add	a,#0xcb
      00025B F8               [12] 1603 	mov	r0,a
      00025C E7               [12] 1604 	mov	a,@r1
      00025D F6               [12] 1605 	mov	@r0,a
      00025E 09               [12] 1606 	inc	r1
      00025F E7               [12] 1607 	mov	a,@r1
      000260 08               [12] 1608 	inc	r0
      000261 F6               [12] 1609 	mov	@r0,a
      000262 09               [12] 1610 	inc	r1
      000263 E7               [12] 1611 	mov	a,@r1
      000264 08               [12] 1612 	inc	r0
      000265 F6               [12] 1613 	mov	@r0,a
      000266 09               [12] 1614 	inc	r1
      000267 E7               [12] 1615 	mov	a,@r1
      000268 08               [12] 1616 	inc	r0
      000269 F6               [12] 1617 	mov	@r0,a
      00026A E5 81            [12] 1618 	mov	a,sp
      00026C 24 CB            [12] 1619 	add	a,#0xcb
      00026E F8               [12] 1620 	mov	r0,a
      00026F E6               [12] 1621 	mov	a,@r0
      000270 2D               [12] 1622 	add	a,r5
      000271 FA               [12] 1623 	mov	r2,a
      000272 08               [12] 1624 	inc	r0
      000273 E6               [12] 1625 	mov	a,@r0
      000274 3E               [12] 1626 	addc	a,r6
      000275 FE               [12] 1627 	mov	r6,a
      000276 8A 82            [24] 1628 	mov	dpl,r2
      000278 8E 83            [24] 1629 	mov	dph,r6
      00027A 8F F0            [24] 1630 	mov	b,r7
      00027C 80 10            [24] 1631 	sjmp	00118$
      00027E                       1632 00117$:
                                   1633 ;	../../core/loader/elfloader.c:185: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
      00027E 74 10            [12] 1634 	mov	a,#0x10
      000280 2C               [12] 1635 	add	a,r4
      000281 FC               [12] 1636 	mov	r4,a
      000282 E4               [12] 1637 	clr	a
      000283 3D               [12] 1638 	addc	a,r5
      000284 FD               [12] 1639 	mov	r5,a
      000285 02r00r85         [24] 1640 	ljmp	00116$
      000288                       1641 00114$:
                                   1642 ;	../../core/loader/elfloader.c:204: return NULL;
      000288 90 00 00         [24] 1643 	mov	dptr,#0x0000
      00028B 75 F0 00         [24] 1644 	mov	b,#0x00
      00028E                       1645 00118$:
                                   1646 ;	../../core/loader/elfloader.c:205: }
      00028E E5 81            [12] 1647 	mov	a,sp
      000290 24 C4            [12] 1648 	add	a,#0xc4
      000292 F5 81            [12] 1649 	mov	sp,a
      000294 22               [24] 1650 	ret
                                   1651 ;------------------------------------------------------------
                                   1652 ;Allocation info for local variables in function 'relocate_section'
                                   1653 ;------------------------------------------------------------
                                   1654 ;section                   Allocated to stack - sp -81
                                   1655 ;size                      Allocated to stack - sp -83
                                   1656 ;sectionaddr               Allocated to stack - sp -85
                                   1657 ;sectionbase               Allocated to stack - sp -88
                                   1658 ;strs                      Allocated to stack - sp -90
                                   1659 ;strtab                    Allocated to stack - sp -92
                                   1660 ;symtab                    Allocated to stack - sp -94
                                   1661 ;symtabsize                Allocated to stack - sp -96
                                   1662 ;using_relas               Allocated to stack - sp -97
                                   1663 ;fd                        Allocated to stack - sp -77
                                   1664 ;rela                      Allocated to stack - sp -64
                                   1665 ;rel_size                  Allocated to stack - sp -52
                                   1666 ;s                         Allocated to stack - sp -50
                                   1667 ;a                         Allocated to stack - sp -34
                                   1668 ;name                      Allocated to stack - sp -32
                                   1669 ;addr                      Allocated to stack - sp -2
                                   1670 ;sect                      Allocated to registers r2 r3 r4 
                                   1671 ;sloc0                     Allocated to stack - sp -75
                                   1672 ;sloc1                     Allocated to stack - sp -73
                                   1673 ;sloc2                     Allocated to stack - sp -70
                                   1674 ;sloc3                     Allocated to stack - sp -68
                                   1675 ;sloc4                     Allocated to stack - sp +4
                                   1676 ;------------------------------------------------------------
                                   1677 ;	../../core/loader/elfloader.c:208: relocate_section(int fd,
                                   1678 ;	-----------------------------------------
                                   1679 ;	 function relocate_section
                                   1680 ;	-----------------------------------------
      000295                       1681 _relocate_section:
      000295 C0 82            [24] 1682 	push	dpl
      000297 C0 83            [24] 1683 	push	dph
      000299 E5 81            [12] 1684 	mov	a,sp
      00029B 24 4C            [12] 1685 	add	a,#0x4c
                                   1686 ;	../../core/loader/elfloader.c:227: if(using_relas) {
      00029D F5 81            [12] 1687 	mov	sp,a
      00029F 24 9F            [12] 1688 	add	a,#0x9f
      0002A1 F8               [12] 1689 	mov	r0,a
      0002A2 E6               [12] 1690 	mov	a,@r0
      0002A3 60 0C            [24] 1691 	jz	00102$
                                   1692 ;	../../core/loader/elfloader.c:228: rel_size = sizeof(struct elf32_rela);
      0002A5 E5 81            [12] 1693 	mov	a,sp
      0002A7 24 CC            [12] 1694 	add	a,#0xcc
      0002A9 F8               [12] 1695 	mov	r0,a
      0002AA 76 0C            [12] 1696 	mov	@r0,#0x0c
      0002AC 08               [12] 1697 	inc	r0
      0002AD 76 00            [12] 1698 	mov	@r0,#0x00
      0002AF 80 0A            [24] 1699 	sjmp	00103$
      0002B1                       1700 00102$:
                                   1701 ;	../../core/loader/elfloader.c:230: rel_size = sizeof(struct elf32_rel);
      0002B1 E5 81            [12] 1702 	mov	a,sp
      0002B3 24 CC            [12] 1703 	add	a,#0xcc
      0002B5 F8               [12] 1704 	mov	r0,a
      0002B6 76 08            [12] 1705 	mov	@r0,#0x08
      0002B8 08               [12] 1706 	inc	r0
      0002B9 76 00            [12] 1707 	mov	@r0,#0x00
      0002BB                       1708 00103$:
                                   1709 ;	../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      0002BB E5 81            [12] 1710 	mov	a,sp
      0002BD 24 AF            [12] 1711 	add	a,#0xaf
      0002BF F8               [12] 1712 	mov	r0,a
      0002C0 E5 81            [12] 1713 	mov	a,sp
      0002C2 24 DE            [12] 1714 	add	a,#0xde
      0002C4 F9               [12] 1715 	mov	r1,a
      0002C5 E6               [12] 1716 	mov	a,@r0
      0002C6 F7               [12] 1717 	mov	@r1,a
      0002C7 08               [12] 1718 	inc	r0
      0002C8 09               [12] 1719 	inc	r1
      0002C9 E6               [12] 1720 	mov	a,@r0
      0002CA F7               [12] 1721 	mov	@r1,a
      0002CB E5 81            [12] 1722 	mov	a,sp
      0002CD 24 A4            [12] 1723 	add	a,#0xa4
      0002CF F8               [12] 1724 	mov	r0,a
      0002D0 E5 81            [12] 1725 	mov	a,sp
      0002D2 24 BA            [12] 1726 	add	a,#0xba
      0002D4 F9               [12] 1727 	mov	r1,a
      0002D5 E6               [12] 1728 	mov	a,@r0
      0002D6 F7               [12] 1729 	mov	@r1,a
      0002D7 08               [12] 1730 	inc	r0
      0002D8 09               [12] 1731 	inc	r1
      0002D9 E6               [12] 1732 	mov	a,@r0
      0002DA F7               [12] 1733 	mov	@r1,a
      0002DB E5 81            [12] 1734 	mov	a,sp
      0002DD 24 CE            [12] 1735 	add	a,#0xce
      0002DF F9               [12] 1736 	mov	r1,a
      0002E0 24 0E            [12] 1737 	add	a,#0x0e
      0002E2 F8               [12] 1738 	mov	r0,a
      0002E3 C0 00            [24] 1739 	push	ar0
      0002E5 E5 81            [12] 1740 	mov	a,sp
      0002E7 24 AA            [12] 1741 	add	a,#0xaa
      0002E9 F8               [12] 1742 	mov	r0,a
      0002EA C0 01            [24] 1743 	push	ar1
      0002EC E5 81            [12] 1744 	mov	a,sp
      0002EE 24 B3            [12] 1745 	add	a,#0xb3
      0002F0 F9               [12] 1746 	mov	r1,a
      0002F1 E6               [12] 1747 	mov	a,@r0
      0002F2 F7               [12] 1748 	mov	@r1,a
      0002F3 08               [12] 1749 	inc	r0
      0002F4 09               [12] 1750 	inc	r1
      0002F5 E6               [12] 1751 	mov	a,@r0
      0002F6 F7               [12] 1752 	mov	@r1,a
      0002F7 D0 01            [24] 1753 	pop	ar1
      0002F9 D0 00            [24] 1754 	pop	ar0
      0002FB                       1755 00147$:
      0002FB C0 00            [24] 1756 	push	ar0
      0002FD C0 00            [24] 1757 	push	ar0
      0002FF E5 81            [12] 1758 	mov	a,sp
      000301 24 AD            [12] 1759 	add	a,#0xad
      000303 F8               [12] 1760 	mov	r0,a
      000304 86 02            [24] 1761 	mov	ar2,@r0
      000306 08               [12] 1762 	inc	r0
      000307 86 03            [24] 1763 	mov	ar3,@r0
      000309 E5 81            [12] 1764 	mov	a,sp
      00030B 24 AB            [12] 1765 	add	a,#0xab
      00030D F8               [12] 1766 	mov	r0,a
      00030E E6               [12] 1767 	mov	a,@r0
      00030F 2A               [12] 1768 	add	a,r2
      000310 FA               [12] 1769 	mov	r2,a
      000311 08               [12] 1770 	inc	r0
      000312 E6               [12] 1771 	mov	a,@r0
      000313 3B               [12] 1772 	addc	a,r3
      000314 FB               [12] 1773 	mov	r3,a
      000315 E5 81            [12] 1774 	mov	a,sp
      000317 24 DC            [12] 1775 	add	a,#0xdc
      000319 F8               [12] 1776 	mov	r0,a
      00031A 86 06            [24] 1777 	mov	ar6,@r0
      00031C 08               [12] 1778 	inc	r0
      00031D 86 07            [24] 1779 	mov	ar7,@r0
      00031F D0 00            [24] 1780 	pop	ar0
      000321 C3               [12] 1781 	clr	c
      000322 EE               [12] 1782 	mov	a,r6
      000323 9A               [12] 1783 	subb	a,r2
      000324 EF               [12] 1784 	mov	a,r7
      000325 9B               [12] 1785 	subb	a,r3
      000326 D0 00            [24] 1786 	pop	ar0
      000328 40 03            [24] 1787 	jc	00227$
      00032A 02r07rD8         [24] 1788 	ljmp	00145$
      00032D                       1789 00227$:
                                   1790 ;	../../core/loader/elfloader.c:234: seek_read(fd, a, (char *)&rela, rel_size);
      00032D C0 00            [24] 1791 	push	ar0
      00032F E5 81            [12] 1792 	mov	a,sp
      000331 24 BF            [12] 1793 	add	a,#0xbf
      000333 FF               [12] 1794 	mov	r7,a
      000334 FE               [12] 1795 	mov	r6,a
      000335 7B 00            [12] 1796 	mov	r3,#0x00
      000337 7A 40            [12] 1797 	mov	r2,#0x40
      000339 C0 07            [24] 1798 	push	ar7
      00033B C0 01            [24] 1799 	push	ar1
      00033D C0 00            [24] 1800 	push	ar0
      00033F 85 00 F0         [24] 1801 	mov	b,ar0
      000342 E5 81            [12] 1802 	mov	a,sp
      000344 24 C8            [12] 1803 	add	a,#0xc8
      000346 F8               [12] 1804 	mov	r0,a
      000347 E6               [12] 1805 	mov	a,@r0
      000348 C0 E0            [24] 1806 	push	acc
      00034A 08               [12] 1807 	inc	r0
      00034B E6               [12] 1808 	mov	a,@r0
      00034C C0 E0            [24] 1809 	push	acc
      00034E A8 F0            [24] 1810 	mov	r0,b
      000350 C0 06            [24] 1811 	push	ar6
      000352 C0 03            [24] 1812 	push	ar3
      000354 C0 02            [24] 1813 	push	ar2
      000356 85 00 F0         [24] 1814 	mov	b,ar0
      000359 E5 81            [12] 1815 	mov	a,sp
      00035B 24 D5            [12] 1816 	add	a,#0xd5
      00035D F8               [12] 1817 	mov	r0,a
      00035E E6               [12] 1818 	mov	a,@r0
      00035F C0 E0            [24] 1819 	push	acc
      000361 08               [12] 1820 	inc	r0
      000362 E6               [12] 1821 	mov	a,@r0
      000363 C0 E0            [24] 1822 	push	acc
      000365 A8 F0            [24] 1823 	mov	r0,b
      000367 C0 00            [24] 1824 	push	ar0
      000369 E5 81            [12] 1825 	mov	a,sp
      00036B 24 A7            [12] 1826 	add	a,#0xa7
      00036D F8               [12] 1827 	mov	r0,a
      00036E 86 82            [24] 1828 	mov	dpl,@r0
      000370 08               [12] 1829 	inc	r0
      000371 86 83            [24] 1830 	mov	dph,@r0
      000373 D0 00            [24] 1831 	pop	ar0
      000375 12r00r00         [24] 1832 	lcall	_seek_read
      000378 E5 81            [12] 1833 	mov	a,sp
      00037A 24 F9            [12] 1834 	add	a,#0xf9
      00037C F5 81            [12] 1835 	mov	sp,a
      00037E D0 00            [24] 1836 	pop	ar0
      000380 D0 01            [24] 1837 	pop	ar1
      000382 D0 07            [24] 1838 	pop	ar7
                                   1839 ;	../../core/loader/elfloader.c:237: (char *)&s, sizeof(s));
      000384 89 06            [24] 1840 	mov	ar6,r1
      000386 C0 00            [24] 1841 	push	ar0
      000388 E5 81            [12] 1842 	mov	a,sp
      00038A 24 B5            [12] 1843 	add	a,#0xb5
      00038C F8               [12] 1844 	mov	r0,a
      00038D A6 06            [24] 1845 	mov	@r0,ar6
      00038F 08               [12] 1846 	inc	r0
      000390 76 00            [12] 1847 	mov	@r0,#0x00
      000392 08               [12] 1848 	inc	r0
      000393 76 40            [12] 1849 	mov	@r0,#0x40
      000395 D0 00            [24] 1850 	pop	ar0
                                   1851 ;	../../core/loader/elfloader.c:236: symtab + sizeof(struct elf32_sym) * ELF32_R_SYM(rela.r_info),
      000397 74 04            [12] 1852 	mov	a,#0x04
      000399 2F               [12] 1853 	add	a,r7
      00039A F8               [12] 1854 	mov	r0,a
      00039B 86 02            [24] 1855 	mov	ar2,@r0
      00039D 08               [12] 1856 	inc	r0
      00039E 86 03            [24] 1857 	mov	ar3,@r0
      0003A0 08               [12] 1858 	inc	r0
      0003A1 86 05            [24] 1859 	mov	ar5,@r0
      0003A3 08               [12] 1860 	inc	r0
      0003A4 86 06            [24] 1861 	mov	ar6,@r0
      0003A6 18               [12] 1862 	dec	r0
      0003A7 18               [12] 1863 	dec	r0
      0003A8 18               [12] 1864 	dec	r0
      0003A9 8B 02            [24] 1865 	mov	ar2,r3
      0003AB 8D 03            [24] 1866 	mov	ar3,r5
      0003AD EB               [12] 1867 	mov	a,r3
      0003AE C4               [12] 1868 	swap	a
      0003AF 54 F0            [12] 1869 	anl	a,#0xf0
      0003B1 CA               [12] 1870 	xch	a,r2
      0003B2 C4               [12] 1871 	swap	a
      0003B3 CA               [12] 1872 	xch	a,r2
      0003B4 6A               [12] 1873 	xrl	a,r2
      0003B5 CA               [12] 1874 	xch	a,r2
      0003B6 54 F0            [12] 1875 	anl	a,#0xf0
      0003B8 CA               [12] 1876 	xch	a,r2
      0003B9 6A               [12] 1877 	xrl	a,r2
      0003BA FB               [12] 1878 	mov	r3,a
      0003BB C0 00            [24] 1879 	push	ar0
      0003BD E5 81            [12] 1880 	mov	a,sp
      0003BF 24 A0            [12] 1881 	add	a,#0xa0
      0003C1 F8               [12] 1882 	mov	r0,a
      0003C2 EA               [12] 1883 	mov	a,r2
      0003C3 26               [12] 1884 	add	a,@r0
      0003C4 FA               [12] 1885 	mov	r2,a
      0003C5 EB               [12] 1886 	mov	a,r3
      0003C6 08               [12] 1887 	inc	r0
      0003C7 36               [12] 1888 	addc	a,@r0
      0003C8 FB               [12] 1889 	mov	r3,a
      0003C9 D0 00            [24] 1890 	pop	ar0
                                   1891 ;	../../core/loader/elfloader.c:235: seek_read(fd,
      0003CB C0 07            [24] 1892 	push	ar7
      0003CD C0 01            [24] 1893 	push	ar1
      0003CF C0 00            [24] 1894 	push	ar0
      0003D1 74 10            [12] 1895 	mov	a,#0x10
      0003D3 C0 E0            [24] 1896 	push	acc
      0003D5 E4               [12] 1897 	clr	a
      0003D6 C0 E0            [24] 1898 	push	acc
      0003D8 85 00 F0         [24] 1899 	mov	b,ar0
      0003DB E5 81            [12] 1900 	mov	a,sp
      0003DD 24 B1            [12] 1901 	add	a,#0xb1
      0003DF F8               [12] 1902 	mov	r0,a
      0003E0 E6               [12] 1903 	mov	a,@r0
      0003E1 C0 E0            [24] 1904 	push	acc
      0003E3 08               [12] 1905 	inc	r0
      0003E4 E6               [12] 1906 	mov	a,@r0
      0003E5 C0 E0            [24] 1907 	push	acc
      0003E7 08               [12] 1908 	inc	r0
      0003E8 E6               [12] 1909 	mov	a,@r0
      0003E9 C0 E0            [24] 1910 	push	acc
      0003EB A8 F0            [24] 1911 	mov	r0,b
      0003ED C0 02            [24] 1912 	push	ar2
      0003EF C0 03            [24] 1913 	push	ar3
      0003F1 C0 00            [24] 1914 	push	ar0
      0003F3 E5 81            [12] 1915 	mov	a,sp
      0003F5 24 A7            [12] 1916 	add	a,#0xa7
      0003F7 F8               [12] 1917 	mov	r0,a
      0003F8 86 82            [24] 1918 	mov	dpl,@r0
      0003FA 08               [12] 1919 	inc	r0
      0003FB 86 83            [24] 1920 	mov	dph,@r0
      0003FD D0 00            [24] 1921 	pop	ar0
      0003FF 12r00r00         [24] 1922 	lcall	_seek_read
      000402 E5 81            [12] 1923 	mov	a,sp
      000404 24 F9            [12] 1924 	add	a,#0xf9
      000406 F5 81            [12] 1925 	mov	sp,a
      000408 D0 00            [24] 1926 	pop	ar0
      00040A D0 01            [24] 1927 	pop	ar1
      00040C D0 07            [24] 1928 	pop	ar7
                                   1929 ;	../../core/loader/elfloader.c:238: if(s.st_name != 0) {
      00040E 87 04            [24] 1930 	mov	ar4,@r1
      000410 09               [12] 1931 	inc	r1
      000411 87 05            [24] 1932 	mov	ar5,@r1
      000413 09               [12] 1933 	inc	r1
      000414 87 03            [24] 1934 	mov	ar3,@r1
      000416 09               [12] 1935 	inc	r1
      000417 87 02            [24] 1936 	mov	ar2,@r1
      000419 19               [12] 1937 	dec	r1
      00041A 19               [12] 1938 	dec	r1
      00041B 19               [12] 1939 	dec	r1
      00041C D0 00            [24] 1940 	pop	ar0
      00041E EC               [12] 1941 	mov	a,r4
      00041F 4D               [12] 1942 	orl	a,r5
      000420 4B               [12] 1943 	orl	a,r3
      000421 4A               [12] 1944 	orl	a,r2
      000422 70 03            [24] 1945 	jnz	00228$
      000424 02r06r19         [24] 1946 	ljmp	00141$
      000427                       1947 00228$:
                                   1948 ;	../../core/loader/elfloader.c:239: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      000427 C0 00            [24] 1949 	push	ar0
      000429 E5 81            [12] 1950 	mov	a,sp
      00042B 24 DF            [12] 1951 	add	a,#0xdf
      00042D FE               [12] 1952 	mov	r6,a
      00042E C0 00            [24] 1953 	push	ar0
      000430 E5 81            [12] 1954 	mov	a,sp
      000432 24 B5            [12] 1955 	add	a,#0xb5
      000434 F8               [12] 1956 	mov	r0,a
      000435 A6 06            [24] 1957 	mov	@r0,ar6
      000437 08               [12] 1958 	inc	r0
      000438 76 00            [12] 1959 	mov	@r0,#0x00
      00043A 08               [12] 1960 	inc	r0
      00043B 76 40            [12] 1961 	mov	@r0,#0x40
      00043D 8C 02            [24] 1962 	mov	ar2,r4
      00043F E5 81            [12] 1963 	mov	a,sp
      000441 24 B8            [12] 1964 	add	a,#0xb8
      000443 F8               [12] 1965 	mov	r0,a
      000444 EA               [12] 1966 	mov	a,r2
      000445 26               [12] 1967 	add	a,@r0
      000446 FA               [12] 1968 	mov	r2,a
      000447 ED               [12] 1969 	mov	a,r5
      000448 08               [12] 1970 	inc	r0
      000449 36               [12] 1971 	addc	a,@r0
      00044A FD               [12] 1972 	mov	r5,a
      00044B D0 00            [24] 1973 	pop	ar0
      00044D C0 07            [24] 1974 	push	ar7
      00044F C0 06            [24] 1975 	push	ar6
      000451 C0 01            [24] 1976 	push	ar1
      000453 C0 00            [24] 1977 	push	ar0
      000455 74 1E            [12] 1978 	mov	a,#0x1e
      000457 C0 E0            [24] 1979 	push	acc
      000459 E4               [12] 1980 	clr	a
      00045A C0 E0            [24] 1981 	push	acc
      00045C 85 00 F0         [24] 1982 	mov	b,ar0
      00045F E5 81            [12] 1983 	mov	a,sp
      000461 24 B0            [12] 1984 	add	a,#0xb0
      000463 F8               [12] 1985 	mov	r0,a
      000464 E6               [12] 1986 	mov	a,@r0
      000465 C0 E0            [24] 1987 	push	acc
      000467 08               [12] 1988 	inc	r0
      000468 E6               [12] 1989 	mov	a,@r0
      000469 C0 E0            [24] 1990 	push	acc
      00046B 08               [12] 1991 	inc	r0
      00046C E6               [12] 1992 	mov	a,@r0
      00046D C0 E0            [24] 1993 	push	acc
      00046F A8 F0            [24] 1994 	mov	r0,b
      000471 C0 02            [24] 1995 	push	ar2
      000473 C0 05            [24] 1996 	push	ar5
      000475 C0 00            [24] 1997 	push	ar0
      000477 E5 81            [12] 1998 	mov	a,sp
      000479 24 A6            [12] 1999 	add	a,#0xa6
      00047B F8               [12] 2000 	mov	r0,a
      00047C 86 82            [24] 2001 	mov	dpl,@r0
      00047E 08               [12] 2002 	inc	r0
      00047F 86 83            [24] 2003 	mov	dph,@r0
      000481 D0 00            [24] 2004 	pop	ar0
      000483 12r00r00         [24] 2005 	lcall	_seek_read
      000486 E5 81            [12] 2006 	mov	a,sp
      000488 24 F9            [12] 2007 	add	a,#0xf9
      00048A F5 81            [12] 2008 	mov	sp,a
      00048C D0 00            [24] 2009 	pop	ar0
      00048E D0 01            [24] 2010 	pop	ar1
      000490 D0 06            [24] 2011 	pop	ar6
                                   2012 ;	../../core/loader/elfloader.c:241: addr = (char *)symtab_lookup(name);
      000492 8E 05            [24] 2013 	mov	ar5,r6
      000494 7C 00            [12] 2014 	mov	r4,#0x00
      000496 7B 40            [12] 2015 	mov	r3,#0x40
      000498 8D 82            [24] 2016 	mov	dpl,r5
      00049A 8C 83            [24] 2017 	mov	dph,r4
      00049C 8B F0            [24] 2018 	mov	b,r3
      00049E C0 06            [24] 2019 	push	ar6
      0004A0 C0 01            [24] 2020 	push	ar1
      0004A2 C0 00            [24] 2021 	push	ar0
      0004A4 12r00r00         [24] 2022 	lcall	_symtab_lookup
      0004A7 AB 82            [24] 2023 	mov	r3,dpl
      0004A9 AC 83            [24] 2024 	mov	r4,dph
      0004AB AD F0            [24] 2025 	mov	r5,b
      0004AD D0 00            [24] 2026 	pop	ar0
      0004AF D0 01            [24] 2027 	pop	ar1
      0004B1 D0 06            [24] 2028 	pop	ar6
      0004B3 D0 07            [24] 2029 	pop	ar7
      0004B5 C0 00            [24] 2030 	push	ar0
      0004B7 E5 81            [12] 2031 	mov	a,sp
      0004B9 24 FC            [12] 2032 	add	a,#0xfc
      0004BB F8               [12] 2033 	mov	r0,a
      0004BC A6 03            [24] 2034 	mov	@r0,ar3
      0004BE 08               [12] 2035 	inc	r0
      0004BF A6 04            [24] 2036 	mov	@r0,ar4
      0004C1 08               [12] 2037 	inc	r0
      0004C2 A6 05            [24] 2038 	mov	@r0,ar5
      0004C4 D0 00            [24] 2039 	pop	ar0
                                   2040 ;	../../core/loader/elfloader.c:243: if(addr == NULL) {
      0004C6 E5 81            [12] 2041 	mov	a,sp
      0004C8 24 FD            [12] 2042 	add	a,#0xfd
      0004CA F8               [12] 2043 	mov	r0,a
      0004CB E6               [12] 2044 	mov	a,@r0
      0004CC 08               [12] 2045 	inc	r0
      0004CD 46               [12] 2046 	orl	a,@r0
      0004CE D0 00            [24] 2047 	pop	ar0
      0004D0 60 03            [24] 2048 	jz	00229$
      0004D2 02r05r52         [24] 2049 	ljmp	00111$
      0004D5                       2050 00229$:
                                   2051 ;	../../core/loader/elfloader.c:245: addr = find_local_symbol(fd, name, symtab, symtabsize, strtab);
      0004D5 8E 05            [24] 2052 	mov	ar5,r6
      0004D7 7C 00            [12] 2053 	mov	r4,#0x00
      0004D9 7B 40            [12] 2054 	mov	r3,#0x40
      0004DB C0 07            [24] 2055 	push	ar7
      0004DD C0 06            [24] 2056 	push	ar6
      0004DF C0 01            [24] 2057 	push	ar1
      0004E1 C0 00            [24] 2058 	push	ar0
      0004E3 85 00 F0         [24] 2059 	mov	b,ar0
      0004E6 E5 81            [12] 2060 	mov	a,sp
      0004E8 24 B6            [12] 2061 	add	a,#0xb6
      0004EA F8               [12] 2062 	mov	r0,a
      0004EB E6               [12] 2063 	mov	a,@r0
      0004EC C0 E0            [24] 2064 	push	acc
      0004EE 08               [12] 2065 	inc	r0
      0004EF E6               [12] 2066 	mov	a,@r0
      0004F0 C0 E0            [24] 2067 	push	acc
      0004F2 A8 F0            [24] 2068 	mov	r0,b
      0004F4 85 00 F0         [24] 2069 	mov	b,ar0
      0004F7 E5 81            [12] 2070 	mov	a,sp
      0004F9 24 9A            [12] 2071 	add	a,#0x9a
      0004FB F8               [12] 2072 	mov	r0,a
      0004FC E6               [12] 2073 	mov	a,@r0
      0004FD C0 E0            [24] 2074 	push	acc
      0004FF 08               [12] 2075 	inc	r0
      000500 E6               [12] 2076 	mov	a,@r0
      000501 C0 E0            [24] 2077 	push	acc
      000503 A8 F0            [24] 2078 	mov	r0,b
      000505 85 00 F0         [24] 2079 	mov	b,ar0
      000508 E5 81            [12] 2080 	mov	a,sp
      00050A 24 9A            [12] 2081 	add	a,#0x9a
      00050C F8               [12] 2082 	mov	r0,a
      00050D E6               [12] 2083 	mov	a,@r0
      00050E C0 E0            [24] 2084 	push	acc
      000510 08               [12] 2085 	inc	r0
      000511 E6               [12] 2086 	mov	a,@r0
      000512 C0 E0            [24] 2087 	push	acc
      000514 A8 F0            [24] 2088 	mov	r0,b
      000516 C0 05            [24] 2089 	push	ar5
      000518 C0 04            [24] 2090 	push	ar4
      00051A C0 03            [24] 2091 	push	ar3
      00051C C0 00            [24] 2092 	push	ar0
      00051E E5 81            [12] 2093 	mov	a,sp
      000520 24 A5            [12] 2094 	add	a,#0xa5
      000522 F8               [12] 2095 	mov	r0,a
      000523 86 82            [24] 2096 	mov	dpl,@r0
      000525 08               [12] 2097 	inc	r0
      000526 86 83            [24] 2098 	mov	dph,@r0
      000528 D0 00            [24] 2099 	pop	ar0
      00052A 12r00r57         [24] 2100 	lcall	_find_local_symbol
      00052D AB 82            [24] 2101 	mov	r3,dpl
      00052F AC 83            [24] 2102 	mov	r4,dph
      000531 AD F0            [24] 2103 	mov	r5,b
      000533 E5 81            [12] 2104 	mov	a,sp
      000535 24 F7            [12] 2105 	add	a,#0xf7
      000537 F5 81            [12] 2106 	mov	sp,a
      000539 D0 00            [24] 2107 	pop	ar0
      00053B D0 01            [24] 2108 	pop	ar1
      00053D D0 06            [24] 2109 	pop	ar6
      00053F D0 07            [24] 2110 	pop	ar7
      000541 C0 00            [24] 2111 	push	ar0
      000543 E5 81            [12] 2112 	mov	a,sp
      000545 24 FD            [12] 2113 	add	a,#0xfd
      000547 F8               [12] 2114 	mov	r0,a
      000548 A6 03            [24] 2115 	mov	@r0,ar3
      00054A 08               [12] 2116 	inc	r0
      00054B A6 04            [24] 2117 	mov	@r0,ar4
      00054D 08               [12] 2118 	inc	r0
      00054E A6 05            [24] 2119 	mov	@r0,ar5
      000550 D0 00            [24] 2120 	pop	ar0
                                   2121 ;	../../core/loader/elfloader.c:246: PRINTF("found address %p\n", addr);
      000552                       2122 00111$:
                                   2123 ;	../../core/loader/elfloader.c:248: if(addr == NULL) {
      000552 C0 00            [24] 2124 	push	ar0
      000554 E5 81            [12] 2125 	mov	a,sp
      000556 24 FD            [12] 2126 	add	a,#0xfd
      000558 F8               [12] 2127 	mov	r0,a
      000559 E6               [12] 2128 	mov	a,@r0
      00055A 08               [12] 2129 	inc	r0
      00055B 46               [12] 2130 	orl	a,@r0
      00055C D0 00            [24] 2131 	pop	ar0
      00055E 60 03            [24] 2132 	jz	00230$
      000560 02r06rF8         [24] 2133 	ljmp	00142$
      000563                       2134 00230$:
                                   2135 ;	../../core/loader/elfloader.c:249: if(s.st_shndx == bss.number) {
      000563 86 04            [24] 2136 	mov	ar4,@r0
      000565 08               [12] 2137 	inc	r0
      000566 86 05            [24] 2138 	mov	ar5,@r0
      000568 18               [12] 2139 	dec	r0
      000569 90r00r21         [24] 2140 	mov	dptr,#_bss
      00056C E0               [24] 2141 	movx	a,@dptr
      00056D FB               [12] 2142 	mov	r3,a
      00056E 7A 00            [12] 2143 	mov	r2,#0x00
      000570 EC               [12] 2144 	mov	a,r4
      000571 B5 03 0C         [24] 2145 	cjne	a,ar3,00124$
      000574 ED               [12] 2146 	mov	a,r5
      000575 B5 02 08         [24] 2147 	cjne	a,ar2,00124$
                                   2148 ;	../../core/loader/elfloader.c:250: sect = &bss;
      000578 7Cr21            [12] 2149 	mov	r4,#_bss
      00057A 7Ds00            [12] 2150 	mov	r5,#(_bss >> 8)
      00057C 7E 00            [12] 2151 	mov	r6,#0x00
      00057E 80 70            [24] 2152 	sjmp	00125$
      000580                       2153 00124$:
                                   2154 ;	../../core/loader/elfloader.c:251: } else if(s.st_shndx == data.number) {
      000580 90r00r27         [24] 2155 	mov	dptr,#_data
      000583 E0               [24] 2156 	movx	a,@dptr
      000584 FB               [12] 2157 	mov	r3,a
      000585 7A 00            [12] 2158 	mov	r2,#0x00
      000587 EC               [12] 2159 	mov	a,r4
      000588 B5 03 0C         [24] 2160 	cjne	a,ar3,00121$
      00058B ED               [12] 2161 	mov	a,r5
      00058C B5 02 08         [24] 2162 	cjne	a,ar2,00121$
                                   2163 ;	../../core/loader/elfloader.c:252: sect = &data;
      00058F 7Cr27            [12] 2164 	mov	r4,#_data
      000591 7Ds00            [12] 2165 	mov	r5,#(_data >> 8)
      000593 7E 00            [12] 2166 	mov	r6,#0x00
      000595 80 59            [24] 2167 	sjmp	00125$
      000597                       2168 00121$:
                                   2169 ;	../../core/loader/elfloader.c:253: } else if(s.st_shndx == rodata.number) {
      000597 90r00r2D         [24] 2170 	mov	dptr,#_rodata
      00059A E0               [24] 2171 	movx	a,@dptr
      00059B FB               [12] 2172 	mov	r3,a
      00059C 7A 00            [12] 2173 	mov	r2,#0x00
      00059E EC               [12] 2174 	mov	a,r4
      00059F B5 03 0C         [24] 2175 	cjne	a,ar3,00118$
      0005A2 ED               [12] 2176 	mov	a,r5
      0005A3 B5 02 08         [24] 2177 	cjne	a,ar2,00118$
                                   2178 ;	../../core/loader/elfloader.c:254: sect = &rodata;
      0005A6 7Cr2D            [12] 2179 	mov	r4,#_rodata
      0005A8 7Ds00            [12] 2180 	mov	r5,#(_rodata >> 8)
      0005AA 7E 00            [12] 2181 	mov	r6,#0x00
      0005AC 80 42            [24] 2182 	sjmp	00125$
      0005AE                       2183 00118$:
                                   2184 ;	../../core/loader/elfloader.c:255: } else if(s.st_shndx == text.number) {
      0005AE 90r00r33         [24] 2185 	mov	dptr,#_text
      0005B1 E0               [24] 2186 	movx	a,@dptr
      0005B2 FB               [12] 2187 	mov	r3,a
      0005B3 7A 00            [12] 2188 	mov	r2,#0x00
      0005B5 EC               [12] 2189 	mov	a,r4
      0005B6 B5 03 0C         [24] 2190 	cjne	a,ar3,00112$
      0005B9 ED               [12] 2191 	mov	a,r5
      0005BA B5 02 08         [24] 2192 	cjne	a,ar2,00112$
                                   2193 ;	../../core/loader/elfloader.c:256: sect = &text;
      0005BD 7Cr33            [12] 2194 	mov	r4,#_text
      0005BF 7Ds00            [12] 2195 	mov	r5,#(_text >> 8)
      0005C1 7E 00            [12] 2196 	mov	r6,#0x00
                                   2197 ;	../../core/loader/elfloader.c:258: PRINTF("elfloader unknown name: '%30s'\n", name);
      0005C3 80 2B            [24] 2198 	sjmp	00125$
      0005C5                       2199 00112$:
                                   2200 ;	../../core/loader/elfloader.c:259: memcpy(elfloader_unknown, name, sizeof(elfloader_unknown));
      0005C5 7D 00            [12] 2201 	mov	r5,#0x00
      0005C7 7C 40            [12] 2202 	mov	r4,#0x40
      0005C9 74 1E            [12] 2203 	mov	a,#0x1e
      0005CB C0 E0            [24] 2204 	push	acc
      0005CD E4               [12] 2205 	clr	a
      0005CE C0 E0            [24] 2206 	push	acc
      0005D0 C0 06            [24] 2207 	push	ar6
      0005D2 C0 05            [24] 2208 	push	ar5
      0005D4 C0 04            [24] 2209 	push	ar4
      0005D6 90r00r00         [24] 2210 	mov	dptr,#_elfloader_unknown
      0005D9 75 F0 00         [24] 2211 	mov	b,#0x00
      0005DC 12r00r00         [24] 2212 	lcall	___memcpy
      0005DF E5 81            [12] 2213 	mov	a,sp
      0005E1 24 FB            [12] 2214 	add	a,#0xfb
      0005E3 F5 81            [12] 2215 	mov	sp,a
                                   2216 ;	../../core/loader/elfloader.c:260: elfloader_unknown[sizeof(elfloader_unknown) - 1] = 0;
      0005E5 90r00r1D         [24] 2217 	mov	dptr,#(_elfloader_unknown + 0x001d)
      0005E8 E4               [12] 2218 	clr	a
      0005E9 F0               [24] 2219 	movx	@dptr,a
                                   2220 ;	../../core/loader/elfloader.c:261: return ELFLOADER_SYMBOL_NOT_FOUND;
      0005EA 90 00 05         [24] 2221 	mov	dptr,#0x0005
      0005ED 02r07rDB         [24] 2222 	ljmp	00149$
      0005F0                       2223 00125$:
                                   2224 ;	../../core/loader/elfloader.c:263: addr = sect->address;
      0005F0 74 03            [12] 2225 	mov	a,#0x03
      0005F2 2C               [12] 2226 	add	a,r4
      0005F3 FC               [12] 2227 	mov	r4,a
      0005F4 E4               [12] 2228 	clr	a
      0005F5 3D               [12] 2229 	addc	a,r5
      0005F6 FD               [12] 2230 	mov	r5,a
      0005F7 8C 82            [24] 2231 	mov	dpl,r4
      0005F9 8D 83            [24] 2232 	mov	dph,r5
      0005FB 8E F0            [24] 2233 	mov	b,r6
      0005FD C0 00            [24] 2234 	push	ar0
      0005FF E5 81            [12] 2235 	mov	a,sp
      000601 24 FD            [12] 2236 	add	a,#0xfd
      000603 F8               [12] 2237 	mov	r0,a
      000604 12r00r00         [24] 2238 	lcall	__gptrget
      000607 F6               [12] 2239 	mov	@r0,a
      000608 A3               [24] 2240 	inc	dptr
      000609 12r00r00         [24] 2241 	lcall	__gptrget
      00060C 08               [12] 2242 	inc	r0
      00060D F6               [12] 2243 	mov	@r0,a
      00060E A3               [24] 2244 	inc	dptr
      00060F 12r00r00         [24] 2245 	lcall	__gptrget
      000612 08               [12] 2246 	inc	r0
      000613 F6               [12] 2247 	mov	@r0,a
      000614 D0 00            [24] 2248 	pop	ar0
      000616 02r06rF8         [24] 2249 	ljmp	00142$
      000619                       2250 00141$:
                                   2251 ;	../../core/loader/elfloader.c:266: if(s.st_shndx == bss.number) {
      000619 C0 01            [24] 2252 	push	ar1
      00061B E5 81            [12] 2253 	mov	a,sp
      00061D 24 BB            [12] 2254 	add	a,#0xbb
      00061F F9               [12] 2255 	mov	r1,a
      000620 E6               [12] 2256 	mov	a,@r0
      000621 F7               [12] 2257 	mov	@r1,a
      000622 08               [12] 2258 	inc	r0
      000623 E6               [12] 2259 	mov	a,@r0
      000624 09               [12] 2260 	inc	r1
      000625 F7               [12] 2261 	mov	@r1,a
      000626 18               [12] 2262 	dec	r0
      000627 D0 01            [24] 2263 	pop	ar1
      000629 90r00r21         [24] 2264 	mov	dptr,#_bss
      00062C E0               [24] 2265 	movx	a,@dptr
      00062D FC               [12] 2266 	mov	r4,a
      00062E 7B 00            [12] 2267 	mov	r3,#0x00
      000630 C0 00            [24] 2268 	push	ar0
      000632 E5 81            [12] 2269 	mov	a,sp
      000634 24 BB            [12] 2270 	add	a,#0xbb
      000636 F8               [12] 2271 	mov	r0,a
      000637 E6               [12] 2272 	mov	a,@r0
      000638 B5 04 07         [24] 2273 	cjne	a,ar4,00239$
      00063B 08               [12] 2274 	inc	r0
      00063C E6               [12] 2275 	mov	a,@r0
      00063D B5 03 02         [24] 2276 	cjne	a,ar3,00239$
      000640 80 04            [24] 2277 	sjmp	00240$
      000642                       2278 00239$:
      000642 D0 00            [24] 2279 	pop	ar0
      000644 80 0B            [24] 2280 	sjmp	00138$
      000646                       2281 00240$:
      000646 D0 00            [24] 2282 	pop	ar0
                                   2283 ;	../../core/loader/elfloader.c:267: sect = &bss;
      000648 7Ar21            [12] 2284 	mov	r2,#_bss
      00064A 7Bs00            [12] 2285 	mov	r3,#(_bss >> 8)
      00064C 7C 00            [12] 2286 	mov	r4,#0x00
      00064E 02r06rD2         [24] 2287 	ljmp	00139$
      000651                       2288 00138$:
                                   2289 ;	../../core/loader/elfloader.c:268: } else if(s.st_shndx == data.number) {
      000651 C0 00            [24] 2290 	push	ar0
      000653 90r00r27         [24] 2291 	mov	dptr,#_data
      000656 E0               [24] 2292 	movx	a,@dptr
      000657 FE               [12] 2293 	mov	r6,a
      000658 7D 00            [12] 2294 	mov	r5,#0x00
      00065A C0 00            [24] 2295 	push	ar0
      00065C E5 81            [12] 2296 	mov	a,sp
      00065E 24 BA            [12] 2297 	add	a,#0xba
      000660 F8               [12] 2298 	mov	r0,a
      000661 E6               [12] 2299 	mov	a,@r0
      000662 B5 06 07         [24] 2300 	cjne	a,ar6,00241$
      000665 08               [12] 2301 	inc	r0
      000666 E6               [12] 2302 	mov	a,@r0
      000667 B5 05 02         [24] 2303 	cjne	a,ar5,00241$
      00066A 80 06            [24] 2304 	sjmp	00242$
      00066C                       2305 00241$:
      00066C D0 00            [24] 2306 	pop	ar0
      00066E D0 00            [24] 2307 	pop	ar0
      000670 80 0C            [24] 2308 	sjmp	00135$
      000672                       2309 00242$:
      000672 D0 00            [24] 2310 	pop	ar0
      000674 D0 00            [24] 2311 	pop	ar0
                                   2312 ;	../../core/loader/elfloader.c:269: sect = &data;
      000676 7Ar27            [12] 2313 	mov	r2,#_data
      000678 7Bs00            [12] 2314 	mov	r3,#(_data >> 8)
      00067A 7C 00            [12] 2315 	mov	r4,#0x00
      00067C 80 54            [24] 2316 	sjmp	00139$
      00067E                       2317 00135$:
                                   2318 ;	../../core/loader/elfloader.c:270: } else if(s.st_shndx == rodata.number) {
      00067E 90r00r2D         [24] 2319 	mov	dptr,#_rodata
      000681 E0               [24] 2320 	movx	a,@dptr
      000682 FE               [12] 2321 	mov	r6,a
      000683 7D 00            [12] 2322 	mov	r5,#0x00
      000685 C0 00            [24] 2323 	push	ar0
      000687 E5 81            [12] 2324 	mov	a,sp
      000689 24 BB            [12] 2325 	add	a,#0xbb
      00068B F8               [12] 2326 	mov	r0,a
      00068C E6               [12] 2327 	mov	a,@r0
      00068D B5 06 07         [24] 2328 	cjne	a,ar6,00243$
      000690 08               [12] 2329 	inc	r0
      000691 E6               [12] 2330 	mov	a,@r0
      000692 B5 05 02         [24] 2331 	cjne	a,ar5,00243$
      000695 80 04            [24] 2332 	sjmp	00244$
      000697                       2333 00243$:
      000697 D0 00            [24] 2334 	pop	ar0
      000699 80 0A            [24] 2335 	sjmp	00132$
      00069B                       2336 00244$:
      00069B D0 00            [24] 2337 	pop	ar0
                                   2338 ;	../../core/loader/elfloader.c:271: sect = &rodata;
      00069D 7Ar2D            [12] 2339 	mov	r2,#_rodata
      00069F 7Bs00            [12] 2340 	mov	r3,#(_rodata >> 8)
      0006A1 7C 00            [12] 2341 	mov	r4,#0x00
      0006A3 80 2D            [24] 2342 	sjmp	00139$
      0006A5                       2343 00132$:
                                   2344 ;	../../core/loader/elfloader.c:272: } else if(s.st_shndx == text.number) {
      0006A5 90r00r33         [24] 2345 	mov	dptr,#_text
      0006A8 E0               [24] 2346 	movx	a,@dptr
      0006A9 FE               [12] 2347 	mov	r6,a
      0006AA 7D 00            [12] 2348 	mov	r5,#0x00
      0006AC C0 00            [24] 2349 	push	ar0
      0006AE E5 81            [12] 2350 	mov	a,sp
      0006B0 24 BB            [12] 2351 	add	a,#0xbb
      0006B2 F8               [12] 2352 	mov	r0,a
      0006B3 E6               [12] 2353 	mov	a,@r0
      0006B4 B5 06 07         [24] 2354 	cjne	a,ar6,00245$
      0006B7 08               [12] 2355 	inc	r0
      0006B8 E6               [12] 2356 	mov	a,@r0
      0006B9 B5 05 02         [24] 2357 	cjne	a,ar5,00245$
      0006BC 80 04            [24] 2358 	sjmp	00246$
      0006BE                       2359 00245$:
      0006BE D0 00            [24] 2360 	pop	ar0
      0006C0 80 0A            [24] 2361 	sjmp	00129$
      0006C2                       2362 00246$:
      0006C2 D0 00            [24] 2363 	pop	ar0
                                   2364 ;	../../core/loader/elfloader.c:273: sect = &text;
      0006C4 7Ar33            [12] 2365 	mov	r2,#_text
      0006C6 7Bs00            [12] 2366 	mov	r3,#(_text >> 8)
      0006C8 7C 00            [12] 2367 	mov	r4,#0x00
      0006CA 80 06            [24] 2368 	sjmp	00139$
      0006CC                       2369 00129$:
                                   2370 ;	../../core/loader/elfloader.c:275: return ELFLOADER_SEGMENT_NOT_FOUND;
      0006CC 90 00 06         [24] 2371 	mov	dptr,#0x0006
      0006CF 02r07rDB         [24] 2372 	ljmp	00149$
      0006D2                       2373 00139$:
                                   2374 ;	../../core/loader/elfloader.c:278: addr = sect->address;
      0006D2 74 03            [12] 2375 	mov	a,#0x03
      0006D4 2A               [12] 2376 	add	a,r2
      0006D5 FA               [12] 2377 	mov	r2,a
      0006D6 E4               [12] 2378 	clr	a
      0006D7 3B               [12] 2379 	addc	a,r3
      0006D8 FB               [12] 2380 	mov	r3,a
      0006D9 8A 82            [24] 2381 	mov	dpl,r2
      0006DB 8B 83            [24] 2382 	mov	dph,r3
      0006DD 8C F0            [24] 2383 	mov	b,r4
      0006DF C0 00            [24] 2384 	push	ar0
      0006E1 E5 81            [12] 2385 	mov	a,sp
      0006E3 24 FD            [12] 2386 	add	a,#0xfd
      0006E5 F8               [12] 2387 	mov	r0,a
      0006E6 12r00r00         [24] 2388 	lcall	__gptrget
      0006E9 F6               [12] 2389 	mov	@r0,a
      0006EA A3               [24] 2390 	inc	dptr
      0006EB 12r00r00         [24] 2391 	lcall	__gptrget
      0006EE 08               [12] 2392 	inc	r0
      0006EF F6               [12] 2393 	mov	@r0,a
      0006F0 A3               [24] 2394 	inc	dptr
      0006F1 12r00r00         [24] 2395 	lcall	__gptrget
      0006F4 08               [12] 2396 	inc	r0
      0006F5 F6               [12] 2397 	mov	@r0,a
      0006F6 D0 00            [24] 2398 	pop	ar0
      0006F8                       2399 00142$:
                                   2400 ;	../../core/loader/elfloader.c:281: if(!using_relas) {
      0006F8 C0 00            [24] 2401 	push	ar0
      0006FA E5 81            [12] 2402 	mov	a,sp
      0006FC 24 9E            [12] 2403 	add	a,#0x9e
      0006FE F8               [12] 2404 	mov	r0,a
      0006FF E6               [12] 2405 	mov	a,@r0
      000700 D0 00            [24] 2406 	pop	ar0
      000702 70 53            [24] 2407 	jnz	00144$
                                   2408 ;	../../core/loader/elfloader.c:283: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
      000704 74 08            [12] 2409 	mov	a,#0x08
      000706 2F               [12] 2410 	add	a,r7
      000707 FE               [12] 2411 	mov	r6,a
      000708 7D 00            [12] 2412 	mov	r5,#0x00
      00070A 7C 40            [12] 2413 	mov	r4,#0x40
      00070C C0 00            [24] 2414 	push	ar0
      00070E A8 07            [24] 2415 	mov	r0,ar7
      000710 86 02            [24] 2416 	mov	ar2,@r0
      000712 08               [12] 2417 	inc	r0
      000713 86 03            [24] 2418 	mov	ar3,@r0
      000715 E5 81            [12] 2419 	mov	a,sp
      000717 24 B4            [12] 2420 	add	a,#0xb4
      000719 F8               [12] 2421 	mov	r0,a
      00071A EA               [12] 2422 	mov	a,r2
      00071B 26               [12] 2423 	add	a,@r0
      00071C FA               [12] 2424 	mov	r2,a
      00071D EB               [12] 2425 	mov	a,r3
      00071E 08               [12] 2426 	inc	r0
      00071F 36               [12] 2427 	addc	a,@r0
      000720 FB               [12] 2428 	mov	r3,a
      000721 D0 00            [24] 2429 	pop	ar0
      000723 C0 07            [24] 2430 	push	ar7
      000725 C0 01            [24] 2431 	push	ar1
      000727 C0 00            [24] 2432 	push	ar0
      000729 74 04            [12] 2433 	mov	a,#0x04
      00072B C0 E0            [24] 2434 	push	acc
      00072D E4               [12] 2435 	clr	a
      00072E C0 E0            [24] 2436 	push	acc
      000730 C0 06            [24] 2437 	push	ar6
      000732 C0 05            [24] 2438 	push	ar5
      000734 C0 04            [24] 2439 	push	ar4
      000736 C0 02            [24] 2440 	push	ar2
      000738 C0 03            [24] 2441 	push	ar3
      00073A C0 00            [24] 2442 	push	ar0
      00073C E5 81            [12] 2443 	mov	a,sp
      00073E 24 A8            [12] 2444 	add	a,#0xa8
      000740 F8               [12] 2445 	mov	r0,a
      000741 86 82            [24] 2446 	mov	dpl,@r0
      000743 08               [12] 2447 	inc	r0
      000744 86 83            [24] 2448 	mov	dph,@r0
      000746 D0 00            [24] 2449 	pop	ar0
      000748 12r00r00         [24] 2450 	lcall	_seek_read
      00074B E5 81            [12] 2451 	mov	a,sp
      00074D 24 F9            [12] 2452 	add	a,#0xf9
      00074F F5 81            [12] 2453 	mov	sp,a
      000751 D0 00            [24] 2454 	pop	ar0
      000753 D0 01            [24] 2455 	pop	ar1
      000755 D0 07            [24] 2456 	pop	ar7
      000757                       2457 00144$:
                                   2458 ;	../../core/loader/elfloader.c:286: elfloader_arch_relocate(fd, sectionaddr, sectionbase, &rela, addr);
      000757 7E 00            [12] 2459 	mov	r6,#0x00
      000759 7D 40            [12] 2460 	mov	r5,#0x40
      00075B C0 01            [24] 2461 	push	ar1
      00075D C0 00            [24] 2462 	push	ar0
      00075F 85 00 F0         [24] 2463 	mov	b,ar0
      000762 E5 81            [12] 2464 	mov	a,sp
      000764 24 FC            [12] 2465 	add	a,#0xfc
      000766 F8               [12] 2466 	mov	r0,a
      000767 E6               [12] 2467 	mov	a,@r0
      000768 C0 E0            [24] 2468 	push	acc
      00076A 08               [12] 2469 	inc	r0
      00076B E6               [12] 2470 	mov	a,@r0
      00076C C0 E0            [24] 2471 	push	acc
      00076E 08               [12] 2472 	inc	r0
      00076F E6               [12] 2473 	mov	a,@r0
      000770 C0 E0            [24] 2474 	push	acc
      000772 A8 F0            [24] 2475 	mov	r0,b
      000774 C0 07            [24] 2476 	push	ar7
      000776 C0 06            [24] 2477 	push	ar6
      000778 C0 05            [24] 2478 	push	ar5
      00077A 85 00 F0         [24] 2479 	mov	b,ar0
      00077D E5 81            [12] 2480 	mov	a,sp
      00077F 24 A0            [12] 2481 	add	a,#0xa0
      000781 F8               [12] 2482 	mov	r0,a
      000782 E6               [12] 2483 	mov	a,@r0
      000783 C0 E0            [24] 2484 	push	acc
      000785 08               [12] 2485 	inc	r0
      000786 E6               [12] 2486 	mov	a,@r0
      000787 C0 E0            [24] 2487 	push	acc
      000789 08               [12] 2488 	inc	r0
      00078A E6               [12] 2489 	mov	a,@r0
      00078B C0 E0            [24] 2490 	push	acc
      00078D A8 F0            [24] 2491 	mov	r0,b
      00078F 85 00 F0         [24] 2492 	mov	b,ar0
      000792 E5 81            [12] 2493 	mov	a,sp
      000794 24 AA            [12] 2494 	add	a,#0xaa
      000796 F8               [12] 2495 	mov	r0,a
      000797 E6               [12] 2496 	mov	a,@r0
      000798 C0 E0            [24] 2497 	push	acc
      00079A 08               [12] 2498 	inc	r0
      00079B E6               [12] 2499 	mov	a,@r0
      00079C C0 E0            [24] 2500 	push	acc
      00079E A8 F0            [24] 2501 	mov	r0,b
      0007A0 C0 00            [24] 2502 	push	ar0
      0007A2 E5 81            [12] 2503 	mov	a,sp
      0007A4 24 A5            [12] 2504 	add	a,#0xa5
      0007A6 F8               [12] 2505 	mov	r0,a
      0007A7 86 82            [24] 2506 	mov	dpl,@r0
      0007A9 08               [12] 2507 	inc	r0
      0007AA 86 83            [24] 2508 	mov	dph,@r0
      0007AC D0 00            [24] 2509 	pop	ar0
      0007AE 12r00r00         [24] 2510 	lcall	_elfloader_arch_relocate
      0007B1 E5 81            [12] 2511 	mov	a,sp
      0007B3 24 F5            [12] 2512 	add	a,#0xf5
      0007B5 F5 81            [12] 2513 	mov	sp,a
      0007B7 D0 00            [24] 2514 	pop	ar0
      0007B9 D0 01            [24] 2515 	pop	ar1
                                   2516 ;	../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      0007BB C0 00            [24] 2517 	push	ar0
      0007BD E5 81            [12] 2518 	mov	a,sp
      0007BF 24 CB            [12] 2519 	add	a,#0xcb
      0007C1 F8               [12] 2520 	mov	r0,a
      0007C2 86 04            [24] 2521 	mov	ar4,@r0
      0007C4 08               [12] 2522 	inc	r0
      0007C5 86 05            [24] 2523 	mov	ar5,@r0
      0007C7 E5 81            [12] 2524 	mov	a,sp
      0007C9 24 DD            [12] 2525 	add	a,#0xdd
      0007CB F8               [12] 2526 	mov	r0,a
      0007CC EC               [12] 2527 	mov	a,r4
      0007CD 26               [12] 2528 	add	a,@r0
      0007CE F6               [12] 2529 	mov	@r0,a
      0007CF ED               [12] 2530 	mov	a,r5
      0007D0 08               [12] 2531 	inc	r0
      0007D1 36               [12] 2532 	addc	a,@r0
      0007D2 F6               [12] 2533 	mov	@r0,a
      0007D3 D0 00            [24] 2534 	pop	ar0
      0007D5 02r02rFB         [24] 2535 	ljmp	00147$
      0007D8                       2536 00145$:
                                   2537 ;	../../core/loader/elfloader.c:288: return ELFLOADER_OK;
      0007D8 90 00 00         [24] 2538 	mov	dptr,#0x0000
      0007DB                       2539 00149$:
                                   2540 ;	../../core/loader/elfloader.c:289: }
      0007DB E5 81            [12] 2541 	mov	a,sp
      0007DD 24 B2            [12] 2542 	add	a,#0xb2
      0007DF F5 81            [12] 2543 	mov	sp,a
      0007E1 22               [24] 2544 	ret
                                   2545 ;------------------------------------------------------------
                                   2546 ;Allocation info for local variables in function 'find_program_processes'
                                   2547 ;------------------------------------------------------------
                                   2548 ;symtab                    Allocated to stack - sp -63
                                   2549 ;size                      Allocated to stack - sp -65
                                   2550 ;strtab                    Allocated to stack - sp -67
                                   2551 ;fd                        Allocated to stack - sp -59
                                   2552 ;s                         Allocated to stack - sp -15
                                   2553 ;a                         Allocated to registers 
                                   2554 ;name                      Allocated to stack - sp -45
                                   2555 ;sloc0                     Allocated to stack - sp -57
                                   2556 ;sloc1                     Allocated to stack - sp -55
                                   2557 ;sloc2                     Allocated to stack - sp -53
                                   2558 ;sloc3                     Allocated to stack - sp -49
                                   2559 ;sloc4                     Allocated to stack - sp -48
                                   2560 ;------------------------------------------------------------
                                   2561 ;	../../core/loader/elfloader.c:292: find_program_processes(int fd,
                                   2562 ;	-----------------------------------------
                                   2563 ;	 function find_program_processes
                                   2564 ;	-----------------------------------------
      0007E2                       2565 _find_program_processes:
      0007E2 C0 82            [24] 2566 	push	dpl
      0007E4 C0 83            [24] 2567 	push	dph
      0007E6 E5 81            [12] 2568 	mov	a,sp
      0007E8 24 3A            [12] 2569 	add	a,#0x3a
                                   2570 ;	../../core/loader/elfloader.c:300: for(a = symtab; a < symtab + size; a += sizeof(s)) {
      0007EA F5 81            [12] 2571 	mov	sp,a
      0007EC 24 C1            [12] 2572 	add	a,#0xc1
      0007EE F8               [12] 2573 	mov	r0,a
      0007EF 86 04            [24] 2574 	mov	ar4,@r0
      0007F1 08               [12] 2575 	inc	r0
      0007F2 86 05            [24] 2576 	mov	ar5,@r0
      0007F4 E5 81            [12] 2577 	mov	a,sp
      0007F6 24 D3            [12] 2578 	add	a,#0xd3
      0007F8 FB               [12] 2579 	mov	r3,a
      0007F9 E5 81            [12] 2580 	mov	a,sp
      0007FB 24 BD            [12] 2581 	add	a,#0xbd
      0007FD F8               [12] 2582 	mov	r0,a
      0007FE E5 81            [12] 2583 	mov	a,sp
      000800 24 C7            [12] 2584 	add	a,#0xc7
      000802 F9               [12] 2585 	mov	r1,a
      000803 E6               [12] 2586 	mov	a,@r0
      000804 F7               [12] 2587 	mov	@r1,a
      000805 08               [12] 2588 	inc	r0
      000806 09               [12] 2589 	inc	r1
      000807 E6               [12] 2590 	mov	a,@r0
      000808 F7               [12] 2591 	mov	@r1,a
      000809 E5 81            [12] 2592 	mov	a,sp
      00080B 24 CF            [12] 2593 	add	a,#0xcf
      00080D F8               [12] 2594 	mov	r0,a
      00080E A6 03            [24] 2595 	mov	@r0,ar3
      000810                       2596 00107$:
      000810 E5 81            [12] 2597 	mov	a,sp
      000812 24 C1            [12] 2598 	add	a,#0xc1
      000814 F8               [12] 2599 	mov	r0,a
      000815 86 02            [24] 2600 	mov	ar2,@r0
      000817 08               [12] 2601 	inc	r0
      000818 86 07            [24] 2602 	mov	ar7,@r0
      00081A E5 81            [12] 2603 	mov	a,sp
      00081C 24 BF            [12] 2604 	add	a,#0xbf
      00081E F8               [12] 2605 	mov	r0,a
      00081F E5 81            [12] 2606 	mov	a,sp
      000821 24 C9            [12] 2607 	add	a,#0xc9
      000823 F9               [12] 2608 	mov	r1,a
      000824 E6               [12] 2609 	mov	a,@r0
      000825 2A               [12] 2610 	add	a,r2
      000826 F7               [12] 2611 	mov	@r1,a
      000827 08               [12] 2612 	inc	r0
      000828 E6               [12] 2613 	mov	a,@r0
      000829 3F               [12] 2614 	addc	a,r7
      00082A 09               [12] 2615 	inc	r1
      00082B F7               [12] 2616 	mov	@r1,a
      00082C 8C 06            [24] 2617 	mov	ar6,r4
      00082E 8D 07            [24] 2618 	mov	ar7,r5
      000830 E5 81            [12] 2619 	mov	a,sp
      000832 24 C9            [12] 2620 	add	a,#0xc9
      000834 F8               [12] 2621 	mov	r0,a
      000835 C3               [12] 2622 	clr	c
      000836 EE               [12] 2623 	mov	a,r6
      000837 96               [12] 2624 	subb	a,@r0
      000838 EF               [12] 2625 	mov	a,r7
      000839 08               [12] 2626 	inc	r0
      00083A 96               [12] 2627 	subb	a,@r0
      00083B 40 03            [24] 2628 	jc	00127$
      00083D 02r09r88         [24] 2629 	ljmp	00105$
      000840                       2630 00127$:
                                   2631 ;	../../core/loader/elfloader.c:301: seek_read(fd, a, (char *)&s, sizeof(s));
      000840 E5 81            [12] 2632 	mov	a,sp
      000842 24 F1            [12] 2633 	add	a,#0xf1
      000844 F9               [12] 2634 	mov	r1,a
      000845 FA               [12] 2635 	mov	r2,a
      000846 7E 00            [12] 2636 	mov	r6,#0x00
      000848 7F 40            [12] 2637 	mov	r7,#0x40
      00084A C0 05            [24] 2638 	push	ar5
      00084C C0 04            [24] 2639 	push	ar4
      00084E C0 03            [24] 2640 	push	ar3
      000850 C0 01            [24] 2641 	push	ar1
      000852 74 10            [12] 2642 	mov	a,#0x10
      000854 C0 E0            [24] 2643 	push	acc
      000856 E4               [12] 2644 	clr	a
      000857 C0 E0            [24] 2645 	push	acc
      000859 C0 02            [24] 2646 	push	ar2
      00085B C0 06            [24] 2647 	push	ar6
      00085D C0 07            [24] 2648 	push	ar7
      00085F C0 04            [24] 2649 	push	ar4
      000861 C0 05            [24] 2650 	push	ar5
      000863 E5 81            [12] 2651 	mov	a,sp
      000865 24 BA            [12] 2652 	add	a,#0xba
      000867 F8               [12] 2653 	mov	r0,a
      000868 86 82            [24] 2654 	mov	dpl,@r0
      00086A 08               [12] 2655 	inc	r0
      00086B 86 83            [24] 2656 	mov	dph,@r0
      00086D 12r00r00         [24] 2657 	lcall	_seek_read
      000870 E5 81            [12] 2658 	mov	a,sp
      000872 24 F9            [12] 2659 	add	a,#0xf9
      000874 F5 81            [12] 2660 	mov	sp,a
      000876 D0 01            [24] 2661 	pop	ar1
      000878 D0 03            [24] 2662 	pop	ar3
      00087A D0 04            [24] 2663 	pop	ar4
      00087C D0 05            [24] 2664 	pop	ar5
                                   2665 ;	../../core/loader/elfloader.c:303: if(s.st_name != 0) {
      00087E E5 81            [12] 2666 	mov	a,sp
      000880 24 CB            [12] 2667 	add	a,#0xcb
      000882 F8               [12] 2668 	mov	r0,a
      000883 E7               [12] 2669 	mov	a,@r1
      000884 F6               [12] 2670 	mov	@r0,a
      000885 09               [12] 2671 	inc	r1
      000886 E7               [12] 2672 	mov	a,@r1
      000887 08               [12] 2673 	inc	r0
      000888 F6               [12] 2674 	mov	@r0,a
      000889 09               [12] 2675 	inc	r1
      00088A E7               [12] 2676 	mov	a,@r1
      00088B 08               [12] 2677 	inc	r0
      00088C F6               [12] 2678 	mov	@r0,a
      00088D 09               [12] 2679 	inc	r1
      00088E E7               [12] 2680 	mov	a,@r1
      00088F 08               [12] 2681 	inc	r0
      000890 F6               [12] 2682 	mov	@r0,a
      000891 19               [12] 2683 	dec	r1
      000892 19               [12] 2684 	dec	r1
      000893 19               [12] 2685 	dec	r1
      000894 E5 81            [12] 2686 	mov	a,sp
      000896 24 CB            [12] 2687 	add	a,#0xcb
      000898 F8               [12] 2688 	mov	r0,a
      000899 E6               [12] 2689 	mov	a,@r0
      00089A 08               [12] 2690 	inc	r0
      00089B 46               [12] 2691 	orl	a,@r0
      00089C 08               [12] 2692 	inc	r0
      00089D 46               [12] 2693 	orl	a,@r0
      00089E 08               [12] 2694 	inc	r0
      00089F 46               [12] 2695 	orl	a,@r0
      0008A0 70 03            [24] 2696 	jnz	00128$
      0008A2 02r09r7E         [24] 2697 	ljmp	00108$
      0008A5                       2698 00128$:
                                   2699 ;	../../core/loader/elfloader.c:304: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      0008A5 C0 01            [24] 2700 	push	ar1
      0008A7 E5 81            [12] 2701 	mov	a,sp
      0008A9 24 CF            [12] 2702 	add	a,#0xcf
      0008AB F8               [12] 2703 	mov	r0,a
      0008AC A6 03            [24] 2704 	mov	@r0,ar3
      0008AE 08               [12] 2705 	inc	r0
      0008AF 76 00            [12] 2706 	mov	@r0,#0x00
      0008B1 08               [12] 2707 	inc	r0
      0008B2 76 40            [12] 2708 	mov	@r0,#0x40
      0008B4 E5 81            [12] 2709 	mov	a,sp
      0008B6 24 CA            [12] 2710 	add	a,#0xca
      0008B8 F8               [12] 2711 	mov	r0,a
      0008B9 86 06            [24] 2712 	mov	ar6,@r0
      0008BB 08               [12] 2713 	inc	r0
      0008BC 86 07            [24] 2714 	mov	ar7,@r0
      0008BE E5 81            [12] 2715 	mov	a,sp
      0008C0 24 C6            [12] 2716 	add	a,#0xc6
      0008C2 F8               [12] 2717 	mov	r0,a
      0008C3 EE               [12] 2718 	mov	a,r6
      0008C4 26               [12] 2719 	add	a,@r0
      0008C5 FE               [12] 2720 	mov	r6,a
      0008C6 EF               [12] 2721 	mov	a,r7
      0008C7 08               [12] 2722 	inc	r0
      0008C8 36               [12] 2723 	addc	a,@r0
      0008C9 FF               [12] 2724 	mov	r7,a
      0008CA C0 05            [24] 2725 	push	ar5
      0008CC C0 04            [24] 2726 	push	ar4
      0008CE C0 03            [24] 2727 	push	ar3
      0008D0 C0 01            [24] 2728 	push	ar1
      0008D2 74 1E            [12] 2729 	mov	a,#0x1e
      0008D4 C0 E0            [24] 2730 	push	acc
      0008D6 E4               [12] 2731 	clr	a
      0008D7 C0 E0            [24] 2732 	push	acc
      0008D9 E5 81            [12] 2733 	mov	a,sp
      0008DB 24 C9            [12] 2734 	add	a,#0xc9
      0008DD F8               [12] 2735 	mov	r0,a
      0008DE E6               [12] 2736 	mov	a,@r0
      0008DF C0 E0            [24] 2737 	push	acc
      0008E1 08               [12] 2738 	inc	r0
      0008E2 E6               [12] 2739 	mov	a,@r0
      0008E3 C0 E0            [24] 2740 	push	acc
      0008E5 08               [12] 2741 	inc	r0
      0008E6 E6               [12] 2742 	mov	a,@r0
      0008E7 C0 E0            [24] 2743 	push	acc
      0008E9 C0 06            [24] 2744 	push	ar6
      0008EB C0 07            [24] 2745 	push	ar7
      0008ED E5 81            [12] 2746 	mov	a,sp
      0008EF 24 B9            [12] 2747 	add	a,#0xb9
      0008F1 F8               [12] 2748 	mov	r0,a
      0008F2 86 82            [24] 2749 	mov	dpl,@r0
      0008F4 08               [12] 2750 	inc	r0
      0008F5 86 83            [24] 2751 	mov	dph,@r0
      0008F7 12r00r00         [24] 2752 	lcall	_seek_read
      0008FA E5 81            [12] 2753 	mov	a,sp
      0008FC 24 F9            [12] 2754 	add	a,#0xf9
      0008FE F5 81            [12] 2755 	mov	sp,a
      000900 D0 01            [24] 2756 	pop	ar1
      000902 D0 03            [24] 2757 	pop	ar3
      000904 D0 04            [24] 2758 	pop	ar4
      000906 D0 05            [24] 2759 	pop	ar5
                                   2760 ;	../../core/loader/elfloader.c:305: if(strcmp(name, "autostart_processes") == 0) {
      000908 E5 81            [12] 2761 	mov	a,sp
      00090A 24 CE            [12] 2762 	add	a,#0xce
      00090C F8               [12] 2763 	mov	r0,a
      00090D 86 02            [24] 2764 	mov	ar2,@r0
      00090F 7E 00            [12] 2765 	mov	r6,#0x00
      000911 7F 40            [12] 2766 	mov	r7,#0x40
      000913 C0 05            [24] 2767 	push	ar5
      000915 C0 04            [24] 2768 	push	ar4
      000917 C0 03            [24] 2769 	push	ar3
      000919 C0 01            [24] 2770 	push	ar1
      00091B 74r07            [12] 2771 	mov	a,#___str_0
      00091D C0 E0            [24] 2772 	push	acc
      00091F 74s00            [12] 2773 	mov	a,#(___str_0 >> 8)
      000921 C0 E0            [24] 2774 	push	acc
      000923 74 80            [12] 2775 	mov	a,#0x80
      000925 C0 E0            [24] 2776 	push	acc
      000927 8A 82            [24] 2777 	mov	dpl,r2
      000929 8E 83            [24] 2778 	mov	dph,r6
      00092B 8F F0            [24] 2779 	mov	b,r7
      00092D 12r00r00         [24] 2780 	lcall	_strcmp
      000930 AE 82            [24] 2781 	mov	r6,dpl
      000932 AF 83            [24] 2782 	mov	r7,dph
      000934 15 81            [12] 2783 	dec	sp
      000936 15 81            [12] 2784 	dec	sp
      000938 15 81            [12] 2785 	dec	sp
      00093A D0 01            [24] 2786 	pop	ar1
      00093C D0 03            [24] 2787 	pop	ar3
      00093E D0 04            [24] 2788 	pop	ar4
      000940 D0 05            [24] 2789 	pop	ar5
      000942 D0 01            [24] 2790 	pop	ar1
      000944 EE               [12] 2791 	mov	a,r6
      000945 4F               [12] 2792 	orl	a,r7
      000946 70 36            [24] 2793 	jnz	00108$
                                   2794 ;	../../core/loader/elfloader.c:306: return &data.address[s.st_value];
      000948 90r00r2A         [24] 2795 	mov	dptr,#(_data + 0x0003)
      00094B E0               [24] 2796 	movx	a,@dptr
      00094C FD               [12] 2797 	mov	r5,a
      00094D A3               [24] 2798 	inc	dptr
      00094E E0               [24] 2799 	movx	a,@dptr
      00094F FE               [12] 2800 	mov	r6,a
      000950 A3               [24] 2801 	inc	dptr
      000951 E0               [24] 2802 	movx	a,@dptr
      000952 FF               [12] 2803 	mov	r7,a
      000953 E9               [12] 2804 	mov	a,r1
      000954 24 04            [12] 2805 	add	a,#0x04
      000956 F9               [12] 2806 	mov	r1,a
      000957 E5 81            [12] 2807 	mov	a,sp
      000959 24 CB            [12] 2808 	add	a,#0xcb
      00095B F8               [12] 2809 	mov	r0,a
      00095C E7               [12] 2810 	mov	a,@r1
      00095D F6               [12] 2811 	mov	@r0,a
      00095E 09               [12] 2812 	inc	r1
      00095F E7               [12] 2813 	mov	a,@r1
      000960 08               [12] 2814 	inc	r0
      000961 F6               [12] 2815 	mov	@r0,a
      000962 09               [12] 2816 	inc	r1
      000963 E7               [12] 2817 	mov	a,@r1
      000964 08               [12] 2818 	inc	r0
      000965 F6               [12] 2819 	mov	@r0,a
      000966 09               [12] 2820 	inc	r1
      000967 E7               [12] 2821 	mov	a,@r1
      000968 08               [12] 2822 	inc	r0
      000969 F6               [12] 2823 	mov	@r0,a
      00096A E5 81            [12] 2824 	mov	a,sp
      00096C 24 CB            [12] 2825 	add	a,#0xcb
      00096E F8               [12] 2826 	mov	r0,a
      00096F E6               [12] 2827 	mov	a,@r0
      000970 2D               [12] 2828 	add	a,r5
      000971 FA               [12] 2829 	mov	r2,a
      000972 08               [12] 2830 	inc	r0
      000973 E6               [12] 2831 	mov	a,@r0
      000974 3E               [12] 2832 	addc	a,r6
      000975 FE               [12] 2833 	mov	r6,a
      000976 8A 82            [24] 2834 	mov	dpl,r2
      000978 8E 83            [24] 2835 	mov	dph,r6
      00097A 8F F0            [24] 2836 	mov	b,r7
      00097C 80 10            [24] 2837 	sjmp	00109$
      00097E                       2838 00108$:
                                   2839 ;	../../core/loader/elfloader.c:300: for(a = symtab; a < symtab + size; a += sizeof(s)) {
      00097E 74 10            [12] 2840 	mov	a,#0x10
      000980 2C               [12] 2841 	add	a,r4
      000981 FC               [12] 2842 	mov	r4,a
      000982 E4               [12] 2843 	clr	a
      000983 3D               [12] 2844 	addc	a,r5
      000984 FD               [12] 2845 	mov	r5,a
      000985 02r08r10         [24] 2846 	ljmp	00107$
      000988                       2847 00105$:
                                   2848 ;	../../core/loader/elfloader.c:310: return NULL;
      000988 90 00 00         [24] 2849 	mov	dptr,#0x0000
      00098B 75 F0 00         [24] 2850 	mov	b,#0x00
      00098E                       2851 00109$:
                                   2852 ;	../../core/loader/elfloader.c:312: }
      00098E E5 81            [12] 2853 	mov	a,sp
      000990 24 C4            [12] 2854 	add	a,#0xc4
      000992 F5 81            [12] 2855 	mov	sp,a
      000994 22               [24] 2856 	ret
                                   2857 ;------------------------------------------------------------
                                   2858 ;Allocation info for local variables in function 'elfloader_init'
                                   2859 ;------------------------------------------------------------
                                   2860 ;	../../core/loader/elfloader.c:315: elfloader_init(void)
                                   2861 ;	-----------------------------------------
                                   2862 ;	 function elfloader_init
                                   2863 ;	-----------------------------------------
      000995                       2864 _elfloader_init:
                                   2865 ;	../../core/loader/elfloader.c:317: elfloader_autostart_processes = NULL;
      000995 90r00r1E         [24] 2866 	mov	dptr,#_elfloader_autostart_processes
      000998 E4               [12] 2867 	clr	a
      000999 F0               [24] 2868 	movx	@dptr,a
      00099A A3               [24] 2869 	inc	dptr
      00099B F0               [24] 2870 	movx	@dptr,a
      00099C A3               [24] 2871 	inc	dptr
      00099D F0               [24] 2872 	movx	@dptr,a
                                   2873 ;	../../core/loader/elfloader.c:318: }
      00099E 22               [24] 2874 	ret
                                   2875 ;------------------------------------------------------------
                                   2876 ;Allocation info for local variables in function 'elfloader_load'
                                   2877 ;------------------------------------------------------------
                                   2878 ;fd                        Allocated to stack - sp -230
                                   2879 ;ehdr                      Allocated to stack - sp -74
                                   2880 ;shdr                      Allocated to stack - sp -154
                                   2881 ;strtable                  Allocated to stack - sp -114
                                   2882 ;strs                      Allocated to stack - sp -168
                                   2883 ;shdrptr                   Allocated to stack - sp -22
                                   2884 ;nameptr                   Allocated to registers 
                                   2885 ;name                      Allocated to stack - sp -166
                                   2886 ;i                         Allocated to stack - sp -20
                                   2887 ;shdrnum                   Allocated to stack - sp -18
                                   2888 ;shdrsize                  Allocated to stack - sp -16
                                   2889 ;using_relas               Allocated to stack - sp -14
                                   2890 ;textoff                   Allocated to stack - sp -13
                                   2891 ;textsize                  Allocated to stack - sp -11
                                   2892 ;textrelaoff               Allocated to stack - sp -172
                                   2893 ;textrelasize              Allocated to stack - sp -212
                                   2894 ;dataoff                   Allocated to stack - sp -9
                                   2895 ;datasize                  Allocated to stack - sp -214
                                   2896 ;datarelaoff               Allocated to stack - sp -228
                                   2897 ;datarelasize              Allocated to stack - sp -216
                                   2898 ;rodataoff                 Allocated to stack - sp -7
                                   2899 ;rodatasize                Allocated to stack - sp -218
                                   2900 ;rodatarelaoff             Allocated to stack - sp -226
                                   2901 ;rodatarelasize            Allocated to stack - sp -220
                                   2902 ;symtaboff                 Allocated to stack - sp -5
                                   2903 ;symtabsize                Allocated to stack - sp -3
                                   2904 ;strtaboff                 Allocated to stack - sp -1
                                   2905 ;strtabsize                Allocated to stack - sp -222
                                   2906 ;bsssize                   Allocated to stack - sp -224
                                   2907 ;process                   Allocated to stack - sp -176
                                   2908 ;ret                       Allocated to registers r6 r7 
                                   2909 ;sloc0                     Allocated to stack - sp -228
                                   2910 ;sloc1                     Allocated to stack - sp -226
                                   2911 ;sloc2                     Allocated to stack - sp -224
                                   2912 ;sloc3                     Allocated to stack - sp -26
                                   2913 ;sloc4                     Allocated to stack - sp -222
                                   2914 ;sloc5                     Allocated to stack - sp -220
                                   2915 ;sloc6                     Allocated to stack - sp -218
                                   2916 ;sloc7                     Allocated to stack - sp -216
                                   2917 ;sloc8                     Allocated to stack - sp -214
                                   2918 ;sloc9                     Allocated to stack - sp -212
                                   2919 ;sloc10                    Allocated to stack - sp -210
                                   2920 ;sloc11                    Allocated to stack - sp -12
                                   2921 ;sloc12                    Allocated to stack - sp -209
                                   2922 ;sloc13                    Allocated to stack - sp -208
                                   2923 ;sloc14                    Allocated to stack - sp -207
                                   2924 ;sloc15                    Allocated to stack - sp -206
                                   2925 ;sloc16                    Allocated to stack - sp -205
                                   2926 ;sloc17                    Allocated to stack - sp -204
                                   2927 ;sloc18                    Allocated to stack - sp -203
                                   2928 ;sloc19                    Allocated to stack - sp -202
                                   2929 ;sloc20                    Allocated to stack - sp -201
                                   2930 ;sloc21                    Allocated to stack - sp -200
                                   2931 ;sloc22                    Allocated to stack - sp -199
                                   2932 ;sloc23                    Allocated to stack - sp -198
                                   2933 ;sloc24                    Allocated to stack - sp -197
                                   2934 ;sloc25                    Allocated to stack - sp -196
                                   2935 ;sloc26                    Allocated to stack - sp -195
                                   2936 ;sloc27                    Allocated to stack - sp -194
                                   2937 ;sloc28                    Allocated to stack - sp -193
                                   2938 ;sloc29                    Allocated to stack - sp -192
                                   2939 ;sloc30                    Allocated to stack - sp -191
                                   2940 ;sloc31                    Allocated to stack - sp -190
                                   2941 ;sloc32                    Allocated to stack - sp -189
                                   2942 ;sloc33                    Allocated to stack - sp -188
                                   2943 ;sloc34                    Allocated to stack - sp -187
                                   2944 ;sloc35                    Allocated to stack - sp -186
                                   2945 ;sloc36                    Allocated to stack - sp -185
                                   2946 ;sloc37                    Allocated to stack - sp -184
                                   2947 ;sloc38                    Allocated to stack - sp -183
                                   2948 ;sloc39                    Allocated to stack - sp -182
                                   2949 ;sloc40                    Allocated to stack - sp -181
                                   2950 ;sloc41                    Allocated to stack - sp -180
                                   2951 ;sloc42                    Allocated to stack - sp -179
                                   2952 ;sloc43                    Allocated to stack - sp -178
                                   2953 ;sloc44                    Allocated to stack - sp -177
                                   2954 ;sloc45                    Allocated to stack - sp -176
                                   2955 ;sloc46                    Allocated to stack - sp -172
                                   2956 ;sloc47                    Allocated to stack - sp -170
                                   2957 ;------------------------------------------------------------
                                   2958 ;	../../core/loader/elfloader.c:337: elfloader_load(int fd)
                                   2959 ;	-----------------------------------------
                                   2960 ;	 function elfloader_load
                                   2961 ;	-----------------------------------------
      00099F                       2962 _elfloader_load:
      00099F C0 82            [24] 2963 	push	dpl
      0009A1 C0 83            [24] 2964 	push	dph
      0009A3 E5 81            [12] 2965 	mov	a,sp
      0009A5 24 E5            [12] 2966 	add	a,#0xe5
                                   2967 ;	../../core/loader/elfloader.c:350: unsigned char using_relas = -1;
      0009A7 F5 81            [12] 2968 	mov	sp,a
      0009A9 24 F2            [12] 2969 	add	a,#0xf2
      0009AB F8               [12] 2970 	mov	r0,a
      0009AC 76 FF            [12] 2971 	mov	@r0,#0xff
                                   2972 ;	../../core/loader/elfloader.c:351: unsigned short textoff = 0, textsize, textrelaoff = 0, textrelasize;
      0009AE E5 81            [12] 2973 	mov	a,sp
      0009B0 24 F3            [12] 2974 	add	a,#0xf3
      0009B2 F8               [12] 2975 	mov	r0,a
      0009B3 E4               [12] 2976 	clr	a
      0009B4 F6               [12] 2977 	mov	@r0,a
      0009B5 08               [12] 2978 	inc	r0
      0009B6 F6               [12] 2979 	mov	@r0,a
      0009B7 E5 81            [12] 2980 	mov	a,sp
      0009B9 24 54            [12] 2981 	add	a,#0x54
      0009BB F8               [12] 2982 	mov	r0,a
      0009BC E4               [12] 2983 	clr	a
      0009BD F6               [12] 2984 	mov	@r0,a
      0009BE 08               [12] 2985 	inc	r0
      0009BF F6               [12] 2986 	mov	@r0,a
                                   2987 ;	../../core/loader/elfloader.c:352: unsigned short dataoff = 0, datasize, datarelaoff = 0, datarelasize;
      0009C0 E5 81            [12] 2988 	mov	a,sp
      0009C2 24 F7            [12] 2989 	add	a,#0xf7
      0009C4 F8               [12] 2990 	mov	r0,a
      0009C5 E4               [12] 2991 	clr	a
      0009C6 F6               [12] 2992 	mov	@r0,a
      0009C7 08               [12] 2993 	inc	r0
      0009C8 F6               [12] 2994 	mov	@r0,a
      0009C9 E5 81            [12] 2995 	mov	a,sp
      0009CB 24 1C            [12] 2996 	add	a,#0x1c
      0009CD F8               [12] 2997 	mov	r0,a
      0009CE E4               [12] 2998 	clr	a
      0009CF F6               [12] 2999 	mov	@r0,a
      0009D0 08               [12] 3000 	inc	r0
      0009D1 F6               [12] 3001 	mov	@r0,a
                                   3002 ;	../../core/loader/elfloader.c:353: unsigned short rodataoff = 0, rodatasize, rodatarelaoff = 0, rodatarelasize;
      0009D2 E5 81            [12] 3003 	mov	a,sp
      0009D4 24 F9            [12] 3004 	add	a,#0xf9
      0009D6 F8               [12] 3005 	mov	r0,a
      0009D7 E4               [12] 3006 	clr	a
      0009D8 F6               [12] 3007 	mov	@r0,a
      0009D9 08               [12] 3008 	inc	r0
      0009DA F6               [12] 3009 	mov	@r0,a
      0009DB E5 81            [12] 3010 	mov	a,sp
      0009DD 24 1E            [12] 3011 	add	a,#0x1e
      0009DF F8               [12] 3012 	mov	r0,a
      0009E0 E4               [12] 3013 	clr	a
      0009E1 F6               [12] 3014 	mov	@r0,a
      0009E2 08               [12] 3015 	inc	r0
      0009E3 F6               [12] 3016 	mov	@r0,a
                                   3017 ;	../../core/loader/elfloader.c:354: unsigned short symtaboff = 0, symtabsize;
      0009E4 E5 81            [12] 3018 	mov	a,sp
      0009E6 24 FB            [12] 3019 	add	a,#0xfb
      0009E8 F8               [12] 3020 	mov	r0,a
      0009E9 E4               [12] 3021 	clr	a
      0009EA F6               [12] 3022 	mov	@r0,a
      0009EB 08               [12] 3023 	inc	r0
      0009EC F6               [12] 3024 	mov	@r0,a
                                   3025 ;	../../core/loader/elfloader.c:355: unsigned short strtaboff = 0, strtabsize;
      0009ED A8 81            [24] 3026 	mov	r0,sp
      0009EF 18               [12] 3027 	dec	r0
      0009F0 F6               [12] 3028 	mov	@r0,a
      0009F1 08               [12] 3029 	inc	r0
      0009F2 F6               [12] 3030 	mov	@r0,a
                                   3031 ;	../../core/loader/elfloader.c:356: unsigned short bsssize = 0;
      0009F3 E5 81            [12] 3032 	mov	a,sp
      0009F5 24 20            [12] 3033 	add	a,#0x20
      0009F7 F8               [12] 3034 	mov	r0,a
      0009F8 E4               [12] 3035 	clr	a
      0009F9 F6               [12] 3036 	mov	@r0,a
      0009FA 08               [12] 3037 	inc	r0
      0009FB F6               [12] 3038 	mov	@r0,a
                                   3039 ;	../../core/loader/elfloader.c:361: elfloader_unknown[0] = 0;
      0009FC 90r00r00         [24] 3040 	mov	dptr,#_elfloader_unknown
      0009FF F0               [24] 3041 	movx	@dptr,a
                                   3042 ;	../../core/loader/elfloader.c:364: seek_read(fd, 0, (char *)&ehdr, sizeof(ehdr));
      000A00 E5 81            [12] 3043 	mov	a,sp
      000A02 24 B6            [12] 3044 	add	a,#0xb6
      000A04 FA               [12] 3045 	mov	r2,a
      000A05 FB               [12] 3046 	mov	r3,a
      000A06 7C 00            [12] 3047 	mov	r4,#0x00
      000A08 7F 40            [12] 3048 	mov	r7,#0x40
      000A0A C0 02            [24] 3049 	push	ar2
      000A0C 74 34            [12] 3050 	mov	a,#0x34
      000A0E C0 E0            [24] 3051 	push	acc
      000A10 E4               [12] 3052 	clr	a
      000A11 C0 E0            [24] 3053 	push	acc
      000A13 C0 03            [24] 3054 	push	ar3
      000A15 C0 04            [24] 3055 	push	ar4
      000A17 C0 07            [24] 3056 	push	ar7
      000A19 C0 E0            [24] 3057 	push	acc
      000A1B C0 E0            [24] 3058 	push	acc
      000A1D E5 81            [12] 3059 	mov	a,sp
      000A1F 24 12            [12] 3060 	add	a,#0x12
      000A21 F8               [12] 3061 	mov	r0,a
      000A22 86 82            [24] 3062 	mov	dpl,@r0
      000A24 08               [12] 3063 	inc	r0
      000A25 86 83            [24] 3064 	mov	dph,@r0
      000A27 12r00r00         [24] 3065 	lcall	_seek_read
      000A2A E5 81            [12] 3066 	mov	a,sp
      000A2C 24 F9            [12] 3067 	add	a,#0xf9
      000A2E F5 81            [12] 3068 	mov	sp,a
      000A30 D0 02            [24] 3069 	pop	ar2
                                   3070 ;	../../core/loader/elfloader.c:369: if(memcmp(ehdr.e_ident, elf_magic_header, sizeof(elf_magic_header)) != 0) {
      000A32 8A 07            [24] 3071 	mov	ar7,r2
      000A34 7E 00            [12] 3072 	mov	r6,#0x00
      000A36 7C 40            [12] 3073 	mov	r4,#0x40
      000A38 C0 02            [24] 3074 	push	ar2
      000A3A 74 07            [12] 3075 	mov	a,#0x07
      000A3C C0 E0            [24] 3076 	push	acc
      000A3E E4               [12] 3077 	clr	a
      000A3F C0 E0            [24] 3078 	push	acc
      000A41 74r00            [12] 3079 	mov	a,#_elf_magic_header
      000A43 C0 E0            [24] 3080 	push	acc
      000A45 74s00            [12] 3081 	mov	a,#(_elf_magic_header >> 8)
      000A47 C0 E0            [24] 3082 	push	acc
      000A49 74 80            [12] 3083 	mov	a,#0x80
      000A4B C0 E0            [24] 3084 	push	acc
      000A4D 8F 82            [24] 3085 	mov	dpl,r7
      000A4F 8E 83            [24] 3086 	mov	dph,r6
      000A51 8C F0            [24] 3087 	mov	b,r4
      000A53 12r00r00         [24] 3088 	lcall	_memcmp
      000A56 AE 82            [24] 3089 	mov	r6,dpl
      000A58 AF 83            [24] 3090 	mov	r7,dph
      000A5A E5 81            [12] 3091 	mov	a,sp
      000A5C 24 FB            [12] 3092 	add	a,#0xfb
      000A5E F5 81            [12] 3093 	mov	sp,a
      000A60 D0 02            [24] 3094 	pop	ar2
      000A62 EE               [12] 3095 	mov	a,r6
      000A63 4F               [12] 3096 	orl	a,r7
      000A64 60 06            [24] 3097 	jz	00104$
                                   3098 ;	../../core/loader/elfloader.c:371: return ELFLOADER_BAD_ELF_HEADER;
      000A66 90 00 01         [24] 3099 	mov	dptr,#0x0001
      000A69 02r19rAC         [24] 3100 	ljmp	00207$
      000A6C                       3101 00104$:
                                   3102 ;	../../core/loader/elfloader.c:375: shdrptr = ehdr.e_shoff;
      000A6C 74 20            [12] 3103 	mov	a,#0x20
      000A6E 2A               [12] 3104 	add	a,r2
      000A6F F9               [12] 3105 	mov	r1,a
      000A70 87 06            [24] 3106 	mov	ar6,@r1
      000A72 09               [12] 3107 	inc	r1
      000A73 87 07            [24] 3108 	mov	ar7,@r1
      000A75 19               [12] 3109 	dec	r1
                                   3110 ;	../../core/loader/elfloader.c:376: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
      000A76 E5 81            [12] 3111 	mov	a,sp
      000A78 24 66            [12] 3112 	add	a,#0x66
      000A7A F8               [12] 3113 	mov	r0,a
      000A7B FB               [12] 3114 	mov	r3,a
      000A7C 7C 00            [12] 3115 	mov	r4,#0x00
      000A7E 7D 40            [12] 3116 	mov	r5,#0x40
      000A80 C0 02            [24] 3117 	push	ar2
      000A82 C0 01            [24] 3118 	push	ar1
      000A84 C0 00            [24] 3119 	push	ar0
      000A86 74 28            [12] 3120 	mov	a,#0x28
      000A88 C0 E0            [24] 3121 	push	acc
      000A8A E4               [12] 3122 	clr	a
      000A8B C0 E0            [24] 3123 	push	acc
      000A8D C0 03            [24] 3124 	push	ar3
      000A8F C0 04            [24] 3125 	push	ar4
      000A91 C0 05            [24] 3126 	push	ar5
      000A93 C0 06            [24] 3127 	push	ar6
      000A95 C0 07            [24] 3128 	push	ar7
      000A97 C0 00            [24] 3129 	push	ar0
      000A99 E5 81            [12] 3130 	mov	a,sp
      000A9B 24 0F            [12] 3131 	add	a,#0x0f
      000A9D F8               [12] 3132 	mov	r0,a
      000A9E 86 82            [24] 3133 	mov	dpl,@r0
      000AA0 08               [12] 3134 	inc	r0
      000AA1 86 83            [24] 3135 	mov	dph,@r0
      000AA3 D0 00            [24] 3136 	pop	ar0
      000AA5 12r00r00         [24] 3137 	lcall	_seek_read
      000AA8 E5 81            [12] 3138 	mov	a,sp
      000AAA 24 F9            [12] 3139 	add	a,#0xf9
      000AAC F5 81            [12] 3140 	mov	sp,a
      000AAE D0 00            [24] 3141 	pop	ar0
      000AB0 D0 01            [24] 3142 	pop	ar1
      000AB2 D0 02            [24] 3143 	pop	ar2
                                   3144 ;	../../core/loader/elfloader.c:379: shdrsize = ehdr.e_shentsize;
      000AB4 74 2E            [12] 3145 	mov	a,#0x2e
      000AB6 2A               [12] 3146 	add	a,r2
      000AB7 FF               [12] 3147 	mov	r7,a
      000AB8 C0 00            [24] 3148 	push	ar0
      000ABA E5 81            [12] 3149 	mov	a,sp
      000ABC 24 EF            [12] 3150 	add	a,#0xef
      000ABE F8               [12] 3151 	mov	r0,a
      000ABF C0 01            [24] 3152 	push	ar1
      000AC1 A9 07            [24] 3153 	mov	r1,ar7
      000AC3 E7               [12] 3154 	mov	a,@r1
      000AC4 F6               [12] 3155 	mov	@r0,a
      000AC5 09               [12] 3156 	inc	r1
      000AC6 E7               [12] 3157 	mov	a,@r1
      000AC7 08               [12] 3158 	inc	r0
      000AC8 F6               [12] 3159 	mov	@r0,a
      000AC9 D0 01            [24] 3160 	pop	ar1
                                   3161 ;	../../core/loader/elfloader.c:380: shdrnum = ehdr.e_shnum;
      000ACB 74 30            [12] 3162 	mov	a,#0x30
      000ACD 2A               [12] 3163 	add	a,r2
      000ACE FF               [12] 3164 	mov	r7,a
      000ACF E5 81            [12] 3165 	mov	a,sp
      000AD1 24 ED            [12] 3166 	add	a,#0xed
      000AD3 F8               [12] 3167 	mov	r0,a
      000AD4 C0 01            [24] 3168 	push	ar1
      000AD6 A9 07            [24] 3169 	mov	r1,ar7
      000AD8 E7               [12] 3170 	mov	a,@r1
      000AD9 F6               [12] 3171 	mov	@r0,a
      000ADA 09               [12] 3172 	inc	r1
      000ADB E7               [12] 3173 	mov	a,@r1
      000ADC 08               [12] 3174 	inc	r0
      000ADD F6               [12] 3175 	mov	@r0,a
      000ADE D0 01            [24] 3176 	pop	ar1
      000AE0 D0 00            [24] 3177 	pop	ar0
                                   3178 ;	../../core/loader/elfloader.c:386: (char *)&strtable, sizeof(strtable));
      000AE2 E5 81            [12] 3179 	mov	a,sp
      000AE4 24 8E            [12] 3180 	add	a,#0x8e
      000AE6 FF               [12] 3181 	mov	r7,a
      000AE7 FE               [12] 3182 	mov	r6,a
      000AE8 7D 00            [12] 3183 	mov	r5,#0x00
      000AEA 7C 40            [12] 3184 	mov	r4,#0x40
                                   3185 ;	../../core/loader/elfloader.c:385: seek_read(fd, ehdr.e_shoff + shdrsize * ehdr.e_shstrndx,
      000AEC C0 00            [24] 3186 	push	ar0
      000AEE E5 81            [12] 3187 	mov	a,sp
      000AF0 24 21            [12] 3188 	add	a,#0x21
      000AF2 F8               [12] 3189 	mov	r0,a
      000AF3 E7               [12] 3190 	mov	a,@r1
      000AF4 F6               [12] 3191 	mov	@r0,a
      000AF5 09               [12] 3192 	inc	r1
      000AF6 E7               [12] 3193 	mov	a,@r1
      000AF7 08               [12] 3194 	inc	r0
      000AF8 F6               [12] 3195 	mov	@r0,a
      000AF9 19               [12] 3196 	dec	r1
      000AFA 74 32            [12] 3197 	mov	a,#0x32
      000AFC 2A               [12] 3198 	add	a,r2
      000AFD FB               [12] 3199 	mov	r3,a
      000AFE A8 03            [24] 3200 	mov	r0,ar3
      000B00 86 02            [24] 3201 	mov	ar2,@r0
      000B02 08               [12] 3202 	inc	r0
      000B03 86 03            [24] 3203 	mov	ar3,@r0
      000B05 D0 00            [24] 3204 	pop	ar0
      000B07 C0 07            [24] 3205 	push	ar7
      000B09 C0 06            [24] 3206 	push	ar6
      000B0B C0 05            [24] 3207 	push	ar5
      000B0D C0 04            [24] 3208 	push	ar4
      000B0F C0 01            [24] 3209 	push	ar1
      000B11 C0 00            [24] 3210 	push	ar0
      000B13 C0 02            [24] 3211 	push	ar2
      000B15 C0 03            [24] 3212 	push	ar3
      000B17 C0 00            [24] 3213 	push	ar0
      000B19 E5 81            [12] 3214 	mov	a,sp
      000B1B 24 E7            [12] 3215 	add	a,#0xe7
      000B1D F8               [12] 3216 	mov	r0,a
      000B1E 86 82            [24] 3217 	mov	dpl,@r0
      000B20 08               [12] 3218 	inc	r0
      000B21 86 83            [24] 3219 	mov	dph,@r0
      000B23 D0 00            [24] 3220 	pop	ar0
      000B25 12r00r00         [24] 3221 	lcall	__mulint
      000B28 AA 82            [24] 3222 	mov	r2,dpl
      000B2A AB 83            [24] 3223 	mov	r3,dph
      000B2C 15 81            [12] 3224 	dec	sp
      000B2E 15 81            [12] 3225 	dec	sp
      000B30 D0 00            [24] 3226 	pop	ar0
      000B32 D0 01            [24] 3227 	pop	ar1
      000B34 D0 04            [24] 3228 	pop	ar4
      000B36 D0 05            [24] 3229 	pop	ar5
      000B38 D0 06            [24] 3230 	pop	ar6
      000B3A D0 07            [24] 3231 	pop	ar7
      000B3C C0 00            [24] 3232 	push	ar0
      000B3E E5 81            [12] 3233 	mov	a,sp
      000B40 24 21            [12] 3234 	add	a,#0x21
      000B42 F8               [12] 3235 	mov	r0,a
      000B43 EA               [12] 3236 	mov	a,r2
      000B44 26               [12] 3237 	add	a,@r0
      000B45 FA               [12] 3238 	mov	r2,a
      000B46 EB               [12] 3239 	mov	a,r3
      000B47 08               [12] 3240 	inc	r0
      000B48 36               [12] 3241 	addc	a,@r0
      000B49 FB               [12] 3242 	mov	r3,a
      000B4A D0 00            [24] 3243 	pop	ar0
      000B4C C0 07            [24] 3244 	push	ar7
      000B4E C0 01            [24] 3245 	push	ar1
      000B50 C0 00            [24] 3246 	push	ar0
      000B52 74 28            [12] 3247 	mov	a,#0x28
      000B54 C0 E0            [24] 3248 	push	acc
      000B56 E4               [12] 3249 	clr	a
      000B57 C0 E0            [24] 3250 	push	acc
      000B59 C0 06            [24] 3251 	push	ar6
      000B5B C0 05            [24] 3252 	push	ar5
      000B5D C0 04            [24] 3253 	push	ar4
      000B5F C0 02            [24] 3254 	push	ar2
      000B61 C0 03            [24] 3255 	push	ar3
      000B63 C0 00            [24] 3256 	push	ar0
      000B65 E5 81            [12] 3257 	mov	a,sp
      000B67 24 0F            [12] 3258 	add	a,#0x0f
      000B69 F8               [12] 3259 	mov	r0,a
      000B6A 86 82            [24] 3260 	mov	dpl,@r0
      000B6C 08               [12] 3261 	inc	r0
      000B6D 86 83            [24] 3262 	mov	dph,@r0
      000B6F D0 00            [24] 3263 	pop	ar0
      000B71 12r00r00         [24] 3264 	lcall	_seek_read
      000B74 E5 81            [12] 3265 	mov	a,sp
      000B76 24 F9            [12] 3266 	add	a,#0xf9
      000B78 F5 81            [12] 3267 	mov	sp,a
      000B7A D0 00            [24] 3268 	pop	ar0
      000B7C D0 01            [24] 3269 	pop	ar1
      000B7E D0 07            [24] 3270 	pop	ar7
                                   3271 ;	../../core/loader/elfloader.c:391: strs = strtable.sh_offset;
      000B80 74 10            [12] 3272 	mov	a,#0x10
      000B82 2F               [12] 3273 	add	a,r7
      000B83 FF               [12] 3274 	mov	r7,a
      000B84 C0 00            [24] 3275 	push	ar0
      000B86 E5 81            [12] 3276 	mov	a,sp
      000B88 24 57            [12] 3277 	add	a,#0x57
      000B8A F8               [12] 3278 	mov	r0,a
      000B8B C0 01            [24] 3279 	push	ar1
      000B8D A9 07            [24] 3280 	mov	r1,ar7
      000B8F E7               [12] 3281 	mov	a,@r1
      000B90 F6               [12] 3282 	mov	@r0,a
      000B91 09               [12] 3283 	inc	r1
      000B92 E7               [12] 3284 	mov	a,@r1
      000B93 08               [12] 3285 	inc	r0
      000B94 F6               [12] 3286 	mov	@r0,a
      000B95 D0 01            [24] 3287 	pop	ar1
                                   3288 ;	../../core/loader/elfloader.c:414: rodatasize = rodatarelasize = symtabsize = strtabsize = 0;
      000B97 E5 81            [12] 3289 	mov	a,sp
      000B99 24 21            [12] 3290 	add	a,#0x21
      000B9B F8               [12] 3291 	mov	r0,a
      000B9C E4               [12] 3292 	clr	a
      000B9D F6               [12] 3293 	mov	@r0,a
      000B9E 08               [12] 3294 	inc	r0
      000B9F F6               [12] 3295 	mov	@r0,a
      000BA0 E5 81            [12] 3296 	mov	a,sp
      000BA2 24 FC            [12] 3297 	add	a,#0xfc
      000BA4 F8               [12] 3298 	mov	r0,a
      000BA5 E4               [12] 3299 	clr	a
      000BA6 F6               [12] 3300 	mov	@r0,a
      000BA7 08               [12] 3301 	inc	r0
      000BA8 F6               [12] 3302 	mov	@r0,a
      000BA9 E5 81            [12] 3303 	mov	a,sp
      000BAB 24 23            [12] 3304 	add	a,#0x23
      000BAD F8               [12] 3305 	mov	r0,a
      000BAE E4               [12] 3306 	clr	a
      000BAF F6               [12] 3307 	mov	@r0,a
      000BB0 08               [12] 3308 	inc	r0
      000BB1 F6               [12] 3309 	mov	@r0,a
      000BB2 E5 81            [12] 3310 	mov	a,sp
      000BB4 24 25            [12] 3311 	add	a,#0x25
      000BB6 F8               [12] 3312 	mov	r0,a
      000BB7 E4               [12] 3313 	clr	a
      000BB8 F6               [12] 3314 	mov	@r0,a
      000BB9 08               [12] 3315 	inc	r0
      000BBA F6               [12] 3316 	mov	@r0,a
      000BBB E5 81            [12] 3317 	mov	a,sp
      000BBD 24 27            [12] 3318 	add	a,#0x27
      000BBF F8               [12] 3319 	mov	r0,a
      000BC0 E4               [12] 3320 	clr	a
      000BC1 F6               [12] 3321 	mov	@r0,a
      000BC2 08               [12] 3322 	inc	r0
      000BC3 F6               [12] 3323 	mov	@r0,a
      000BC4 E5 81            [12] 3324 	mov	a,sp
      000BC6 24 29            [12] 3325 	add	a,#0x29
      000BC8 F8               [12] 3326 	mov	r0,a
      000BC9 E4               [12] 3327 	clr	a
      000BCA F6               [12] 3328 	mov	@r0,a
      000BCB 08               [12] 3329 	inc	r0
      000BCC F6               [12] 3330 	mov	@r0,a
      000BCD E5 81            [12] 3331 	mov	a,sp
      000BCF 24 2B            [12] 3332 	add	a,#0x2b
      000BD1 F8               [12] 3333 	mov	r0,a
      000BD2 E4               [12] 3334 	clr	a
      000BD3 F6               [12] 3335 	mov	@r0,a
      000BD4 08               [12] 3336 	inc	r0
      000BD5 F6               [12] 3337 	mov	@r0,a
      000BD6 E5 81            [12] 3338 	mov	a,sp
      000BD8 24 F4            [12] 3339 	add	a,#0xf4
      000BDA F8               [12] 3340 	mov	r0,a
      000BDB E4               [12] 3341 	clr	a
      000BDC F6               [12] 3342 	mov	@r0,a
      000BDD 08               [12] 3343 	inc	r0
      000BDE F6               [12] 3344 	mov	@r0,a
                                   3345 ;	../../core/loader/elfloader.c:416: bss.number = data.number = rodata.number = text.number = -1;
      000BDF 90r00r33         [24] 3346 	mov	dptr,#_text
      000BE2 14               [12] 3347 	dec	a
      000BE3 F0               [24] 3348 	movx	@dptr,a
      000BE4 90r00r2D         [24] 3349 	mov	dptr,#_rodata
      000BE7 F0               [24] 3350 	movx	@dptr,a
      000BE8 90r00r27         [24] 3351 	mov	dptr,#_data
      000BEB F0               [24] 3352 	movx	@dptr,a
      000BEC 90r00r21         [24] 3353 	mov	dptr,#_bss
      000BEF F0               [24] 3354 	movx	@dptr,a
                                   3355 ;	../../core/loader/elfloader.c:418: shdrptr = ehdr.e_shoff;
      000BF0 E5 81            [12] 3356 	mov	a,sp
      000BF2 24 E9            [12] 3357 	add	a,#0xe9
      000BF4 F8               [12] 3358 	mov	r0,a
      000BF5 E7               [12] 3359 	mov	a,@r1
      000BF6 F6               [12] 3360 	mov	@r0,a
      000BF7 09               [12] 3361 	inc	r1
      000BF8 E7               [12] 3362 	mov	a,@r1
      000BF9 08               [12] 3363 	inc	r0
      000BFA F6               [12] 3364 	mov	@r0,a
      000BFB D0 00            [24] 3365 	pop	ar0
                                   3366 ;	../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      000BFD 88 02            [24] 3367 	mov	ar2,r0
      000BFF E5 81            [12] 3368 	mov	a,sp
      000C01 24 2E            [12] 3369 	add	a,#0x2e
      000C03 F9               [12] 3370 	mov	r1,a
      000C04 E5 81            [12] 3371 	mov	a,sp
      000C06 24 5A            [12] 3372 	add	a,#0x5a
      000C08 F7               [12] 3373 	mov	@r1,a
      000C09 74 04            [12] 3374 	mov	a,#0x04
      000C0B 28               [12] 3375 	add	a,r0
      000C0C F9               [12] 3376 	mov	r1,a
      000C0D C0 00            [24] 3377 	push	ar0
      000C0F E5 81            [12] 3378 	mov	a,sp
      000C11 24 2D            [12] 3379 	add	a,#0x2d
      000C13 F8               [12] 3380 	mov	r0,a
      000C14 C0 01            [24] 3381 	push	ar1
      000C16 E5 81            [12] 3382 	mov	a,sp
      000C18 24 2D            [12] 3383 	add	a,#0x2d
      000C1A F9               [12] 3384 	mov	r1,a
      000C1B E6               [12] 3385 	mov	a,@r0
      000C1C F7               [12] 3386 	mov	@r1,a
      000C1D D0 01            [24] 3387 	pop	ar1
      000C1F E5 81            [12] 3388 	mov	a,sp
      000C21 24 2D            [12] 3389 	add	a,#0x2d
      000C23 F8               [12] 3390 	mov	r0,a
      000C24 C0 01            [24] 3391 	push	ar1
      000C26 E5 81            [12] 3392 	mov	a,sp
      000C28 24 2E            [12] 3393 	add	a,#0x2e
      000C2A F9               [12] 3394 	mov	r1,a
      000C2B E6               [12] 3395 	mov	a,@r0
      000C2C F7               [12] 3396 	mov	@r1,a
      000C2D D0 01            [24] 3397 	pop	ar1
      000C2F E5 81            [12] 3398 	mov	a,sp
      000C31 24 2D            [12] 3399 	add	a,#0x2d
      000C33 F8               [12] 3400 	mov	r0,a
      000C34 C0 01            [24] 3401 	push	ar1
      000C36 E5 81            [12] 3402 	mov	a,sp
      000C38 24 2F            [12] 3403 	add	a,#0x2f
      000C3A F9               [12] 3404 	mov	r1,a
      000C3B E6               [12] 3405 	mov	a,@r0
      000C3C F7               [12] 3406 	mov	@r1,a
      000C3D D0 01            [24] 3407 	pop	ar1
      000C3F E5 81            [12] 3408 	mov	a,sp
      000C41 24 2D            [12] 3409 	add	a,#0x2d
      000C43 F8               [12] 3410 	mov	r0,a
      000C44 C0 01            [24] 3411 	push	ar1
      000C46 E5 81            [12] 3412 	mov	a,sp
      000C48 24 30            [12] 3413 	add	a,#0x30
      000C4A F9               [12] 3414 	mov	r1,a
      000C4B E6               [12] 3415 	mov	a,@r0
      000C4C F7               [12] 3416 	mov	@r1,a
      000C4D D0 01            [24] 3417 	pop	ar1
      000C4F E5 81            [12] 3418 	mov	a,sp
      000C51 24 2D            [12] 3419 	add	a,#0x2d
      000C53 F8               [12] 3420 	mov	r0,a
      000C54 C0 01            [24] 3421 	push	ar1
      000C56 E5 81            [12] 3422 	mov	a,sp
      000C58 24 31            [12] 3423 	add	a,#0x31
      000C5A F9               [12] 3424 	mov	r1,a
      000C5B E6               [12] 3425 	mov	a,@r0
      000C5C F7               [12] 3426 	mov	@r1,a
      000C5D D0 01            [24] 3427 	pop	ar1
      000C5F E5 81            [12] 3428 	mov	a,sp
      000C61 24 2D            [12] 3429 	add	a,#0x2d
      000C63 F8               [12] 3430 	mov	r0,a
      000C64 C0 01            [24] 3431 	push	ar1
      000C66 E5 81            [12] 3432 	mov	a,sp
      000C68 24 32            [12] 3433 	add	a,#0x32
      000C6A F9               [12] 3434 	mov	r1,a
      000C6B E6               [12] 3435 	mov	a,@r0
      000C6C F7               [12] 3436 	mov	@r1,a
      000C6D D0 01            [24] 3437 	pop	ar1
      000C6F E5 81            [12] 3438 	mov	a,sp
      000C71 24 2D            [12] 3439 	add	a,#0x2d
      000C73 F8               [12] 3440 	mov	r0,a
      000C74 C0 01            [24] 3441 	push	ar1
      000C76 E5 81            [12] 3442 	mov	a,sp
      000C78 24 33            [12] 3443 	add	a,#0x33
      000C7A F9               [12] 3444 	mov	r1,a
      000C7B E6               [12] 3445 	mov	a,@r0
      000C7C F7               [12] 3446 	mov	@r1,a
      000C7D D0 01            [24] 3447 	pop	ar1
      000C7F E5 81            [12] 3448 	mov	a,sp
      000C81 24 2D            [12] 3449 	add	a,#0x2d
      000C83 F8               [12] 3450 	mov	r0,a
      000C84 C0 01            [24] 3451 	push	ar1
      000C86 E5 81            [12] 3452 	mov	a,sp
      000C88 24 34            [12] 3453 	add	a,#0x34
      000C8A F9               [12] 3454 	mov	r1,a
      000C8B E6               [12] 3455 	mov	a,@r0
      000C8C F7               [12] 3456 	mov	@r1,a
      000C8D D0 01            [24] 3457 	pop	ar1
      000C8F E5 81            [12] 3458 	mov	a,sp
      000C91 24 2D            [12] 3459 	add	a,#0x2d
      000C93 F8               [12] 3460 	mov	r0,a
      000C94 C0 01            [24] 3461 	push	ar1
      000C96 E5 81            [12] 3462 	mov	a,sp
      000C98 24 35            [12] 3463 	add	a,#0x35
      000C9A F9               [12] 3464 	mov	r1,a
      000C9B E6               [12] 3465 	mov	a,@r0
      000C9C F7               [12] 3466 	mov	@r1,a
      000C9D D0 01            [24] 3467 	pop	ar1
      000C9F D0 00            [24] 3468 	pop	ar0
      000CA1 C0 01            [24] 3469 	push	ar1
      000CA3 E5 81            [12] 3470 	mov	a,sp
      000CA5 24 37            [12] 3471 	add	a,#0x37
      000CA7 F9               [12] 3472 	mov	r1,a
      000CA8 74 14            [12] 3473 	mov	a,#0x14
      000CAA 28               [12] 3474 	add	a,r0
      000CAB F7               [12] 3475 	mov	@r1,a
      000CAC D0 01            [24] 3476 	pop	ar1
      000CAE C0 00            [24] 3477 	push	ar0
      000CB0 E5 81            [12] 3478 	mov	a,sp
      000CB2 24 2D            [12] 3479 	add	a,#0x2d
      000CB4 F8               [12] 3480 	mov	r0,a
      000CB5 C0 01            [24] 3481 	push	ar1
      000CB7 E5 81            [12] 3482 	mov	a,sp
      000CB9 24 37            [12] 3483 	add	a,#0x37
      000CBB F9               [12] 3484 	mov	r1,a
      000CBC E6               [12] 3485 	mov	a,@r0
      000CBD F7               [12] 3486 	mov	@r1,a
      000CBE D0 01            [24] 3487 	pop	ar1
      000CC0 D0 00            [24] 3488 	pop	ar0
      000CC2 C0 01            [24] 3489 	push	ar1
      000CC4 E5 81            [12] 3490 	mov	a,sp
      000CC6 24 39            [12] 3491 	add	a,#0x39
      000CC8 F9               [12] 3492 	mov	r1,a
      000CC9 74 10            [12] 3493 	mov	a,#0x10
      000CCB 28               [12] 3494 	add	a,r0
      000CCC F7               [12] 3495 	mov	@r1,a
      000CCD D0 01            [24] 3496 	pop	ar1
      000CCF C0 00            [24] 3497 	push	ar0
      000CD1 E5 81            [12] 3498 	mov	a,sp
      000CD3 24 37            [12] 3499 	add	a,#0x37
      000CD5 F8               [12] 3500 	mov	r0,a
      000CD6 C0 01            [24] 3501 	push	ar1
      000CD8 E5 81            [12] 3502 	mov	a,sp
      000CDA 24 39            [12] 3503 	add	a,#0x39
      000CDC F9               [12] 3504 	mov	r1,a
      000CDD E6               [12] 3505 	mov	a,@r0
      000CDE F7               [12] 3506 	mov	@r1,a
      000CDF D0 01            [24] 3507 	pop	ar1
      000CE1 E5 81            [12] 3508 	mov	a,sp
      000CE3 24 39            [12] 3509 	add	a,#0x39
      000CE5 F8               [12] 3510 	mov	r0,a
      000CE6 C0 01            [24] 3511 	push	ar1
      000CE8 E5 81            [12] 3512 	mov	a,sp
      000CEA 24 3A            [12] 3513 	add	a,#0x3a
      000CEC F9               [12] 3514 	mov	r1,a
      000CED E6               [12] 3515 	mov	a,@r0
      000CEE F7               [12] 3516 	mov	@r1,a
      000CEF D0 01            [24] 3517 	pop	ar1
      000CF1 E5 81            [12] 3518 	mov	a,sp
      000CF3 24 37            [12] 3519 	add	a,#0x37
      000CF5 F8               [12] 3520 	mov	r0,a
      000CF6 C0 01            [24] 3521 	push	ar1
      000CF8 E5 81            [12] 3522 	mov	a,sp
      000CFA 24 3B            [12] 3523 	add	a,#0x3b
      000CFC F9               [12] 3524 	mov	r1,a
      000CFD E6               [12] 3525 	mov	a,@r0
      000CFE F7               [12] 3526 	mov	@r1,a
      000CFF D0 01            [24] 3527 	pop	ar1
      000D01 E5 81            [12] 3528 	mov	a,sp
      000D03 24 39            [12] 3529 	add	a,#0x39
      000D05 F8               [12] 3530 	mov	r0,a
      000D06 C0 01            [24] 3531 	push	ar1
      000D08 E5 81            [12] 3532 	mov	a,sp
      000D0A 24 3C            [12] 3533 	add	a,#0x3c
      000D0C F9               [12] 3534 	mov	r1,a
      000D0D E6               [12] 3535 	mov	a,@r0
      000D0E F7               [12] 3536 	mov	@r1,a
      000D0F D0 01            [24] 3537 	pop	ar1
      000D11 E5 81            [12] 3538 	mov	a,sp
      000D13 24 37            [12] 3539 	add	a,#0x37
      000D15 F8               [12] 3540 	mov	r0,a
      000D16 C0 01            [24] 3541 	push	ar1
      000D18 E5 81            [12] 3542 	mov	a,sp
      000D1A 24 3D            [12] 3543 	add	a,#0x3d
      000D1C F9               [12] 3544 	mov	r1,a
      000D1D E6               [12] 3545 	mov	a,@r0
      000D1E F7               [12] 3546 	mov	@r1,a
      000D1F D0 01            [24] 3547 	pop	ar1
      000D21 E5 81            [12] 3548 	mov	a,sp
      000D23 24 39            [12] 3549 	add	a,#0x39
      000D25 F8               [12] 3550 	mov	r0,a
      000D26 C0 01            [24] 3551 	push	ar1
      000D28 E5 81            [12] 3552 	mov	a,sp
      000D2A 24 3E            [12] 3553 	add	a,#0x3e
      000D2C F9               [12] 3554 	mov	r1,a
      000D2D E6               [12] 3555 	mov	a,@r0
      000D2E F7               [12] 3556 	mov	@r1,a
      000D2F D0 01            [24] 3557 	pop	ar1
      000D31 E5 81            [12] 3558 	mov	a,sp
      000D33 24 37            [12] 3559 	add	a,#0x37
      000D35 F8               [12] 3560 	mov	r0,a
      000D36 C0 01            [24] 3561 	push	ar1
      000D38 E5 81            [12] 3562 	mov	a,sp
      000D3A 24 3F            [12] 3563 	add	a,#0x3f
      000D3C F9               [12] 3564 	mov	r1,a
      000D3D E6               [12] 3565 	mov	a,@r0
      000D3E F7               [12] 3566 	mov	@r1,a
      000D3F D0 01            [24] 3567 	pop	ar1
      000D41 E5 81            [12] 3568 	mov	a,sp
      000D43 24 39            [12] 3569 	add	a,#0x39
      000D45 F8               [12] 3570 	mov	r0,a
      000D46 C0 01            [24] 3571 	push	ar1
      000D48 E5 81            [12] 3572 	mov	a,sp
      000D4A 24 40            [12] 3573 	add	a,#0x40
      000D4C F9               [12] 3574 	mov	r1,a
      000D4D E6               [12] 3575 	mov	a,@r0
      000D4E F7               [12] 3576 	mov	@r1,a
      000D4F D0 01            [24] 3577 	pop	ar1
      000D51 E5 81            [12] 3578 	mov	a,sp
      000D53 24 37            [12] 3579 	add	a,#0x37
      000D55 F8               [12] 3580 	mov	r0,a
      000D56 C0 01            [24] 3581 	push	ar1
      000D58 E5 81            [12] 3582 	mov	a,sp
      000D5A 24 41            [12] 3583 	add	a,#0x41
      000D5C F9               [12] 3584 	mov	r1,a
      000D5D E6               [12] 3585 	mov	a,@r0
      000D5E F7               [12] 3586 	mov	@r1,a
      000D5F D0 01            [24] 3587 	pop	ar1
      000D61 E5 81            [12] 3588 	mov	a,sp
      000D63 24 39            [12] 3589 	add	a,#0x39
      000D65 F8               [12] 3590 	mov	r0,a
      000D66 C0 01            [24] 3591 	push	ar1
      000D68 E5 81            [12] 3592 	mov	a,sp
      000D6A 24 42            [12] 3593 	add	a,#0x42
      000D6C F9               [12] 3594 	mov	r1,a
      000D6D E6               [12] 3595 	mov	a,@r0
      000D6E F7               [12] 3596 	mov	@r1,a
      000D6F D0 01            [24] 3597 	pop	ar1
      000D71 E5 81            [12] 3598 	mov	a,sp
      000D73 24 37            [12] 3599 	add	a,#0x37
      000D75 F8               [12] 3600 	mov	r0,a
      000D76 C0 01            [24] 3601 	push	ar1
      000D78 E5 81            [12] 3602 	mov	a,sp
      000D7A 24 43            [12] 3603 	add	a,#0x43
      000D7C F9               [12] 3604 	mov	r1,a
      000D7D E6               [12] 3605 	mov	a,@r0
      000D7E F7               [12] 3606 	mov	@r1,a
      000D7F D0 01            [24] 3607 	pop	ar1
      000D81 E5 81            [12] 3608 	mov	a,sp
      000D83 24 39            [12] 3609 	add	a,#0x39
      000D85 F8               [12] 3610 	mov	r0,a
      000D86 C0 01            [24] 3611 	push	ar1
      000D88 E5 81            [12] 3612 	mov	a,sp
      000D8A 24 44            [12] 3613 	add	a,#0x44
      000D8C F9               [12] 3614 	mov	r1,a
      000D8D E6               [12] 3615 	mov	a,@r0
      000D8E F7               [12] 3616 	mov	@r1,a
      000D8F D0 01            [24] 3617 	pop	ar1
      000D91 E5 81            [12] 3618 	mov	a,sp
      000D93 24 37            [12] 3619 	add	a,#0x37
      000D95 F8               [12] 3620 	mov	r0,a
      000D96 C0 01            [24] 3621 	push	ar1
      000D98 E5 81            [12] 3622 	mov	a,sp
      000D9A 24 45            [12] 3623 	add	a,#0x45
      000D9C F9               [12] 3624 	mov	r1,a
      000D9D E6               [12] 3625 	mov	a,@r0
      000D9E F7               [12] 3626 	mov	@r1,a
      000D9F D0 01            [24] 3627 	pop	ar1
      000DA1 E5 81            [12] 3628 	mov	a,sp
      000DA3 24 39            [12] 3629 	add	a,#0x39
      000DA5 F8               [12] 3630 	mov	r0,a
      000DA6 C0 01            [24] 3631 	push	ar1
      000DA8 E5 81            [12] 3632 	mov	a,sp
      000DAA 24 46            [12] 3633 	add	a,#0x46
      000DAC F9               [12] 3634 	mov	r1,a
      000DAD E6               [12] 3635 	mov	a,@r0
      000DAE F7               [12] 3636 	mov	@r1,a
      000DAF D0 01            [24] 3637 	pop	ar1
      000DB1 E5 81            [12] 3638 	mov	a,sp
      000DB3 24 37            [12] 3639 	add	a,#0x37
      000DB5 F8               [12] 3640 	mov	r0,a
      000DB6 C0 01            [24] 3641 	push	ar1
      000DB8 E5 81            [12] 3642 	mov	a,sp
      000DBA 24 47            [12] 3643 	add	a,#0x47
      000DBC F9               [12] 3644 	mov	r1,a
      000DBD E6               [12] 3645 	mov	a,@r0
      000DBE F7               [12] 3646 	mov	@r1,a
      000DBF D0 01            [24] 3647 	pop	ar1
      000DC1 E5 81            [12] 3648 	mov	a,sp
      000DC3 24 39            [12] 3649 	add	a,#0x39
      000DC5 F8               [12] 3650 	mov	r0,a
      000DC6 C0 01            [24] 3651 	push	ar1
      000DC8 E5 81            [12] 3652 	mov	a,sp
      000DCA 24 48            [12] 3653 	add	a,#0x48
      000DCC F9               [12] 3654 	mov	r1,a
      000DCD E6               [12] 3655 	mov	a,@r0
      000DCE F7               [12] 3656 	mov	@r1,a
      000DCF D0 01            [24] 3657 	pop	ar1
      000DD1 E5 81            [12] 3658 	mov	a,sp
      000DD3 24 37            [12] 3659 	add	a,#0x37
      000DD5 F8               [12] 3660 	mov	r0,a
      000DD6 C0 01            [24] 3661 	push	ar1
      000DD8 E5 81            [12] 3662 	mov	a,sp
      000DDA 24 49            [12] 3663 	add	a,#0x49
      000DDC F9               [12] 3664 	mov	r1,a
      000DDD E6               [12] 3665 	mov	a,@r0
      000DDE F7               [12] 3666 	mov	@r1,a
      000DDF D0 01            [24] 3667 	pop	ar1
      000DE1 E5 81            [12] 3668 	mov	a,sp
      000DE3 24 39            [12] 3669 	add	a,#0x39
      000DE5 F8               [12] 3670 	mov	r0,a
      000DE6 C0 01            [24] 3671 	push	ar1
      000DE8 E5 81            [12] 3672 	mov	a,sp
      000DEA 24 4A            [12] 3673 	add	a,#0x4a
      000DEC F9               [12] 3674 	mov	r1,a
      000DED E6               [12] 3675 	mov	a,@r0
      000DEE F7               [12] 3676 	mov	@r1,a
      000DEF D0 01            [24] 3677 	pop	ar1
      000DF1 E5 81            [12] 3678 	mov	a,sp
      000DF3 24 37            [12] 3679 	add	a,#0x37
      000DF5 F8               [12] 3680 	mov	r0,a
      000DF6 C0 01            [24] 3681 	push	ar1
      000DF8 E5 81            [12] 3682 	mov	a,sp
      000DFA 24 4B            [12] 3683 	add	a,#0x4b
      000DFC F9               [12] 3684 	mov	r1,a
      000DFD E6               [12] 3685 	mov	a,@r0
      000DFE F7               [12] 3686 	mov	@r1,a
      000DFF D0 01            [24] 3687 	pop	ar1
      000E01 E5 81            [12] 3688 	mov	a,sp
      000E03 24 39            [12] 3689 	add	a,#0x39
      000E05 F8               [12] 3690 	mov	r0,a
      000E06 C0 01            [24] 3691 	push	ar1
      000E08 E5 81            [12] 3692 	mov	a,sp
      000E0A 24 4C            [12] 3693 	add	a,#0x4c
      000E0C F9               [12] 3694 	mov	r1,a
      000E0D E6               [12] 3695 	mov	a,@r0
      000E0E F7               [12] 3696 	mov	@r1,a
      000E0F D0 01            [24] 3697 	pop	ar1
      000E11 E5 81            [12] 3698 	mov	a,sp
      000E13 24 37            [12] 3699 	add	a,#0x37
      000E15 F8               [12] 3700 	mov	r0,a
      000E16 C0 01            [24] 3701 	push	ar1
      000E18 E5 81            [12] 3702 	mov	a,sp
      000E1A 24 4D            [12] 3703 	add	a,#0x4d
      000E1C F9               [12] 3704 	mov	r1,a
      000E1D E6               [12] 3705 	mov	a,@r0
      000E1E F7               [12] 3706 	mov	@r1,a
      000E1F D0 01            [24] 3707 	pop	ar1
      000E21 E5 81            [12] 3708 	mov	a,sp
      000E23 24 EB            [12] 3709 	add	a,#0xeb
      000E25 F8               [12] 3710 	mov	r0,a
      000E26 E4               [12] 3711 	clr	a
      000E27 F6               [12] 3712 	mov	@r0,a
      000E28 08               [12] 3713 	inc	r0
      000E29 F6               [12] 3714 	mov	@r0,a
      000E2A D0 00            [24] 3715 	pop	ar0
                                   3716 ;	../../core/loader/elfloader.c:585: return ELFLOADER_NO_STARTPOINT;
                                   3717 ;	../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      000E2C                       3718 00205$:
      000E2C C0 00            [24] 3719 	push	ar0
      000E2E E5 81            [12] 3720 	mov	a,sp
      000E30 24 EB            [12] 3721 	add	a,#0xeb
      000E32 F8               [12] 3722 	mov	r0,a
      000E33 86 06            [24] 3723 	mov	ar6,@r0
      000E35 08               [12] 3724 	inc	r0
      000E36 86 07            [24] 3725 	mov	ar7,@r0
      000E38 E5 81            [12] 3726 	mov	a,sp
      000E3A 24 ED            [12] 3727 	add	a,#0xed
      000E3C F8               [12] 3728 	mov	r0,a
      000E3D C3               [12] 3729 	clr	c
      000E3E EE               [12] 3730 	mov	a,r6
      000E3F 96               [12] 3731 	subb	a,@r0
      000E40 EF               [12] 3732 	mov	a,r7
      000E41 08               [12] 3733 	inc	r0
      000E42 96               [12] 3734 	subb	a,@r0
      000E43 D0 00            [24] 3735 	pop	ar0
      000E45 40 03            [24] 3736 	jc	00336$
      000E47 02r14rE8         [24] 3737 	ljmp	00150$
      000E4A                       3738 00336$:
                                   3739 ;	../../core/loader/elfloader.c:421: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
      000E4A 8A 07            [24] 3740 	mov	ar7,r2
      000E4C 7E 00            [12] 3741 	mov	r6,#0x00
      000E4E 7C 40            [12] 3742 	mov	r4,#0x40
      000E50 C0 02            [24] 3743 	push	ar2
      000E52 C0 01            [24] 3744 	push	ar1
      000E54 C0 00            [24] 3745 	push	ar0
      000E56 74 28            [12] 3746 	mov	a,#0x28
      000E58 C0 E0            [24] 3747 	push	acc
      000E5A E4               [12] 3748 	clr	a
      000E5B C0 E0            [24] 3749 	push	acc
      000E5D C0 07            [24] 3750 	push	ar7
      000E5F C0 06            [24] 3751 	push	ar6
      000E61 C0 04            [24] 3752 	push	ar4
      000E63 85 00 F0         [24] 3753 	mov	b,ar0
      000E66 E5 81            [12] 3754 	mov	a,sp
      000E68 24 E2            [12] 3755 	add	a,#0xe2
      000E6A F8               [12] 3756 	mov	r0,a
      000E6B E6               [12] 3757 	mov	a,@r0
      000E6C C0 E0            [24] 3758 	push	acc
      000E6E 08               [12] 3759 	inc	r0
      000E6F E6               [12] 3760 	mov	a,@r0
      000E70 C0 E0            [24] 3761 	push	acc
      000E72 A8 F0            [24] 3762 	mov	r0,b
      000E74 C0 00            [24] 3763 	push	ar0
      000E76 E5 81            [12] 3764 	mov	a,sp
      000E78 24 0F            [12] 3765 	add	a,#0x0f
      000E7A F8               [12] 3766 	mov	r0,a
      000E7B 86 82            [24] 3767 	mov	dpl,@r0
      000E7D 08               [12] 3768 	inc	r0
      000E7E 86 83            [24] 3769 	mov	dph,@r0
      000E80 D0 00            [24] 3770 	pop	ar0
      000E82 12r00r00         [24] 3771 	lcall	_seek_read
      000E85 E5 81            [12] 3772 	mov	a,sp
      000E87 24 F9            [12] 3773 	add	a,#0xf9
      000E89 F5 81            [12] 3774 	mov	sp,a
      000E8B D0 00            [24] 3775 	pop	ar0
      000E8D D0 01            [24] 3776 	pop	ar1
      000E8F D0 02            [24] 3777 	pop	ar2
                                   3778 ;	../../core/loader/elfloader.c:424: nameptr = strs + shdr.sh_name;
      000E91 86 06            [24] 3779 	mov	ar6,@r0
      000E93 08               [12] 3780 	inc	r0
      000E94 86 07            [24] 3781 	mov	ar7,@r0
      000E96 18               [12] 3782 	dec	r0
      000E97 C0 00            [24] 3783 	push	ar0
      000E99 E5 81            [12] 3784 	mov	a,sp
      000E9B 24 57            [12] 3785 	add	a,#0x57
      000E9D F8               [12] 3786 	mov	r0,a
      000E9E EE               [12] 3787 	mov	a,r6
      000E9F 26               [12] 3788 	add	a,@r0
      000EA0 FE               [12] 3789 	mov	r6,a
      000EA1 EF               [12] 3790 	mov	a,r7
      000EA2 08               [12] 3791 	inc	r0
      000EA3 36               [12] 3792 	addc	a,@r0
      000EA4 FF               [12] 3793 	mov	r7,a
                                   3794 ;	../../core/loader/elfloader.c:425: seek_read(fd, nameptr, name, sizeof(name));
      000EA5 E5 81            [12] 3795 	mov	a,sp
      000EA7 24 2D            [12] 3796 	add	a,#0x2d
      000EA9 F8               [12] 3797 	mov	r0,a
      000EAA 86 03            [24] 3798 	mov	ar3,@r0
      000EAC 7C 00            [12] 3799 	mov	r4,#0x00
      000EAE 7D 40            [12] 3800 	mov	r5,#0x40
      000EB0 D0 00            [24] 3801 	pop	ar0
      000EB2 C0 02            [24] 3802 	push	ar2
      000EB4 C0 01            [24] 3803 	push	ar1
      000EB6 C0 00            [24] 3804 	push	ar0
      000EB8 74 0C            [12] 3805 	mov	a,#0x0c
      000EBA C0 E0            [24] 3806 	push	acc
      000EBC E4               [12] 3807 	clr	a
      000EBD C0 E0            [24] 3808 	push	acc
      000EBF C0 03            [24] 3809 	push	ar3
      000EC1 C0 04            [24] 3810 	push	ar4
      000EC3 C0 05            [24] 3811 	push	ar5
      000EC5 C0 06            [24] 3812 	push	ar6
      000EC7 C0 07            [24] 3813 	push	ar7
      000EC9 C0 00            [24] 3814 	push	ar0
      000ECB E5 81            [12] 3815 	mov	a,sp
      000ECD 24 0F            [12] 3816 	add	a,#0x0f
      000ECF F8               [12] 3817 	mov	r0,a
      000ED0 86 82            [24] 3818 	mov	dpl,@r0
      000ED2 08               [12] 3819 	inc	r0
      000ED3 86 83            [24] 3820 	mov	dph,@r0
      000ED5 D0 00            [24] 3821 	pop	ar0
      000ED7 12r00r00         [24] 3822 	lcall	_seek_read
      000EDA E5 81            [12] 3823 	mov	a,sp
      000EDC 24 F9            [12] 3824 	add	a,#0xf9
      000EDE F5 81            [12] 3825 	mov	sp,a
      000EE0 D0 00            [24] 3826 	pop	ar0
      000EE2 D0 01            [24] 3827 	pop	ar1
      000EE4 D0 02            [24] 3828 	pop	ar2
                                   3829 ;	../../core/loader/elfloader.c:435: if(shdr.sh_type == SHT_SYMTAB/*strncmp(name, ".symtab", 7) == 0*/) {
      000EE6 87 07            [24] 3830 	mov	ar7,@r1
      000EE8 09               [12] 3831 	inc	r1
      000EE9 87 06            [24] 3832 	mov	ar6,@r1
      000EEB 09               [12] 3833 	inc	r1
      000EEC 87 05            [24] 3834 	mov	ar5,@r1
      000EEE 09               [12] 3835 	inc	r1
      000EEF 87 04            [24] 3836 	mov	ar4,@r1
      000EF1 19               [12] 3837 	dec	r1
      000EF2 19               [12] 3838 	dec	r1
      000EF3 19               [12] 3839 	dec	r1
      000EF4 BF 02 3E         [24] 3840 	cjne	r7,#0x02,00148$
      000EF7 BE 00 3B         [24] 3841 	cjne	r6,#0x00,00148$
      000EFA BD 00 38         [24] 3842 	cjne	r5,#0x00,00148$
      000EFD BC 00 35         [24] 3843 	cjne	r4,#0x00,00148$
                                   3844 ;	../../core/loader/elfloader.c:437: symtaboff = shdr.sh_offset;
      000F00 C0 00            [24] 3845 	push	ar0
      000F02 E5 81            [12] 3846 	mov	a,sp
      000F04 24 4D            [12] 3847 	add	a,#0x4d
      000F06 F8               [12] 3848 	mov	r0,a
      000F07 C0 01            [24] 3849 	push	ar1
      000F09 E5 81            [12] 3850 	mov	a,sp
      000F0B 24 F9            [12] 3851 	add	a,#0xf9
      000F0D F9               [12] 3852 	mov	r1,a
      000F0E 86 00            [24] 3853 	mov	ar0,@r0
      000F10 E6               [12] 3854 	mov	a,@r0
      000F11 F7               [12] 3855 	mov	@r1,a
      000F12 08               [12] 3856 	inc	r0
      000F13 E6               [12] 3857 	mov	a,@r0
      000F14 09               [12] 3858 	inc	r1
      000F15 F7               [12] 3859 	mov	@r1,a
      000F16 18               [12] 3860 	dec	r0
      000F17 D0 01            [24] 3861 	pop	ar1
                                   3862 ;	../../core/loader/elfloader.c:438: symtabsize = shdr.sh_size;
      000F19 E5 81            [12] 3863 	mov	a,sp
      000F1B 24 4E            [12] 3864 	add	a,#0x4e
      000F1D F8               [12] 3865 	mov	r0,a
      000F1E C0 01            [24] 3866 	push	ar1
      000F20 E5 81            [12] 3867 	mov	a,sp
      000F22 24 FB            [12] 3868 	add	a,#0xfb
      000F24 F9               [12] 3869 	mov	r1,a
      000F25 86 00            [24] 3870 	mov	ar0,@r0
      000F27 E6               [12] 3871 	mov	a,@r0
      000F28 F7               [12] 3872 	mov	@r1,a
      000F29 08               [12] 3873 	inc	r0
      000F2A E6               [12] 3874 	mov	a,@r0
      000F2B 09               [12] 3875 	inc	r1
      000F2C F7               [12] 3876 	mov	@r1,a
      000F2D 18               [12] 3877 	dec	r0
      000F2E D0 01            [24] 3878 	pop	ar1
      000F30 D0 00            [24] 3879 	pop	ar0
      000F32 02r14rB6         [24] 3880 	ljmp	00149$
      000F35                       3881 00148$:
                                   3882 ;	../../core/loader/elfloader.c:439: } else if(shdr.sh_type == SHT_STRTAB/*strncmp(name, ".strtab", 7) == 0*/) {
      000F35 BF 03 3E         [24] 3883 	cjne	r7,#0x03,00145$
      000F38 BE 00 3B         [24] 3884 	cjne	r6,#0x00,00145$
      000F3B BD 00 38         [24] 3885 	cjne	r5,#0x00,00145$
      000F3E BC 00 35         [24] 3886 	cjne	r4,#0x00,00145$
                                   3887 ;	../../core/loader/elfloader.c:441: strtaboff = shdr.sh_offset;
      000F41 C0 00            [24] 3888 	push	ar0
      000F43 E5 81            [12] 3889 	mov	a,sp
      000F45 24 4B            [12] 3890 	add	a,#0x4b
      000F47 F8               [12] 3891 	mov	r0,a
      000F48 C0 01            [24] 3892 	push	ar1
      000F4A E5 81            [12] 3893 	mov	a,sp
      000F4C 24 FD            [12] 3894 	add	a,#0xfd
      000F4E F9               [12] 3895 	mov	r1,a
      000F4F 86 00            [24] 3896 	mov	ar0,@r0
      000F51 E6               [12] 3897 	mov	a,@r0
      000F52 F7               [12] 3898 	mov	@r1,a
      000F53 08               [12] 3899 	inc	r0
      000F54 E6               [12] 3900 	mov	a,@r0
      000F55 09               [12] 3901 	inc	r1
      000F56 F7               [12] 3902 	mov	@r1,a
      000F57 18               [12] 3903 	dec	r0
      000F58 D0 01            [24] 3904 	pop	ar1
                                   3905 ;	../../core/loader/elfloader.c:442: strtabsize = shdr.sh_size;
      000F5A E5 81            [12] 3906 	mov	a,sp
      000F5C 24 4C            [12] 3907 	add	a,#0x4c
      000F5E F8               [12] 3908 	mov	r0,a
      000F5F C0 01            [24] 3909 	push	ar1
      000F61 E5 81            [12] 3910 	mov	a,sp
      000F63 24 20            [12] 3911 	add	a,#0x20
      000F65 F9               [12] 3912 	mov	r1,a
      000F66 86 00            [24] 3913 	mov	ar0,@r0
      000F68 E6               [12] 3914 	mov	a,@r0
      000F69 F7               [12] 3915 	mov	@r1,a
      000F6A 08               [12] 3916 	inc	r0
      000F6B E6               [12] 3917 	mov	a,@r0
      000F6C 09               [12] 3918 	inc	r1
      000F6D F7               [12] 3919 	mov	@r1,a
      000F6E 18               [12] 3920 	dec	r0
      000F6F D0 01            [24] 3921 	pop	ar1
      000F71 D0 00            [24] 3922 	pop	ar0
      000F73 02r14rB6         [24] 3923 	ljmp	00149$
      000F76                       3924 00145$:
                                   3925 ;	../../core/loader/elfloader.c:443: } else if(strncmp(name, ".text", 5) == 0) {
      000F76 C0 00            [24] 3926 	push	ar0
      000F78 E5 81            [12] 3927 	mov	a,sp
      000F7A 24 2E            [12] 3928 	add	a,#0x2e
      000F7C F8               [12] 3929 	mov	r0,a
      000F7D 86 04            [24] 3930 	mov	ar4,@r0
      000F7F 7E 00            [12] 3931 	mov	r6,#0x00
      000F81 7F 40            [12] 3932 	mov	r7,#0x40
      000F83 D0 00            [24] 3933 	pop	ar0
      000F85 C0 02            [24] 3934 	push	ar2
      000F87 C0 01            [24] 3935 	push	ar1
      000F89 C0 00            [24] 3936 	push	ar0
      000F8B 74 05            [12] 3937 	mov	a,#0x05
      000F8D C0 E0            [24] 3938 	push	acc
      000F8F E4               [12] 3939 	clr	a
      000F90 C0 E0            [24] 3940 	push	acc
      000F92 74r1B            [12] 3941 	mov	a,#___str_1
      000F94 C0 E0            [24] 3942 	push	acc
      000F96 74s00            [12] 3943 	mov	a,#(___str_1 >> 8)
      000F98 C0 E0            [24] 3944 	push	acc
      000F9A 74 80            [12] 3945 	mov	a,#0x80
      000F9C C0 E0            [24] 3946 	push	acc
      000F9E 8C 82            [24] 3947 	mov	dpl,r4
      000FA0 8E 83            [24] 3948 	mov	dph,r6
      000FA2 8F F0            [24] 3949 	mov	b,r7
      000FA4 12r00r00         [24] 3950 	lcall	_strncmp
      000FA7 AE 82            [24] 3951 	mov	r6,dpl
      000FA9 AF 83            [24] 3952 	mov	r7,dph
      000FAB E5 81            [12] 3953 	mov	a,sp
      000FAD 24 FB            [12] 3954 	add	a,#0xfb
      000FAF F5 81            [12] 3955 	mov	sp,a
      000FB1 D0 00            [24] 3956 	pop	ar0
      000FB3 D0 01            [24] 3957 	pop	ar1
      000FB5 D0 02            [24] 3958 	pop	ar2
      000FB7 EE               [12] 3959 	mov	a,r6
      000FB8 4F               [12] 3960 	orl	a,r7
      000FB9 70 53            [24] 3961 	jnz	00142$
                                   3962 ;	../../core/loader/elfloader.c:444: textoff = shdr.sh_offset;
      000FBB C0 00            [24] 3963 	push	ar0
      000FBD E5 81            [12] 3964 	mov	a,sp
      000FBF 24 49            [12] 3965 	add	a,#0x49
      000FC1 F8               [12] 3966 	mov	r0,a
      000FC2 C0 01            [24] 3967 	push	ar1
      000FC4 E5 81            [12] 3968 	mov	a,sp
      000FC6 24 F1            [12] 3969 	add	a,#0xf1
      000FC8 F9               [12] 3970 	mov	r1,a
      000FC9 86 00            [24] 3971 	mov	ar0,@r0
      000FCB E6               [12] 3972 	mov	a,@r0
      000FCC F7               [12] 3973 	mov	@r1,a
      000FCD 08               [12] 3974 	inc	r0
      000FCE E6               [12] 3975 	mov	a,@r0
      000FCF 09               [12] 3976 	inc	r1
      000FD0 F7               [12] 3977 	mov	@r1,a
      000FD1 18               [12] 3978 	dec	r0
      000FD2 D0 01            [24] 3979 	pop	ar1
                                   3980 ;	../../core/loader/elfloader.c:445: textsize = shdr.sh_size;
      000FD4 E5 81            [12] 3981 	mov	a,sp
      000FD6 24 4A            [12] 3982 	add	a,#0x4a
      000FD8 F8               [12] 3983 	mov	r0,a
      000FD9 C0 01            [24] 3984 	push	ar1
      000FDB E5 81            [12] 3985 	mov	a,sp
      000FDD 24 F3            [12] 3986 	add	a,#0xf3
      000FDF F9               [12] 3987 	mov	r1,a
      000FE0 86 00            [24] 3988 	mov	ar0,@r0
      000FE2 E6               [12] 3989 	mov	a,@r0
      000FE3 F7               [12] 3990 	mov	@r1,a
      000FE4 08               [12] 3991 	inc	r0
      000FE5 E6               [12] 3992 	mov	a,@r0
      000FE6 09               [12] 3993 	inc	r1
      000FE7 F7               [12] 3994 	mov	@r1,a
      000FE8 18               [12] 3995 	dec	r0
      000FE9 D0 01            [24] 3996 	pop	ar1
                                   3997 ;	../../core/loader/elfloader.c:446: text.number = i;
      000FEB E5 81            [12] 3998 	mov	a,sp
      000FED 24 EB            [12] 3999 	add	a,#0xeb
      000FEF F8               [12] 4000 	mov	r0,a
      000FF0 86 07            [24] 4001 	mov	ar7,@r0
      000FF2 90r00r33         [24] 4002 	mov	dptr,#_text
      000FF5 EF               [12] 4003 	mov	a,r7
      000FF6 F0               [24] 4004 	movx	@dptr,a
                                   4005 ;	../../core/loader/elfloader.c:447: text.offset = textoff;
      000FF7 E5 81            [12] 4006 	mov	a,sp
      000FF9 24 F2            [12] 4007 	add	a,#0xf2
      000FFB F8               [12] 4008 	mov	r0,a
      000FFC 86 03            [24] 4009 	mov	ar3,@r0
      000FFE 08               [12] 4010 	inc	r0
      000FFF 86 04            [24] 4011 	mov	ar4,@r0
      001001 D0 00            [24] 4012 	pop	ar0
      001003 90r00r34         [24] 4013 	mov	dptr,#(_text + 0x0001)
      001006 EB               [12] 4014 	mov	a,r3
      001007 F0               [24] 4015 	movx	@dptr,a
      001008 EC               [12] 4016 	mov	a,r4
      001009 A3               [24] 4017 	inc	dptr
      00100A F0               [24] 4018 	movx	@dptr,a
      00100B 02r14rB6         [24] 4019 	ljmp	00149$
      00100E                       4020 00142$:
                                   4021 ;	../../core/loader/elfloader.c:448: } else if(strncmp(name, ".rel.text", 9) == 0) {
      00100E C0 00            [24] 4022 	push	ar0
      001010 E5 81            [12] 4023 	mov	a,sp
      001012 24 2F            [12] 4024 	add	a,#0x2f
      001014 F8               [12] 4025 	mov	r0,a
      001015 86 04            [24] 4026 	mov	ar4,@r0
      001017 7E 00            [12] 4027 	mov	r6,#0x00
      001019 7F 40            [12] 4028 	mov	r7,#0x40
      00101B D0 00            [24] 4029 	pop	ar0
      00101D C0 02            [24] 4030 	push	ar2
      00101F C0 01            [24] 4031 	push	ar1
      001021 C0 00            [24] 4032 	push	ar0
      001023 74 09            [12] 4033 	mov	a,#0x09
      001025 C0 E0            [24] 4034 	push	acc
      001027 E4               [12] 4035 	clr	a
      001028 C0 E0            [24] 4036 	push	acc
      00102A 74r21            [12] 4037 	mov	a,#___str_2
      00102C C0 E0            [24] 4038 	push	acc
      00102E 74s00            [12] 4039 	mov	a,#(___str_2 >> 8)
      001030 C0 E0            [24] 4040 	push	acc
      001032 74 80            [12] 4041 	mov	a,#0x80
      001034 C0 E0            [24] 4042 	push	acc
      001036 8C 82            [24] 4043 	mov	dpl,r4
      001038 8E 83            [24] 4044 	mov	dph,r6
      00103A 8F F0            [24] 4045 	mov	b,r7
      00103C 12r00r00         [24] 4046 	lcall	_strncmp
      00103F AE 82            [24] 4047 	mov	r6,dpl
      001041 AF 83            [24] 4048 	mov	r7,dph
      001043 E5 81            [12] 4049 	mov	a,sp
      001045 24 FB            [12] 4050 	add	a,#0xfb
      001047 F5 81            [12] 4051 	mov	sp,a
      001049 D0 00            [24] 4052 	pop	ar0
      00104B D0 01            [24] 4053 	pop	ar1
      00104D D0 02            [24] 4054 	pop	ar2
      00104F EE               [12] 4055 	mov	a,r6
      001050 4F               [12] 4056 	orl	a,r7
      001051 70 3C            [24] 4057 	jnz	00139$
                                   4058 ;	../../core/loader/elfloader.c:449: using_relas = 0;
      001053 C0 00            [24] 4059 	push	ar0
      001055 E5 81            [12] 4060 	mov	a,sp
      001057 24 F1            [12] 4061 	add	a,#0xf1
      001059 F8               [12] 4062 	mov	r0,a
      00105A 76 00            [12] 4063 	mov	@r0,#0x00
                                   4064 ;	../../core/loader/elfloader.c:450: textrelaoff = shdr.sh_offset;
      00105C E5 81            [12] 4065 	mov	a,sp
      00105E 24 47            [12] 4066 	add	a,#0x47
      001060 F8               [12] 4067 	mov	r0,a
      001061 C0 01            [24] 4068 	push	ar1
      001063 E5 81            [12] 4069 	mov	a,sp
      001065 24 52            [12] 4070 	add	a,#0x52
      001067 F9               [12] 4071 	mov	r1,a
      001068 86 00            [24] 4072 	mov	ar0,@r0
      00106A E6               [12] 4073 	mov	a,@r0
      00106B F7               [12] 4074 	mov	@r1,a
      00106C 08               [12] 4075 	inc	r0
      00106D E6               [12] 4076 	mov	a,@r0
      00106E 09               [12] 4077 	inc	r1
      00106F F7               [12] 4078 	mov	@r1,a
      001070 18               [12] 4079 	dec	r0
      001071 D0 01            [24] 4080 	pop	ar1
                                   4081 ;	../../core/loader/elfloader.c:451: textrelasize = shdr.sh_size;
      001073 E5 81            [12] 4082 	mov	a,sp
      001075 24 48            [12] 4083 	add	a,#0x48
      001077 F8               [12] 4084 	mov	r0,a
      001078 C0 01            [24] 4085 	push	ar1
      00107A E5 81            [12] 4086 	mov	a,sp
      00107C 24 2A            [12] 4087 	add	a,#0x2a
      00107E F9               [12] 4088 	mov	r1,a
      00107F 86 00            [24] 4089 	mov	ar0,@r0
      001081 E6               [12] 4090 	mov	a,@r0
      001082 F7               [12] 4091 	mov	@r1,a
      001083 08               [12] 4092 	inc	r0
      001084 E6               [12] 4093 	mov	a,@r0
      001085 09               [12] 4094 	inc	r1
      001086 F7               [12] 4095 	mov	@r1,a
      001087 18               [12] 4096 	dec	r0
      001088 D0 01            [24] 4097 	pop	ar1
      00108A D0 00            [24] 4098 	pop	ar0
      00108C 02r14rB6         [24] 4099 	ljmp	00149$
      00108F                       4100 00139$:
                                   4101 ;	../../core/loader/elfloader.c:452: } else if(strncmp(name, ".rela.text", 10) == 0) {
      00108F C0 00            [24] 4102 	push	ar0
      001091 E5 81            [12] 4103 	mov	a,sp
      001093 24 30            [12] 4104 	add	a,#0x30
      001095 F8               [12] 4105 	mov	r0,a
      001096 86 04            [24] 4106 	mov	ar4,@r0
      001098 7E 00            [12] 4107 	mov	r6,#0x00
      00109A 7F 40            [12] 4108 	mov	r7,#0x40
      00109C D0 00            [24] 4109 	pop	ar0
      00109E C0 02            [24] 4110 	push	ar2
      0010A0 C0 01            [24] 4111 	push	ar1
      0010A2 C0 00            [24] 4112 	push	ar0
      0010A4 74 0A            [12] 4113 	mov	a,#0x0a
      0010A6 C0 E0            [24] 4114 	push	acc
      0010A8 E4               [12] 4115 	clr	a
      0010A9 C0 E0            [24] 4116 	push	acc
      0010AB 74r2B            [12] 4117 	mov	a,#___str_3
      0010AD C0 E0            [24] 4118 	push	acc
      0010AF 74s00            [12] 4119 	mov	a,#(___str_3 >> 8)
      0010B1 C0 E0            [24] 4120 	push	acc
      0010B3 74 80            [12] 4121 	mov	a,#0x80
      0010B5 C0 E0            [24] 4122 	push	acc
      0010B7 8C 82            [24] 4123 	mov	dpl,r4
      0010B9 8E 83            [24] 4124 	mov	dph,r6
      0010BB 8F F0            [24] 4125 	mov	b,r7
      0010BD 12r00r00         [24] 4126 	lcall	_strncmp
      0010C0 AE 82            [24] 4127 	mov	r6,dpl
      0010C2 AF 83            [24] 4128 	mov	r7,dph
      0010C4 E5 81            [12] 4129 	mov	a,sp
      0010C6 24 FB            [12] 4130 	add	a,#0xfb
      0010C8 F5 81            [12] 4131 	mov	sp,a
      0010CA D0 00            [24] 4132 	pop	ar0
      0010CC D0 01            [24] 4133 	pop	ar1
      0010CE D0 02            [24] 4134 	pop	ar2
      0010D0 EE               [12] 4135 	mov	a,r6
      0010D1 4F               [12] 4136 	orl	a,r7
      0010D2 70 3C            [24] 4137 	jnz	00136$
                                   4138 ;	../../core/loader/elfloader.c:453: using_relas = 1;
      0010D4 C0 00            [24] 4139 	push	ar0
      0010D6 E5 81            [12] 4140 	mov	a,sp
      0010D8 24 F1            [12] 4141 	add	a,#0xf1
      0010DA F8               [12] 4142 	mov	r0,a
      0010DB 76 01            [12] 4143 	mov	@r0,#0x01
                                   4144 ;	../../core/loader/elfloader.c:454: textrelaoff = shdr.sh_offset;
      0010DD E5 81            [12] 4145 	mov	a,sp
      0010DF 24 45            [12] 4146 	add	a,#0x45
      0010E1 F8               [12] 4147 	mov	r0,a
      0010E2 C0 01            [24] 4148 	push	ar1
      0010E4 E5 81            [12] 4149 	mov	a,sp
      0010E6 24 52            [12] 4150 	add	a,#0x52
      0010E8 F9               [12] 4151 	mov	r1,a
      0010E9 86 00            [24] 4152 	mov	ar0,@r0
      0010EB E6               [12] 4153 	mov	a,@r0
      0010EC F7               [12] 4154 	mov	@r1,a
      0010ED 08               [12] 4155 	inc	r0
      0010EE E6               [12] 4156 	mov	a,@r0
      0010EF 09               [12] 4157 	inc	r1
      0010F0 F7               [12] 4158 	mov	@r1,a
      0010F1 18               [12] 4159 	dec	r0
      0010F2 D0 01            [24] 4160 	pop	ar1
                                   4161 ;	../../core/loader/elfloader.c:455: textrelasize = shdr.sh_size;
      0010F4 E5 81            [12] 4162 	mov	a,sp
      0010F6 24 46            [12] 4163 	add	a,#0x46
      0010F8 F8               [12] 4164 	mov	r0,a
      0010F9 C0 01            [24] 4165 	push	ar1
      0010FB E5 81            [12] 4166 	mov	a,sp
      0010FD 24 2A            [12] 4167 	add	a,#0x2a
      0010FF F9               [12] 4168 	mov	r1,a
      001100 86 00            [24] 4169 	mov	ar0,@r0
      001102 E6               [12] 4170 	mov	a,@r0
      001103 F7               [12] 4171 	mov	@r1,a
      001104 08               [12] 4172 	inc	r0
      001105 E6               [12] 4173 	mov	a,@r0
      001106 09               [12] 4174 	inc	r1
      001107 F7               [12] 4175 	mov	@r1,a
      001108 18               [12] 4176 	dec	r0
      001109 D0 01            [24] 4177 	pop	ar1
      00110B D0 00            [24] 4178 	pop	ar0
      00110D 02r14rB6         [24] 4179 	ljmp	00149$
      001110                       4180 00136$:
                                   4181 ;	../../core/loader/elfloader.c:456: } else if(strncmp(name, ".data", 5) == 0) {
      001110 C0 00            [24] 4182 	push	ar0
      001112 E5 81            [12] 4183 	mov	a,sp
      001114 24 31            [12] 4184 	add	a,#0x31
      001116 F8               [12] 4185 	mov	r0,a
      001117 86 04            [24] 4186 	mov	ar4,@r0
      001119 7E 00            [12] 4187 	mov	r6,#0x00
      00111B 7F 40            [12] 4188 	mov	r7,#0x40
      00111D D0 00            [24] 4189 	pop	ar0
      00111F C0 02            [24] 4190 	push	ar2
      001121 C0 01            [24] 4191 	push	ar1
      001123 C0 00            [24] 4192 	push	ar0
      001125 74 05            [12] 4193 	mov	a,#0x05
      001127 C0 E0            [24] 4194 	push	acc
      001129 E4               [12] 4195 	clr	a
      00112A C0 E0            [24] 4196 	push	acc
      00112C 74r36            [12] 4197 	mov	a,#___str_4
      00112E C0 E0            [24] 4198 	push	acc
      001130 74s00            [12] 4199 	mov	a,#(___str_4 >> 8)
      001132 C0 E0            [24] 4200 	push	acc
      001134 74 80            [12] 4201 	mov	a,#0x80
      001136 C0 E0            [24] 4202 	push	acc
      001138 8C 82            [24] 4203 	mov	dpl,r4
      00113A 8E 83            [24] 4204 	mov	dph,r6
      00113C 8F F0            [24] 4205 	mov	b,r7
      00113E 12r00r00         [24] 4206 	lcall	_strncmp
      001141 AE 82            [24] 4207 	mov	r6,dpl
      001143 AF 83            [24] 4208 	mov	r7,dph
      001145 E5 81            [12] 4209 	mov	a,sp
      001147 24 FB            [12] 4210 	add	a,#0xfb
      001149 F5 81            [12] 4211 	mov	sp,a
      00114B D0 00            [24] 4212 	pop	ar0
      00114D D0 01            [24] 4213 	pop	ar1
      00114F D0 02            [24] 4214 	pop	ar2
      001151 EE               [12] 4215 	mov	a,r6
      001152 4F               [12] 4216 	orl	a,r7
      001153 70 53            [24] 4217 	jnz	00133$
                                   4218 ;	../../core/loader/elfloader.c:457: dataoff = shdr.sh_offset;
      001155 C0 00            [24] 4219 	push	ar0
      001157 E5 81            [12] 4220 	mov	a,sp
      001159 24 43            [12] 4221 	add	a,#0x43
      00115B F8               [12] 4222 	mov	r0,a
      00115C C0 01            [24] 4223 	push	ar1
      00115E E5 81            [12] 4224 	mov	a,sp
      001160 24 F5            [12] 4225 	add	a,#0xf5
      001162 F9               [12] 4226 	mov	r1,a
      001163 86 00            [24] 4227 	mov	ar0,@r0
      001165 E6               [12] 4228 	mov	a,@r0
      001166 F7               [12] 4229 	mov	@r1,a
      001167 08               [12] 4230 	inc	r0
      001168 E6               [12] 4231 	mov	a,@r0
      001169 09               [12] 4232 	inc	r1
      00116A F7               [12] 4233 	mov	@r1,a
      00116B 18               [12] 4234 	dec	r0
      00116C D0 01            [24] 4235 	pop	ar1
                                   4236 ;	../../core/loader/elfloader.c:458: datasize = shdr.sh_size;
      00116E E5 81            [12] 4237 	mov	a,sp
      001170 24 44            [12] 4238 	add	a,#0x44
      001172 F8               [12] 4239 	mov	r0,a
      001173 C0 01            [24] 4240 	push	ar1
      001175 E5 81            [12] 4241 	mov	a,sp
      001177 24 28            [12] 4242 	add	a,#0x28
      001179 F9               [12] 4243 	mov	r1,a
      00117A 86 00            [24] 4244 	mov	ar0,@r0
      00117C E6               [12] 4245 	mov	a,@r0
      00117D F7               [12] 4246 	mov	@r1,a
      00117E 08               [12] 4247 	inc	r0
      00117F E6               [12] 4248 	mov	a,@r0
      001180 09               [12] 4249 	inc	r1
      001181 F7               [12] 4250 	mov	@r1,a
      001182 18               [12] 4251 	dec	r0
      001183 D0 01            [24] 4252 	pop	ar1
                                   4253 ;	../../core/loader/elfloader.c:459: data.number = i;
      001185 E5 81            [12] 4254 	mov	a,sp
      001187 24 EB            [12] 4255 	add	a,#0xeb
      001189 F8               [12] 4256 	mov	r0,a
      00118A 86 07            [24] 4257 	mov	ar7,@r0
      00118C 90r00r27         [24] 4258 	mov	dptr,#_data
      00118F EF               [12] 4259 	mov	a,r7
      001190 F0               [24] 4260 	movx	@dptr,a
                                   4261 ;	../../core/loader/elfloader.c:460: data.offset = dataoff;
      001191 E5 81            [12] 4262 	mov	a,sp
      001193 24 F6            [12] 4263 	add	a,#0xf6
      001195 F8               [12] 4264 	mov	r0,a
      001196 86 03            [24] 4265 	mov	ar3,@r0
      001198 08               [12] 4266 	inc	r0
      001199 86 04            [24] 4267 	mov	ar4,@r0
      00119B D0 00            [24] 4268 	pop	ar0
      00119D 90r00r28         [24] 4269 	mov	dptr,#(_data + 0x0001)
      0011A0 EB               [12] 4270 	mov	a,r3
      0011A1 F0               [24] 4271 	movx	@dptr,a
      0011A2 EC               [12] 4272 	mov	a,r4
      0011A3 A3               [24] 4273 	inc	dptr
      0011A4 F0               [24] 4274 	movx	@dptr,a
      0011A5 02r14rB6         [24] 4275 	ljmp	00149$
      0011A8                       4276 00133$:
                                   4277 ;	../../core/loader/elfloader.c:461: } else if(strncmp(name, ".rodata", 7) == 0) {
      0011A8 C0 00            [24] 4278 	push	ar0
      0011AA E5 81            [12] 4279 	mov	a,sp
      0011AC 24 32            [12] 4280 	add	a,#0x32
      0011AE F8               [12] 4281 	mov	r0,a
      0011AF 86 04            [24] 4282 	mov	ar4,@r0
      0011B1 7E 00            [12] 4283 	mov	r6,#0x00
      0011B3 7F 40            [12] 4284 	mov	r7,#0x40
      0011B5 D0 00            [24] 4285 	pop	ar0
      0011B7 C0 02            [24] 4286 	push	ar2
      0011B9 C0 01            [24] 4287 	push	ar1
      0011BB C0 00            [24] 4288 	push	ar0
      0011BD 74 07            [12] 4289 	mov	a,#0x07
      0011BF C0 E0            [24] 4290 	push	acc
      0011C1 E4               [12] 4291 	clr	a
      0011C2 C0 E0            [24] 4292 	push	acc
      0011C4 74r3C            [12] 4293 	mov	a,#___str_5
      0011C6 C0 E0            [24] 4294 	push	acc
      0011C8 74s00            [12] 4295 	mov	a,#(___str_5 >> 8)
      0011CA C0 E0            [24] 4296 	push	acc
      0011CC 74 80            [12] 4297 	mov	a,#0x80
      0011CE C0 E0            [24] 4298 	push	acc
      0011D0 8C 82            [24] 4299 	mov	dpl,r4
      0011D2 8E 83            [24] 4300 	mov	dph,r6
      0011D4 8F F0            [24] 4301 	mov	b,r7
      0011D6 12r00r00         [24] 4302 	lcall	_strncmp
      0011D9 AE 82            [24] 4303 	mov	r6,dpl
      0011DB AF 83            [24] 4304 	mov	r7,dph
      0011DD E5 81            [12] 4305 	mov	a,sp
      0011DF 24 FB            [12] 4306 	add	a,#0xfb
      0011E1 F5 81            [12] 4307 	mov	sp,a
      0011E3 D0 00            [24] 4308 	pop	ar0
      0011E5 D0 01            [24] 4309 	pop	ar1
      0011E7 D0 02            [24] 4310 	pop	ar2
      0011E9 EE               [12] 4311 	mov	a,r6
      0011EA 4F               [12] 4312 	orl	a,r7
      0011EB 70 53            [24] 4313 	jnz	00130$
                                   4314 ;	../../core/loader/elfloader.c:463: rodataoff = shdr.sh_offset;
      0011ED C0 00            [24] 4315 	push	ar0
      0011EF E5 81            [12] 4316 	mov	a,sp
      0011F1 24 41            [12] 4317 	add	a,#0x41
      0011F3 F8               [12] 4318 	mov	r0,a
      0011F4 C0 01            [24] 4319 	push	ar1
      0011F6 E5 81            [12] 4320 	mov	a,sp
      0011F8 24 F7            [12] 4321 	add	a,#0xf7
      0011FA F9               [12] 4322 	mov	r1,a
      0011FB 86 00            [24] 4323 	mov	ar0,@r0
      0011FD E6               [12] 4324 	mov	a,@r0
      0011FE F7               [12] 4325 	mov	@r1,a
      0011FF 08               [12] 4326 	inc	r0
      001200 E6               [12] 4327 	mov	a,@r0
      001201 09               [12] 4328 	inc	r1
      001202 F7               [12] 4329 	mov	@r1,a
      001203 18               [12] 4330 	dec	r0
      001204 D0 01            [24] 4331 	pop	ar1
                                   4332 ;	../../core/loader/elfloader.c:464: rodatasize = shdr.sh_size;
      001206 E5 81            [12] 4333 	mov	a,sp
      001208 24 42            [12] 4334 	add	a,#0x42
      00120A F8               [12] 4335 	mov	r0,a
      00120B C0 01            [24] 4336 	push	ar1
      00120D E5 81            [12] 4337 	mov	a,sp
      00120F 24 24            [12] 4338 	add	a,#0x24
      001211 F9               [12] 4339 	mov	r1,a
      001212 86 00            [24] 4340 	mov	ar0,@r0
      001214 E6               [12] 4341 	mov	a,@r0
      001215 F7               [12] 4342 	mov	@r1,a
      001216 08               [12] 4343 	inc	r0
      001217 E6               [12] 4344 	mov	a,@r0
      001218 09               [12] 4345 	inc	r1
      001219 F7               [12] 4346 	mov	@r1,a
      00121A 18               [12] 4347 	dec	r0
      00121B D0 01            [24] 4348 	pop	ar1
                                   4349 ;	../../core/loader/elfloader.c:465: rodata.number = i;
      00121D E5 81            [12] 4350 	mov	a,sp
      00121F 24 EB            [12] 4351 	add	a,#0xeb
      001221 F8               [12] 4352 	mov	r0,a
      001222 86 07            [24] 4353 	mov	ar7,@r0
      001224 90r00r2D         [24] 4354 	mov	dptr,#_rodata
      001227 EF               [12] 4355 	mov	a,r7
      001228 F0               [24] 4356 	movx	@dptr,a
                                   4357 ;	../../core/loader/elfloader.c:466: rodata.offset = rodataoff;
      001229 E5 81            [12] 4358 	mov	a,sp
      00122B 24 F8            [12] 4359 	add	a,#0xf8
      00122D F8               [12] 4360 	mov	r0,a
      00122E 86 03            [24] 4361 	mov	ar3,@r0
      001230 08               [12] 4362 	inc	r0
      001231 86 04            [24] 4363 	mov	ar4,@r0
      001233 D0 00            [24] 4364 	pop	ar0
      001235 90r00r2E         [24] 4365 	mov	dptr,#(_rodata + 0x0001)
      001238 EB               [12] 4366 	mov	a,r3
      001239 F0               [24] 4367 	movx	@dptr,a
      00123A EC               [12] 4368 	mov	a,r4
      00123B A3               [24] 4369 	inc	dptr
      00123C F0               [24] 4370 	movx	@dptr,a
      00123D 02r14rB6         [24] 4371 	ljmp	00149$
      001240                       4372 00130$:
                                   4373 ;	../../core/loader/elfloader.c:467: } else if(strncmp(name, ".rel.rodata", 11) == 0) {
      001240 C0 00            [24] 4374 	push	ar0
      001242 E5 81            [12] 4375 	mov	a,sp
      001244 24 33            [12] 4376 	add	a,#0x33
      001246 F8               [12] 4377 	mov	r0,a
      001247 86 04            [24] 4378 	mov	ar4,@r0
      001249 7E 00            [12] 4379 	mov	r6,#0x00
      00124B 7F 40            [12] 4380 	mov	r7,#0x40
      00124D D0 00            [24] 4381 	pop	ar0
      00124F C0 02            [24] 4382 	push	ar2
      001251 C0 01            [24] 4383 	push	ar1
      001253 C0 00            [24] 4384 	push	ar0
      001255 74 0B            [12] 4385 	mov	a,#0x0b
      001257 C0 E0            [24] 4386 	push	acc
      001259 E4               [12] 4387 	clr	a
      00125A C0 E0            [24] 4388 	push	acc
      00125C 74r44            [12] 4389 	mov	a,#___str_6
      00125E C0 E0            [24] 4390 	push	acc
      001260 74s00            [12] 4391 	mov	a,#(___str_6 >> 8)
      001262 C0 E0            [24] 4392 	push	acc
      001264 74 80            [12] 4393 	mov	a,#0x80
      001266 C0 E0            [24] 4394 	push	acc
      001268 8C 82            [24] 4395 	mov	dpl,r4
      00126A 8E 83            [24] 4396 	mov	dph,r6
      00126C 8F F0            [24] 4397 	mov	b,r7
      00126E 12r00r00         [24] 4398 	lcall	_strncmp
      001271 AE 82            [24] 4399 	mov	r6,dpl
      001273 AF 83            [24] 4400 	mov	r7,dph
      001275 E5 81            [12] 4401 	mov	a,sp
      001277 24 FB            [12] 4402 	add	a,#0xfb
      001279 F5 81            [12] 4403 	mov	sp,a
      00127B D0 00            [24] 4404 	pop	ar0
      00127D D0 01            [24] 4405 	pop	ar1
      00127F D0 02            [24] 4406 	pop	ar2
      001281 EE               [12] 4407 	mov	a,r6
      001282 4F               [12] 4408 	orl	a,r7
      001283 70 3C            [24] 4409 	jnz	00127$
                                   4410 ;	../../core/loader/elfloader.c:469: using_relas = 0;
      001285 C0 00            [24] 4411 	push	ar0
      001287 E5 81            [12] 4412 	mov	a,sp
      001289 24 F1            [12] 4413 	add	a,#0xf1
      00128B F8               [12] 4414 	mov	r0,a
      00128C 76 00            [12] 4415 	mov	@r0,#0x00
                                   4416 ;	../../core/loader/elfloader.c:470: rodatarelaoff = shdr.sh_offset;
      00128E E5 81            [12] 4417 	mov	a,sp
      001290 24 3F            [12] 4418 	add	a,#0x3f
      001292 F8               [12] 4419 	mov	r0,a
      001293 C0 01            [24] 4420 	push	ar1
      001295 E5 81            [12] 4421 	mov	a,sp
      001297 24 1C            [12] 4422 	add	a,#0x1c
      001299 F9               [12] 4423 	mov	r1,a
      00129A 86 00            [24] 4424 	mov	ar0,@r0
      00129C E6               [12] 4425 	mov	a,@r0
      00129D F7               [12] 4426 	mov	@r1,a
      00129E 08               [12] 4427 	inc	r0
      00129F E6               [12] 4428 	mov	a,@r0
      0012A0 09               [12] 4429 	inc	r1
      0012A1 F7               [12] 4430 	mov	@r1,a
      0012A2 18               [12] 4431 	dec	r0
      0012A3 D0 01            [24] 4432 	pop	ar1
                                   4433 ;	../../core/loader/elfloader.c:471: rodatarelasize = shdr.sh_size;
      0012A5 E5 81            [12] 4434 	mov	a,sp
      0012A7 24 40            [12] 4435 	add	a,#0x40
      0012A9 F8               [12] 4436 	mov	r0,a
      0012AA C0 01            [24] 4437 	push	ar1
      0012AC E5 81            [12] 4438 	mov	a,sp
      0012AE 24 22            [12] 4439 	add	a,#0x22
      0012B0 F9               [12] 4440 	mov	r1,a
      0012B1 86 00            [24] 4441 	mov	ar0,@r0
      0012B3 E6               [12] 4442 	mov	a,@r0
      0012B4 F7               [12] 4443 	mov	@r1,a
      0012B5 08               [12] 4444 	inc	r0
      0012B6 E6               [12] 4445 	mov	a,@r0
      0012B7 09               [12] 4446 	inc	r1
      0012B8 F7               [12] 4447 	mov	@r1,a
      0012B9 18               [12] 4448 	dec	r0
      0012BA D0 01            [24] 4449 	pop	ar1
      0012BC D0 00            [24] 4450 	pop	ar0
      0012BE 02r14rB6         [24] 4451 	ljmp	00149$
      0012C1                       4452 00127$:
                                   4453 ;	../../core/loader/elfloader.c:472: } else if(strncmp(name, ".rela.rodata", 12) == 0) {
      0012C1 C0 00            [24] 4454 	push	ar0
      0012C3 E5 81            [12] 4455 	mov	a,sp
      0012C5 24 34            [12] 4456 	add	a,#0x34
      0012C7 F8               [12] 4457 	mov	r0,a
      0012C8 86 04            [24] 4458 	mov	ar4,@r0
      0012CA 7E 00            [12] 4459 	mov	r6,#0x00
      0012CC 7F 40            [12] 4460 	mov	r7,#0x40
      0012CE D0 00            [24] 4461 	pop	ar0
      0012D0 C0 02            [24] 4462 	push	ar2
      0012D2 C0 01            [24] 4463 	push	ar1
      0012D4 C0 00            [24] 4464 	push	ar0
      0012D6 74 0C            [12] 4465 	mov	a,#0x0c
      0012D8 C0 E0            [24] 4466 	push	acc
      0012DA E4               [12] 4467 	clr	a
      0012DB C0 E0            [24] 4468 	push	acc
      0012DD 74r50            [12] 4469 	mov	a,#___str_7
      0012DF C0 E0            [24] 4470 	push	acc
      0012E1 74s00            [12] 4471 	mov	a,#(___str_7 >> 8)
      0012E3 C0 E0            [24] 4472 	push	acc
      0012E5 74 80            [12] 4473 	mov	a,#0x80
      0012E7 C0 E0            [24] 4474 	push	acc
      0012E9 8C 82            [24] 4475 	mov	dpl,r4
      0012EB 8E 83            [24] 4476 	mov	dph,r6
      0012ED 8F F0            [24] 4477 	mov	b,r7
      0012EF 12r00r00         [24] 4478 	lcall	_strncmp
      0012F2 AE 82            [24] 4479 	mov	r6,dpl
      0012F4 AF 83            [24] 4480 	mov	r7,dph
      0012F6 E5 81            [12] 4481 	mov	a,sp
      0012F8 24 FB            [12] 4482 	add	a,#0xfb
      0012FA F5 81            [12] 4483 	mov	sp,a
      0012FC D0 00            [24] 4484 	pop	ar0
      0012FE D0 01            [24] 4485 	pop	ar1
      001300 D0 02            [24] 4486 	pop	ar2
      001302 EE               [12] 4487 	mov	a,r6
      001303 4F               [12] 4488 	orl	a,r7
      001304 70 3C            [24] 4489 	jnz	00124$
                                   4490 ;	../../core/loader/elfloader.c:473: using_relas = 1;
      001306 C0 00            [24] 4491 	push	ar0
      001308 E5 81            [12] 4492 	mov	a,sp
      00130A 24 F1            [12] 4493 	add	a,#0xf1
      00130C F8               [12] 4494 	mov	r0,a
      00130D 76 01            [12] 4495 	mov	@r0,#0x01
                                   4496 ;	../../core/loader/elfloader.c:474: rodatarelaoff = shdr.sh_offset;
      00130F E5 81            [12] 4497 	mov	a,sp
      001311 24 3D            [12] 4498 	add	a,#0x3d
      001313 F8               [12] 4499 	mov	r0,a
      001314 C0 01            [24] 4500 	push	ar1
      001316 E5 81            [12] 4501 	mov	a,sp
      001318 24 1C            [12] 4502 	add	a,#0x1c
      00131A F9               [12] 4503 	mov	r1,a
      00131B 86 00            [24] 4504 	mov	ar0,@r0
      00131D E6               [12] 4505 	mov	a,@r0
      00131E F7               [12] 4506 	mov	@r1,a
      00131F 08               [12] 4507 	inc	r0
      001320 E6               [12] 4508 	mov	a,@r0
      001321 09               [12] 4509 	inc	r1
      001322 F7               [12] 4510 	mov	@r1,a
      001323 18               [12] 4511 	dec	r0
      001324 D0 01            [24] 4512 	pop	ar1
                                   4513 ;	../../core/loader/elfloader.c:475: rodatarelasize = shdr.sh_size;
      001326 E5 81            [12] 4514 	mov	a,sp
      001328 24 3E            [12] 4515 	add	a,#0x3e
      00132A F8               [12] 4516 	mov	r0,a
      00132B C0 01            [24] 4517 	push	ar1
      00132D E5 81            [12] 4518 	mov	a,sp
      00132F 24 22            [12] 4519 	add	a,#0x22
      001331 F9               [12] 4520 	mov	r1,a
      001332 86 00            [24] 4521 	mov	ar0,@r0
      001334 E6               [12] 4522 	mov	a,@r0
      001335 F7               [12] 4523 	mov	@r1,a
      001336 08               [12] 4524 	inc	r0
      001337 E6               [12] 4525 	mov	a,@r0
      001338 09               [12] 4526 	inc	r1
      001339 F7               [12] 4527 	mov	@r1,a
      00133A 18               [12] 4528 	dec	r0
      00133B D0 01            [24] 4529 	pop	ar1
      00133D D0 00            [24] 4530 	pop	ar0
      00133F 02r14rB6         [24] 4531 	ljmp	00149$
      001342                       4532 00124$:
                                   4533 ;	../../core/loader/elfloader.c:476: } else if(strncmp(name, ".rel.data", 9) == 0) {
      001342 C0 00            [24] 4534 	push	ar0
      001344 E5 81            [12] 4535 	mov	a,sp
      001346 24 35            [12] 4536 	add	a,#0x35
      001348 F8               [12] 4537 	mov	r0,a
      001349 86 04            [24] 4538 	mov	ar4,@r0
      00134B 7E 00            [12] 4539 	mov	r6,#0x00
      00134D 7F 40            [12] 4540 	mov	r7,#0x40
      00134F D0 00            [24] 4541 	pop	ar0
      001351 C0 02            [24] 4542 	push	ar2
      001353 C0 01            [24] 4543 	push	ar1
      001355 C0 00            [24] 4544 	push	ar0
      001357 74 09            [12] 4545 	mov	a,#0x09
      001359 C0 E0            [24] 4546 	push	acc
      00135B E4               [12] 4547 	clr	a
      00135C C0 E0            [24] 4548 	push	acc
      00135E 74r5D            [12] 4549 	mov	a,#___str_8
      001360 C0 E0            [24] 4550 	push	acc
      001362 74s00            [12] 4551 	mov	a,#(___str_8 >> 8)
      001364 C0 E0            [24] 4552 	push	acc
      001366 74 80            [12] 4553 	mov	a,#0x80
      001368 C0 E0            [24] 4554 	push	acc
      00136A 8C 82            [24] 4555 	mov	dpl,r4
      00136C 8E 83            [24] 4556 	mov	dph,r6
      00136E 8F F0            [24] 4557 	mov	b,r7
      001370 12r00r00         [24] 4558 	lcall	_strncmp
      001373 AE 82            [24] 4559 	mov	r6,dpl
      001375 AF 83            [24] 4560 	mov	r7,dph
      001377 E5 81            [12] 4561 	mov	a,sp
      001379 24 FB            [12] 4562 	add	a,#0xfb
      00137B F5 81            [12] 4563 	mov	sp,a
      00137D D0 00            [24] 4564 	pop	ar0
      00137F D0 01            [24] 4565 	pop	ar1
      001381 D0 02            [24] 4566 	pop	ar2
      001383 EE               [12] 4567 	mov	a,r6
      001384 4F               [12] 4568 	orl	a,r7
      001385 70 3C            [24] 4569 	jnz	00121$
                                   4570 ;	../../core/loader/elfloader.c:478: using_relas = 0;
      001387 C0 00            [24] 4571 	push	ar0
      001389 E5 81            [12] 4572 	mov	a,sp
      00138B 24 F1            [12] 4573 	add	a,#0xf1
      00138D F8               [12] 4574 	mov	r0,a
      00138E 76 00            [12] 4575 	mov	@r0,#0x00
                                   4576 ;	../../core/loader/elfloader.c:479: datarelaoff = shdr.sh_offset;
      001390 E5 81            [12] 4577 	mov	a,sp
      001392 24 3B            [12] 4578 	add	a,#0x3b
      001394 F8               [12] 4579 	mov	r0,a
      001395 C0 01            [24] 4580 	push	ar1
      001397 E5 81            [12] 4581 	mov	a,sp
      001399 24 1A            [12] 4582 	add	a,#0x1a
      00139B F9               [12] 4583 	mov	r1,a
      00139C 86 00            [24] 4584 	mov	ar0,@r0
      00139E E6               [12] 4585 	mov	a,@r0
      00139F F7               [12] 4586 	mov	@r1,a
      0013A0 08               [12] 4587 	inc	r0
      0013A1 E6               [12] 4588 	mov	a,@r0
      0013A2 09               [12] 4589 	inc	r1
      0013A3 F7               [12] 4590 	mov	@r1,a
      0013A4 18               [12] 4591 	dec	r0
      0013A5 D0 01            [24] 4592 	pop	ar1
                                   4593 ;	../../core/loader/elfloader.c:480: datarelasize = shdr.sh_size;
      0013A7 E5 81            [12] 4594 	mov	a,sp
      0013A9 24 3C            [12] 4595 	add	a,#0x3c
      0013AB F8               [12] 4596 	mov	r0,a
      0013AC C0 01            [24] 4597 	push	ar1
      0013AE E5 81            [12] 4598 	mov	a,sp
      0013B0 24 26            [12] 4599 	add	a,#0x26
      0013B2 F9               [12] 4600 	mov	r1,a
      0013B3 86 00            [24] 4601 	mov	ar0,@r0
      0013B5 E6               [12] 4602 	mov	a,@r0
      0013B6 F7               [12] 4603 	mov	@r1,a
      0013B7 08               [12] 4604 	inc	r0
      0013B8 E6               [12] 4605 	mov	a,@r0
      0013B9 09               [12] 4606 	inc	r1
      0013BA F7               [12] 4607 	mov	@r1,a
      0013BB 18               [12] 4608 	dec	r0
      0013BC D0 01            [24] 4609 	pop	ar1
      0013BE D0 00            [24] 4610 	pop	ar0
      0013C0 02r14rB6         [24] 4611 	ljmp	00149$
      0013C3                       4612 00121$:
                                   4613 ;	../../core/loader/elfloader.c:481: } else if(strncmp(name, ".rela.data", 10) == 0) {
      0013C3 C0 00            [24] 4614 	push	ar0
      0013C5 E5 81            [12] 4615 	mov	a,sp
      0013C7 24 36            [12] 4616 	add	a,#0x36
      0013C9 F8               [12] 4617 	mov	r0,a
      0013CA 86 04            [24] 4618 	mov	ar4,@r0
      0013CC 7E 00            [12] 4619 	mov	r6,#0x00
      0013CE 7F 40            [12] 4620 	mov	r7,#0x40
      0013D0 D0 00            [24] 4621 	pop	ar0
      0013D2 C0 02            [24] 4622 	push	ar2
      0013D4 C0 01            [24] 4623 	push	ar1
      0013D6 C0 00            [24] 4624 	push	ar0
      0013D8 74 0A            [12] 4625 	mov	a,#0x0a
      0013DA C0 E0            [24] 4626 	push	acc
      0013DC E4               [12] 4627 	clr	a
      0013DD C0 E0            [24] 4628 	push	acc
      0013DF 74r67            [12] 4629 	mov	a,#___str_9
      0013E1 C0 E0            [24] 4630 	push	acc
      0013E3 74s00            [12] 4631 	mov	a,#(___str_9 >> 8)
      0013E5 C0 E0            [24] 4632 	push	acc
      0013E7 74 80            [12] 4633 	mov	a,#0x80
      0013E9 C0 E0            [24] 4634 	push	acc
      0013EB 8C 82            [24] 4635 	mov	dpl,r4
      0013ED 8E 83            [24] 4636 	mov	dph,r6
      0013EF 8F F0            [24] 4637 	mov	b,r7
      0013F1 12r00r00         [24] 4638 	lcall	_strncmp
      0013F4 AE 82            [24] 4639 	mov	r6,dpl
      0013F6 AF 83            [24] 4640 	mov	r7,dph
      0013F8 E5 81            [12] 4641 	mov	a,sp
      0013FA 24 FB            [12] 4642 	add	a,#0xfb
      0013FC F5 81            [12] 4643 	mov	sp,a
      0013FE D0 00            [24] 4644 	pop	ar0
      001400 D0 01            [24] 4645 	pop	ar1
      001402 D0 02            [24] 4646 	pop	ar2
      001404 EE               [12] 4647 	mov	a,r6
      001405 4F               [12] 4648 	orl	a,r7
      001406 70 3B            [24] 4649 	jnz	00118$
                                   4650 ;	../../core/loader/elfloader.c:482: using_relas = 1;
      001408 C0 00            [24] 4651 	push	ar0
      00140A E5 81            [12] 4652 	mov	a,sp
      00140C 24 F1            [12] 4653 	add	a,#0xf1
      00140E F8               [12] 4654 	mov	r0,a
      00140F 76 01            [12] 4655 	mov	@r0,#0x01
                                   4656 ;	../../core/loader/elfloader.c:483: datarelaoff = shdr.sh_offset;
      001411 E5 81            [12] 4657 	mov	a,sp
      001413 24 39            [12] 4658 	add	a,#0x39
      001415 F8               [12] 4659 	mov	r0,a
      001416 C0 01            [24] 4660 	push	ar1
      001418 E5 81            [12] 4661 	mov	a,sp
      00141A 24 1A            [12] 4662 	add	a,#0x1a
      00141C F9               [12] 4663 	mov	r1,a
      00141D 86 00            [24] 4664 	mov	ar0,@r0
      00141F E6               [12] 4665 	mov	a,@r0
      001420 F7               [12] 4666 	mov	@r1,a
      001421 08               [12] 4667 	inc	r0
      001422 E6               [12] 4668 	mov	a,@r0
      001423 09               [12] 4669 	inc	r1
      001424 F7               [12] 4670 	mov	@r1,a
      001425 18               [12] 4671 	dec	r0
      001426 D0 01            [24] 4672 	pop	ar1
                                   4673 ;	../../core/loader/elfloader.c:484: datarelasize = shdr.sh_size;
      001428 E5 81            [12] 4674 	mov	a,sp
      00142A 24 3A            [12] 4675 	add	a,#0x3a
      00142C F8               [12] 4676 	mov	r0,a
      00142D C0 01            [24] 4677 	push	ar1
      00142F E5 81            [12] 4678 	mov	a,sp
      001431 24 26            [12] 4679 	add	a,#0x26
      001433 F9               [12] 4680 	mov	r1,a
      001434 86 00            [24] 4681 	mov	ar0,@r0
      001436 E6               [12] 4682 	mov	a,@r0
      001437 F7               [12] 4683 	mov	@r1,a
      001438 08               [12] 4684 	inc	r0
      001439 E6               [12] 4685 	mov	a,@r0
      00143A 09               [12] 4686 	inc	r1
      00143B F7               [12] 4687 	mov	@r1,a
      00143C 18               [12] 4688 	dec	r0
      00143D D0 01            [24] 4689 	pop	ar1
      00143F D0 00            [24] 4690 	pop	ar0
      001441 80 73            [24] 4691 	sjmp	00149$
      001443                       4692 00118$:
                                   4693 ;	../../core/loader/elfloader.c:485: } else if(strncmp(name, ".bss", 4) == 0) {
      001443 C0 00            [24] 4694 	push	ar0
      001445 E5 81            [12] 4695 	mov	a,sp
      001447 24 38            [12] 4696 	add	a,#0x38
      001449 F8               [12] 4697 	mov	r0,a
      00144A 86 04            [24] 4698 	mov	ar4,@r0
      00144C 7E 00            [12] 4699 	mov	r6,#0x00
      00144E 7F 40            [12] 4700 	mov	r7,#0x40
      001450 D0 00            [24] 4701 	pop	ar0
      001452 C0 02            [24] 4702 	push	ar2
      001454 C0 01            [24] 4703 	push	ar1
      001456 C0 00            [24] 4704 	push	ar0
      001458 74 04            [12] 4705 	mov	a,#0x04
      00145A C0 E0            [24] 4706 	push	acc
      00145C E4               [12] 4707 	clr	a
      00145D C0 E0            [24] 4708 	push	acc
      00145F 74r72            [12] 4709 	mov	a,#___str_10
      001461 C0 E0            [24] 4710 	push	acc
      001463 74s00            [12] 4711 	mov	a,#(___str_10 >> 8)
      001465 C0 E0            [24] 4712 	push	acc
      001467 74 80            [12] 4713 	mov	a,#0x80
      001469 C0 E0            [24] 4714 	push	acc
      00146B 8C 82            [24] 4715 	mov	dpl,r4
      00146D 8E 83            [24] 4716 	mov	dph,r6
      00146F 8F F0            [24] 4717 	mov	b,r7
      001471 12r00r00         [24] 4718 	lcall	_strncmp
      001474 AE 82            [24] 4719 	mov	r6,dpl
      001476 AF 83            [24] 4720 	mov	r7,dph
      001478 E5 81            [12] 4721 	mov	a,sp
      00147A 24 FB            [12] 4722 	add	a,#0xfb
      00147C F5 81            [12] 4723 	mov	sp,a
      00147E D0 00            [24] 4724 	pop	ar0
      001480 D0 01            [24] 4725 	pop	ar1
      001482 D0 02            [24] 4726 	pop	ar2
      001484 EE               [12] 4727 	mov	a,r6
      001485 4F               [12] 4728 	orl	a,r7
      001486 70 2E            [24] 4729 	jnz	00149$
                                   4730 ;	../../core/loader/elfloader.c:486: bsssize = shdr.sh_size;
      001488 C0 00            [24] 4731 	push	ar0
      00148A E5 81            [12] 4732 	mov	a,sp
      00148C 24 37            [12] 4733 	add	a,#0x37
      00148E F8               [12] 4734 	mov	r0,a
      00148F C0 01            [24] 4735 	push	ar1
      001491 E5 81            [12] 4736 	mov	a,sp
      001493 24 1E            [12] 4737 	add	a,#0x1e
      001495 F9               [12] 4738 	mov	r1,a
      001496 86 00            [24] 4739 	mov	ar0,@r0
      001498 E6               [12] 4740 	mov	a,@r0
      001499 F7               [12] 4741 	mov	@r1,a
      00149A 08               [12] 4742 	inc	r0
      00149B E6               [12] 4743 	mov	a,@r0
      00149C 09               [12] 4744 	inc	r1
      00149D F7               [12] 4745 	mov	@r1,a
      00149E 18               [12] 4746 	dec	r0
      00149F D0 01            [24] 4747 	pop	ar1
                                   4748 ;	../../core/loader/elfloader.c:487: bss.number = i;
      0014A1 E5 81            [12] 4749 	mov	a,sp
      0014A3 24 EB            [12] 4750 	add	a,#0xeb
      0014A5 F8               [12] 4751 	mov	r0,a
      0014A6 86 07            [24] 4752 	mov	ar7,@r0
      0014A8 D0 00            [24] 4753 	pop	ar0
      0014AA 90r00r21         [24] 4754 	mov	dptr,#_bss
      0014AD EF               [12] 4755 	mov	a,r7
      0014AE F0               [24] 4756 	movx	@dptr,a
                                   4757 ;	../../core/loader/elfloader.c:488: bss.offset = 0;
      0014AF 90r00r22         [24] 4758 	mov	dptr,#(_bss + 0x0001)
      0014B2 E4               [12] 4759 	clr	a
      0014B3 F0               [24] 4760 	movx	@dptr,a
      0014B4 A3               [24] 4761 	inc	dptr
      0014B5 F0               [24] 4762 	movx	@dptr,a
      0014B6                       4763 00149$:
                                   4764 ;	../../core/loader/elfloader.c:492: shdrptr += shdrsize;
      0014B6 C0 00            [24] 4765 	push	ar0
      0014B8 E5 81            [12] 4766 	mov	a,sp
      0014BA 24 E9            [12] 4767 	add	a,#0xe9
      0014BC F8               [12] 4768 	mov	r0,a
      0014BD 86 06            [24] 4769 	mov	ar6,@r0
      0014BF 08               [12] 4770 	inc	r0
      0014C0 86 07            [24] 4771 	mov	ar7,@r0
      0014C2 E5 81            [12] 4772 	mov	a,sp
      0014C4 24 EF            [12] 4773 	add	a,#0xef
      0014C6 F8               [12] 4774 	mov	r0,a
      0014C7 E6               [12] 4775 	mov	a,@r0
      0014C8 2E               [12] 4776 	add	a,r6
      0014C9 FE               [12] 4777 	mov	r6,a
      0014CA 08               [12] 4778 	inc	r0
      0014CB E6               [12] 4779 	mov	a,@r0
      0014CC 3F               [12] 4780 	addc	a,r7
      0014CD FF               [12] 4781 	mov	r7,a
      0014CE E5 81            [12] 4782 	mov	a,sp
      0014D0 24 E9            [12] 4783 	add	a,#0xe9
      0014D2 F8               [12] 4784 	mov	r0,a
      0014D3 A6 06            [24] 4785 	mov	@r0,ar6
      0014D5 08               [12] 4786 	inc	r0
      0014D6 A6 07            [24] 4787 	mov	@r0,ar7
                                   4788 ;	../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      0014D8 E5 81            [12] 4789 	mov	a,sp
      0014DA 24 EB            [12] 4790 	add	a,#0xeb
      0014DC F8               [12] 4791 	mov	r0,a
      0014DD 06               [12] 4792 	inc	@r0
      0014DE B6 00 02         [24] 4793 	cjne	@r0,#0x00,00351$
      0014E1 08               [12] 4794 	inc	r0
      0014E2 06               [12] 4795 	inc	@r0
      0014E3                       4796 00351$:
      0014E3 D0 00            [24] 4797 	pop	ar0
      0014E5 02r0Er2C         [24] 4798 	ljmp	00205$
      0014E8                       4799 00150$:
                                   4800 ;	../../core/loader/elfloader.c:495: if(symtabsize == 0) {
      0014E8 E5 81            [12] 4801 	mov	a,sp
      0014EA 24 FD            [12] 4802 	add	a,#0xfd
      0014EC F8               [12] 4803 	mov	r0,a
      0014ED E6               [12] 4804 	mov	a,@r0
      0014EE 08               [12] 4805 	inc	r0
      0014EF 46               [12] 4806 	orl	a,@r0
      0014F0 70 06            [24] 4807 	jnz	00152$
                                   4808 ;	../../core/loader/elfloader.c:496: return ELFLOADER_NO_SYMTAB;
      0014F2 90 00 02         [24] 4809 	mov	dptr,#0x0002
      0014F5 02r19rAC         [24] 4810 	ljmp	00207$
      0014F8                       4811 00152$:
                                   4812 ;	../../core/loader/elfloader.c:498: if(strtabsize == 0) {
      0014F8 E5 81            [12] 4813 	mov	a,sp
      0014FA 24 22            [12] 4814 	add	a,#0x22
      0014FC F8               [12] 4815 	mov	r0,a
      0014FD E6               [12] 4816 	mov	a,@r0
      0014FE 08               [12] 4817 	inc	r0
      0014FF 46               [12] 4818 	orl	a,@r0
      001500 70 06            [24] 4819 	jnz	00154$
                                   4820 ;	../../core/loader/elfloader.c:499: return ELFLOADER_NO_STRTAB;
      001502 90 00 03         [24] 4821 	mov	dptr,#0x0003
      001505 02r19rAC         [24] 4822 	ljmp	00207$
      001508                       4823 00154$:
                                   4824 ;	../../core/loader/elfloader.c:501: if(textsize == 0) {
      001508 E5 81            [12] 4825 	mov	a,sp
      00150A 24 F5            [12] 4826 	add	a,#0xf5
      00150C F8               [12] 4827 	mov	r0,a
      00150D E6               [12] 4828 	mov	a,@r0
      00150E 08               [12] 4829 	inc	r0
      00150F 46               [12] 4830 	orl	a,@r0
      001510 70 06            [24] 4831 	jnz	00157$
                                   4832 ;	../../core/loader/elfloader.c:502: return ELFLOADER_NO_TEXT;
      001512 90 00 04         [24] 4833 	mov	dptr,#0x0004
      001515 02r19rAC         [24] 4834 	ljmp	00207$
                                   4835 ;	../../core/loader/elfloader.c:505: PRINTF("before allocate ram\n");
      001518                       4836 00157$:
                                   4837 ;	../../core/loader/elfloader.c:506: bss.address = (char *)elfloader_arch_allocate_ram(bsssize + datasize);
      001518 E5 81            [12] 4838 	mov	a,sp
      00151A 24 20            [12] 4839 	add	a,#0x20
      00151C F8               [12] 4840 	mov	r0,a
      00151D E5 81            [12] 4841 	mov	a,sp
      00151F 24 2A            [12] 4842 	add	a,#0x2a
      001521 F9               [12] 4843 	mov	r1,a
      001522 E7               [12] 4844 	mov	a,@r1
      001523 26               [12] 4845 	add	a,@r0
      001524 FE               [12] 4846 	mov	r6,a
      001525 09               [12] 4847 	inc	r1
      001526 E7               [12] 4848 	mov	a,@r1
      001527 08               [12] 4849 	inc	r0
      001528 36               [12] 4850 	addc	a,@r0
      001529 FF               [12] 4851 	mov	r7,a
      00152A 8E 82            [24] 4852 	mov	dpl,r6
      00152C 8F 83            [24] 4853 	mov	dph,r7
      00152E 12r00r00         [24] 4854 	lcall	_elfloader_arch_allocate_ram
      001531 AC 82            [24] 4855 	mov	r4,dpl
      001533 AE 83            [24] 4856 	mov	r6,dph
      001535 AF F0            [24] 4857 	mov	r7,b
      001537 90r00r24         [24] 4858 	mov	dptr,#(_bss + 0x0003)
      00153A EC               [12] 4859 	mov	a,r4
      00153B F0               [24] 4860 	movx	@dptr,a
      00153C EE               [12] 4861 	mov	a,r6
      00153D A3               [24] 4862 	inc	dptr
      00153E F0               [24] 4863 	movx	@dptr,a
      00153F EF               [12] 4864 	mov	a,r7
      001540 A3               [24] 4865 	inc	dptr
      001541 F0               [24] 4866 	movx	@dptr,a
                                   4867 ;	../../core/loader/elfloader.c:507: data.address = (char *)bss.address + bsssize;
      001542 E5 81            [12] 4868 	mov	a,sp
      001544 24 20            [12] 4869 	add	a,#0x20
      001546 F8               [12] 4870 	mov	r0,a
      001547 E6               [12] 4871 	mov	a,@r0
      001548 2C               [12] 4872 	add	a,r4
      001549 FC               [12] 4873 	mov	r4,a
      00154A 08               [12] 4874 	inc	r0
      00154B E6               [12] 4875 	mov	a,@r0
      00154C 3E               [12] 4876 	addc	a,r6
      00154D FE               [12] 4877 	mov	r6,a
      00154E 90r00r2A         [24] 4878 	mov	dptr,#(_data + 0x0003)
      001551 EC               [12] 4879 	mov	a,r4
      001552 F0               [24] 4880 	movx	@dptr,a
      001553 EE               [12] 4881 	mov	a,r6
      001554 A3               [24] 4882 	inc	dptr
      001555 F0               [24] 4883 	movx	@dptr,a
      001556 EF               [12] 4884 	mov	a,r7
      001557 A3               [24] 4885 	inc	dptr
      001558 F0               [24] 4886 	movx	@dptr,a
                                   4887 ;	../../core/loader/elfloader.c:509: text.address = (char *)elfloader_arch_allocate_rom(textsize + rodatasize);
      001559 E5 81            [12] 4888 	mov	a,sp
      00155B 24 F5            [12] 4889 	add	a,#0xf5
      00155D F8               [12] 4890 	mov	r0,a
      00155E E5 81            [12] 4891 	mov	a,sp
      001560 24 26            [12] 4892 	add	a,#0x26
      001562 F9               [12] 4893 	mov	r1,a
      001563 E7               [12] 4894 	mov	a,@r1
      001564 26               [12] 4895 	add	a,@r0
      001565 FE               [12] 4896 	mov	r6,a
      001566 09               [12] 4897 	inc	r1
      001567 E7               [12] 4898 	mov	a,@r1
      001568 08               [12] 4899 	inc	r0
      001569 36               [12] 4900 	addc	a,@r0
      00156A FF               [12] 4901 	mov	r7,a
      00156B 8E 82            [24] 4902 	mov	dpl,r6
      00156D 8F 83            [24] 4903 	mov	dph,r7
      00156F 12r00r00         [24] 4904 	lcall	_elfloader_arch_allocate_rom
      001572 AC 82            [24] 4905 	mov	r4,dpl
      001574 AE 83            [24] 4906 	mov	r6,dph
      001576 AF F0            [24] 4907 	mov	r7,b
      001578 90r00r36         [24] 4908 	mov	dptr,#(_text + 0x0003)
      00157B EC               [12] 4909 	mov	a,r4
      00157C F0               [24] 4910 	movx	@dptr,a
      00157D EE               [12] 4911 	mov	a,r6
      00157E A3               [24] 4912 	inc	dptr
      00157F F0               [24] 4913 	movx	@dptr,a
      001580 EF               [12] 4914 	mov	a,r7
      001581 A3               [24] 4915 	inc	dptr
      001582 F0               [24] 4916 	movx	@dptr,a
                                   4917 ;	../../core/loader/elfloader.c:510: rodata.address = (char *)text.address + textsize;
      001583 E5 81            [12] 4918 	mov	a,sp
      001585 24 F5            [12] 4919 	add	a,#0xf5
      001587 F8               [12] 4920 	mov	r0,a
      001588 E6               [12] 4921 	mov	a,@r0
      001589 2C               [12] 4922 	add	a,r4
      00158A FC               [12] 4923 	mov	r4,a
      00158B 08               [12] 4924 	inc	r0
      00158C E6               [12] 4925 	mov	a,@r0
      00158D 3E               [12] 4926 	addc	a,r6
      00158E FE               [12] 4927 	mov	r6,a
      00158F 90r00r30         [24] 4928 	mov	dptr,#(_rodata + 0x0003)
      001592 EC               [12] 4929 	mov	a,r4
      001593 F0               [24] 4930 	movx	@dptr,a
      001594 EE               [12] 4931 	mov	a,r6
      001595 A3               [24] 4932 	inc	dptr
      001596 F0               [24] 4933 	movx	@dptr,a
      001597 EF               [12] 4934 	mov	a,r7
      001598 A3               [24] 4935 	inc	dptr
      001599 F0               [24] 4936 	movx	@dptr,a
                                   4937 ;	../../core/loader/elfloader.c:521: if(textrelasize > 0) {
      00159A E5 81            [12] 4938 	mov	a,sp
      00159C 24 2C            [12] 4939 	add	a,#0x2c
      00159E F8               [12] 4940 	mov	r0,a
      00159F E6               [12] 4941 	mov	a,@r0
      0015A0 08               [12] 4942 	inc	r0
      0015A1 46               [12] 4943 	orl	a,@r0
      0015A2 70 03            [24] 4944 	jnz	00355$
      0015A4 02r16r66         [24] 4945 	ljmp	00175$
      0015A7                       4946 00355$:
                                   4947 ;	../../core/loader/elfloader.c:528: symtaboff, symtabsize, using_relas);
      0015A7 E5 81            [12] 4948 	mov	a,sp
      0015A9 24 FB            [12] 4949 	add	a,#0xfb
      0015AB F8               [12] 4950 	mov	r0,a
      0015AC E5 81            [12] 4951 	mov	a,sp
      0015AE 24 22            [12] 4952 	add	a,#0x22
      0015B0 F9               [12] 4953 	mov	r1,a
      0015B1 E6               [12] 4954 	mov	a,@r0
      0015B2 F7               [12] 4955 	mov	@r1,a
      0015B3 08               [12] 4956 	inc	r0
      0015B4 09               [12] 4957 	inc	r1
      0015B5 E6               [12] 4958 	mov	a,@r0
      0015B6 F7               [12] 4959 	mov	@r1,a
                                   4960 ;	../../core/loader/elfloader.c:527: strtaboff,
      0015B7 A8 81            [24] 4961 	mov	r0,sp
      0015B9 18               [12] 4962 	dec	r0
      0015BA E5 81            [12] 4963 	mov	a,sp
      0015BC 24 50            [12] 4964 	add	a,#0x50
      0015BE F9               [12] 4965 	mov	r1,a
      0015BF E6               [12] 4966 	mov	a,@r0
      0015C0 F7               [12] 4967 	mov	@r1,a
      0015C1 08               [12] 4968 	inc	r0
      0015C2 09               [12] 4969 	inc	r1
      0015C3 E6               [12] 4970 	mov	a,@r0
      0015C4 F7               [12] 4971 	mov	@r1,a
                                   4972 ;	../../core/loader/elfloader.c:525: text.address,
      0015C5 90r00r36         [24] 4973 	mov	dptr,#(_text + 0x0003)
      0015C8 E0               [24] 4974 	movx	a,@dptr
      0015C9 FC               [12] 4975 	mov	r4,a
      0015CA A3               [24] 4976 	inc	dptr
      0015CB E0               [24] 4977 	movx	a,@dptr
      0015CC FE               [12] 4978 	mov	r6,a
      0015CD A3               [24] 4979 	inc	dptr
      0015CE E0               [24] 4980 	movx	a,@dptr
      0015CF FF               [12] 4981 	mov	r7,a
                                   4982 ;	../../core/loader/elfloader.c:524: textoff,
      0015D0 E5 81            [12] 4983 	mov	a,sp
      0015D2 24 F3            [12] 4984 	add	a,#0xf3
      0015D4 F8               [12] 4985 	mov	r0,a
      0015D5 E5 81            [12] 4986 	mov	a,sp
      0015D7 24 56            [12] 4987 	add	a,#0x56
      0015D9 F9               [12] 4988 	mov	r1,a
      0015DA E6               [12] 4989 	mov	a,@r0
      0015DB F7               [12] 4990 	mov	@r1,a
      0015DC 08               [12] 4991 	inc	r0
      0015DD 09               [12] 4992 	inc	r1
      0015DE E6               [12] 4993 	mov	a,@r0
      0015DF F7               [12] 4994 	mov	@r1,a
                                   4995 ;	../../core/loader/elfloader.c:523: textrelaoff, textrelasize,
      0015E0 E5 81            [12] 4996 	mov	a,sp
      0015E2 24 54            [12] 4997 	add	a,#0x54
      0015E4 F8               [12] 4998 	mov	r0,a
      0015E5 86 02            [24] 4999 	mov	ar2,@r0
      0015E7 08               [12] 5000 	inc	r0
      0015E8 86 05            [24] 5001 	mov	ar5,@r0
                                   5002 ;	../../core/loader/elfloader.c:522: ret = relocate_section(fd,
      0015EA E5 81            [12] 5003 	mov	a,sp
      0015EC 24 F2            [12] 5004 	add	a,#0xf2
      0015EE F8               [12] 5005 	mov	r0,a
      0015EF E6               [12] 5006 	mov	a,@r0
      0015F0 C0 E0            [24] 5007 	push	acc
      0015F2 E5 81            [12] 5008 	mov	a,sp
      0015F4 24 FC            [12] 5009 	add	a,#0xfc
      0015F6 F8               [12] 5010 	mov	r0,a
      0015F7 E6               [12] 5011 	mov	a,@r0
      0015F8 C0 E0            [24] 5012 	push	acc
      0015FA 08               [12] 5013 	inc	r0
      0015FB E6               [12] 5014 	mov	a,@r0
      0015FC C0 E0            [24] 5015 	push	acc
      0015FE E5 81            [12] 5016 	mov	a,sp
      001600 24 1F            [12] 5017 	add	a,#0x1f
      001602 F8               [12] 5018 	mov	r0,a
      001603 E6               [12] 5019 	mov	a,@r0
      001604 C0 E0            [24] 5020 	push	acc
      001606 08               [12] 5021 	inc	r0
      001607 E6               [12] 5022 	mov	a,@r0
      001608 C0 E0            [24] 5023 	push	acc
      00160A E5 81            [12] 5024 	mov	a,sp
      00160C 24 4B            [12] 5025 	add	a,#0x4b
      00160E F8               [12] 5026 	mov	r0,a
      00160F E6               [12] 5027 	mov	a,@r0
      001610 C0 E0            [24] 5028 	push	acc
      001612 08               [12] 5029 	inc	r0
      001613 E6               [12] 5030 	mov	a,@r0
      001614 C0 E0            [24] 5031 	push	acc
      001616 E5 81            [12] 5032 	mov	a,sp
      001618 24 51            [12] 5033 	add	a,#0x51
      00161A F8               [12] 5034 	mov	r0,a
      00161B E6               [12] 5035 	mov	a,@r0
      00161C C0 E0            [24] 5036 	push	acc
      00161E 08               [12] 5037 	inc	r0
      00161F E6               [12] 5038 	mov	a,@r0
      001620 C0 E0            [24] 5039 	push	acc
      001622 C0 04            [24] 5040 	push	ar4
      001624 C0 06            [24] 5041 	push	ar6
      001626 C0 07            [24] 5042 	push	ar7
      001628 E5 81            [12] 5043 	mov	a,sp
      00162A 24 4A            [12] 5044 	add	a,#0x4a
      00162C F8               [12] 5045 	mov	r0,a
      00162D E6               [12] 5046 	mov	a,@r0
      00162E C0 E0            [24] 5047 	push	acc
      001630 08               [12] 5048 	inc	r0
      001631 E6               [12] 5049 	mov	a,@r0
      001632 C0 E0            [24] 5050 	push	acc
      001634 E5 81            [12] 5051 	mov	a,sp
      001636 24 1E            [12] 5052 	add	a,#0x1e
      001638 F8               [12] 5053 	mov	r0,a
      001639 E6               [12] 5054 	mov	a,@r0
      00163A C0 E0            [24] 5055 	push	acc
      00163C 08               [12] 5056 	inc	r0
      00163D E6               [12] 5057 	mov	a,@r0
      00163E C0 E0            [24] 5058 	push	acc
      001640 C0 02            [24] 5059 	push	ar2
      001642 C0 05            [24] 5060 	push	ar5
      001644 E5 81            [12] 5061 	mov	a,sp
      001646 24 08            [12] 5062 	add	a,#0x08
      001648 F8               [12] 5063 	mov	r0,a
      001649 86 82            [24] 5064 	mov	dpl,@r0
      00164B 08               [12] 5065 	inc	r0
      00164C 86 83            [24] 5066 	mov	dph,@r0
      00164E 12r02r95         [24] 5067 	lcall	_relocate_section
      001651 AE 82            [24] 5068 	mov	r6,dpl
      001653 AF 83            [24] 5069 	mov	r7,dph
      001655 E5 81            [12] 5070 	mov	a,sp
      001657 24 EE            [12] 5071 	add	a,#0xee
      001659 F5 81            [12] 5072 	mov	sp,a
                                   5073 ;	../../core/loader/elfloader.c:529: if(ret != ELFLOADER_OK) {
      00165B EE               [12] 5074 	mov	a,r6
      00165C 4F               [12] 5075 	orl	a,r7
      00165D 60 07            [24] 5076 	jz	00175$
                                   5077 ;	../../core/loader/elfloader.c:530: return ret;
      00165F 8E 82            [24] 5078 	mov	dpl,r6
      001661 8F 83            [24] 5079 	mov	dph,r7
      001663 02r19rAC         [24] 5080 	ljmp	00207$
                                   5081 ;	../../core/loader/elfloader.c:535: PRINTF("elfloader: relocate rodata\n");
      001666                       5082 00175$:
                                   5083 ;	../../core/loader/elfloader.c:536: if(rodatarelasize > 0) {
      001666 E5 81            [12] 5084 	mov	a,sp
      001668 24 24            [12] 5085 	add	a,#0x24
      00166A F8               [12] 5086 	mov	r0,a
      00166B E6               [12] 5087 	mov	a,@r0
      00166C 08               [12] 5088 	inc	r0
      00166D 46               [12] 5089 	orl	a,@r0
      00166E 70 03            [24] 5090 	jnz	00357$
      001670 02r17r32         [24] 5091 	ljmp	00183$
      001673                       5092 00357$:
                                   5093 ;	../../core/loader/elfloader.c:543: symtaboff, symtabsize, using_relas);
      001673 E5 81            [12] 5094 	mov	a,sp
      001675 24 FB            [12] 5095 	add	a,#0xfb
      001677 F8               [12] 5096 	mov	r0,a
      001678 E5 81            [12] 5097 	mov	a,sp
      00167A 24 54            [12] 5098 	add	a,#0x54
      00167C F9               [12] 5099 	mov	r1,a
      00167D E6               [12] 5100 	mov	a,@r0
      00167E F7               [12] 5101 	mov	@r1,a
      00167F 08               [12] 5102 	inc	r0
      001680 09               [12] 5103 	inc	r1
      001681 E6               [12] 5104 	mov	a,@r0
      001682 F7               [12] 5105 	mov	@r1,a
                                   5106 ;	../../core/loader/elfloader.c:542: strtaboff,
      001683 A8 81            [24] 5107 	mov	r0,sp
      001685 18               [12] 5108 	dec	r0
      001686 E5 81            [12] 5109 	mov	a,sp
      001688 24 56            [12] 5110 	add	a,#0x56
      00168A F9               [12] 5111 	mov	r1,a
      00168B E6               [12] 5112 	mov	a,@r0
      00168C F7               [12] 5113 	mov	@r1,a
      00168D 08               [12] 5114 	inc	r0
      00168E 09               [12] 5115 	inc	r1
      00168F E6               [12] 5116 	mov	a,@r0
      001690 F7               [12] 5117 	mov	@r1,a
                                   5118 ;	../../core/loader/elfloader.c:540: rodata.address,
      001691 90r00r30         [24] 5119 	mov	dptr,#(_rodata + 0x0003)
      001694 E0               [24] 5120 	movx	a,@dptr
      001695 FA               [12] 5121 	mov	r2,a
      001696 A3               [24] 5122 	inc	dptr
      001697 E0               [24] 5123 	movx	a,@dptr
      001698 FD               [12] 5124 	mov	r5,a
      001699 A3               [24] 5125 	inc	dptr
      00169A E0               [24] 5126 	movx	a,@dptr
      00169B FF               [12] 5127 	mov	r7,a
                                   5128 ;	../../core/loader/elfloader.c:539: rodataoff,
      00169C E5 81            [12] 5129 	mov	a,sp
      00169E 24 F9            [12] 5130 	add	a,#0xf9
      0016A0 F8               [12] 5131 	mov	r0,a
      0016A1 E5 81            [12] 5132 	mov	a,sp
      0016A3 24 50            [12] 5133 	add	a,#0x50
      0016A5 F9               [12] 5134 	mov	r1,a
      0016A6 E6               [12] 5135 	mov	a,@r0
      0016A7 F7               [12] 5136 	mov	@r1,a
      0016A8 08               [12] 5137 	inc	r0
      0016A9 09               [12] 5138 	inc	r1
      0016AA E6               [12] 5139 	mov	a,@r0
      0016AB F7               [12] 5140 	mov	@r1,a
                                   5141 ;	../../core/loader/elfloader.c:538: rodatarelaoff, rodatarelasize,
      0016AC E5 81            [12] 5142 	mov	a,sp
      0016AE 24 1E            [12] 5143 	add	a,#0x1e
      0016B0 F8               [12] 5144 	mov	r0,a
      0016B1 86 03            [24] 5145 	mov	ar3,@r0
      0016B3 08               [12] 5146 	inc	r0
      0016B4 86 06            [24] 5147 	mov	ar6,@r0
                                   5148 ;	../../core/loader/elfloader.c:537: ret = relocate_section(fd,
      0016B6 E5 81            [12] 5149 	mov	a,sp
      0016B8 24 F2            [12] 5150 	add	a,#0xf2
      0016BA F8               [12] 5151 	mov	r0,a
      0016BB E6               [12] 5152 	mov	a,@r0
      0016BC C0 E0            [24] 5153 	push	acc
      0016BE E5 81            [12] 5154 	mov	a,sp
      0016C0 24 FC            [12] 5155 	add	a,#0xfc
      0016C2 F8               [12] 5156 	mov	r0,a
      0016C3 E6               [12] 5157 	mov	a,@r0
      0016C4 C0 E0            [24] 5158 	push	acc
      0016C6 08               [12] 5159 	inc	r0
      0016C7 E6               [12] 5160 	mov	a,@r0
      0016C8 C0 E0            [24] 5161 	push	acc
      0016CA E5 81            [12] 5162 	mov	a,sp
      0016CC 24 51            [12] 5163 	add	a,#0x51
      0016CE F8               [12] 5164 	mov	r0,a
      0016CF E6               [12] 5165 	mov	a,@r0
      0016D0 C0 E0            [24] 5166 	push	acc
      0016D2 08               [12] 5167 	inc	r0
      0016D3 E6               [12] 5168 	mov	a,@r0
      0016D4 C0 E0            [24] 5169 	push	acc
      0016D6 E5 81            [12] 5170 	mov	a,sp
      0016D8 24 51            [12] 5171 	add	a,#0x51
      0016DA F8               [12] 5172 	mov	r0,a
      0016DB E6               [12] 5173 	mov	a,@r0
      0016DC C0 E0            [24] 5174 	push	acc
      0016DE 08               [12] 5175 	inc	r0
      0016DF E6               [12] 5176 	mov	a,@r0
      0016E0 C0 E0            [24] 5177 	push	acc
      0016E2 E5 81            [12] 5178 	mov	a,sp
      0016E4 24 51            [12] 5179 	add	a,#0x51
      0016E6 F8               [12] 5180 	mov	r0,a
      0016E7 E6               [12] 5181 	mov	a,@r0
      0016E8 C0 E0            [24] 5182 	push	acc
      0016EA 08               [12] 5183 	inc	r0
      0016EB E6               [12] 5184 	mov	a,@r0
      0016EC C0 E0            [24] 5185 	push	acc
      0016EE C0 02            [24] 5186 	push	ar2
      0016F0 C0 05            [24] 5187 	push	ar5
      0016F2 C0 07            [24] 5188 	push	ar7
      0016F4 E5 81            [12] 5189 	mov	a,sp
      0016F6 24 44            [12] 5190 	add	a,#0x44
      0016F8 F8               [12] 5191 	mov	r0,a
      0016F9 E6               [12] 5192 	mov	a,@r0
      0016FA C0 E0            [24] 5193 	push	acc
      0016FC 08               [12] 5194 	inc	r0
      0016FD E6               [12] 5195 	mov	a,@r0
      0016FE C0 E0            [24] 5196 	push	acc
      001700 E5 81            [12] 5197 	mov	a,sp
      001702 24 16            [12] 5198 	add	a,#0x16
      001704 F8               [12] 5199 	mov	r0,a
      001705 E6               [12] 5200 	mov	a,@r0
      001706 C0 E0            [24] 5201 	push	acc
      001708 08               [12] 5202 	inc	r0
      001709 E6               [12] 5203 	mov	a,@r0
      00170A C0 E0            [24] 5204 	push	acc
      00170C C0 03            [24] 5205 	push	ar3
      00170E C0 06            [24] 5206 	push	ar6
      001710 E5 81            [12] 5207 	mov	a,sp
      001712 24 08            [12] 5208 	add	a,#0x08
      001714 F8               [12] 5209 	mov	r0,a
      001715 86 82            [24] 5210 	mov	dpl,@r0
      001717 08               [12] 5211 	inc	r0
      001718 86 83            [24] 5212 	mov	dph,@r0
      00171A 12r02r95         [24] 5213 	lcall	_relocate_section
      00171D AE 82            [24] 5214 	mov	r6,dpl
      00171F AF 83            [24] 5215 	mov	r7,dph
      001721 E5 81            [12] 5216 	mov	a,sp
      001723 24 EE            [12] 5217 	add	a,#0xee
      001725 F5 81            [12] 5218 	mov	sp,a
                                   5219 ;	../../core/loader/elfloader.c:544: if(ret != ELFLOADER_OK) {
      001727 EE               [12] 5220 	mov	a,r6
      001728 4F               [12] 5221 	orl	a,r7
      001729 60 07            [24] 5222 	jz	00183$
                                   5223 ;	../../core/loader/elfloader.c:546: return ret;
      00172B 8E 82            [24] 5224 	mov	dpl,r6
      00172D 8F 83            [24] 5225 	mov	dph,r7
      00172F 02r19rAC         [24] 5226 	ljmp	00207$
                                   5227 ;	../../core/loader/elfloader.c:551: PRINTF("elfloader: relocate data\n");
      001732                       5228 00183$:
                                   5229 ;	../../core/loader/elfloader.c:552: if(datarelasize > 0) {
      001732 E5 81            [12] 5230 	mov	a,sp
      001734 24 28            [12] 5231 	add	a,#0x28
      001736 F8               [12] 5232 	mov	r0,a
      001737 E6               [12] 5233 	mov	a,@r0
      001738 08               [12] 5234 	inc	r0
      001739 46               [12] 5235 	orl	a,@r0
      00173A 70 03            [24] 5236 	jnz	00359$
      00173C 02r17rFE         [24] 5237 	ljmp	00190$
      00173F                       5238 00359$:
                                   5239 ;	../../core/loader/elfloader.c:559: symtaboff, symtabsize, using_relas);
      00173F E5 81            [12] 5240 	mov	a,sp
      001741 24 FB            [12] 5241 	add	a,#0xfb
      001743 F8               [12] 5242 	mov	r0,a
      001744 E5 81            [12] 5243 	mov	a,sp
      001746 24 54            [12] 5244 	add	a,#0x54
      001748 F9               [12] 5245 	mov	r1,a
      001749 E6               [12] 5246 	mov	a,@r0
      00174A F7               [12] 5247 	mov	@r1,a
      00174B 08               [12] 5248 	inc	r0
      00174C 09               [12] 5249 	inc	r1
      00174D E6               [12] 5250 	mov	a,@r0
      00174E F7               [12] 5251 	mov	@r1,a
                                   5252 ;	../../core/loader/elfloader.c:558: strtaboff,
      00174F A8 81            [24] 5253 	mov	r0,sp
      001751 18               [12] 5254 	dec	r0
      001752 E5 81            [12] 5255 	mov	a,sp
      001754 24 56            [12] 5256 	add	a,#0x56
      001756 F9               [12] 5257 	mov	r1,a
      001757 E6               [12] 5258 	mov	a,@r0
      001758 F7               [12] 5259 	mov	@r1,a
      001759 08               [12] 5260 	inc	r0
      00175A 09               [12] 5261 	inc	r1
      00175B E6               [12] 5262 	mov	a,@r0
      00175C F7               [12] 5263 	mov	@r1,a
                                   5264 ;	../../core/loader/elfloader.c:556: data.address,
      00175D 90r00r2A         [24] 5265 	mov	dptr,#(_data + 0x0003)
      001760 E0               [24] 5266 	movx	a,@dptr
      001761 FA               [12] 5267 	mov	r2,a
      001762 A3               [24] 5268 	inc	dptr
      001763 E0               [24] 5269 	movx	a,@dptr
      001764 FD               [12] 5270 	mov	r5,a
      001765 A3               [24] 5271 	inc	dptr
      001766 E0               [24] 5272 	movx	a,@dptr
      001767 FF               [12] 5273 	mov	r7,a
                                   5274 ;	../../core/loader/elfloader.c:555: dataoff,
      001768 E5 81            [12] 5275 	mov	a,sp
      00176A 24 F7            [12] 5276 	add	a,#0xf7
      00176C F8               [12] 5277 	mov	r0,a
      00176D E5 81            [12] 5278 	mov	a,sp
      00176F 24 50            [12] 5279 	add	a,#0x50
      001771 F9               [12] 5280 	mov	r1,a
      001772 E6               [12] 5281 	mov	a,@r0
      001773 F7               [12] 5282 	mov	@r1,a
      001774 08               [12] 5283 	inc	r0
      001775 09               [12] 5284 	inc	r1
      001776 E6               [12] 5285 	mov	a,@r0
      001777 F7               [12] 5286 	mov	@r1,a
                                   5287 ;	../../core/loader/elfloader.c:554: datarelaoff, datarelasize,
      001778 E5 81            [12] 5288 	mov	a,sp
      00177A 24 1C            [12] 5289 	add	a,#0x1c
      00177C F8               [12] 5290 	mov	r0,a
      00177D 86 03            [24] 5291 	mov	ar3,@r0
      00177F 08               [12] 5292 	inc	r0
      001780 86 06            [24] 5293 	mov	ar6,@r0
                                   5294 ;	../../core/loader/elfloader.c:553: ret = relocate_section(fd,
      001782 E5 81            [12] 5295 	mov	a,sp
      001784 24 F2            [12] 5296 	add	a,#0xf2
      001786 F8               [12] 5297 	mov	r0,a
      001787 E6               [12] 5298 	mov	a,@r0
      001788 C0 E0            [24] 5299 	push	acc
      00178A E5 81            [12] 5300 	mov	a,sp
      00178C 24 FC            [12] 5301 	add	a,#0xfc
      00178E F8               [12] 5302 	mov	r0,a
      00178F E6               [12] 5303 	mov	a,@r0
      001790 C0 E0            [24] 5304 	push	acc
      001792 08               [12] 5305 	inc	r0
      001793 E6               [12] 5306 	mov	a,@r0
      001794 C0 E0            [24] 5307 	push	acc
      001796 E5 81            [12] 5308 	mov	a,sp
      001798 24 51            [12] 5309 	add	a,#0x51
      00179A F8               [12] 5310 	mov	r0,a
      00179B E6               [12] 5311 	mov	a,@r0
      00179C C0 E0            [24] 5312 	push	acc
      00179E 08               [12] 5313 	inc	r0
      00179F E6               [12] 5314 	mov	a,@r0
      0017A0 C0 E0            [24] 5315 	push	acc
      0017A2 E5 81            [12] 5316 	mov	a,sp
      0017A4 24 51            [12] 5317 	add	a,#0x51
      0017A6 F8               [12] 5318 	mov	r0,a
      0017A7 E6               [12] 5319 	mov	a,@r0
      0017A8 C0 E0            [24] 5320 	push	acc
      0017AA 08               [12] 5321 	inc	r0
      0017AB E6               [12] 5322 	mov	a,@r0
      0017AC C0 E0            [24] 5323 	push	acc
      0017AE E5 81            [12] 5324 	mov	a,sp
      0017B0 24 51            [12] 5325 	add	a,#0x51
      0017B2 F8               [12] 5326 	mov	r0,a
      0017B3 E6               [12] 5327 	mov	a,@r0
      0017B4 C0 E0            [24] 5328 	push	acc
      0017B6 08               [12] 5329 	inc	r0
      0017B7 E6               [12] 5330 	mov	a,@r0
      0017B8 C0 E0            [24] 5331 	push	acc
      0017BA C0 02            [24] 5332 	push	ar2
      0017BC C0 05            [24] 5333 	push	ar5
      0017BE C0 07            [24] 5334 	push	ar7
      0017C0 E5 81            [12] 5335 	mov	a,sp
      0017C2 24 44            [12] 5336 	add	a,#0x44
      0017C4 F8               [12] 5337 	mov	r0,a
      0017C5 E6               [12] 5338 	mov	a,@r0
      0017C6 C0 E0            [24] 5339 	push	acc
      0017C8 08               [12] 5340 	inc	r0
      0017C9 E6               [12] 5341 	mov	a,@r0
      0017CA C0 E0            [24] 5342 	push	acc
      0017CC E5 81            [12] 5343 	mov	a,sp
      0017CE 24 1A            [12] 5344 	add	a,#0x1a
      0017D0 F8               [12] 5345 	mov	r0,a
      0017D1 E6               [12] 5346 	mov	a,@r0
      0017D2 C0 E0            [24] 5347 	push	acc
      0017D4 08               [12] 5348 	inc	r0
      0017D5 E6               [12] 5349 	mov	a,@r0
      0017D6 C0 E0            [24] 5350 	push	acc
      0017D8 C0 03            [24] 5351 	push	ar3
      0017DA C0 06            [24] 5352 	push	ar6
      0017DC E5 81            [12] 5353 	mov	a,sp
      0017DE 24 08            [12] 5354 	add	a,#0x08
      0017E0 F8               [12] 5355 	mov	r0,a
      0017E1 86 82            [24] 5356 	mov	dpl,@r0
      0017E3 08               [12] 5357 	inc	r0
      0017E4 86 83            [24] 5358 	mov	dph,@r0
      0017E6 12r02r95         [24] 5359 	lcall	_relocate_section
      0017E9 AE 82            [24] 5360 	mov	r6,dpl
      0017EB AF 83            [24] 5361 	mov	r7,dph
      0017ED E5 81            [12] 5362 	mov	a,sp
      0017EF 24 EE            [12] 5363 	add	a,#0xee
      0017F1 F5 81            [12] 5364 	mov	sp,a
                                   5365 ;	../../core/loader/elfloader.c:560: if(ret != ELFLOADER_OK) {
      0017F3 EE               [12] 5366 	mov	a,r6
      0017F4 4F               [12] 5367 	orl	a,r7
      0017F5 60 07            [24] 5368 	jz	00190$
                                   5369 ;	../../core/loader/elfloader.c:562: return ret;
      0017F7 8E 82            [24] 5370 	mov	dpl,r6
      0017F9 8F 83            [24] 5371 	mov	dph,r7
      0017FB 02r19rAC         [24] 5372 	ljmp	00207$
      0017FE                       5373 00190$:
                                   5374 ;	../../core/loader/elfloader.c:567: elfloader_arch_write_rom(fd, textoff, textsize, text.address);
      0017FE 90r00r36         [24] 5375 	mov	dptr,#(_text + 0x0003)
      001801 E0               [24] 5376 	movx	a,@dptr
      001802 FD               [12] 5377 	mov	r5,a
      001803 A3               [24] 5378 	inc	dptr
      001804 E0               [24] 5379 	movx	a,@dptr
      001805 FE               [12] 5380 	mov	r6,a
      001806 A3               [24] 5381 	inc	dptr
      001807 E0               [24] 5382 	movx	a,@dptr
      001808 FF               [12] 5383 	mov	r7,a
      001809 E5 81            [12] 5384 	mov	a,sp
      00180B 24 F5            [12] 5385 	add	a,#0xf5
      00180D F8               [12] 5386 	mov	r0,a
      00180E 86 03            [24] 5387 	mov	ar3,@r0
      001810 08               [12] 5388 	inc	r0
      001811 86 04            [24] 5389 	mov	ar4,@r0
      001813 C0 05            [24] 5390 	push	ar5
      001815 C0 06            [24] 5391 	push	ar6
      001817 C0 07            [24] 5392 	push	ar7
      001819 C0 03            [24] 5393 	push	ar3
      00181B C0 04            [24] 5394 	push	ar4
      00181D E5 81            [12] 5395 	mov	a,sp
      00181F 24 EE            [12] 5396 	add	a,#0xee
      001821 F8               [12] 5397 	mov	r0,a
      001822 E6               [12] 5398 	mov	a,@r0
      001823 C0 E0            [24] 5399 	push	acc
      001825 08               [12] 5400 	inc	r0
      001826 E6               [12] 5401 	mov	a,@r0
      001827 C0 E0            [24] 5402 	push	acc
      001829 E5 81            [12] 5403 	mov	a,sp
      00182B 24 13            [12] 5404 	add	a,#0x13
      00182D F8               [12] 5405 	mov	r0,a
      00182E 86 82            [24] 5406 	mov	dpl,@r0
      001830 08               [12] 5407 	inc	r0
      001831 86 83            [24] 5408 	mov	dph,@r0
      001833 12r00r00         [24] 5409 	lcall	_elfloader_arch_write_rom
      001836 E5 81            [12] 5410 	mov	a,sp
      001838 24 F9            [12] 5411 	add	a,#0xf9
      00183A F5 81            [12] 5412 	mov	sp,a
                                   5413 ;	../../core/loader/elfloader.c:568: elfloader_arch_write_rom(fd, rodataoff, rodatasize, rodata.address);
      00183C 90r00r30         [24] 5414 	mov	dptr,#(_rodata + 0x0003)
      00183F E0               [24] 5415 	movx	a,@dptr
      001840 FD               [12] 5416 	mov	r5,a
      001841 A3               [24] 5417 	inc	dptr
      001842 E0               [24] 5418 	movx	a,@dptr
      001843 FE               [12] 5419 	mov	r6,a
      001844 A3               [24] 5420 	inc	dptr
      001845 E0               [24] 5421 	movx	a,@dptr
      001846 FF               [12] 5422 	mov	r7,a
      001847 E5 81            [12] 5423 	mov	a,sp
      001849 24 26            [12] 5424 	add	a,#0x26
      00184B F8               [12] 5425 	mov	r0,a
      00184C 86 03            [24] 5426 	mov	ar3,@r0
      00184E 08               [12] 5427 	inc	r0
      00184F 86 04            [24] 5428 	mov	ar4,@r0
      001851 C0 05            [24] 5429 	push	ar5
      001853 C0 06            [24] 5430 	push	ar6
      001855 C0 07            [24] 5431 	push	ar7
      001857 C0 03            [24] 5432 	push	ar3
      001859 C0 04            [24] 5433 	push	ar4
      00185B E5 81            [12] 5434 	mov	a,sp
      00185D 24 F4            [12] 5435 	add	a,#0xf4
      00185F F8               [12] 5436 	mov	r0,a
      001860 E6               [12] 5437 	mov	a,@r0
      001861 C0 E0            [24] 5438 	push	acc
      001863 08               [12] 5439 	inc	r0
      001864 E6               [12] 5440 	mov	a,@r0
      001865 C0 E0            [24] 5441 	push	acc
      001867 E5 81            [12] 5442 	mov	a,sp
      001869 24 13            [12] 5443 	add	a,#0x13
      00186B F8               [12] 5444 	mov	r0,a
      00186C 86 82            [24] 5445 	mov	dpl,@r0
      00186E 08               [12] 5446 	inc	r0
      00186F 86 83            [24] 5447 	mov	dph,@r0
      001871 12r00r00         [24] 5448 	lcall	_elfloader_arch_write_rom
      001874 E5 81            [12] 5449 	mov	a,sp
      001876 24 F9            [12] 5450 	add	a,#0xf9
                                   5451 ;	../../core/loader/elfloader.c:570: memset(bss.address, 0, bsssize);
      001878 F5 81            [12] 5452 	mov	sp,a
      00187A 24 20            [12] 5453 	add	a,#0x20
      00187C F8               [12] 5454 	mov	r0,a
      00187D 86 06            [24] 5455 	mov	ar6,@r0
      00187F 08               [12] 5456 	inc	r0
      001880 86 07            [24] 5457 	mov	ar7,@r0
      001882 90r00r24         [24] 5458 	mov	dptr,#(_bss + 0x0003)
      001885 E0               [24] 5459 	movx	a,@dptr
      001886 FB               [12] 5460 	mov	r3,a
      001887 A3               [24] 5461 	inc	dptr
      001888 E0               [24] 5462 	movx	a,@dptr
      001889 FC               [12] 5463 	mov	r4,a
      00188A A3               [24] 5464 	inc	dptr
      00188B E0               [24] 5465 	movx	a,@dptr
      00188C FD               [12] 5466 	mov	r5,a
      00188D C0 06            [24] 5467 	push	ar6
      00188F C0 07            [24] 5468 	push	ar7
      001891 E4               [12] 5469 	clr	a
      001892 C0 E0            [24] 5470 	push	acc
      001894 8B 82            [24] 5471 	mov	dpl,r3
      001896 8C 83            [24] 5472 	mov	dph,r4
      001898 8D F0            [24] 5473 	mov	b,r5
      00189A 12r00r00         [24] 5474 	lcall	_memset
      00189D 15 81            [12] 5475 	dec	sp
      00189F 15 81            [12] 5476 	dec	sp
      0018A1 15 81            [12] 5477 	dec	sp
                                   5478 ;	../../core/loader/elfloader.c:571: seek_read(fd, dataoff, data.address, datasize);
      0018A3 E5 81            [12] 5479 	mov	a,sp
      0018A5 24 2A            [12] 5480 	add	a,#0x2a
      0018A7 F8               [12] 5481 	mov	r0,a
      0018A8 E5 81            [12] 5482 	mov	a,sp
      0018AA 24 56            [12] 5483 	add	a,#0x56
      0018AC F9               [12] 5484 	mov	r1,a
      0018AD E6               [12] 5485 	mov	a,@r0
      0018AE F7               [12] 5486 	mov	@r1,a
      0018AF 08               [12] 5487 	inc	r0
      0018B0 09               [12] 5488 	inc	r1
      0018B1 E6               [12] 5489 	mov	a,@r0
      0018B2 F7               [12] 5490 	mov	@r1,a
      0018B3 90r00r2A         [24] 5491 	mov	dptr,#(_data + 0x0003)
      0018B6 E0               [24] 5492 	movx	a,@dptr
      0018B7 FB               [12] 5493 	mov	r3,a
      0018B8 A3               [24] 5494 	inc	dptr
      0018B9 E0               [24] 5495 	movx	a,@dptr
      0018BA FC               [12] 5496 	mov	r4,a
      0018BB A3               [24] 5497 	inc	dptr
      0018BC E0               [24] 5498 	movx	a,@dptr
      0018BD FD               [12] 5499 	mov	r5,a
      0018BE E5 81            [12] 5500 	mov	a,sp
      0018C0 24 F7            [12] 5501 	add	a,#0xf7
      0018C2 F8               [12] 5502 	mov	r0,a
      0018C3 86 02            [24] 5503 	mov	ar2,@r0
      0018C5 08               [12] 5504 	inc	r0
      0018C6 86 07            [24] 5505 	mov	ar7,@r0
      0018C8 E5 81            [12] 5506 	mov	a,sp
      0018CA 24 56            [12] 5507 	add	a,#0x56
      0018CC F8               [12] 5508 	mov	r0,a
      0018CD E6               [12] 5509 	mov	a,@r0
      0018CE C0 E0            [24] 5510 	push	acc
      0018D0 08               [12] 5511 	inc	r0
      0018D1 E6               [12] 5512 	mov	a,@r0
      0018D2 C0 E0            [24] 5513 	push	acc
      0018D4 C0 03            [24] 5514 	push	ar3
      0018D6 C0 04            [24] 5515 	push	ar4
      0018D8 C0 05            [24] 5516 	push	ar5
      0018DA C0 02            [24] 5517 	push	ar2
      0018DC C0 07            [24] 5518 	push	ar7
      0018DE E5 81            [12] 5519 	mov	a,sp
      0018E0 24 13            [12] 5520 	add	a,#0x13
      0018E2 F8               [12] 5521 	mov	r0,a
      0018E3 86 82            [24] 5522 	mov	dpl,@r0
      0018E5 08               [12] 5523 	inc	r0
      0018E6 86 83            [24] 5524 	mov	dph,@r0
      0018E8 12r00r00         [24] 5525 	lcall	_seek_read
      0018EB E5 81            [12] 5526 	mov	a,sp
      0018ED 24 F9            [12] 5527 	add	a,#0xf9
      0018EF F5 81            [12] 5528 	mov	sp,a
                                   5529 ;	../../core/loader/elfloader.c:574: process = (struct process **) find_local_symbol(fd, "autostart_processes", symtaboff, symtabsize, strtaboff);
      0018F1 A8 81            [24] 5530 	mov	r0,sp
      0018F3 18               [12] 5531 	dec	r0
      0018F4 86 03            [24] 5532 	mov	ar3,@r0
      0018F6 08               [12] 5533 	inc	r0
      0018F7 86 04            [24] 5534 	mov	ar4,@r0
      0018F9 E5 81            [12] 5535 	mov	a,sp
      0018FB 24 FB            [12] 5536 	add	a,#0xfb
      0018FD F8               [12] 5537 	mov	r0,a
      0018FE E5 81            [12] 5538 	mov	a,sp
      001900 24 56            [12] 5539 	add	a,#0x56
      001902 F9               [12] 5540 	mov	r1,a
      001903 E6               [12] 5541 	mov	a,@r0
      001904 F7               [12] 5542 	mov	@r1,a
      001905 08               [12] 5543 	inc	r0
      001906 09               [12] 5544 	inc	r1
      001907 E6               [12] 5545 	mov	a,@r0
      001908 F7               [12] 5546 	mov	@r1,a
      001909 C0 04            [24] 5547 	push	ar4
      00190B C0 03            [24] 5548 	push	ar3
      00190D C0 03            [24] 5549 	push	ar3
      00190F C0 04            [24] 5550 	push	ar4
      001911 E5 81            [12] 5551 	mov	a,sp
      001913 24 F9            [12] 5552 	add	a,#0xf9
      001915 F8               [12] 5553 	mov	r0,a
      001916 E6               [12] 5554 	mov	a,@r0
      001917 C0 E0            [24] 5555 	push	acc
      001919 08               [12] 5556 	inc	r0
      00191A E6               [12] 5557 	mov	a,@r0
      00191B C0 E0            [24] 5558 	push	acc
      00191D E5 81            [12] 5559 	mov	a,sp
      00191F 24 50            [12] 5560 	add	a,#0x50
      001921 F8               [12] 5561 	mov	r0,a
      001922 E6               [12] 5562 	mov	a,@r0
      001923 C0 E0            [24] 5563 	push	acc
      001925 08               [12] 5564 	inc	r0
      001926 E6               [12] 5565 	mov	a,@r0
      001927 C0 E0            [24] 5566 	push	acc
      001929 74r07            [12] 5567 	mov	a,#___str_0
      00192B C0 E0            [24] 5568 	push	acc
      00192D 74s00            [12] 5569 	mov	a,#(___str_0 >> 8)
      00192F C0 E0            [24] 5570 	push	acc
      001931 74 80            [12] 5571 	mov	a,#0x80
      001933 C0 E0            [24] 5572 	push	acc
      001935 E5 81            [12] 5573 	mov	a,sp
      001937 24 0F            [12] 5574 	add	a,#0x0f
      001939 F8               [12] 5575 	mov	r0,a
      00193A 86 82            [24] 5576 	mov	dpl,@r0
      00193C 08               [12] 5577 	inc	r0
      00193D 86 83            [24] 5578 	mov	dph,@r0
      00193F 12r00r57         [24] 5579 	lcall	_find_local_symbol
      001942 AA 82            [24] 5580 	mov	r2,dpl
      001944 AD 83            [24] 5581 	mov	r5,dph
      001946 AF F0            [24] 5582 	mov	r7,b
      001948 E5 81            [12] 5583 	mov	a,sp
      00194A 24 F7            [12] 5584 	add	a,#0xf7
      00194C F5 81            [12] 5585 	mov	sp,a
      00194E D0 03            [24] 5586 	pop	ar3
      001950 D0 04            [24] 5587 	pop	ar4
      001952 E5 81            [12] 5588 	mov	a,sp
      001954 24 50            [12] 5589 	add	a,#0x50
      001956 F8               [12] 5590 	mov	r0,a
      001957 A6 02            [24] 5591 	mov	@r0,ar2
      001959 08               [12] 5592 	inc	r0
      00195A A6 05            [24] 5593 	mov	@r0,ar5
      00195C 08               [12] 5594 	inc	r0
      00195D A6 07            [24] 5595 	mov	@r0,ar7
                                   5596 ;	../../core/loader/elfloader.c:575: if(process != NULL) {
      00195F EA               [12] 5597 	mov	a,r2
      001960 4D               [12] 5598 	orl	a,r5
      001961 60 17            [24] 5599 	jz	00195$
                                   5600 ;	../../core/loader/elfloader.c:577: elfloader_autostart_processes = process;
      001963 E5 81            [12] 5601 	mov	a,sp
      001965 24 50            [12] 5602 	add	a,#0x50
      001967 F8               [12] 5603 	mov	r0,a
      001968 90r00r1E         [24] 5604 	mov	dptr,#_elfloader_autostart_processes
      00196B E6               [12] 5605 	mov	a,@r0
      00196C F0               [24] 5606 	movx	@dptr,a
      00196D 08               [12] 5607 	inc	r0
      00196E E6               [12] 5608 	mov	a,@r0
      00196F A3               [24] 5609 	inc	dptr
      001970 F0               [24] 5610 	movx	@dptr,a
      001971 08               [12] 5611 	inc	r0
      001972 E6               [12] 5612 	mov	a,@r0
      001973 A3               [24] 5613 	inc	dptr
      001974 F0               [24] 5614 	movx	@dptr,a
                                   5615 ;	../../core/loader/elfloader.c:578: return ELFLOADER_OK;
      001975 90 00 00         [24] 5616 	mov	dptr,#0x0000
                                   5617 ;	../../core/loader/elfloader.c:580: PRINTF("elfloader: no autostart\n");
      001978 80 32            [24] 5618 	sjmp	00207$
      00197A                       5619 00195$:
                                   5620 ;	../../core/loader/elfloader.c:581: process = (struct process **) find_program_processes(fd, symtaboff, symtabsize, strtaboff);
      00197A C0 03            [24] 5621 	push	ar3
      00197C C0 04            [24] 5622 	push	ar4
      00197E E5 81            [12] 5623 	mov	a,sp
      001980 24 FB            [12] 5624 	add	a,#0xfb
      001982 F8               [12] 5625 	mov	r0,a
      001983 E6               [12] 5626 	mov	a,@r0
      001984 C0 E0            [24] 5627 	push	acc
      001986 08               [12] 5628 	inc	r0
      001987 E6               [12] 5629 	mov	a,@r0
      001988 C0 E0            [24] 5630 	push	acc
      00198A E5 81            [12] 5631 	mov	a,sp
      00198C 24 52            [12] 5632 	add	a,#0x52
      00198E F8               [12] 5633 	mov	r0,a
      00198F E6               [12] 5634 	mov	a,@r0
      001990 C0 E0            [24] 5635 	push	acc
      001992 08               [12] 5636 	inc	r0
      001993 E6               [12] 5637 	mov	a,@r0
      001994 C0 E0            [24] 5638 	push	acc
      001996 E5 81            [12] 5639 	mov	a,sp
      001998 24 14            [12] 5640 	add	a,#0x14
      00199A F8               [12] 5641 	mov	r0,a
      00199B 86 82            [24] 5642 	mov	dpl,@r0
      00199D 08               [12] 5643 	inc	r0
      00199E 86 83            [24] 5644 	mov	dph,@r0
      0019A0 12r07rE2         [24] 5645 	lcall	_find_program_processes
      0019A3 E5 81            [12] 5646 	mov	a,sp
      0019A5 24 FA            [12] 5647 	add	a,#0xfa
      0019A7 F5 81            [12] 5648 	mov	sp,a
                                   5649 ;	../../core/loader/elfloader.c:585: return ELFLOADER_NO_STARTPOINT;
      0019A9 90 00 07         [24] 5650 	mov	dptr,#0x0007
      0019AC                       5651 00207$:
                                   5652 ;	../../core/loader/elfloader.c:587: }
      0019AC E5 81            [12] 5653 	mov	a,sp
      0019AE 24 19            [12] 5654 	add	a,#0x19
      0019B0 F5 81            [12] 5655 	mov	sp,a
      0019B2 22               [24] 5656 	ret
                                   5657 	.area CSEG    (CODE)
                                   5658 	.area CONST   (CODE)
      000000                       5659 _elf_magic_header:
      000000 7F                    5660 	.db #0x7f	; 127
      000001 45                    5661 	.db #0x45	; 69	'E'
      000002 4C                    5662 	.db #0x4c	; 76	'L'
      000003 46                    5663 	.db #0x46	; 70	'F'
      000004 01                    5664 	.db #0x01	; 1
      000005 01                    5665 	.db #0x01	; 1
      000006 01                    5666 	.db #0x01	; 1
                                   5667 	.area CONST   (CODE)
      000007                       5668 ___str_0:
      000007 61 75 74 6F 73 74 61  5669 	.ascii "autostart_processes"
             72 74 5F 70 72 6F 63
             65 73 73 65 73
      00001A 00                    5670 	.db 0x00
                                   5671 	.area CSEG    (CODE)
                                   5672 	.area CONST   (CODE)
      00001B                       5673 ___str_1:
      00001B 2E 74 65 78 74        5674 	.ascii ".text"
      000020 00                    5675 	.db 0x00
                                   5676 	.area CSEG    (CODE)
                                   5677 	.area CONST   (CODE)
      000021                       5678 ___str_2:
      000021 2E 72 65 6C 2E 74 65  5679 	.ascii ".rel.text"
             78 74
      00002A 00                    5680 	.db 0x00
                                   5681 	.area CSEG    (CODE)
                                   5682 	.area CONST   (CODE)
      00002B                       5683 ___str_3:
      00002B 2E 72 65 6C 61 2E 74  5684 	.ascii ".rela.text"
             65 78 74
      000035 00                    5685 	.db 0x00
                                   5686 	.area CSEG    (CODE)
                                   5687 	.area CONST   (CODE)
      000036                       5688 ___str_4:
      000036 2E 64 61 74 61        5689 	.ascii ".data"
      00003B 00                    5690 	.db 0x00
                                   5691 	.area CSEG    (CODE)
                                   5692 	.area CONST   (CODE)
      00003C                       5693 ___str_5:
      00003C 2E 72 6F 64 61 74 61  5694 	.ascii ".rodata"
      000043 00                    5695 	.db 0x00
                                   5696 	.area CSEG    (CODE)
                                   5697 	.area CONST   (CODE)
      000044                       5698 ___str_6:
      000044 2E 72 65 6C 2E 72 6F  5699 	.ascii ".rel.rodata"
             64 61 74 61
      00004F 00                    5700 	.db 0x00
                                   5701 	.area CSEG    (CODE)
                                   5702 	.area CONST   (CODE)
      000050                       5703 ___str_7:
      000050 2E 72 65 6C 61 2E 72  5704 	.ascii ".rela.rodata"
             6F 64 61 74 61
      00005C 00                    5705 	.db 0x00
                                   5706 	.area CSEG    (CODE)
                                   5707 	.area CONST   (CODE)
      00005D                       5708 ___str_8:
      00005D 2E 72 65 6C 2E 64 61  5709 	.ascii ".rel.data"
             74 61
      000066 00                    5710 	.db 0x00
                                   5711 	.area CSEG    (CODE)
                                   5712 	.area CONST   (CODE)
      000067                       5713 ___str_9:
      000067 2E 72 65 6C 61 2E 64  5714 	.ascii ".rela.data"
             61 74 61
      000071 00                    5715 	.db 0x00
                                   5716 	.area CSEG    (CODE)
                                   5717 	.area CONST   (CODE)
      000072                       5718 ___str_10:
      000072 2E 62 73 73           5719 	.ascii ".bss"
      000076 00                    5720 	.db 0x00
                                   5721 	.area CSEG    (CODE)
                                   5722 	.area XINIT   (CODE)
                                   5723 	.area CABS    (ABS,CODE)
