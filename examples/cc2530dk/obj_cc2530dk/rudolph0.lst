                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module rudolph0
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _stbroadcast_set_timer
                                     12 	.globl _stbroadcast_cancel
                                     13 	.globl _stbroadcast_send_stubborn
                                     14 	.globl _stbroadcast_close
                                     15 	.globl _stbroadcast_open
                                     16 	.globl _polite_send
                                     17 	.globl _polite_close
                                     18 	.globl _polite_open
                                     19 	.globl _packetbuf_hdralloc
                                     20 	.globl _packetbuf_reference
                                     21 	.globl _packetbuf_hdrptr
                                     22 	.globl _packetbuf_dataptr
                                     23 	.globl _packetbuf_clear
                                     24 	.globl _ACTIVE
                                     25 	.globl _TX_BYTE
                                     26 	.globl _RX_BYTE
                                     27 	.globl _ERR
                                     28 	.globl _FE
                                     29 	.globl _SLAVE
                                     30 	.globl _RE
                                     31 	.globl _MODE
                                     32 	.globl _T3OVFIF
                                     33 	.globl _T3CH0IF
                                     34 	.globl _T3CH1IF
                                     35 	.globl _T4OVFIF
                                     36 	.globl _T4CH0IF
                                     37 	.globl _T4CH1IF
                                     38 	.globl _OVFIM
                                     39 	.globl _B_0
                                     40 	.globl _B_1
                                     41 	.globl _B_2
                                     42 	.globl _B_3
                                     43 	.globl _B_4
                                     44 	.globl _B_5
                                     45 	.globl _B_6
                                     46 	.globl _B_7
                                     47 	.globl _P2IF
                                     48 	.globl _UTX0IF
                                     49 	.globl _UTX1IF
                                     50 	.globl _P1IF
                                     51 	.globl _WDTIF
                                     52 	.globl _ACC_0
                                     53 	.globl _ACC_1
                                     54 	.globl _ACC_2
                                     55 	.globl _ACC_3
                                     56 	.globl _ACC_4
                                     57 	.globl _ACC_5
                                     58 	.globl _ACC_6
                                     59 	.globl _ACC_7
                                     60 	.globl _P
                                     61 	.globl _F1
                                     62 	.globl _OV
                                     63 	.globl _RS0
                                     64 	.globl _RS1
                                     65 	.globl _F0
                                     66 	.globl _AC
                                     67 	.globl _CY
                                     68 	.globl _DMAIF
                                     69 	.globl _T1IF
                                     70 	.globl _T2IF
                                     71 	.globl _T3IF
                                     72 	.globl _T4IF
                                     73 	.globl _P0IF
                                     74 	.globl _STIF
                                     75 	.globl _DMAIE
                                     76 	.globl _T1IE
                                     77 	.globl _T2IE
                                     78 	.globl _T3IE
                                     79 	.globl _T4IE
                                     80 	.globl _P0IE
                                     81 	.globl _RFERRIE
                                     82 	.globl _ADCIE
                                     83 	.globl _URX0IE
                                     84 	.globl _URX1IE
                                     85 	.globl _ENCIE
                                     86 	.globl _STIE
                                     87 	.globl _EA
                                     88 	.globl _P2_0
                                     89 	.globl _P2_1
                                     90 	.globl _P2_2
                                     91 	.globl _P2_3
                                     92 	.globl _P2_4
                                     93 	.globl _P2_5
                                     94 	.globl _P2_6
                                     95 	.globl _P2_7
                                     96 	.globl _ENCIF_0
                                     97 	.globl _ENCIF_1
                                     98 	.globl _P1_0
                                     99 	.globl _P1_1
                                    100 	.globl _P1_2
                                    101 	.globl _P1_3
                                    102 	.globl _P1_4
                                    103 	.globl _P1_5
                                    104 	.globl _P1_6
                                    105 	.globl _P1_7
                                    106 	.globl _IT0
                                    107 	.globl _RFERRIF
                                    108 	.globl _IT1
                                    109 	.globl _URX0IF
                                    110 	.globl _ADCIF
                                    111 	.globl _URX1IF
                                    112 	.globl _P0_0
                                    113 	.globl _P0_1
                                    114 	.globl _P0_2
                                    115 	.globl _P0_3
                                    116 	.globl _P0_4
                                    117 	.globl _P0_5
                                    118 	.globl _P0_6
                                    119 	.globl _P0_7
                                    120 	.globl _WDCTL
                                    121 	.globl _U1GCR
                                    122 	.globl _U1UCR
                                    123 	.globl _U1BAUD
                                    124 	.globl _U1DBUF
                                    125 	.globl _U1CSR
                                    126 	.globl _U0GCR
                                    127 	.globl _U0UCR
                                    128 	.globl _U0BAUD
                                    129 	.globl _U0DBUF
                                    130 	.globl _U0CSR
                                    131 	.globl _TIMIF
                                    132 	.globl _T4CC1
                                    133 	.globl _T4CCTL1
                                    134 	.globl _T4CC0
                                    135 	.globl _T4CCTL0
                                    136 	.globl _T4CTL
                                    137 	.globl _T4CNT
                                    138 	.globl _T3CC1
                                    139 	.globl _T3CCTL1
                                    140 	.globl _T3CC0
                                    141 	.globl _T3CCTL0
                                    142 	.globl _T3CTL
                                    143 	.globl _T3CNT
                                    144 	.globl _T2MSEL
                                    145 	.globl _T2IRQM
                                    146 	.globl _T2MOVF2
                                    147 	.globl _T2MOVF1
                                    148 	.globl _T2MOVF0
                                    149 	.globl _T2M1
                                    150 	.globl _T2M0
                                    151 	.globl _T2IRQF
                                    152 	.globl _T2EVTCFG
                                    153 	.globl _T2CTRL
                                    154 	.globl _T1STAT
                                    155 	.globl _T1CCTL2
                                    156 	.globl _T1CCTL1
                                    157 	.globl _T1CCTL0
                                    158 	.globl _T1CTL
                                    159 	.globl _T1CNTH
                                    160 	.globl _T1CNTL
                                    161 	.globl _T1CC2H
                                    162 	.globl _T1CC2L
                                    163 	.globl _T1CC1H
                                    164 	.globl _T1CC1L
                                    165 	.globl _T1CC0H
                                    166 	.globl _T1CC0L
                                    167 	.globl _CLKCONSTA
                                    168 	.globl _CLKCONCMD
                                    169 	.globl _SLEEPSTA
                                    170 	.globl _SLEEPCMD
                                    171 	.globl _STLOAD
                                    172 	.globl _ST2
                                    173 	.globl _ST1
                                    174 	.globl _ST0
                                    175 	.globl _RFERRF
                                    176 	.globl _RFIRQF0
                                    177 	.globl _RFST
                                    178 	.globl _RFD
                                    179 	.globl _RFIRQF1
                                    180 	.globl _PSBANK
                                    181 	.globl _FMAP
                                    182 	.globl _MEMCTR
                                    183 	.globl __XPAGE
                                    184 	.globl _MPAGE
                                    185 	.globl _PMUX
                                    186 	.globl _P2DIR
                                    187 	.globl _P1DIR
                                    188 	.globl _P0DIR
                                    189 	.globl _P2INP
                                    190 	.globl _P1INP
                                    191 	.globl _P2SEL
                                    192 	.globl _P1SEL
                                    193 	.globl _P0SEL
                                    194 	.globl _APCFG
                                    195 	.globl _PERCFG
                                    196 	.globl _P0INP
                                    197 	.globl _P2IEN
                                    198 	.globl _P1IEN
                                    199 	.globl _P0IEN
                                    200 	.globl _PICTL
                                    201 	.globl _P2IFG
                                    202 	.globl _P1IFG
                                    203 	.globl _P0IFG
                                    204 	.globl _DMAREQ
                                    205 	.globl _DMAARM
                                    206 	.globl _DMA0CFGH
                                    207 	.globl _DMA0CFGL
                                    208 	.globl _DMA1CFGH
                                    209 	.globl _DMA1CFGL
                                    210 	.globl _DMAIRQ
                                    211 	.globl _ENCCS
                                    212 	.globl _ENCDO
                                    213 	.globl _ENCDI
                                    214 	.globl _RNDH
                                    215 	.globl _RNDL
                                    216 	.globl _ADCH
                                    217 	.globl _ADCL
                                    218 	.globl _ADCCON3
                                    219 	.globl _ADCCON2
                                    220 	.globl _ADCCON1
                                    221 	.globl _B
                                    222 	.globl _IRCON2
                                    223 	.globl _ACC
                                    224 	.globl _PSW
                                    225 	.globl _IRCON
                                    226 	.globl _IP1
                                    227 	.globl _IEN1
                                    228 	.globl _IP0
                                    229 	.globl _IEN0
                                    230 	.globl _P2
                                    231 	.globl _S1CON
                                    232 	.globl _IEN2
                                    233 	.globl _S0CON
                                    234 	.globl _DPS
                                    235 	.globl _P1
                                    236 	.globl _TCON
                                    237 	.globl _PCON
                                    238 	.globl _DPH1
                                    239 	.globl _DPL1
                                    240 	.globl _DPH0
                                    241 	.globl _DPL0
                                    242 	.globl _SP
                                    243 	.globl _P0
                                    244 	.globl _X_IEEE_ADDR
                                    245 	.globl _X_INFOPAGE
                                    246 	.globl _X_P2DIR
                                    247 	.globl _X_P1DIR
                                    248 	.globl _X_P0DIR
                                    249 	.globl _X_U1GCR
                                    250 	.globl _X_U1UCR
                                    251 	.globl _X_U1BAUD
                                    252 	.globl _X_U1DBUF
                                    253 	.globl _X_U1CSR
                                    254 	.globl _X_P2INP
                                    255 	.globl _X_P1INP
                                    256 	.globl _X_P2SEL
                                    257 	.globl _X_P1SEL
                                    258 	.globl _X_P0SEL
                                    259 	.globl _X_APCFG
                                    260 	.globl _X_PERCFG
                                    261 	.globl _X_T4CC1
                                    262 	.globl _X_T4CCTL1
                                    263 	.globl _X_T4CC0
                                    264 	.globl _X_T4CCTL0
                                    265 	.globl _X_T4CTL
                                    266 	.globl _X_T4CNT
                                    267 	.globl _X_RFIRQF0
                                    268 	.globl _X_T1CCTL2
                                    269 	.globl _X_T1CCTL1
                                    270 	.globl _X_T1CCTL0
                                    271 	.globl _X_T1CTL
                                    272 	.globl _X_T1CNTH
                                    273 	.globl _X_T1CNTL
                                    274 	.globl _X_RFST
                                    275 	.globl _X_T1CC2H
                                    276 	.globl _X_T1CC2L
                                    277 	.globl _X_T1CC1H
                                    278 	.globl _X_T1CC1L
                                    279 	.globl _X_T1CC0H
                                    280 	.globl _X_T1CC0L
                                    281 	.globl _X_RFD
                                    282 	.globl _X_TIMIF
                                    283 	.globl _X_DMAREQ
                                    284 	.globl _X_DMAARM
                                    285 	.globl _X_DMA0CFGH
                                    286 	.globl _X_DMA0CFGL
                                    287 	.globl _X_DMA1CFGH
                                    288 	.globl _X_DMA1CFGL
                                    289 	.globl _X_DMAIRQ
                                    290 	.globl _X_T3CC1
                                    291 	.globl _X_T3CCTL1
                                    292 	.globl _X_T3CC0
                                    293 	.globl _X_T3CCTL0
                                    294 	.globl _X_T3CTL
                                    295 	.globl _X_T3CNT
                                    296 	.globl _X_WDCTL
                                    297 	.globl _X_MEMCTR
                                    298 	.globl _X_CLKCONCMD
                                    299 	.globl _X_U0GCR
                                    300 	.globl _X_U0UCR
                                    301 	.globl _X_T2MSEL
                                    302 	.globl _X_U0BAUD
                                    303 	.globl _X_U0DBUF
                                    304 	.globl _X_RFERRF
                                    305 	.globl _X_SLEEPCMD
                                    306 	.globl _X_RNDH
                                    307 	.globl _X_RNDL
                                    308 	.globl _X_ADCH
                                    309 	.globl _X_ADCL
                                    310 	.globl _X_ADCCON3
                                    311 	.globl _X_ADCCON2
                                    312 	.globl _X_ADCCON1
                                    313 	.globl _X_ENCCS
                                    314 	.globl _X_ENCDO
                                    315 	.globl _X_ENCDI
                                    316 	.globl _X_T1STAT
                                    317 	.globl _X_PMUX
                                    318 	.globl _X_STLOAD
                                    319 	.globl _X_P2IEN
                                    320 	.globl _X_P0IEN
                                    321 	.globl _X_T2IRQM
                                    322 	.globl _X_T2MOVF2
                                    323 	.globl _X_T2MOVF1
                                    324 	.globl _X_T2MOVF0
                                    325 	.globl _X_T2M1
                                    326 	.globl _X_T2M0
                                    327 	.globl _X_T2IRQF
                                    328 	.globl _X_P2
                                    329 	.globl _X_PSBANK
                                    330 	.globl _X_FMAP
                                    331 	.globl _X_CLKCONSTA
                                    332 	.globl _X_SLEEPSTA
                                    333 	.globl _X_T2EVTCFG
                                    334 	.globl _X_ST2
                                    335 	.globl _X_ST1
                                    336 	.globl _X_ST0
                                    337 	.globl _X_T2CTRL
                                    338 	.globl _X__XPAGE
                                    339 	.globl _X_MPAGE
                                    340 	.globl _X_RFIRQF1
                                    341 	.globl _X_P1
                                    342 	.globl _X_P0INP
                                    343 	.globl _X_P1IEN
                                    344 	.globl _X_PICTL
                                    345 	.globl _X_P2IFG
                                    346 	.globl _X_P1IFG
                                    347 	.globl _X_P0IFG
                                    348 	.globl _X_U0CSR
                                    349 	.globl _X_P0
                                    350 	.globl _USBF5
                                    351 	.globl _USBF4
                                    352 	.globl _USBF3
                                    353 	.globl _USBF2
                                    354 	.globl _USBF1
                                    355 	.globl _USBF0
                                    356 	.globl _USBCNTH
                                    357 	.globl _USBCNTL
                                    358 	.globl _USBCNT0
                                    359 	.globl _USBCSOH
                                    360 	.globl _USBCSOL
                                    361 	.globl _USBMAXO
                                    362 	.globl _USBCSIH
                                    363 	.globl _USBCSIL
                                    364 	.globl _USBCS0
                                    365 	.globl _USBMAXI
                                    366 	.globl _USBCTRL
                                    367 	.globl _USBINDEX
                                    368 	.globl _USBFRMH
                                    369 	.globl _USBFRML
                                    370 	.globl _USBCIE
                                    371 	.globl _USBOIE
                                    372 	.globl _USBIIE
                                    373 	.globl _USBCIF
                                    374 	.globl _USBOIF
                                    375 	.globl _USBIIF
                                    376 	.globl _USBPOW
                                    377 	.globl _USBADDR
                                    378 	.globl _CSPT
                                    379 	.globl _CSPZ
                                    380 	.globl _CSPY
                                    381 	.globl _CSPX
                                    382 	.globl _CSPSTAT
                                    383 	.globl _CSPCTRL
                                    384 	.globl _CSPPROG23
                                    385 	.globl _CSPPROG22
                                    386 	.globl _CSPPROG21
                                    387 	.globl _CSPPROG20
                                    388 	.globl _CSPPROG19
                                    389 	.globl _CSPPROG18
                                    390 	.globl _CSPPROG17
                                    391 	.globl _CSPPROG16
                                    392 	.globl _CSPPROG15
                                    393 	.globl _CSPPROG14
                                    394 	.globl _CSPPROG13
                                    395 	.globl _CSPPROG12
                                    396 	.globl _CSPPROG11
                                    397 	.globl _CSPPROG10
                                    398 	.globl _CSPPROG9
                                    399 	.globl _CSPPROG8
                                    400 	.globl _CSPPROG7
                                    401 	.globl _CSPPROG6
                                    402 	.globl _CSPPROG5
                                    403 	.globl _CSPPROG4
                                    404 	.globl _CSPPROG3
                                    405 	.globl _CSPPROG2
                                    406 	.globl _CSPPROG1
                                    407 	.globl _CSPPROG0
                                    408 	.globl _RFC_OBS_CTRL2
                                    409 	.globl _RFC_OBS_CTRL1
                                    410 	.globl _RFC_OBS_CTRL0
                                    411 	.globl _TXFILTCFG
                                    412 	.globl _PTEST1
                                    413 	.globl _PTEST0
                                    414 	.globl _ATEST
                                    415 	.globl _DACTEST2
                                    416 	.globl _DACTEST1
                                    417 	.globl _DACTEST0
                                    418 	.globl _MDMTEST1
                                    419 	.globl _MDMTEST0
                                    420 	.globl _ADCTEST2
                                    421 	.globl _ADCTEST1
                                    422 	.globl _ADCTEST0
                                    423 	.globl _AGCCTRL3
                                    424 	.globl _AGCCTRL2
                                    425 	.globl _AGCCTRL1
                                    426 	.globl _AGCCTRL0
                                    427 	.globl _FSCAL3
                                    428 	.globl _FSCAL2
                                    429 	.globl _FSCAL1
                                    430 	.globl _FSCAL0
                                    431 	.globl _FSCTRL
                                    432 	.globl _RXCTRL
                                    433 	.globl _FREQEST
                                    434 	.globl _MDMCTRL1
                                    435 	.globl _MDMCTRL0
                                    436 	.globl _RFRND
                                    437 	.globl _RFERRM
                                    438 	.globl _RFIRQM1
                                    439 	.globl _RFIRQM0
                                    440 	.globl _TXLAST_PTR
                                    441 	.globl _TXFIRST_PTR
                                    442 	.globl _RXP1_PTR
                                    443 	.globl _RXLAST_PTR
                                    444 	.globl _RXFIRST_PTR
                                    445 	.globl _TXFIFOCNT
                                    446 	.globl _RXFIFOCNT
                                    447 	.globl _RXFIRST
                                    448 	.globl _RSSISTAT
                                    449 	.globl _RSSI
                                    450 	.globl _CCACTRL1
                                    451 	.globl _CCACTRL0
                                    452 	.globl _FSMCTRL
                                    453 	.globl _FIFOPCTRL
                                    454 	.globl _FSMSTAT1
                                    455 	.globl _FSMSTAT0
                                    456 	.globl _TXCTRL
                                    457 	.globl _TXPOWER
                                    458 	.globl _FREQCTRL
                                    459 	.globl _FREQTUNE
                                    460 	.globl _RXMASKCLR
                                    461 	.globl _RXMASKSET
                                    462 	.globl _RXENABLE
                                    463 	.globl _FRMCTRL1
                                    464 	.globl _FRMCTRL0
                                    465 	.globl _SRCEXTEN2
                                    466 	.globl _SRCEXTEN1
                                    467 	.globl _SRCEXTEN0
                                    468 	.globl _SRCSHORTEN2
                                    469 	.globl _SRCSHORTEN1
                                    470 	.globl _SRCSHORTEN0
                                    471 	.globl _SRCMATCH
                                    472 	.globl _FRMFILT1
                                    473 	.globl _FRMFILT0
                                    474 	.globl _SHORT_ADDR1
                                    475 	.globl _SHORT_ADDR0
                                    476 	.globl _PAN_ID1
                                    477 	.globl _PAN_ID0
                                    478 	.globl _EXT_ADDR7
                                    479 	.globl _EXT_ADDR6
                                    480 	.globl _EXT_ADDR5
                                    481 	.globl _EXT_ADDR4
                                    482 	.globl _EXT_ADDR3
                                    483 	.globl _EXT_ADDR2
                                    484 	.globl _EXT_ADDR1
                                    485 	.globl _EXT_ADDR0
                                    486 	.globl _SRCSHORTPENDEN2
                                    487 	.globl _SRCSHORTPENDEN1
                                    488 	.globl _SRCSHORTPENDEN0
                                    489 	.globl _SRCEXTPENDEN2
                                    490 	.globl _SRCEXTPENDEN1
                                    491 	.globl _SRCEXTPENDEN0
                                    492 	.globl _SRCRESINDEX
                                    493 	.globl _SRCRESMASK2
                                    494 	.globl _SRCRESMASK1
                                    495 	.globl _SRCRESMASK0
                                    496 	.globl _SRC_ADDR_TABLE
                                    497 	.globl _TXFIFO
                                    498 	.globl _RXFIFO
                                    499 	.globl _RFCORE_RAM
                                    500 	.globl _CMPCTL
                                    501 	.globl _OPAMPS
                                    502 	.globl _OPAMPC
                                    503 	.globl _STCV2
                                    504 	.globl _STCV1
                                    505 	.globl _STCV0
                                    506 	.globl _STCS
                                    507 	.globl _STCC
                                    508 	.globl _T1CC4H
                                    509 	.globl _T1CC4L
                                    510 	.globl _T1CC3H
                                    511 	.globl _T1CC3L
                                    512 	.globl _XX_T1CC2H
                                    513 	.globl _XX_T1CC2L
                                    514 	.globl _XX_T1CC1H
                                    515 	.globl _XX_T1CC1L
                                    516 	.globl _XX_T1CC0H
                                    517 	.globl _XX_T1CC0L
                                    518 	.globl _T1CCTL4
                                    519 	.globl _T1CCTL3
                                    520 	.globl _XX_T1CCTL2
                                    521 	.globl _XX_T1CCTL1
                                    522 	.globl _XX_T1CCTL0
                                    523 	.globl _CLD
                                    524 	.globl _IRCTL
                                    525 	.globl _CHIPINFO1
                                    526 	.globl _CHIPINFO0
                                    527 	.globl _FWDATA
                                    528 	.globl _FADDRH
                                    529 	.globl _FADDRL
                                    530 	.globl _FCTL
                                    531 	.globl _IVCTRL
                                    532 	.globl _BATTMON
                                    533 	.globl _SRCRC
                                    534 	.globl _DBGDATA
                                    535 	.globl _TESTREG0
                                    536 	.globl _CHIPID
                                    537 	.globl _CHVER
                                    538 	.globl _OBSSEL5
                                    539 	.globl _OBSSEL4
                                    540 	.globl _OBSSEL3
                                    541 	.globl _OBSSEL2
                                    542 	.globl _OBSSEL1
                                    543 	.globl _OBSSEL0
                                    544 	.globl _I2CIO
                                    545 	.globl _I2CWC
                                    546 	.globl _I2CADDR
                                    547 	.globl _I2CDATA
                                    548 	.globl _I2CSTAT
                                    549 	.globl _I2CCFG
                                    550 	.globl _OPAMPMC
                                    551 	.globl _MONMUX
                                    552 	.globl _rudolph0_open
                                    553 	.globl _rudolph0_close
                                    554 	.globl _rudolph0_send
                                    555 	.globl _rudolph0_force_restart
                                    556 	.globl _rudolph0_stop
                                    557 	.globl _rudolph0_version
                                    558 	.globl _rudolph0_set_version
                                    559 ;--------------------------------------------------------
                                    560 ; special function registers
                                    561 ;--------------------------------------------------------
                                    562 	.area RSEG    (ABS,DATA)
      000000                        563 	.org 0x0000
                           000080   564 _P0	=	0x0080
                           000081   565 _SP	=	0x0081
                           000082   566 _DPL0	=	0x0082
                           000083   567 _DPH0	=	0x0083
                           000084   568 _DPL1	=	0x0084
                           000085   569 _DPH1	=	0x0085
                           000087   570 _PCON	=	0x0087
                           000088   571 _TCON	=	0x0088
                           000090   572 _P1	=	0x0090
                           000092   573 _DPS	=	0x0092
                           000098   574 _S0CON	=	0x0098
                           00009A   575 _IEN2	=	0x009a
                           00009B   576 _S1CON	=	0x009b
                           0000A0   577 _P2	=	0x00a0
                           0000A8   578 _IEN0	=	0x00a8
                           0000A9   579 _IP0	=	0x00a9
                           0000B8   580 _IEN1	=	0x00b8
                           0000B9   581 _IP1	=	0x00b9
                           0000C0   582 _IRCON	=	0x00c0
                           0000D0   583 _PSW	=	0x00d0
                           0000E0   584 _ACC	=	0x00e0
                           0000E8   585 _IRCON2	=	0x00e8
                           0000F0   586 _B	=	0x00f0
                           0000B4   587 _ADCCON1	=	0x00b4
                           0000B5   588 _ADCCON2	=	0x00b5
                           0000B6   589 _ADCCON3	=	0x00b6
                           0000BA   590 _ADCL	=	0x00ba
                           0000BB   591 _ADCH	=	0x00bb
                           0000BC   592 _RNDL	=	0x00bc
                           0000BD   593 _RNDH	=	0x00bd
                           0000B1   594 _ENCDI	=	0x00b1
                           0000B2   595 _ENCDO	=	0x00b2
                           0000B3   596 _ENCCS	=	0x00b3
                           0000D1   597 _DMAIRQ	=	0x00d1
                           0000D2   598 _DMA1CFGL	=	0x00d2
                           0000D3   599 _DMA1CFGH	=	0x00d3
                           0000D4   600 _DMA0CFGL	=	0x00d4
                           0000D5   601 _DMA0CFGH	=	0x00d5
                           0000D6   602 _DMAARM	=	0x00d6
                           0000D7   603 _DMAREQ	=	0x00d7
                           000089   604 _P0IFG	=	0x0089
                           00008A   605 _P1IFG	=	0x008a
                           00008B   606 _P2IFG	=	0x008b
                           00008C   607 _PICTL	=	0x008c
                           0000AB   608 _P0IEN	=	0x00ab
                           00008D   609 _P1IEN	=	0x008d
                           0000AC   610 _P2IEN	=	0x00ac
                           00008F   611 _P0INP	=	0x008f
                           0000F1   612 _PERCFG	=	0x00f1
                           0000F2   613 _APCFG	=	0x00f2
                           0000F3   614 _P0SEL	=	0x00f3
                           0000F4   615 _P1SEL	=	0x00f4
                           0000F5   616 _P2SEL	=	0x00f5
                           0000F6   617 _P1INP	=	0x00f6
                           0000F7   618 _P2INP	=	0x00f7
                           0000FD   619 _P0DIR	=	0x00fd
                           0000FE   620 _P1DIR	=	0x00fe
                           0000FF   621 _P2DIR	=	0x00ff
                           0000AE   622 _PMUX	=	0x00ae
                           000093   623 _MPAGE	=	0x0093
                           000093   624 __XPAGE	=	0x0093
                           0000C7   625 _MEMCTR	=	0x00c7
                           00009F   626 _FMAP	=	0x009f
                           00009F   627 _PSBANK	=	0x009f
                           000091   628 _RFIRQF1	=	0x0091
                           0000D9   629 _RFD	=	0x00d9
                           0000E1   630 _RFST	=	0x00e1
                           0000E9   631 _RFIRQF0	=	0x00e9
                           0000BF   632 _RFERRF	=	0x00bf
                           000095   633 _ST0	=	0x0095
                           000096   634 _ST1	=	0x0096
                           000097   635 _ST2	=	0x0097
                           0000AD   636 _STLOAD	=	0x00ad
                           0000BE   637 _SLEEPCMD	=	0x00be
                           00009D   638 _SLEEPSTA	=	0x009d
                           0000C6   639 _CLKCONCMD	=	0x00c6
                           00009E   640 _CLKCONSTA	=	0x009e
                           0000DA   641 _T1CC0L	=	0x00da
                           0000DB   642 _T1CC0H	=	0x00db
                           0000DC   643 _T1CC1L	=	0x00dc
                           0000DD   644 _T1CC1H	=	0x00dd
                           0000DE   645 _T1CC2L	=	0x00de
                           0000DF   646 _T1CC2H	=	0x00df
                           0000E2   647 _T1CNTL	=	0x00e2
                           0000E3   648 _T1CNTH	=	0x00e3
                           0000E4   649 _T1CTL	=	0x00e4
                           0000E5   650 _T1CCTL0	=	0x00e5
                           0000E6   651 _T1CCTL1	=	0x00e6
                           0000E7   652 _T1CCTL2	=	0x00e7
                           0000AF   653 _T1STAT	=	0x00af
                           000094   654 _T2CTRL	=	0x0094
                           00009C   655 _T2EVTCFG	=	0x009c
                           0000A1   656 _T2IRQF	=	0x00a1
                           0000A2   657 _T2M0	=	0x00a2
                           0000A3   658 _T2M1	=	0x00a3
                           0000A4   659 _T2MOVF0	=	0x00a4
                           0000A5   660 _T2MOVF1	=	0x00a5
                           0000A6   661 _T2MOVF2	=	0x00a6
                           0000A7   662 _T2IRQM	=	0x00a7
                           0000C3   663 _T2MSEL	=	0x00c3
                           0000CA   664 _T3CNT	=	0x00ca
                           0000CB   665 _T3CTL	=	0x00cb
                           0000CC   666 _T3CCTL0	=	0x00cc
                           0000CD   667 _T3CC0	=	0x00cd
                           0000CE   668 _T3CCTL1	=	0x00ce
                           0000CF   669 _T3CC1	=	0x00cf
                           0000EA   670 _T4CNT	=	0x00ea
                           0000EB   671 _T4CTL	=	0x00eb
                           0000EC   672 _T4CCTL0	=	0x00ec
                           0000ED   673 _T4CC0	=	0x00ed
                           0000EE   674 _T4CCTL1	=	0x00ee
                           0000EF   675 _T4CC1	=	0x00ef
                           0000D8   676 _TIMIF	=	0x00d8
                           000086   677 _U0CSR	=	0x0086
                           0000C1   678 _U0DBUF	=	0x00c1
                           0000C2   679 _U0BAUD	=	0x00c2
                           0000C4   680 _U0UCR	=	0x00c4
                           0000C5   681 _U0GCR	=	0x00c5
                           0000F8   682 _U1CSR	=	0x00f8
                           0000F9   683 _U1DBUF	=	0x00f9
                           0000FA   684 _U1BAUD	=	0x00fa
                           0000FB   685 _U1UCR	=	0x00fb
                           0000FC   686 _U1GCR	=	0x00fc
                           0000C9   687 _WDCTL	=	0x00c9
                                    688 ;--------------------------------------------------------
                                    689 ; special function bits
                                    690 ;--------------------------------------------------------
                                    691 	.area RSEG    (ABS,DATA)
      000000                        692 	.org 0x0000
                           000087   693 _P0_7	=	0x0087
                           000086   694 _P0_6	=	0x0086
                           000085   695 _P0_5	=	0x0085
                           000084   696 _P0_4	=	0x0084
                           000083   697 _P0_3	=	0x0083
                           000082   698 _P0_2	=	0x0082
                           000081   699 _P0_1	=	0x0081
                           000080   700 _P0_0	=	0x0080
                           00008F   701 _URX1IF	=	0x008f
                           00008D   702 _ADCIF	=	0x008d
                           00008B   703 _URX0IF	=	0x008b
                           00008A   704 _IT1	=	0x008a
                           000089   705 _RFERRIF	=	0x0089
                           000088   706 _IT0	=	0x0088
                           000097   707 _P1_7	=	0x0097
                           000096   708 _P1_6	=	0x0096
                           000095   709 _P1_5	=	0x0095
                           000094   710 _P1_4	=	0x0094
                           000093   711 _P1_3	=	0x0093
                           000092   712 _P1_2	=	0x0092
                           000091   713 _P1_1	=	0x0091
                           000090   714 _P1_0	=	0x0090
                           000099   715 _ENCIF_1	=	0x0099
                           000098   716 _ENCIF_0	=	0x0098
                           0000A7   717 _P2_7	=	0x00a7
                           0000A6   718 _P2_6	=	0x00a6
                           0000A5   719 _P2_5	=	0x00a5
                           0000A4   720 _P2_4	=	0x00a4
                           0000A3   721 _P2_3	=	0x00a3
                           0000A2   722 _P2_2	=	0x00a2
                           0000A1   723 _P2_1	=	0x00a1
                           0000A0   724 _P2_0	=	0x00a0
                           0000AF   725 _EA	=	0x00af
                           0000AD   726 _STIE	=	0x00ad
                           0000AC   727 _ENCIE	=	0x00ac
                           0000AB   728 _URX1IE	=	0x00ab
                           0000AA   729 _URX0IE	=	0x00aa
                           0000A9   730 _ADCIE	=	0x00a9
                           0000A8   731 _RFERRIE	=	0x00a8
                           0000BD   732 _P0IE	=	0x00bd
                           0000BC   733 _T4IE	=	0x00bc
                           0000BB   734 _T3IE	=	0x00bb
                           0000BA   735 _T2IE	=	0x00ba
                           0000B9   736 _T1IE	=	0x00b9
                           0000B8   737 _DMAIE	=	0x00b8
                           0000C7   738 _STIF	=	0x00c7
                           0000C5   739 _P0IF	=	0x00c5
                           0000C4   740 _T4IF	=	0x00c4
                           0000C3   741 _T3IF	=	0x00c3
                           0000C2   742 _T2IF	=	0x00c2
                           0000C1   743 _T1IF	=	0x00c1
                           0000C0   744 _DMAIF	=	0x00c0
                           0000D7   745 _CY	=	0x00d7
                           0000D6   746 _AC	=	0x00d6
                           0000D5   747 _F0	=	0x00d5
                           0000D4   748 _RS1	=	0x00d4
                           0000D3   749 _RS0	=	0x00d3
                           0000D2   750 _OV	=	0x00d2
                           0000D1   751 _F1	=	0x00d1
                           0000D0   752 _P	=	0x00d0
                           0000E7   753 _ACC_7	=	0x00e7
                           0000E6   754 _ACC_6	=	0x00e6
                           0000E5   755 _ACC_5	=	0x00e5
                           0000E4   756 _ACC_4	=	0x00e4
                           0000E3   757 _ACC_3	=	0x00e3
                           0000E2   758 _ACC_2	=	0x00e2
                           0000E1   759 _ACC_1	=	0x00e1
                           0000E0   760 _ACC_0	=	0x00e0
                           0000EC   761 _WDTIF	=	0x00ec
                           0000EB   762 _P1IF	=	0x00eb
                           0000EA   763 _UTX1IF	=	0x00ea
                           0000E9   764 _UTX0IF	=	0x00e9
                           0000E8   765 _P2IF	=	0x00e8
                           0000F7   766 _B_7	=	0x00f7
                           0000F6   767 _B_6	=	0x00f6
                           0000F5   768 _B_5	=	0x00f5
                           0000F4   769 _B_4	=	0x00f4
                           0000F3   770 _B_3	=	0x00f3
                           0000F2   771 _B_2	=	0x00f2
                           0000F1   772 _B_1	=	0x00f1
                           0000F0   773 _B_0	=	0x00f0
                           0000DE   774 _OVFIM	=	0x00de
                           0000DD   775 _T4CH1IF	=	0x00dd
                           0000DC   776 _T4CH0IF	=	0x00dc
                           0000DB   777 _T4OVFIF	=	0x00db
                           0000DA   778 _T3CH1IF	=	0x00da
                           0000D9   779 _T3CH0IF	=	0x00d9
                           0000D8   780 _T3OVFIF	=	0x00d8
                           0000FF   781 _MODE	=	0x00ff
                           0000FE   782 _RE	=	0x00fe
                           0000FD   783 _SLAVE	=	0x00fd
                           0000FC   784 _FE	=	0x00fc
                           0000FB   785 _ERR	=	0x00fb
                           0000FA   786 _RX_BYTE	=	0x00fa
                           0000F9   787 _TX_BYTE	=	0x00f9
                           0000F8   788 _ACTIVE	=	0x00f8
                                    789 ;--------------------------------------------------------
                                    790 ; overlayable register banks
                                    791 ;--------------------------------------------------------
                                    792 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        793 	.ds 8
                                    794 ;--------------------------------------------------------
                                    795 ; internal ram data
                                    796 ;--------------------------------------------------------
                                    797 	.area DSEG    (DATA)
                                    798 ;--------------------------------------------------------
                                    799 ; overlayable items in internal ram 
                                    800 ;--------------------------------------------------------
                                    801 ;--------------------------------------------------------
                                    802 ; indirectly addressable internal ram data
                                    803 ;--------------------------------------------------------
                                    804 	.area ISEG    (DATA)
                                    805 ;--------------------------------------------------------
                                    806 ; absolute internal ram data
                                    807 ;--------------------------------------------------------
                                    808 	.area IABS    (ABS,DATA)
                                    809 	.area IABS    (ABS,DATA)
                                    810 ;--------------------------------------------------------
                                    811 ; bit data
                                    812 ;--------------------------------------------------------
                                    813 	.area BSEG    (BIT)
                                    814 ;--------------------------------------------------------
                                    815 ; paged external ram data
                                    816 ;--------------------------------------------------------
                                    817 	.area PSEG    (PAG,XDATA)
                                    818 ;--------------------------------------------------------
                                    819 ; external ram data
                                    820 ;--------------------------------------------------------
                                    821 	.area XSEG    (XDATA)
                           0061A6   822 _MONMUX	=	0x61a6
                           0061A6   823 _OPAMPMC	=	0x61a6
                           006230   824 _I2CCFG	=	0x6230
                           006231   825 _I2CSTAT	=	0x6231
                           006232   826 _I2CDATA	=	0x6232
                           006233   827 _I2CADDR	=	0x6233
                           006234   828 _I2CWC	=	0x6234
                           006235   829 _I2CIO	=	0x6235
                           006243   830 _OBSSEL0	=	0x6243
                           006244   831 _OBSSEL1	=	0x6244
                           006245   832 _OBSSEL2	=	0x6245
                           006246   833 _OBSSEL3	=	0x6246
                           006247   834 _OBSSEL4	=	0x6247
                           006248   835 _OBSSEL5	=	0x6248
                           006249   836 _CHVER	=	0x6249
                           00624A   837 _CHIPID	=	0x624a
                           00624B   838 _TESTREG0	=	0x624b
                           006260   839 _DBGDATA	=	0x6260
                           006262   840 _SRCRC	=	0x6262
                           006264   841 _BATTMON	=	0x6264
                           006265   842 _IVCTRL	=	0x6265
                           006270   843 _FCTL	=	0x6270
                           006271   844 _FADDRL	=	0x6271
                           006272   845 _FADDRH	=	0x6272
                           006273   846 _FWDATA	=	0x6273
                           006276   847 _CHIPINFO0	=	0x6276
                           006277   848 _CHIPINFO1	=	0x6277
                           006281   849 _IRCTL	=	0x6281
                           006290   850 _CLD	=	0x6290
                           0062A0   851 _XX_T1CCTL0	=	0x62a0
                           0062A1   852 _XX_T1CCTL1	=	0x62a1
                           0062A2   853 _XX_T1CCTL2	=	0x62a2
                           0062A3   854 _T1CCTL3	=	0x62a3
                           0062A4   855 _T1CCTL4	=	0x62a4
                           0062A6   856 _XX_T1CC0L	=	0x62a6
                           0062A7   857 _XX_T1CC0H	=	0x62a7
                           0062A8   858 _XX_T1CC1L	=	0x62a8
                           0062A9   859 _XX_T1CC1H	=	0x62a9
                           0062AA   860 _XX_T1CC2L	=	0x62aa
                           0062AB   861 _XX_T1CC2H	=	0x62ab
                           0062AC   862 _T1CC3L	=	0x62ac
                           0062AD   863 _T1CC3H	=	0x62ad
                           0062AE   864 _T1CC4L	=	0x62ae
                           0062AF   865 _T1CC4H	=	0x62af
                           0062B0   866 _STCC	=	0x62b0
                           0062B1   867 _STCS	=	0x62b1
                           0062B2   868 _STCV0	=	0x62b2
                           0062B3   869 _STCV1	=	0x62b3
                           0062B4   870 _STCV2	=	0x62b4
                           0062C0   871 _OPAMPC	=	0x62c0
                           0062C1   872 _OPAMPS	=	0x62c1
                           0062D0   873 _CMPCTL	=	0x62d0
                           006000   874 _RFCORE_RAM	=	0x6000
                           006000   875 _RXFIFO	=	0x6000
                           006080   876 _TXFIFO	=	0x6080
                           006100   877 _SRC_ADDR_TABLE	=	0x6100
                           006160   878 _SRCRESMASK0	=	0x6160
                           006161   879 _SRCRESMASK1	=	0x6161
                           006162   880 _SRCRESMASK2	=	0x6162
                           006163   881 _SRCRESINDEX	=	0x6163
                           006164   882 _SRCEXTPENDEN0	=	0x6164
                           006165   883 _SRCEXTPENDEN1	=	0x6165
                           006166   884 _SRCEXTPENDEN2	=	0x6166
                           006167   885 _SRCSHORTPENDEN0	=	0x6167
                           006168   886 _SRCSHORTPENDEN1	=	0x6168
                           006169   887 _SRCSHORTPENDEN2	=	0x6169
                           00616A   888 _EXT_ADDR0	=	0x616a
                           00616B   889 _EXT_ADDR1	=	0x616b
                           00616C   890 _EXT_ADDR2	=	0x616c
                           00616D   891 _EXT_ADDR3	=	0x616d
                           00616E   892 _EXT_ADDR4	=	0x616e
                           00616F   893 _EXT_ADDR5	=	0x616f
                           006170   894 _EXT_ADDR6	=	0x6170
                           006171   895 _EXT_ADDR7	=	0x6171
                           006172   896 _PAN_ID0	=	0x6172
                           006173   897 _PAN_ID1	=	0x6173
                           006174   898 _SHORT_ADDR0	=	0x6174
                           006175   899 _SHORT_ADDR1	=	0x6175
                           006180   900 _FRMFILT0	=	0x6180
                           006181   901 _FRMFILT1	=	0x6181
                           006182   902 _SRCMATCH	=	0x6182
                           006183   903 _SRCSHORTEN0	=	0x6183
                           006184   904 _SRCSHORTEN1	=	0x6184
                           006185   905 _SRCSHORTEN2	=	0x6185
                           006186   906 _SRCEXTEN0	=	0x6186
                           006187   907 _SRCEXTEN1	=	0x6187
                           006188   908 _SRCEXTEN2	=	0x6188
                           006189   909 _FRMCTRL0	=	0x6189
                           00618A   910 _FRMCTRL1	=	0x618a
                           00618B   911 _RXENABLE	=	0x618b
                           00618C   912 _RXMASKSET	=	0x618c
                           00618D   913 _RXMASKCLR	=	0x618d
                           00618E   914 _FREQTUNE	=	0x618e
                           00618F   915 _FREQCTRL	=	0x618f
                           006190   916 _TXPOWER	=	0x6190
                           006191   917 _TXCTRL	=	0x6191
                           006192   918 _FSMSTAT0	=	0x6192
                           006193   919 _FSMSTAT1	=	0x6193
                           006194   920 _FIFOPCTRL	=	0x6194
                           006195   921 _FSMCTRL	=	0x6195
                           006196   922 _CCACTRL0	=	0x6196
                           006197   923 _CCACTRL1	=	0x6197
                           006198   924 _RSSI	=	0x6198
                           006199   925 _RSSISTAT	=	0x6199
                           00619A   926 _RXFIRST	=	0x619a
                           00619B   927 _RXFIFOCNT	=	0x619b
                           00619C   928 _TXFIFOCNT	=	0x619c
                           00619D   929 _RXFIRST_PTR	=	0x619d
                           00619E   930 _RXLAST_PTR	=	0x619e
                           00619F   931 _RXP1_PTR	=	0x619f
                           0061A1   932 _TXFIRST_PTR	=	0x61a1
                           0061A2   933 _TXLAST_PTR	=	0x61a2
                           0061A3   934 _RFIRQM0	=	0x61a3
                           0061A4   935 _RFIRQM1	=	0x61a4
                           0061A5   936 _RFERRM	=	0x61a5
                           0061A7   937 _RFRND	=	0x61a7
                           0061A8   938 _MDMCTRL0	=	0x61a8
                           0061A9   939 _MDMCTRL1	=	0x61a9
                           0061AA   940 _FREQEST	=	0x61aa
                           0061AB   941 _RXCTRL	=	0x61ab
                           0061AC   942 _FSCTRL	=	0x61ac
                           0061AD   943 _FSCAL0	=	0x61ad
                           0061AE   944 _FSCAL1	=	0x61ae
                           0061AF   945 _FSCAL2	=	0x61af
                           0061B0   946 _FSCAL3	=	0x61b0
                           0061B1   947 _AGCCTRL0	=	0x61b1
                           0061B2   948 _AGCCTRL1	=	0x61b2
                           0061B3   949 _AGCCTRL2	=	0x61b3
                           0061B4   950 _AGCCTRL3	=	0x61b4
                           0061B5   951 _ADCTEST0	=	0x61b5
                           0061B6   952 _ADCTEST1	=	0x61b6
                           0061B7   953 _ADCTEST2	=	0x61b7
                           0061B8   954 _MDMTEST0	=	0x61b8
                           0061B9   955 _MDMTEST1	=	0x61b9
                           0061BA   956 _DACTEST0	=	0x61ba
                           0061BB   957 _DACTEST1	=	0x61bb
                           0061BC   958 _DACTEST2	=	0x61bc
                           0061BD   959 _ATEST	=	0x61bd
                           0061BE   960 _PTEST0	=	0x61be
                           0061BF   961 _PTEST1	=	0x61bf
                           0061FA   962 _TXFILTCFG	=	0x61fa
                           0061EB   963 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   964 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   965 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   966 _CSPPROG0	=	0x61c0
                           0061C1   967 _CSPPROG1	=	0x61c1
                           0061C2   968 _CSPPROG2	=	0x61c2
                           0061C3   969 _CSPPROG3	=	0x61c3
                           0061C4   970 _CSPPROG4	=	0x61c4
                           0061C5   971 _CSPPROG5	=	0x61c5
                           0061C6   972 _CSPPROG6	=	0x61c6
                           0061C7   973 _CSPPROG7	=	0x61c7
                           0061C8   974 _CSPPROG8	=	0x61c8
                           0061C9   975 _CSPPROG9	=	0x61c9
                           0061CA   976 _CSPPROG10	=	0x61ca
                           0061CB   977 _CSPPROG11	=	0x61cb
                           0061CC   978 _CSPPROG12	=	0x61cc
                           0061CD   979 _CSPPROG13	=	0x61cd
                           0061CE   980 _CSPPROG14	=	0x61ce
                           0061CF   981 _CSPPROG15	=	0x61cf
                           0061D0   982 _CSPPROG16	=	0x61d0
                           0061D1   983 _CSPPROG17	=	0x61d1
                           0061D2   984 _CSPPROG18	=	0x61d2
                           0061D3   985 _CSPPROG19	=	0x61d3
                           0061D4   986 _CSPPROG20	=	0x61d4
                           0061D5   987 _CSPPROG21	=	0x61d5
                           0061D6   988 _CSPPROG22	=	0x61d6
                           0061D7   989 _CSPPROG23	=	0x61d7
                           0061E0   990 _CSPCTRL	=	0x61e0
                           0061E1   991 _CSPSTAT	=	0x61e1
                           0061E2   992 _CSPX	=	0x61e2
                           0061E3   993 _CSPY	=	0x61e3
                           0061E4   994 _CSPZ	=	0x61e4
                           0061E5   995 _CSPT	=	0x61e5
                           006200   996 _USBADDR	=	0x6200
                           006201   997 _USBPOW	=	0x6201
                           006202   998 _USBIIF	=	0x6202
                           006204   999 _USBOIF	=	0x6204
                           006206  1000 _USBCIF	=	0x6206
                           006207  1001 _USBIIE	=	0x6207
                           006209  1002 _USBOIE	=	0x6209
                           00620B  1003 _USBCIE	=	0x620b
                           00620C  1004 _USBFRML	=	0x620c
                           00620D  1005 _USBFRMH	=	0x620d
                           00620E  1006 _USBINDEX	=	0x620e
                           00620F  1007 _USBCTRL	=	0x620f
                           006210  1008 _USBMAXI	=	0x6210
                           006211  1009 _USBCS0	=	0x6211
                           006211  1010 _USBCSIL	=	0x6211
                           006212  1011 _USBCSIH	=	0x6212
                           006213  1012 _USBMAXO	=	0x6213
                           006214  1013 _USBCSOL	=	0x6214
                           006215  1014 _USBCSOH	=	0x6215
                           006216  1015 _USBCNT0	=	0x6216
                           006216  1016 _USBCNTL	=	0x6216
                           006217  1017 _USBCNTH	=	0x6217
                           006220  1018 _USBF0	=	0x6220
                           006222  1019 _USBF1	=	0x6222
                           006224  1020 _USBF2	=	0x6224
                           006226  1021 _USBF3	=	0x6226
                           006228  1022 _USBF4	=	0x6228
                           00622A  1023 _USBF5	=	0x622a
                           007080  1024 _X_P0	=	0x7080
                           007086  1025 _X_U0CSR	=	0x7086
                           007089  1026 _X_P0IFG	=	0x7089
                           00708A  1027 _X_P1IFG	=	0x708a
                           00708B  1028 _X_P2IFG	=	0x708b
                           00708C  1029 _X_PICTL	=	0x708c
                           00708D  1030 _X_P1IEN	=	0x708d
                           00708F  1031 _X_P0INP	=	0x708f
                           007090  1032 _X_P1	=	0x7090
                           007091  1033 _X_RFIRQF1	=	0x7091
                           007093  1034 _X_MPAGE	=	0x7093
                           007093  1035 _X__XPAGE	=	0x7093
                           007094  1036 _X_T2CTRL	=	0x7094
                           007095  1037 _X_ST0	=	0x7095
                           007096  1038 _X_ST1	=	0x7096
                           007097  1039 _X_ST2	=	0x7097
                           00709C  1040 _X_T2EVTCFG	=	0x709c
                           00709D  1041 _X_SLEEPSTA	=	0x709d
                           00709E  1042 _X_CLKCONSTA	=	0x709e
                           00709F  1043 _X_FMAP	=	0x709f
                           00709F  1044 _X_PSBANK	=	0x709f
                           0070A0  1045 _X_P2	=	0x70a0
                           0070A1  1046 _X_T2IRQF	=	0x70a1
                           0070A2  1047 _X_T2M0	=	0x70a2
                           0070A3  1048 _X_T2M1	=	0x70a3
                           0070A4  1049 _X_T2MOVF0	=	0x70a4
                           0070A5  1050 _X_T2MOVF1	=	0x70a5
                           0070A6  1051 _X_T2MOVF2	=	0x70a6
                           0070A7  1052 _X_T2IRQM	=	0x70a7
                           0070AB  1053 _X_P0IEN	=	0x70ab
                           0070AC  1054 _X_P2IEN	=	0x70ac
                           0070AD  1055 _X_STLOAD	=	0x70ad
                           0070AE  1056 _X_PMUX	=	0x70ae
                           0070AF  1057 _X_T1STAT	=	0x70af
                           0070B1  1058 _X_ENCDI	=	0x70b1
                           0070B2  1059 _X_ENCDO	=	0x70b2
                           0070B3  1060 _X_ENCCS	=	0x70b3
                           0070B4  1061 _X_ADCCON1	=	0x70b4
                           0070B5  1062 _X_ADCCON2	=	0x70b5
                           0070B6  1063 _X_ADCCON3	=	0x70b6
                           0070BA  1064 _X_ADCL	=	0x70ba
                           0070BB  1065 _X_ADCH	=	0x70bb
                           0070BC  1066 _X_RNDL	=	0x70bc
                           0070BD  1067 _X_RNDH	=	0x70bd
                           0070BE  1068 _X_SLEEPCMD	=	0x70be
                           0070BF  1069 _X_RFERRF	=	0x70bf
                           0070C1  1070 _X_U0DBUF	=	0x70c1
                           0070C2  1071 _X_U0BAUD	=	0x70c2
                           0070C3  1072 _X_T2MSEL	=	0x70c3
                           0070C4  1073 _X_U0UCR	=	0x70c4
                           0070C5  1074 _X_U0GCR	=	0x70c5
                           0070C6  1075 _X_CLKCONCMD	=	0x70c6
                           0070C7  1076 _X_MEMCTR	=	0x70c7
                           0070C9  1077 _X_WDCTL	=	0x70c9
                           0070CA  1078 _X_T3CNT	=	0x70ca
                           0070CB  1079 _X_T3CTL	=	0x70cb
                           0070CC  1080 _X_T3CCTL0	=	0x70cc
                           0070CD  1081 _X_T3CC0	=	0x70cd
                           0070CE  1082 _X_T3CCTL1	=	0x70ce
                           0070CF  1083 _X_T3CC1	=	0x70cf
                           0070D1  1084 _X_DMAIRQ	=	0x70d1
                           0070D2  1085 _X_DMA1CFGL	=	0x70d2
                           0070D3  1086 _X_DMA1CFGH	=	0x70d3
                           0070D4  1087 _X_DMA0CFGL	=	0x70d4
                           0070D5  1088 _X_DMA0CFGH	=	0x70d5
                           0070D6  1089 _X_DMAARM	=	0x70d6
                           0070D7  1090 _X_DMAREQ	=	0x70d7
                           0070D8  1091 _X_TIMIF	=	0x70d8
                           0070D9  1092 _X_RFD	=	0x70d9
                           0070DA  1093 _X_T1CC0L	=	0x70da
                           0070DB  1094 _X_T1CC0H	=	0x70db
                           0070DC  1095 _X_T1CC1L	=	0x70dc
                           0070DD  1096 _X_T1CC1H	=	0x70dd
                           0070DE  1097 _X_T1CC2L	=	0x70de
                           0070DF  1098 _X_T1CC2H	=	0x70df
                           0070E1  1099 _X_RFST	=	0x70e1
                           0070E2  1100 _X_T1CNTL	=	0x70e2
                           0070E3  1101 _X_T1CNTH	=	0x70e3
                           0070E4  1102 _X_T1CTL	=	0x70e4
                           0070E5  1103 _X_T1CCTL0	=	0x70e5
                           0070E6  1104 _X_T1CCTL1	=	0x70e6
                           0070E7  1105 _X_T1CCTL2	=	0x70e7
                           0070E9  1106 _X_RFIRQF0	=	0x70e9
                           0070EA  1107 _X_T4CNT	=	0x70ea
                           0070EB  1108 _X_T4CTL	=	0x70eb
                           0070EC  1109 _X_T4CCTL0	=	0x70ec
                           0070ED  1110 _X_T4CC0	=	0x70ed
                           0070EE  1111 _X_T4CCTL1	=	0x70ee
                           0070EF  1112 _X_T4CC1	=	0x70ef
                           0070F1  1113 _X_PERCFG	=	0x70f1
                           0070F2  1114 _X_APCFG	=	0x70f2
                           0070F3  1115 _X_P0SEL	=	0x70f3
                           0070F4  1116 _X_P1SEL	=	0x70f4
                           0070F5  1117 _X_P2SEL	=	0x70f5
                           0070F6  1118 _X_P1INP	=	0x70f6
                           0070F7  1119 _X_P2INP	=	0x70f7
                           0070F8  1120 _X_U1CSR	=	0x70f8
                           0070F9  1121 _X_U1DBUF	=	0x70f9
                           0070FA  1122 _X_U1BAUD	=	0x70fa
                           0070FB  1123 _X_U1UCR	=	0x70fb
                           0070FC  1124 _X_U1GCR	=	0x70fc
                           0070FD  1125 _X_P0DIR	=	0x70fd
                           0070FE  1126 _X_P1DIR	=	0x70fe
                           0070FF  1127 _X_P2DIR	=	0x70ff
                           007800  1128 _X_INFOPAGE	=	0x7800
                           00780C  1129 _X_IEEE_ADDR	=	0x780c
                                   1130 ;--------------------------------------------------------
                                   1131 ; absolute external ram data
                                   1132 ;--------------------------------------------------------
                                   1133 	.area XABS    (ABS,XDATA)
                                   1134 ;--------------------------------------------------------
                                   1135 ; external initialized ram data
                                   1136 ;--------------------------------------------------------
                                   1137 	.area XISEG   (XDATA)
                                   1138 	.area HOME    (CODE)
                                   1139 	.area GSINIT0 (CODE)
                                   1140 	.area GSINIT1 (CODE)
                                   1141 	.area GSINIT2 (CODE)
                                   1142 	.area GSINIT3 (CODE)
                                   1143 	.area GSINIT4 (CODE)
                                   1144 	.area GSINIT5 (CODE)
                                   1145 	.area GSINIT  (CODE)
                                   1146 	.area GSFINAL (CODE)
                                   1147 	.area CSEG    (CODE)
                                   1148 ;--------------------------------------------------------
                                   1149 ; global & static initialisations
                                   1150 ;--------------------------------------------------------
                                   1151 	.area HOME    (CODE)
                                   1152 	.area GSINIT  (CODE)
                                   1153 	.area GSFINAL (CODE)
                                   1154 	.area GSINIT  (CODE)
                                   1155 ;--------------------------------------------------------
                                   1156 ; Home
                                   1157 ;--------------------------------------------------------
                                   1158 	.area HOME    (CODE)
                                   1159 	.area HOME    (CODE)
                                   1160 ;--------------------------------------------------------
                                   1161 ; code
                                   1162 ;--------------------------------------------------------
                                   1163 	.area CSEG    (CODE)
                                   1164 ;------------------------------------------------------------
                                   1165 ;Allocation info for local variables in function 'read_new_datapacket'
                                   1166 ;------------------------------------------------------------
                                   1167 ;c                         Allocated to stack - sp -7
                                   1168 ;len                       Allocated to registers r3 r4 
                                   1169 ;sloc0                     Allocated to stack - sp -4
                                   1170 ;sloc1                     Allocated to stack - sp +0
                                   1171 ;sloc2                     Allocated to stack - sp -2
                                   1172 ;------------------------------------------------------------
                                   1173 ;	../../core/net/rime/rudolph0.c:75: read_new_datapacket(struct rudolph0_conn *c)
                                   1174 ;	-----------------------------------------
                                   1175 ;	 function read_new_datapacket
                                   1176 ;	-----------------------------------------
      000000                       1177 _read_new_datapacket:
                           000007  1178 	ar7 = 0x07
                           000006  1179 	ar6 = 0x06
                           000005  1180 	ar5 = 0x05
                           000004  1181 	ar4 = 0x04
                           000003  1182 	ar3 = 0x03
                           000002  1183 	ar2 = 0x02
                           000001  1184 	ar1 = 0x01
                           000000  1185 	ar0 = 0x00
      000000 C0 82            [24] 1186 	push	dpl
      000002 C0 83            [24] 1187 	push	dph
      000004 C0 F0            [24] 1188 	push	b
      000006 E5 81            [12] 1189 	mov	a,sp
      000008 24 05            [12] 1190 	add	a,#0x05
      00000A F5 81            [12] 1191 	mov	sp,a
                                   1192 ;	../../core/net/rime/rudolph0.c:77: int len = 0;
                                   1193 ;	../../core/net/rime/rudolph0.c:79: if(c->cb->read_chunk) {
      00000C E4               [12] 1194 	clr	a
      00000D FB               [12] 1195 	mov	r3,a
      00000E FC               [12] 1196 	mov	r4,a
      00000F E5 81            [12] 1197 	mov	a,sp
      000011 24 F9            [12] 1198 	add	a,#0xf9
      000013 F8               [12] 1199 	mov	r0,a
      000014 74 52            [12] 1200 	mov	a,#0x52
      000016 26               [12] 1201 	add	a,@r0
      000017 FE               [12] 1202 	mov	r6,a
      000018 E4               [12] 1203 	clr	a
      000019 08               [12] 1204 	inc	r0
      00001A 36               [12] 1205 	addc	a,@r0
      00001B FA               [12] 1206 	mov	r2,a
      00001C 08               [12] 1207 	inc	r0
      00001D 86 07            [24] 1208 	mov	ar7,@r0
      00001F 8E 82            [24] 1209 	mov	dpl,r6
      000021 8A 83            [24] 1210 	mov	dph,r2
      000023 8F F0            [24] 1211 	mov	b,r7
      000025 12r00r00         [24] 1212 	lcall	__gptrget
      000028 FE               [12] 1213 	mov	r6,a
      000029 A3               [24] 1214 	inc	dptr
      00002A 12r00r00         [24] 1215 	lcall	__gptrget
      00002D FA               [12] 1216 	mov	r2,a
      00002E A3               [24] 1217 	inc	dptr
      00002F 12r00r00         [24] 1218 	lcall	__gptrget
      000032 FF               [12] 1219 	mov	r7,a
      000033 74 02            [12] 1220 	mov	a,#0x02
      000035 2E               [12] 1221 	add	a,r6
      000036 FE               [12] 1222 	mov	r6,a
      000037 E4               [12] 1223 	clr	a
      000038 3A               [12] 1224 	addc	a,r2
      000039 FA               [12] 1225 	mov	r2,a
      00003A 8E 82            [24] 1226 	mov	dpl,r6
      00003C 8A 83            [24] 1227 	mov	dph,r2
      00003E 8F F0            [24] 1228 	mov	b,r7
      000040 E5 81            [12] 1229 	mov	a,sp
      000042 24 FC            [12] 1230 	add	a,#0xfc
      000044 F8               [12] 1231 	mov	r0,a
      000045 12r00r00         [24] 1232 	lcall	__gptrget
      000048 F6               [12] 1233 	mov	@r0,a
      000049 A3               [24] 1234 	inc	dptr
      00004A 12r00r00         [24] 1235 	lcall	__gptrget
      00004D 08               [12] 1236 	inc	r0
      00004E F6               [12] 1237 	mov	@r0,a
      00004F E5 81            [12] 1238 	mov	a,sp
      000051 24 FC            [12] 1239 	add	a,#0xfc
      000053 F8               [12] 1240 	mov	r0,a
      000054 E6               [12] 1241 	mov	a,@r0
      000055 08               [12] 1242 	inc	r0
      000056 46               [12] 1243 	orl	a,@r0
      000057 70 03            [24] 1244 	jnz	00109$
      000059 02r00rE8         [24] 1245 	ljmp	00102$
      00005C                       1246 00109$:
                                   1247 ;	../../core/net/rime/rudolph0.c:81: c->current.data, RUDOLPH0_DATASIZE);
      00005C E5 81            [12] 1248 	mov	a,sp
      00005E 24 F9            [12] 1249 	add	a,#0xf9
      000060 F8               [12] 1250 	mov	r0,a
      000061 74 58            [12] 1251 	mov	a,#0x58
      000063 26               [12] 1252 	add	a,@r0
      000064 FD               [12] 1253 	mov	r5,a
      000065 E4               [12] 1254 	clr	a
      000066 08               [12] 1255 	inc	r0
      000067 36               [12] 1256 	addc	a,@r0
      000068 FE               [12] 1257 	mov	r6,a
      000069 08               [12] 1258 	inc	r0
      00006A 86 07            [24] 1259 	mov	ar7,@r0
      00006C A8 81            [24] 1260 	mov	r0,sp
      00006E 18               [12] 1261 	dec	r0
      00006F 18               [12] 1262 	dec	r0
      000070 74 05            [12] 1263 	mov	a,#0x05
      000072 2D               [12] 1264 	add	a,r5
      000073 F6               [12] 1265 	mov	@r0,a
      000074 E4               [12] 1266 	clr	a
      000075 3E               [12] 1267 	addc	a,r6
      000076 08               [12] 1268 	inc	r0
      000077 F6               [12] 1269 	mov	@r0,a
      000078 08               [12] 1270 	inc	r0
      000079 A6 07            [24] 1271 	mov	@r0,ar7
                                   1272 ;	../../core/net/rime/rudolph0.c:80: len = c->cb->read_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
      00007B 74 02            [12] 1273 	mov	a,#0x02
      00007D 2D               [12] 1274 	add	a,r5
      00007E FA               [12] 1275 	mov	r2,a
      00007F E4               [12] 1276 	clr	a
      000080 3E               [12] 1277 	addc	a,r6
      000081 FE               [12] 1278 	mov	r6,a
      000082 8A 82            [24] 1279 	mov	dpl,r2
      000084 8E 83            [24] 1280 	mov	dph,r6
      000086 8F F0            [24] 1281 	mov	b,r7
      000088 12r00r00         [24] 1282 	lcall	__gptrget
      00008B FA               [12] 1283 	mov	r2,a
      00008C A3               [24] 1284 	inc	dptr
      00008D 12r00r00         [24] 1285 	lcall	__gptrget
      000090 54 03            [12] 1286 	anl	a,#0x03
      000092 A2 E0            [12] 1287 	mov	c,acc.0
      000094 CA               [12] 1288 	xch	a,r2
      000095 13               [12] 1289 	rrc	a
      000096 CA               [12] 1290 	xch	a,r2
      000097 13               [12] 1291 	rrc	a
      000098 A2 E0            [12] 1292 	mov	c,acc.0
      00009A CA               [12] 1293 	xch	a,r2
      00009B 13               [12] 1294 	rrc	a
      00009C CA               [12] 1295 	xch	a,r2
      00009D 13               [12] 1296 	rrc	a
      00009E CA               [12] 1297 	xch	a,r2
      00009F FE               [12] 1298 	mov	r6,a
      0000A0 74 40            [12] 1299 	mov	a,#0x40
      0000A2 C0 E0            [24] 1300 	push	acc
      0000A4 E4               [12] 1301 	clr	a
      0000A5 C0 E0            [24] 1302 	push	acc
      0000A7 E5 81            [12] 1303 	mov	a,sp
      0000A9 24 FC            [12] 1304 	add	a,#0xfc
      0000AB F8               [12] 1305 	mov	r0,a
      0000AC E6               [12] 1306 	mov	a,@r0
      0000AD C0 E0            [24] 1307 	push	acc
      0000AF 08               [12] 1308 	inc	r0
      0000B0 E6               [12] 1309 	mov	a,@r0
      0000B1 C0 E0            [24] 1310 	push	acc
      0000B3 08               [12] 1311 	inc	r0
      0000B4 E6               [12] 1312 	mov	a,@r0
      0000B5 C0 E0            [24] 1313 	push	acc
      0000B7 C0 02            [24] 1314 	push	ar2
      0000B9 C0 06            [24] 1315 	push	ar6
      0000BB 12r00rC0         [24] 1316 	lcall	00110$
      0000BE 80 1A            [24] 1317 	sjmp	00111$
      0000C0                       1318 00110$:
      0000C0 E5 81            [12] 1319 	mov	a,sp
      0000C2 24 F3            [12] 1320 	add	a,#0xf3
      0000C4 F8               [12] 1321 	mov	r0,a
      0000C5 E6               [12] 1322 	mov	a,@r0
      0000C6 C0 E0            [24] 1323 	push	acc
      0000C8 08               [12] 1324 	inc	r0
      0000C9 E6               [12] 1325 	mov	a,@r0
      0000CA C0 E0            [24] 1326 	push	acc
      0000CC E5 81            [12] 1327 	mov	a,sp
      0000CE 24 EE            [12] 1328 	add	a,#0xee
      0000D0 F8               [12] 1329 	mov	r0,a
      0000D1 86 82            [24] 1330 	mov	dpl,@r0
      0000D3 08               [12] 1331 	inc	r0
      0000D4 86 83            [24] 1332 	mov	dph,@r0
      0000D6 08               [12] 1333 	inc	r0
      0000D7 86 F0            [24] 1334 	mov	b,@r0
      0000D9 22               [24] 1335 	ret
      0000DA                       1336 00111$:
      0000DA AE 82            [24] 1337 	mov	r6,dpl
      0000DC AF 83            [24] 1338 	mov	r7,dph
      0000DE E5 81            [12] 1339 	mov	a,sp
      0000E0 24 F9            [12] 1340 	add	a,#0xf9
      0000E2 F5 81            [12] 1341 	mov	sp,a
      0000E4 8E 03            [24] 1342 	mov	ar3,r6
      0000E6 8F 04            [24] 1343 	mov	ar4,r7
      0000E8                       1344 00102$:
                                   1345 ;	../../core/net/rime/rudolph0.c:83: c->current.datalen = len;
      0000E8 E5 81            [12] 1346 	mov	a,sp
      0000EA 24 F9            [12] 1347 	add	a,#0xf9
      0000EC F8               [12] 1348 	mov	r0,a
      0000ED 74 58            [12] 1349 	mov	a,#0x58
      0000EF 26               [12] 1350 	add	a,@r0
      0000F0 FD               [12] 1351 	mov	r5,a
      0000F1 E4               [12] 1352 	clr	a
      0000F2 08               [12] 1353 	inc	r0
      0000F3 36               [12] 1354 	addc	a,@r0
      0000F4 FE               [12] 1355 	mov	r6,a
      0000F5 08               [12] 1356 	inc	r0
      0000F6 86 07            [24] 1357 	mov	ar7,@r0
      0000F8 74 04            [12] 1358 	mov	a,#0x04
      0000FA 2D               [12] 1359 	add	a,r5
      0000FB FD               [12] 1360 	mov	r5,a
      0000FC E4               [12] 1361 	clr	a
      0000FD 3E               [12] 1362 	addc	a,r6
      0000FE FE               [12] 1363 	mov	r6,a
      0000FF 8D 82            [24] 1364 	mov	dpl,r5
      000101 8E 83            [24] 1365 	mov	dph,r6
      000103 8F F0            [24] 1366 	mov	b,r7
      000105 EB               [12] 1367 	mov	a,r3
      000106 12r00r00         [24] 1368 	lcall	__gptrput
                                   1369 ;	../../core/net/rime/rudolph0.c:86: }
      000109 E5 81            [12] 1370 	mov	a,sp
      00010B 24 F8            [12] 1371 	add	a,#0xf8
      00010D F5 81            [12] 1372 	mov	sp,a
      00010F 22               [24] 1373 	ret
                                   1374 ;------------------------------------------------------------
                                   1375 ;Allocation info for local variables in function 'send_nack'
                                   1376 ;------------------------------------------------------------
                                   1377 ;c                         Allocated to stack - sp -8
                                   1378 ;hdr                       Allocated to stack - sp -2
                                   1379 ;sloc0                     Allocated to stack - sp -5
                                   1380 ;------------------------------------------------------------
                                   1381 ;	../../core/net/rime/rudolph0.c:89: send_nack(struct rudolph0_conn *c)
                                   1382 ;	-----------------------------------------
                                   1383 ;	 function send_nack
                                   1384 ;	-----------------------------------------
      000110                       1385 _send_nack:
      000110 C0 82            [24] 1386 	push	dpl
      000112 C0 83            [24] 1387 	push	dph
      000114 C0 F0            [24] 1388 	push	b
      000116 E5 81            [12] 1389 	mov	a,sp
      000118 24 06            [12] 1390 	add	a,#0x06
      00011A F5 81            [12] 1391 	mov	sp,a
                                   1392 ;	../../core/net/rime/rudolph0.c:92: packetbuf_clear();
      00011C 12r00r00         [24] 1393 	lcall	_packetbuf_clear
                                   1394 ;	../../core/net/rime/rudolph0.c:93: packetbuf_hdralloc(sizeof(struct rudolph0_hdr));
      00011F 90 00 04         [24] 1395 	mov	dptr,#0x0004
      000122 12r00r00         [24] 1396 	lcall	_packetbuf_hdralloc
                                   1397 ;	../../core/net/rime/rudolph0.c:94: hdr = packetbuf_hdrptr();
      000125 12r00r00         [24] 1398 	lcall	_packetbuf_hdrptr
      000128 AA 82            [24] 1399 	mov	r2,dpl
      00012A AB 83            [24] 1400 	mov	r3,dph
      00012C AC F0            [24] 1401 	mov	r4,b
      00012E A8 81            [24] 1402 	mov	r0,sp
      000130 18               [12] 1403 	dec	r0
      000131 18               [12] 1404 	dec	r0
      000132 A6 02            [24] 1405 	mov	@r0,ar2
      000134 08               [12] 1406 	inc	r0
      000135 A6 03            [24] 1407 	mov	@r0,ar3
      000137 08               [12] 1408 	inc	r0
      000138 A6 04            [24] 1409 	mov	@r0,ar4
                                   1410 ;	../../core/net/rime/rudolph0.c:96: hdr->type = TYPE_NACK;
      00013A A8 81            [24] 1411 	mov	r0,sp
      00013C 18               [12] 1412 	dec	r0
      00013D 18               [12] 1413 	dec	r0
      00013E 86 82            [24] 1414 	mov	dpl,@r0
      000140 08               [12] 1415 	inc	r0
      000141 86 83            [24] 1416 	mov	dph,@r0
      000143 08               [12] 1417 	inc	r0
      000144 86 F0            [24] 1418 	mov	b,@r0
      000146 74 01            [12] 1419 	mov	a,#0x01
      000148 12r00r00         [24] 1420 	lcall	__gptrput
                                   1421 ;	../../core/net/rime/rudolph0.c:97: hdr->version = c->current.h.version;
      00014B A8 81            [24] 1422 	mov	r0,sp
      00014D 18               [12] 1423 	dec	r0
      00014E 18               [12] 1424 	dec	r0
      00014F E5 81            [12] 1425 	mov	a,sp
      000151 24 FB            [12] 1426 	add	a,#0xfb
      000153 F9               [12] 1427 	mov	r1,a
      000154 74 01            [12] 1428 	mov	a,#0x01
      000156 26               [12] 1429 	add	a,@r0
      000157 F7               [12] 1430 	mov	@r1,a
      000158 E4               [12] 1431 	clr	a
      000159 08               [12] 1432 	inc	r0
      00015A 36               [12] 1433 	addc	a,@r0
      00015B 09               [12] 1434 	inc	r1
      00015C F7               [12] 1435 	mov	@r1,a
      00015D 08               [12] 1436 	inc	r0
      00015E 09               [12] 1437 	inc	r1
      00015F E6               [12] 1438 	mov	a,@r0
      000160 F7               [12] 1439 	mov	@r1,a
      000161 E5 81            [12] 1440 	mov	a,sp
      000163 24 F8            [12] 1441 	add	a,#0xf8
      000165 F8               [12] 1442 	mov	r0,a
      000166 74 58            [12] 1443 	mov	a,#0x58
      000168 26               [12] 1444 	add	a,@r0
      000169 FA               [12] 1445 	mov	r2,a
      00016A E4               [12] 1446 	clr	a
      00016B 08               [12] 1447 	inc	r0
      00016C 36               [12] 1448 	addc	a,@r0
      00016D FB               [12] 1449 	mov	r3,a
      00016E 08               [12] 1450 	inc	r0
      00016F 86 04            [24] 1451 	mov	ar4,@r0
      000171 74 01            [12] 1452 	mov	a,#0x01
      000173 2A               [12] 1453 	add	a,r2
      000174 FD               [12] 1454 	mov	r5,a
      000175 E4               [12] 1455 	clr	a
      000176 3B               [12] 1456 	addc	a,r3
      000177 FE               [12] 1457 	mov	r6,a
      000178 8C 07            [24] 1458 	mov	ar7,r4
      00017A 8D 82            [24] 1459 	mov	dpl,r5
      00017C 8E 83            [24] 1460 	mov	dph,r6
      00017E 8F F0            [24] 1461 	mov	b,r7
      000180 12r00r00         [24] 1462 	lcall	__gptrget
      000183 FD               [12] 1463 	mov	r5,a
      000184 E5 81            [12] 1464 	mov	a,sp
      000186 24 FB            [12] 1465 	add	a,#0xfb
      000188 F8               [12] 1466 	mov	r0,a
      000189 86 82            [24] 1467 	mov	dpl,@r0
      00018B 08               [12] 1468 	inc	r0
      00018C 86 83            [24] 1469 	mov	dph,@r0
      00018E 08               [12] 1470 	inc	r0
      00018F 86 F0            [24] 1471 	mov	b,@r0
      000191 ED               [12] 1472 	mov	a,r5
      000192 12r00r00         [24] 1473 	lcall	__gptrput
                                   1474 ;	../../core/net/rime/rudolph0.c:98: hdr->chunk = c->current.h.chunk;
      000195 A8 81            [24] 1475 	mov	r0,sp
      000197 18               [12] 1476 	dec	r0
      000198 18               [12] 1477 	dec	r0
      000199 74 02            [12] 1478 	mov	a,#0x02
      00019B 26               [12] 1479 	add	a,@r0
      00019C FD               [12] 1480 	mov	r5,a
      00019D E4               [12] 1481 	clr	a
      00019E 08               [12] 1482 	inc	r0
      00019F 36               [12] 1483 	addc	a,@r0
      0001A0 FE               [12] 1484 	mov	r6,a
      0001A1 08               [12] 1485 	inc	r0
      0001A2 86 07            [24] 1486 	mov	ar7,@r0
      0001A4 74 02            [12] 1487 	mov	a,#0x02
      0001A6 2A               [12] 1488 	add	a,r2
      0001A7 FA               [12] 1489 	mov	r2,a
      0001A8 E4               [12] 1490 	clr	a
      0001A9 3B               [12] 1491 	addc	a,r3
      0001AA FB               [12] 1492 	mov	r3,a
      0001AB 8A 82            [24] 1493 	mov	dpl,r2
      0001AD 8B 83            [24] 1494 	mov	dph,r3
      0001AF 8C F0            [24] 1495 	mov	b,r4
      0001B1 12r00r00         [24] 1496 	lcall	__gptrget
      0001B4 FA               [12] 1497 	mov	r2,a
      0001B5 A3               [24] 1498 	inc	dptr
      0001B6 12r00r00         [24] 1499 	lcall	__gptrget
      0001B9 FB               [12] 1500 	mov	r3,a
      0001BA 8D 82            [24] 1501 	mov	dpl,r5
      0001BC 8E 83            [24] 1502 	mov	dph,r6
      0001BE 8F F0            [24] 1503 	mov	b,r7
      0001C0 EA               [12] 1504 	mov	a,r2
      0001C1 12r00r00         [24] 1505 	lcall	__gptrput
      0001C4 A3               [24] 1506 	inc	dptr
      0001C5 EB               [12] 1507 	mov	a,r3
      0001C6 12r00r00         [24] 1508 	lcall	__gptrput
                                   1509 ;	../../core/net/rime/rudolph0.c:101: polite_send(&c->nackc, c->send_interval / 2, sizeof(struct rudolph0_hdr));
      0001C9 E5 81            [12] 1510 	mov	a,sp
      0001CB 24 F8            [12] 1511 	add	a,#0xf8
      0001CD F8               [12] 1512 	mov	r0,a
      0001CE 74 55            [12] 1513 	mov	a,#0x55
      0001D0 26               [12] 1514 	add	a,@r0
      0001D1 FD               [12] 1515 	mov	r5,a
      0001D2 E4               [12] 1516 	clr	a
      0001D3 08               [12] 1517 	inc	r0
      0001D4 36               [12] 1518 	addc	a,@r0
      0001D5 FE               [12] 1519 	mov	r6,a
      0001D6 08               [12] 1520 	inc	r0
      0001D7 86 07            [24] 1521 	mov	ar7,@r0
      0001D9 8D 82            [24] 1522 	mov	dpl,r5
      0001DB 8E 83            [24] 1523 	mov	dph,r6
      0001DD 8F F0            [24] 1524 	mov	b,r7
      0001DF 12r00r00         [24] 1525 	lcall	__gptrget
      0001E2 FD               [12] 1526 	mov	r5,a
      0001E3 A3               [24] 1527 	inc	dptr
      0001E4 12r00r00         [24] 1528 	lcall	__gptrget
      0001E7 C3               [12] 1529 	clr	c
      0001E8 13               [12] 1530 	rrc	a
      0001E9 CD               [12] 1531 	xch	a,r5
      0001EA 13               [12] 1532 	rrc	a
      0001EB CD               [12] 1533 	xch	a,r5
      0001EC FE               [12] 1534 	mov	r6,a
      0001ED E5 81            [12] 1535 	mov	a,sp
      0001EF 24 F8            [12] 1536 	add	a,#0xf8
      0001F1 F8               [12] 1537 	mov	r0,a
      0001F2 74 2A            [12] 1538 	mov	a,#0x2a
      0001F4 26               [12] 1539 	add	a,@r0
      0001F5 FB               [12] 1540 	mov	r3,a
      0001F6 E4               [12] 1541 	clr	a
      0001F7 08               [12] 1542 	inc	r0
      0001F8 36               [12] 1543 	addc	a,@r0
      0001F9 FC               [12] 1544 	mov	r4,a
      0001FA 08               [12] 1545 	inc	r0
      0001FB 86 07            [24] 1546 	mov	ar7,@r0
      0001FD 74 04            [12] 1547 	mov	a,#0x04
      0001FF C0 E0            [24] 1548 	push	acc
      000201 C0 05            [24] 1549 	push	ar5
      000203 C0 06            [24] 1550 	push	ar6
      000205 8B 82            [24] 1551 	mov	dpl,r3
      000207 8C 83            [24] 1552 	mov	dph,r4
      000209 8F F0            [24] 1553 	mov	b,r7
      00020B 12r00r00         [24] 1554 	lcall	_polite_send
      00020E 15 81            [12] 1555 	dec	sp
      000210 15 81            [12] 1556 	dec	sp
      000212 15 81            [12] 1557 	dec	sp
                                   1558 ;	../../core/net/rime/rudolph0.c:102: }
      000214 E5 81            [12] 1559 	mov	a,sp
      000216 24 F7            [12] 1560 	add	a,#0xf7
      000218 F5 81            [12] 1561 	mov	sp,a
      00021A 22               [24] 1562 	ret
                                   1563 ;------------------------------------------------------------
                                   1564 ;Allocation info for local variables in function 'sent'
                                   1565 ;------------------------------------------------------------
                                   1566 ;stbroadcast               Allocated to registers r5 r6 r7 
                                   1567 ;c                         Allocated to stack - sp -2
                                   1568 ;------------------------------------------------------------
                                   1569 ;	../../core/net/rime/rudolph0.c:105: sent(struct stbroadcast_conn *stbroadcast)
                                   1570 ;	-----------------------------------------
                                   1571 ;	 function sent
                                   1572 ;	-----------------------------------------
      00021B                       1573 _sent:
      00021B 05 81            [12] 1574 	inc	sp
      00021D 05 81            [12] 1575 	inc	sp
      00021F 05 81            [12] 1576 	inc	sp
      000221 AD 82            [24] 1577 	mov	r5,dpl
      000223 AE 83            [24] 1578 	mov	r6,dph
      000225 AF F0            [24] 1579 	mov	r7,b
                                   1580 ;	../../core/net/rime/rudolph0.c:107: struct rudolph0_conn *c = (struct rudolph0_conn *)stbroadcast;
      000227 A8 81            [24] 1581 	mov	r0,sp
      000229 18               [12] 1582 	dec	r0
      00022A 18               [12] 1583 	dec	r0
      00022B A6 05            [24] 1584 	mov	@r0,ar5
      00022D 08               [12] 1585 	inc	r0
      00022E A6 06            [24] 1586 	mov	@r0,ar6
      000230 08               [12] 1587 	inc	r0
      000231 A6 07            [24] 1588 	mov	@r0,ar7
                                   1589 ;	../../core/net/rime/rudolph0.c:109: if(c->current.datalen == RUDOLPH0_DATASIZE) {
      000233 A8 81            [24] 1590 	mov	r0,sp
      000235 18               [12] 1591 	dec	r0
      000236 18               [12] 1592 	dec	r0
      000237 74 5C            [12] 1593 	mov	a,#0x5c
      000239 26               [12] 1594 	add	a,@r0
      00023A FA               [12] 1595 	mov	r2,a
      00023B E4               [12] 1596 	clr	a
      00023C 08               [12] 1597 	inc	r0
      00023D 36               [12] 1598 	addc	a,@r0
      00023E FB               [12] 1599 	mov	r3,a
      00023F 08               [12] 1600 	inc	r0
      000240 86 04            [24] 1601 	mov	ar4,@r0
      000242 8A 82            [24] 1602 	mov	dpl,r2
      000244 8B 83            [24] 1603 	mov	dph,r3
      000246 8C F0            [24] 1604 	mov	b,r4
      000248 12r00r00         [24] 1605 	lcall	__gptrget
      00024B FA               [12] 1606 	mov	r2,a
      00024C BA 40 43         [24] 1607 	cjne	r2,#0x40,00102$
                                   1608 ;	../../core/net/rime/rudolph0.c:110: c->current.h.chunk++;
      00024F A8 81            [24] 1609 	mov	r0,sp
      000251 18               [12] 1610 	dec	r0
      000252 18               [12] 1611 	dec	r0
      000253 74 5A            [12] 1612 	mov	a,#0x5a
      000255 26               [12] 1613 	add	a,@r0
      000256 FA               [12] 1614 	mov	r2,a
      000257 E4               [12] 1615 	clr	a
      000258 08               [12] 1616 	inc	r0
      000259 36               [12] 1617 	addc	a,@r0
      00025A FB               [12] 1618 	mov	r3,a
      00025B 08               [12] 1619 	inc	r0
      00025C 86 04            [24] 1620 	mov	ar4,@r0
      00025E 8A 82            [24] 1621 	mov	dpl,r2
      000260 8B 83            [24] 1622 	mov	dph,r3
      000262 8C F0            [24] 1623 	mov	b,r4
      000264 12r00r00         [24] 1624 	lcall	__gptrget
      000267 FE               [12] 1625 	mov	r6,a
      000268 A3               [24] 1626 	inc	dptr
      000269 12r00r00         [24] 1627 	lcall	__gptrget
      00026C FF               [12] 1628 	mov	r7,a
      00026D 0E               [12] 1629 	inc	r6
      00026E BE 00 01         [24] 1630 	cjne	r6,#0x00,00112$
      000271 0F               [12] 1631 	inc	r7
      000272                       1632 00112$:
      000272 8A 82            [24] 1633 	mov	dpl,r2
      000274 8B 83            [24] 1634 	mov	dph,r3
      000276 8C F0            [24] 1635 	mov	b,r4
      000278 EE               [12] 1636 	mov	a,r6
      000279 12r00r00         [24] 1637 	lcall	__gptrput
      00027C A3               [24] 1638 	inc	dptr
      00027D EF               [12] 1639 	mov	a,r7
      00027E 12r00r00         [24] 1640 	lcall	__gptrput
                                   1641 ;	../../core/net/rime/rudolph0.c:112: read_new_datapacket(c);
      000281 A8 81            [24] 1642 	mov	r0,sp
      000283 18               [12] 1643 	dec	r0
      000284 18               [12] 1644 	dec	r0
      000285 86 82            [24] 1645 	mov	dpl,@r0
      000287 08               [12] 1646 	inc	r0
      000288 86 83            [24] 1647 	mov	dph,@r0
      00028A 08               [12] 1648 	inc	r0
      00028B 86 F0            [24] 1649 	mov	b,@r0
      00028D 12r00r00         [24] 1650 	lcall	_read_new_datapacket
      000290 80 1A            [24] 1651 	sjmp	00104$
      000292                       1652 00102$:
                                   1653 ;	../../core/net/rime/rudolph0.c:114: stbroadcast_set_timer(&c->c, STEADY_TIME);
      000292 E4               [12] 1654 	clr	a
      000293 C0 E0            [24] 1655 	push	acc
      000295 04               [12] 1656 	inc	a
      000296 C0 E0            [24] 1657 	push	acc
      000298 E5 81            [12] 1658 	mov	a,sp
      00029A 24 FC            [12] 1659 	add	a,#0xfc
      00029C F8               [12] 1660 	mov	r0,a
      00029D 86 82            [24] 1661 	mov	dpl,@r0
      00029F 08               [12] 1662 	inc	r0
      0002A0 86 83            [24] 1663 	mov	dph,@r0
      0002A2 08               [12] 1664 	inc	r0
      0002A3 86 F0            [24] 1665 	mov	b,@r0
      0002A5 12r00r00         [24] 1666 	lcall	_stbroadcast_set_timer
      0002A8 15 81            [12] 1667 	dec	sp
      0002AA 15 81            [12] 1668 	dec	sp
      0002AC                       1669 00104$:
                                   1670 ;	../../core/net/rime/rudolph0.c:118: }
      0002AC 15 81            [12] 1671 	dec	sp
      0002AE 15 81            [12] 1672 	dec	sp
      0002B0 15 81            [12] 1673 	dec	sp
      0002B2 22               [24] 1674 	ret
                                   1675 ;------------------------------------------------------------
                                   1676 ;Allocation info for local variables in function 'recv'
                                   1677 ;------------------------------------------------------------
                                   1678 ;stbroadcast               Allocated to registers r5 r6 r7 
                                   1679 ;c                         Allocated to stack - sp -5
                                   1680 ;p                         Allocated to stack - sp -2
                                   1681 ;sloc0                     Allocated to stack - sp -18
                                   1682 ;sloc1                     Allocated to stack - sp -17
                                   1683 ;sloc2                     Allocated to stack - sp -15
                                   1684 ;sloc3                     Allocated to stack - sp -13
                                   1685 ;sloc4                     Allocated to stack - sp -2
                                   1686 ;sloc5                     Allocated to stack - sp -11
                                   1687 ;sloc6                     Allocated to stack - sp -8
                                   1688 ;------------------------------------------------------------
                                   1689 ;	../../core/net/rime/rudolph0.c:121: recv(struct stbroadcast_conn *stbroadcast)
                                   1690 ;	-----------------------------------------
                                   1691 ;	 function recv
                                   1692 ;	-----------------------------------------
      0002B3                       1693 _recv:
      0002B3 E5 81            [12] 1694 	mov	a,sp
      0002B5 24 13            [12] 1695 	add	a,#0x13
      0002B7 F5 81            [12] 1696 	mov	sp,a
      0002B9 AD 82            [24] 1697 	mov	r5,dpl
      0002BB AE 83            [24] 1698 	mov	r6,dph
      0002BD AF F0            [24] 1699 	mov	r7,b
                                   1700 ;	../../core/net/rime/rudolph0.c:123: struct rudolph0_conn *c = (struct rudolph0_conn *)stbroadcast;
      0002BF E5 81            [12] 1701 	mov	a,sp
      0002C1 24 FB            [12] 1702 	add	a,#0xfb
      0002C3 F8               [12] 1703 	mov	r0,a
      0002C4 A6 05            [24] 1704 	mov	@r0,ar5
      0002C6 08               [12] 1705 	inc	r0
      0002C7 A6 06            [24] 1706 	mov	@r0,ar6
      0002C9 08               [12] 1707 	inc	r0
      0002CA A6 07            [24] 1708 	mov	@r0,ar7
                                   1709 ;	../../core/net/rime/rudolph0.c:124: struct rudolph0_datapacket *p = packetbuf_dataptr();
      0002CC 12r00r00         [24] 1710 	lcall	_packetbuf_dataptr
      0002CF AA 82            [24] 1711 	mov	r2,dpl
      0002D1 AB 83            [24] 1712 	mov	r3,dph
      0002D3 AC F0            [24] 1713 	mov	r4,b
      0002D5 A8 81            [24] 1714 	mov	r0,sp
      0002D7 18               [12] 1715 	dec	r0
      0002D8 18               [12] 1716 	dec	r0
      0002D9 A6 02            [24] 1717 	mov	@r0,ar2
      0002DB 08               [12] 1718 	inc	r0
      0002DC A6 03            [24] 1719 	mov	@r0,ar3
      0002DE 08               [12] 1720 	inc	r0
      0002DF A6 04            [24] 1721 	mov	@r0,ar4
                                   1722 ;	../../core/net/rime/rudolph0.c:126: if(p->h.type == TYPE_DATA) {
      0002E1 A8 81            [24] 1723 	mov	r0,sp
      0002E3 18               [12] 1724 	dec	r0
      0002E4 18               [12] 1725 	dec	r0
      0002E5 86 82            [24] 1726 	mov	dpl,@r0
      0002E7 08               [12] 1727 	inc	r0
      0002E8 86 83            [24] 1728 	mov	dph,@r0
      0002EA 08               [12] 1729 	inc	r0
      0002EB 86 F0            [24] 1730 	mov	b,@r0
      0002ED 12r00r00         [24] 1731 	lcall	__gptrget
      0002F0 60 03            [24] 1732 	jz	00149$
      0002F2 02r07r33         [24] 1733 	ljmp	00119$
      0002F5                       1734 00149$:
                                   1735 ;	../../core/net/rime/rudolph0.c:127: if(c->current.h.version != p->h.version) {
      0002F5 E5 81            [12] 1736 	mov	a,sp
      0002F7 24 FB            [12] 1737 	add	a,#0xfb
      0002F9 F8               [12] 1738 	mov	r0,a
      0002FA 74 59            [12] 1739 	mov	a,#0x59
      0002FC 26               [12] 1740 	add	a,@r0
      0002FD FD               [12] 1741 	mov	r5,a
      0002FE E4               [12] 1742 	clr	a
      0002FF 08               [12] 1743 	inc	r0
      000300 36               [12] 1744 	addc	a,@r0
      000301 FE               [12] 1745 	mov	r6,a
      000302 08               [12] 1746 	inc	r0
      000303 86 07            [24] 1747 	mov	ar7,@r0
      000305 8D 82            [24] 1748 	mov	dpl,r5
      000307 8E 83            [24] 1749 	mov	dph,r6
      000309 8F F0            [24] 1750 	mov	b,r7
      00030B E5 81            [12] 1751 	mov	a,sp
      00030D 24 EE            [12] 1752 	add	a,#0xee
      00030F F8               [12] 1753 	mov	r0,a
      000310 12r00r00         [24] 1754 	lcall	__gptrget
      000313 F6               [12] 1755 	mov	@r0,a
      000314 A8 81            [24] 1756 	mov	r0,sp
      000316 18               [12] 1757 	dec	r0
      000317 18               [12] 1758 	dec	r0
      000318 74 01            [12] 1759 	mov	a,#0x01
      00031A 26               [12] 1760 	add	a,@r0
      00031B FA               [12] 1761 	mov	r2,a
      00031C E4               [12] 1762 	clr	a
      00031D 08               [12] 1763 	inc	r0
      00031E 36               [12] 1764 	addc	a,@r0
      00031F FB               [12] 1765 	mov	r3,a
      000320 08               [12] 1766 	inc	r0
      000321 86 04            [24] 1767 	mov	ar4,@r0
      000323 8A 82            [24] 1768 	mov	dpl,r2
      000325 8B 83            [24] 1769 	mov	dph,r3
      000327 8C F0            [24] 1770 	mov	b,r4
      000329 12r00r00         [24] 1771 	lcall	__gptrget
      00032C FC               [12] 1772 	mov	r4,a
      00032D E5 81            [12] 1773 	mov	a,sp
      00032F 24 EE            [12] 1774 	add	a,#0xee
      000331 F8               [12] 1775 	mov	r0,a
      000332 E6               [12] 1776 	mov	a,@r0
      000333 B5 04 03         [24] 1777 	cjne	a,ar4,00150$
      000336 02r04rF2         [24] 1778 	ljmp	00115$
      000339                       1779 00150$:
                                   1780 ;	../../core/net/rime/rudolph0.c:129: c->current.h.version = p->h.version;
      000339 8D 82            [24] 1781 	mov	dpl,r5
      00033B 8E 83            [24] 1782 	mov	dph,r6
      00033D 8F F0            [24] 1783 	mov	b,r7
      00033F EC               [12] 1784 	mov	a,r4
      000340 12r00r00         [24] 1785 	lcall	__gptrput
                                   1786 ;	../../core/net/rime/rudolph0.c:130: c->current.h.chunk = 0;
      000343 E5 81            [12] 1787 	mov	a,sp
      000345 24 FB            [12] 1788 	add	a,#0xfb
      000347 F8               [12] 1789 	mov	r0,a
      000348 74 5A            [12] 1790 	mov	a,#0x5a
      00034A 26               [12] 1791 	add	a,@r0
      00034B FD               [12] 1792 	mov	r5,a
      00034C E4               [12] 1793 	clr	a
      00034D 08               [12] 1794 	inc	r0
      00034E 36               [12] 1795 	addc	a,@r0
      00034F FE               [12] 1796 	mov	r6,a
      000350 08               [12] 1797 	inc	r0
      000351 86 07            [24] 1798 	mov	ar7,@r0
      000353 8D 82            [24] 1799 	mov	dpl,r5
      000355 8E 83            [24] 1800 	mov	dph,r6
      000357 8F F0            [24] 1801 	mov	b,r7
      000359 E4               [12] 1802 	clr	a
      00035A 12r00r00         [24] 1803 	lcall	__gptrput
      00035D A3               [24] 1804 	inc	dptr
      00035E 12r00r00         [24] 1805 	lcall	__gptrput
                                   1806 ;	../../core/net/rime/rudolph0.c:131: c->cb->write_chunk(c, 0, RUDOLPH0_FLAG_NEWFILE, p->data, 0);
      000361 E5 81            [12] 1807 	mov	a,sp
      000363 24 FB            [12] 1808 	add	a,#0xfb
      000365 F8               [12] 1809 	mov	r0,a
      000366 74 52            [12] 1810 	mov	a,#0x52
      000368 26               [12] 1811 	add	a,@r0
      000369 FD               [12] 1812 	mov	r5,a
      00036A E4               [12] 1813 	clr	a
      00036B 08               [12] 1814 	inc	r0
      00036C 36               [12] 1815 	addc	a,@r0
      00036D FE               [12] 1816 	mov	r6,a
      00036E 08               [12] 1817 	inc	r0
      00036F 86 07            [24] 1818 	mov	ar7,@r0
      000371 8D 82            [24] 1819 	mov	dpl,r5
      000373 8E 83            [24] 1820 	mov	dph,r6
      000375 8F F0            [24] 1821 	mov	b,r7
      000377 12r00r00         [24] 1822 	lcall	__gptrget
      00037A FD               [12] 1823 	mov	r5,a
      00037B A3               [24] 1824 	inc	dptr
      00037C 12r00r00         [24] 1825 	lcall	__gptrget
      00037F FE               [12] 1826 	mov	r6,a
      000380 A3               [24] 1827 	inc	dptr
      000381 12r00r00         [24] 1828 	lcall	__gptrget
      000384 FF               [12] 1829 	mov	r7,a
      000385 8D 82            [24] 1830 	mov	dpl,r5
      000387 8E 83            [24] 1831 	mov	dph,r6
      000389 8F F0            [24] 1832 	mov	b,r7
      00038B 12r00r00         [24] 1833 	lcall	__gptrget
      00038E FD               [12] 1834 	mov	r5,a
      00038F A3               [24] 1835 	inc	dptr
      000390 12r00r00         [24] 1836 	lcall	__gptrget
      000393 FE               [12] 1837 	mov	r6,a
      000394 A8 81            [24] 1838 	mov	r0,sp
      000396 18               [12] 1839 	dec	r0
      000397 18               [12] 1840 	dec	r0
      000398 74 05            [12] 1841 	mov	a,#0x05
      00039A 26               [12] 1842 	add	a,@r0
      00039B FA               [12] 1843 	mov	r2,a
      00039C E4               [12] 1844 	clr	a
      00039D 08               [12] 1845 	inc	r0
      00039E 36               [12] 1846 	addc	a,@r0
      00039F FB               [12] 1847 	mov	r3,a
      0003A0 08               [12] 1848 	inc	r0
      0003A1 86 07            [24] 1849 	mov	ar7,@r0
      0003A3 C0 06            [24] 1850 	push	ar6
      0003A5 C0 05            [24] 1851 	push	ar5
      0003A7 E4               [12] 1852 	clr	a
      0003A8 C0 E0            [24] 1853 	push	acc
      0003AA C0 E0            [24] 1854 	push	acc
      0003AC C0 02            [24] 1855 	push	ar2
      0003AE C0 03            [24] 1856 	push	ar3
      0003B0 C0 07            [24] 1857 	push	ar7
      0003B2 04               [12] 1858 	inc	a
      0003B3 C0 E0            [24] 1859 	push	acc
      0003B5 E4               [12] 1860 	clr	a
      0003B6 C0 E0            [24] 1861 	push	acc
      0003B8 C0 E0            [24] 1862 	push	acc
      0003BA C0 E0            [24] 1863 	push	acc
      0003BC 12r03rC1         [24] 1864 	lcall	00151$
      0003BF 80 12            [24] 1865 	sjmp	00152$
      0003C1                       1866 00151$:
      0003C1 C0 05            [24] 1867 	push	ar5
      0003C3 C0 06            [24] 1868 	push	ar6
      0003C5 E5 81            [12] 1869 	mov	a,sp
      0003C7 24 EC            [12] 1870 	add	a,#0xec
      0003C9 F8               [12] 1871 	mov	r0,a
      0003CA 86 82            [24] 1872 	mov	dpl,@r0
      0003CC 08               [12] 1873 	inc	r0
      0003CD 86 83            [24] 1874 	mov	dph,@r0
      0003CF 08               [12] 1875 	inc	r0
      0003D0 86 F0            [24] 1876 	mov	b,@r0
      0003D2 22               [24] 1877 	ret
      0003D3                       1878 00152$:
      0003D3 E5 81            [12] 1879 	mov	a,sp
      0003D5 24 F7            [12] 1880 	add	a,#0xf7
      0003D7 F5 81            [12] 1881 	mov	sp,a
      0003D9 D0 05            [24] 1882 	pop	ar5
      0003DB D0 06            [24] 1883 	pop	ar6
                                   1884 ;	../../core/net/rime/rudolph0.c:132: if(p->h.chunk != 0) {
      0003DD A8 81            [24] 1885 	mov	r0,sp
      0003DF 18               [12] 1886 	dec	r0
      0003E0 18               [12] 1887 	dec	r0
      0003E1 74 02            [12] 1888 	mov	a,#0x02
      0003E3 26               [12] 1889 	add	a,@r0
      0003E4 FD               [12] 1890 	mov	r5,a
      0003E5 E4               [12] 1891 	clr	a
      0003E6 08               [12] 1892 	inc	r0
      0003E7 36               [12] 1893 	addc	a,@r0
      0003E8 FE               [12] 1894 	mov	r6,a
      0003E9 08               [12] 1895 	inc	r0
      0003EA 86 07            [24] 1896 	mov	ar7,@r0
      0003EC 8D 82            [24] 1897 	mov	dpl,r5
      0003EE 8E 83            [24] 1898 	mov	dph,r6
      0003F0 8F F0            [24] 1899 	mov	b,r7
      0003F2 12r00r00         [24] 1900 	lcall	__gptrget
      0003F5 FD               [12] 1901 	mov	r5,a
      0003F6 A3               [24] 1902 	inc	dptr
      0003F7 12r00r00         [24] 1903 	lcall	__gptrget
      0003FA 4D               [12] 1904 	orl	a,r5
      0003FB 60 13            [24] 1905 	jz	00102$
                                   1906 ;	../../core/net/rime/rudolph0.c:133: send_nack(c);
      0003FD E5 81            [12] 1907 	mov	a,sp
      0003FF 24 FB            [12] 1908 	add	a,#0xfb
      000401 F8               [12] 1909 	mov	r0,a
      000402 86 82            [24] 1910 	mov	dpl,@r0
      000404 08               [12] 1911 	inc	r0
      000405 86 83            [24] 1912 	mov	dph,@r0
      000407 08               [12] 1913 	inc	r0
      000408 86 F0            [24] 1914 	mov	b,@r0
      00040A 12r01r10         [24] 1915 	lcall	_send_nack
      00040D 02r07r33         [24] 1916 	ljmp	00119$
      000410                       1917 00102$:
                                   1918 ;	../../core/net/rime/rudolph0.c:135: c->cb->write_chunk(c, 0, RUDOLPH0_FLAG_NONE, p->data, p->datalen);
      000410 E5 81            [12] 1919 	mov	a,sp
      000412 24 FB            [12] 1920 	add	a,#0xfb
      000414 F8               [12] 1921 	mov	r0,a
      000415 74 52            [12] 1922 	mov	a,#0x52
      000417 26               [12] 1923 	add	a,@r0
      000418 FD               [12] 1924 	mov	r5,a
      000419 E4               [12] 1925 	clr	a
      00041A 08               [12] 1926 	inc	r0
      00041B 36               [12] 1927 	addc	a,@r0
      00041C FE               [12] 1928 	mov	r6,a
      00041D 08               [12] 1929 	inc	r0
      00041E 86 07            [24] 1930 	mov	ar7,@r0
      000420 8D 82            [24] 1931 	mov	dpl,r5
      000422 8E 83            [24] 1932 	mov	dph,r6
      000424 8F F0            [24] 1933 	mov	b,r7
      000426 12r00r00         [24] 1934 	lcall	__gptrget
      000429 FD               [12] 1935 	mov	r5,a
      00042A A3               [24] 1936 	inc	dptr
      00042B 12r00r00         [24] 1937 	lcall	__gptrget
      00042E FE               [12] 1938 	mov	r6,a
      00042F A3               [24] 1939 	inc	dptr
      000430 12r00r00         [24] 1940 	lcall	__gptrget
      000433 FF               [12] 1941 	mov	r7,a
      000434 8D 82            [24] 1942 	mov	dpl,r5
      000436 8E 83            [24] 1943 	mov	dph,r6
      000438 8F F0            [24] 1944 	mov	b,r7
      00043A 12r00r00         [24] 1945 	lcall	__gptrget
      00043D FD               [12] 1946 	mov	r5,a
      00043E A3               [24] 1947 	inc	dptr
      00043F 12r00r00         [24] 1948 	lcall	__gptrget
      000442 FE               [12] 1949 	mov	r6,a
      000443 A8 81            [24] 1950 	mov	r0,sp
      000445 18               [12] 1951 	dec	r0
      000446 18               [12] 1952 	dec	r0
      000447 74 04            [12] 1953 	mov	a,#0x04
      000449 26               [12] 1954 	add	a,@r0
      00044A FA               [12] 1955 	mov	r2,a
      00044B E4               [12] 1956 	clr	a
      00044C 08               [12] 1957 	inc	r0
      00044D 36               [12] 1958 	addc	a,@r0
      00044E FB               [12] 1959 	mov	r3,a
      00044F 08               [12] 1960 	inc	r0
      000450 86 07            [24] 1961 	mov	ar7,@r0
      000452 8A 82            [24] 1962 	mov	dpl,r2
      000454 8B 83            [24] 1963 	mov	dph,r3
      000456 8F F0            [24] 1964 	mov	b,r7
      000458 12r00r00         [24] 1965 	lcall	__gptrget
      00045B FA               [12] 1966 	mov	r2,a
      00045C E5 81            [12] 1967 	mov	a,sp
      00045E 24 EF            [12] 1968 	add	a,#0xef
      000460 F8               [12] 1969 	mov	r0,a
      000461 A6 02            [24] 1970 	mov	@r0,ar2
      000463 08               [12] 1971 	inc	r0
      000464 76 00            [12] 1972 	mov	@r0,#0x00
      000466 A8 81            [24] 1973 	mov	r0,sp
      000468 18               [12] 1974 	dec	r0
      000469 18               [12] 1975 	dec	r0
      00046A 74 05            [12] 1976 	mov	a,#0x05
      00046C 26               [12] 1977 	add	a,@r0
      00046D FA               [12] 1978 	mov	r2,a
      00046E E4               [12] 1979 	clr	a
      00046F 08               [12] 1980 	inc	r0
      000470 36               [12] 1981 	addc	a,@r0
      000471 FB               [12] 1982 	mov	r3,a
      000472 08               [12] 1983 	inc	r0
      000473 86 07            [24] 1984 	mov	ar7,@r0
      000475 C0 06            [24] 1985 	push	ar6
      000477 C0 05            [24] 1986 	push	ar5
      000479 E5 81            [12] 1987 	mov	a,sp
      00047B 24 ED            [12] 1988 	add	a,#0xed
      00047D F8               [12] 1989 	mov	r0,a
      00047E E6               [12] 1990 	mov	a,@r0
      00047F C0 E0            [24] 1991 	push	acc
      000481 08               [12] 1992 	inc	r0
      000482 E6               [12] 1993 	mov	a,@r0
      000483 C0 E0            [24] 1994 	push	acc
      000485 C0 02            [24] 1995 	push	ar2
      000487 C0 03            [24] 1996 	push	ar3
      000489 C0 07            [24] 1997 	push	ar7
      00048B E4               [12] 1998 	clr	a
      00048C C0 E0            [24] 1999 	push	acc
      00048E C0 E0            [24] 2000 	push	acc
      000490 C0 E0            [24] 2001 	push	acc
      000492 C0 E0            [24] 2002 	push	acc
      000494 12r04r99         [24] 2003 	lcall	00154$
      000497 80 12            [24] 2004 	sjmp	00155$
      000499                       2005 00154$:
      000499 C0 05            [24] 2006 	push	ar5
      00049B C0 06            [24] 2007 	push	ar6
      00049D E5 81            [12] 2008 	mov	a,sp
      00049F 24 EC            [12] 2009 	add	a,#0xec
      0004A1 F8               [12] 2010 	mov	r0,a
      0004A2 86 82            [24] 2011 	mov	dpl,@r0
      0004A4 08               [12] 2012 	inc	r0
      0004A5 86 83            [24] 2013 	mov	dph,@r0
      0004A7 08               [12] 2014 	inc	r0
      0004A8 86 F0            [24] 2015 	mov	b,@r0
      0004AA 22               [24] 2016 	ret
      0004AB                       2017 00155$:
      0004AB E5 81            [12] 2018 	mov	a,sp
      0004AD 24 F7            [12] 2019 	add	a,#0xf7
      0004AF F5 81            [12] 2020 	mov	sp,a
      0004B1 D0 05            [24] 2021 	pop	ar5
      0004B3 D0 06            [24] 2022 	pop	ar6
                                   2023 ;	../../core/net/rime/rudolph0.c:136: c->current.h.chunk++;
      0004B5 E5 81            [12] 2024 	mov	a,sp
      0004B7 24 FB            [12] 2025 	add	a,#0xfb
      0004B9 F8               [12] 2026 	mov	r0,a
      0004BA 74 58            [12] 2027 	mov	a,#0x58
      0004BC 26               [12] 2028 	add	a,@r0
      0004BD FD               [12] 2029 	mov	r5,a
      0004BE E4               [12] 2030 	clr	a
      0004BF 08               [12] 2031 	inc	r0
      0004C0 36               [12] 2032 	addc	a,@r0
      0004C1 FE               [12] 2033 	mov	r6,a
      0004C2 08               [12] 2034 	inc	r0
      0004C3 86 07            [24] 2035 	mov	ar7,@r0
      0004C5 74 02            [12] 2036 	mov	a,#0x02
      0004C7 2D               [12] 2037 	add	a,r5
      0004C8 FD               [12] 2038 	mov	r5,a
      0004C9 E4               [12] 2039 	clr	a
      0004CA 3E               [12] 2040 	addc	a,r6
      0004CB FE               [12] 2041 	mov	r6,a
      0004CC 8D 82            [24] 2042 	mov	dpl,r5
      0004CE 8E 83            [24] 2043 	mov	dph,r6
      0004D0 8F F0            [24] 2044 	mov	b,r7
      0004D2 12r00r00         [24] 2045 	lcall	__gptrget
      0004D5 FA               [12] 2046 	mov	r2,a
      0004D6 A3               [24] 2047 	inc	dptr
      0004D7 12r00r00         [24] 2048 	lcall	__gptrget
      0004DA FB               [12] 2049 	mov	r3,a
      0004DB 0A               [12] 2050 	inc	r2
      0004DC BA 00 01         [24] 2051 	cjne	r2,#0x00,00156$
      0004DF 0B               [12] 2052 	inc	r3
      0004E0                       2053 00156$:
      0004E0 8D 82            [24] 2054 	mov	dpl,r5
      0004E2 8E 83            [24] 2055 	mov	dph,r6
      0004E4 8F F0            [24] 2056 	mov	b,r7
      0004E6 EA               [12] 2057 	mov	a,r2
      0004E7 12r00r00         [24] 2058 	lcall	__gptrput
      0004EA A3               [24] 2059 	inc	dptr
      0004EB EB               [12] 2060 	mov	a,r3
      0004EC 12r00r00         [24] 2061 	lcall	__gptrput
      0004EF 02r07r33         [24] 2062 	ljmp	00119$
      0004F2                       2063 00115$:
                                   2064 ;	../../core/net/rime/rudolph0.c:138: } else if(p->h.version == c->current.h.version) {
      0004F2 E5 81            [12] 2065 	mov	a,sp
      0004F4 24 EE            [12] 2066 	add	a,#0xee
      0004F6 F8               [12] 2067 	mov	r0,a
      0004F7 E6               [12] 2068 	mov	a,@r0
      0004F8 B5 04 02         [24] 2069 	cjne	a,ar4,00157$
      0004FB 80 03            [24] 2070 	sjmp	00158$
      0004FD                       2071 00157$:
      0004FD 02r07r33         [24] 2072 	ljmp	00119$
      000500                       2073 00158$:
                                   2074 ;	../../core/net/rime/rudolph0.c:139: if(p->h.chunk == c->current.h.chunk) {
      000500 A8 81            [24] 2075 	mov	r0,sp
      000502 18               [12] 2076 	dec	r0
      000503 18               [12] 2077 	dec	r0
      000504 74 02            [12] 2078 	mov	a,#0x02
      000506 26               [12] 2079 	add	a,@r0
      000507 FE               [12] 2080 	mov	r6,a
      000508 E4               [12] 2081 	clr	a
      000509 08               [12] 2082 	inc	r0
      00050A 36               [12] 2083 	addc	a,@r0
      00050B FD               [12] 2084 	mov	r5,a
      00050C 08               [12] 2085 	inc	r0
      00050D 86 07            [24] 2086 	mov	ar7,@r0
      00050F 8E 82            [24] 2087 	mov	dpl,r6
      000511 8D 83            [24] 2088 	mov	dph,r5
      000513 8F F0            [24] 2089 	mov	b,r7
      000515 12r00r00         [24] 2090 	lcall	__gptrget
      000518 FE               [12] 2091 	mov	r6,a
      000519 A3               [24] 2092 	inc	dptr
      00051A 12r00r00         [24] 2093 	lcall	__gptrget
      00051D FF               [12] 2094 	mov	r7,a
      00051E E5 81            [12] 2095 	mov	a,sp
      000520 24 FB            [12] 2096 	add	a,#0xfb
      000522 F8               [12] 2097 	mov	r0,a
      000523 74 5A            [12] 2098 	mov	a,#0x5a
      000525 26               [12] 2099 	add	a,@r0
      000526 FC               [12] 2100 	mov	r4,a
      000527 E4               [12] 2101 	clr	a
      000528 08               [12] 2102 	inc	r0
      000529 36               [12] 2103 	addc	a,@r0
      00052A FB               [12] 2104 	mov	r3,a
      00052B 08               [12] 2105 	inc	r0
      00052C 86 05            [24] 2106 	mov	ar5,@r0
      00052E 8C 82            [24] 2107 	mov	dpl,r4
      000530 8B 83            [24] 2108 	mov	dph,r3
      000532 8D F0            [24] 2109 	mov	b,r5
      000534 E5 81            [12] 2110 	mov	a,sp
      000536 24 F1            [12] 2111 	add	a,#0xf1
      000538 F8               [12] 2112 	mov	r0,a
      000539 12r00r00         [24] 2113 	lcall	__gptrget
      00053C F6               [12] 2114 	mov	@r0,a
      00053D A3               [24] 2115 	inc	dptr
      00053E 12r00r00         [24] 2116 	lcall	__gptrget
      000541 08               [12] 2117 	inc	r0
      000542 F6               [12] 2118 	mov	@r0,a
      000543 E5 81            [12] 2119 	mov	a,sp
      000545 24 F1            [12] 2120 	add	a,#0xf1
      000547 F8               [12] 2121 	mov	r0,a
      000548 E6               [12] 2122 	mov	a,@r0
      000549 B5 06 07         [24] 2123 	cjne	a,ar6,00159$
      00054C 08               [12] 2124 	inc	r0
      00054D E6               [12] 2125 	mov	a,@r0
      00054E B5 07 02         [24] 2126 	cjne	a,ar7,00159$
      000551 80 03            [24] 2127 	sjmp	00160$
      000553                       2128 00159$:
      000553 02r07r16         [24] 2129 	ljmp	00110$
      000556                       2130 00160$:
                                   2131 ;	../../core/net/rime/rudolph0.c:141: if(p->datalen < RUDOLPH0_DATASIZE) {
      000556 A8 81            [24] 2132 	mov	r0,sp
      000558 18               [12] 2133 	dec	r0
      000559 18               [12] 2134 	dec	r0
      00055A 74 04            [12] 2135 	mov	a,#0x04
      00055C 26               [12] 2136 	add	a,@r0
      00055D FA               [12] 2137 	mov	r2,a
      00055E E4               [12] 2138 	clr	a
      00055F 08               [12] 2139 	inc	r0
      000560 36               [12] 2140 	addc	a,@r0
      000561 FB               [12] 2141 	mov	r3,a
      000562 08               [12] 2142 	inc	r0
      000563 86 05            [24] 2143 	mov	ar5,@r0
      000565 8A 82            [24] 2144 	mov	dpl,r2
      000567 8B 83            [24] 2145 	mov	dph,r3
      000569 8D F0            [24] 2146 	mov	b,r5
      00056B 12r00r00         [24] 2147 	lcall	__gptrget
      00056E FF               [12] 2148 	mov	r7,a
      00056F BF 40 00         [24] 2149 	cjne	r7,#0x40,00161$
      000572                       2150 00161$:
      000572 40 03            [24] 2151 	jc	00162$
      000574 02r06r32         [24] 2152 	ljmp	00105$
      000577                       2153 00162$:
                                   2154 ;	../../core/net/rime/rudolph0.c:142: c->cb->write_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
      000577 E5 81            [12] 2155 	mov	a,sp
      000579 24 FB            [12] 2156 	add	a,#0xfb
      00057B F8               [12] 2157 	mov	r0,a
      00057C 74 52            [12] 2158 	mov	a,#0x52
      00057E 26               [12] 2159 	add	a,@r0
      00057F FA               [12] 2160 	mov	r2,a
      000580 E4               [12] 2161 	clr	a
      000581 08               [12] 2162 	inc	r0
      000582 36               [12] 2163 	addc	a,@r0
      000583 FB               [12] 2164 	mov	r3,a
      000584 08               [12] 2165 	inc	r0
      000585 86 05            [24] 2166 	mov	ar5,@r0
      000587 8A 82            [24] 2167 	mov	dpl,r2
      000589 8B 83            [24] 2168 	mov	dph,r3
      00058B 8D F0            [24] 2169 	mov	b,r5
      00058D 12r00r00         [24] 2170 	lcall	__gptrget
      000590 FA               [12] 2171 	mov	r2,a
      000591 A3               [24] 2172 	inc	dptr
      000592 12r00r00         [24] 2173 	lcall	__gptrget
      000595 FB               [12] 2174 	mov	r3,a
      000596 A3               [24] 2175 	inc	dptr
      000597 12r00r00         [24] 2176 	lcall	__gptrget
      00059A FD               [12] 2177 	mov	r5,a
      00059B 8A 82            [24] 2178 	mov	dpl,r2
      00059D 8B 83            [24] 2179 	mov	dph,r3
      00059F 8D F0            [24] 2180 	mov	b,r5
      0005A1 12r00r00         [24] 2181 	lcall	__gptrget
      0005A4 FE               [12] 2182 	mov	r6,a
      0005A5 A3               [24] 2183 	inc	dptr
      0005A6 12r00r00         [24] 2184 	lcall	__gptrget
      0005A9 FC               [12] 2185 	mov	r4,a
                                   2186 ;	../../core/net/rime/rudolph0.c:143: RUDOLPH0_FLAG_LASTCHUNK, p->data, p->datalen);
      0005AA E5 81            [12] 2187 	mov	a,sp
      0005AC 24 F3            [12] 2188 	add	a,#0xf3
      0005AE F8               [12] 2189 	mov	r0,a
      0005AF A6 07            [24] 2190 	mov	@r0,ar7
      0005B1 08               [12] 2191 	inc	r0
      0005B2 76 00            [12] 2192 	mov	@r0,#0x00
      0005B4 A8 81            [24] 2193 	mov	r0,sp
      0005B6 18               [12] 2194 	dec	r0
      0005B7 18               [12] 2195 	dec	r0
      0005B8 E5 81            [12] 2196 	mov	a,sp
      0005BA 24 F5            [12] 2197 	add	a,#0xf5
      0005BC F9               [12] 2198 	mov	r1,a
      0005BD 74 05            [12] 2199 	mov	a,#0x05
      0005BF 26               [12] 2200 	add	a,@r0
      0005C0 F7               [12] 2201 	mov	@r1,a
      0005C1 E4               [12] 2202 	clr	a
      0005C2 08               [12] 2203 	inc	r0
      0005C3 36               [12] 2204 	addc	a,@r0
      0005C4 09               [12] 2205 	inc	r1
      0005C5 F7               [12] 2206 	mov	@r1,a
      0005C6 08               [12] 2207 	inc	r0
      0005C7 09               [12] 2208 	inc	r1
      0005C8 E6               [12] 2209 	mov	a,@r0
      0005C9 F7               [12] 2210 	mov	@r1,a
                                   2211 ;	../../core/net/rime/rudolph0.c:142: c->cb->write_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
      0005CA E5 81            [12] 2212 	mov	a,sp
      0005CC 24 F1            [12] 2213 	add	a,#0xf1
      0005CE F8               [12] 2214 	mov	r0,a
      0005CF 86 02            [24] 2215 	mov	ar2,@r0
      0005D1 08               [12] 2216 	inc	r0
      0005D2 E6               [12] 2217 	mov	a,@r0
      0005D3 54 03            [12] 2218 	anl	a,#0x03
      0005D5 A2 E0            [12] 2219 	mov	c,acc.0
      0005D7 CA               [12] 2220 	xch	a,r2
      0005D8 13               [12] 2221 	rrc	a
      0005D9 CA               [12] 2222 	xch	a,r2
      0005DA 13               [12] 2223 	rrc	a
      0005DB A2 E0            [12] 2224 	mov	c,acc.0
      0005DD CA               [12] 2225 	xch	a,r2
      0005DE 13               [12] 2226 	rrc	a
      0005DF CA               [12] 2227 	xch	a,r2
      0005E0 13               [12] 2228 	rrc	a
      0005E1 CA               [12] 2229 	xch	a,r2
      0005E2 FD               [12] 2230 	mov	r5,a
      0005E3 C0 06            [24] 2231 	push	ar6
      0005E5 C0 04            [24] 2232 	push	ar4
      0005E7 E5 81            [12] 2233 	mov	a,sp
      0005E9 24 F1            [12] 2234 	add	a,#0xf1
      0005EB F8               [12] 2235 	mov	r0,a
      0005EC E6               [12] 2236 	mov	a,@r0
      0005ED C0 E0            [24] 2237 	push	acc
      0005EF 08               [12] 2238 	inc	r0
      0005F0 E6               [12] 2239 	mov	a,@r0
      0005F1 C0 E0            [24] 2240 	push	acc
      0005F3 E5 81            [12] 2241 	mov	a,sp
      0005F5 24 F1            [12] 2242 	add	a,#0xf1
      0005F7 F8               [12] 2243 	mov	r0,a
      0005F8 E6               [12] 2244 	mov	a,@r0
      0005F9 C0 E0            [24] 2245 	push	acc
      0005FB 08               [12] 2246 	inc	r0
      0005FC E6               [12] 2247 	mov	a,@r0
      0005FD C0 E0            [24] 2248 	push	acc
      0005FF 08               [12] 2249 	inc	r0
      000600 E6               [12] 2250 	mov	a,@r0
      000601 C0 E0            [24] 2251 	push	acc
      000603 74 02            [12] 2252 	mov	a,#0x02
      000605 C0 E0            [24] 2253 	push	acc
      000607 E4               [12] 2254 	clr	a
      000608 C0 E0            [24] 2255 	push	acc
      00060A C0 02            [24] 2256 	push	ar2
      00060C C0 05            [24] 2257 	push	ar5
      00060E 12r06r13         [24] 2258 	lcall	00163$
      000611 80 12            [24] 2259 	sjmp	00164$
      000613                       2260 00163$:
      000613 C0 06            [24] 2261 	push	ar6
      000615 C0 04            [24] 2262 	push	ar4
      000617 E5 81            [12] 2263 	mov	a,sp
      000619 24 EC            [12] 2264 	add	a,#0xec
      00061B F8               [12] 2265 	mov	r0,a
      00061C 86 82            [24] 2266 	mov	dpl,@r0
      00061E 08               [12] 2267 	inc	r0
      00061F 86 83            [24] 2268 	mov	dph,@r0
      000621 08               [12] 2269 	inc	r0
      000622 86 F0            [24] 2270 	mov	b,@r0
      000624 22               [24] 2271 	ret
      000625                       2272 00164$:
      000625 E5 81            [12] 2273 	mov	a,sp
      000627 24 F7            [12] 2274 	add	a,#0xf7
      000629 F5 81            [12] 2275 	mov	sp,a
      00062B D0 04            [24] 2276 	pop	ar4
      00062D D0 06            [24] 2277 	pop	ar6
      00062F 02r06rD8         [24] 2278 	ljmp	00106$
      000632                       2279 00105$:
                                   2280 ;	../../core/net/rime/rudolph0.c:145: c->cb->write_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
      000632 E5 81            [12] 2281 	mov	a,sp
      000634 24 FB            [12] 2282 	add	a,#0xfb
      000636 F8               [12] 2283 	mov	r0,a
      000637 74 52            [12] 2284 	mov	a,#0x52
      000639 26               [12] 2285 	add	a,@r0
      00063A FB               [12] 2286 	mov	r3,a
      00063B E4               [12] 2287 	clr	a
      00063C 08               [12] 2288 	inc	r0
      00063D 36               [12] 2289 	addc	a,@r0
      00063E FC               [12] 2290 	mov	r4,a
      00063F 08               [12] 2291 	inc	r0
      000640 86 05            [24] 2292 	mov	ar5,@r0
      000642 8B 82            [24] 2293 	mov	dpl,r3
      000644 8C 83            [24] 2294 	mov	dph,r4
      000646 8D F0            [24] 2295 	mov	b,r5
      000648 12r00r00         [24] 2296 	lcall	__gptrget
      00064B FB               [12] 2297 	mov	r3,a
      00064C A3               [24] 2298 	inc	dptr
      00064D 12r00r00         [24] 2299 	lcall	__gptrget
      000650 FC               [12] 2300 	mov	r4,a
      000651 A3               [24] 2301 	inc	dptr
      000652 12r00r00         [24] 2302 	lcall	__gptrget
      000655 FD               [12] 2303 	mov	r5,a
      000656 8B 82            [24] 2304 	mov	dpl,r3
      000658 8C 83            [24] 2305 	mov	dph,r4
      00065A 8D F0            [24] 2306 	mov	b,r5
      00065C 12r00r00         [24] 2307 	lcall	__gptrget
      00065F FE               [12] 2308 	mov	r6,a
      000660 A3               [24] 2309 	inc	dptr
      000661 12r00r00         [24] 2310 	lcall	__gptrget
      000664 FC               [12] 2311 	mov	r4,a
                                   2312 ;	../../core/net/rime/rudolph0.c:146: RUDOLPH0_FLAG_NONE, p->data, p->datalen);
      000665 7A 00            [12] 2313 	mov	r2,#0x00
      000667 A8 81            [24] 2314 	mov	r0,sp
      000669 18               [12] 2315 	dec	r0
      00066A 18               [12] 2316 	dec	r0
      00066B E5 81            [12] 2317 	mov	a,sp
      00066D 24 F8            [12] 2318 	add	a,#0xf8
      00066F F9               [12] 2319 	mov	r1,a
      000670 74 05            [12] 2320 	mov	a,#0x05
      000672 26               [12] 2321 	add	a,@r0
      000673 F7               [12] 2322 	mov	@r1,a
      000674 E4               [12] 2323 	clr	a
      000675 08               [12] 2324 	inc	r0
      000676 36               [12] 2325 	addc	a,@r0
      000677 09               [12] 2326 	inc	r1
      000678 F7               [12] 2327 	mov	@r1,a
      000679 08               [12] 2328 	inc	r0
      00067A 09               [12] 2329 	inc	r1
      00067B E6               [12] 2330 	mov	a,@r0
      00067C F7               [12] 2331 	mov	@r1,a
                                   2332 ;	../../core/net/rime/rudolph0.c:145: c->cb->write_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
      00067D E5 81            [12] 2333 	mov	a,sp
      00067F 24 F1            [12] 2334 	add	a,#0xf1
      000681 F8               [12] 2335 	mov	r0,a
      000682 86 03            [24] 2336 	mov	ar3,@r0
      000684 08               [12] 2337 	inc	r0
      000685 E6               [12] 2338 	mov	a,@r0
      000686 54 03            [12] 2339 	anl	a,#0x03
      000688 A2 E0            [12] 2340 	mov	c,acc.0
      00068A CB               [12] 2341 	xch	a,r3
      00068B 13               [12] 2342 	rrc	a
      00068C CB               [12] 2343 	xch	a,r3
      00068D 13               [12] 2344 	rrc	a
      00068E A2 E0            [12] 2345 	mov	c,acc.0
      000690 CB               [12] 2346 	xch	a,r3
      000691 13               [12] 2347 	rrc	a
      000692 CB               [12] 2348 	xch	a,r3
      000693 13               [12] 2349 	rrc	a
      000694 CB               [12] 2350 	xch	a,r3
      000695 FD               [12] 2351 	mov	r5,a
      000696 C0 06            [24] 2352 	push	ar6
      000698 C0 04            [24] 2353 	push	ar4
      00069A C0 07            [24] 2354 	push	ar7
      00069C C0 02            [24] 2355 	push	ar2
      00069E E5 81            [12] 2356 	mov	a,sp
      0006A0 24 F4            [12] 2357 	add	a,#0xf4
      0006A2 F8               [12] 2358 	mov	r0,a
      0006A3 E6               [12] 2359 	mov	a,@r0
      0006A4 C0 E0            [24] 2360 	push	acc
      0006A6 08               [12] 2361 	inc	r0
      0006A7 E6               [12] 2362 	mov	a,@r0
      0006A8 C0 E0            [24] 2363 	push	acc
      0006AA 08               [12] 2364 	inc	r0
      0006AB E6               [12] 2365 	mov	a,@r0
      0006AC C0 E0            [24] 2366 	push	acc
      0006AE E4               [12] 2367 	clr	a
      0006AF C0 E0            [24] 2368 	push	acc
      0006B1 C0 E0            [24] 2369 	push	acc
      0006B3 C0 03            [24] 2370 	push	ar3
      0006B5 C0 05            [24] 2371 	push	ar5
      0006B7 12r06rBC         [24] 2372 	lcall	00165$
      0006BA 80 12            [24] 2373 	sjmp	00166$
      0006BC                       2374 00165$:
      0006BC C0 06            [24] 2375 	push	ar6
      0006BE C0 04            [24] 2376 	push	ar4
      0006C0 E5 81            [12] 2377 	mov	a,sp
      0006C2 24 EC            [12] 2378 	add	a,#0xec
      0006C4 F8               [12] 2379 	mov	r0,a
      0006C5 86 82            [24] 2380 	mov	dpl,@r0
      0006C7 08               [12] 2381 	inc	r0
      0006C8 86 83            [24] 2382 	mov	dph,@r0
      0006CA 08               [12] 2383 	inc	r0
      0006CB 86 F0            [24] 2384 	mov	b,@r0
      0006CD 22               [24] 2385 	ret
      0006CE                       2386 00166$:
      0006CE E5 81            [12] 2387 	mov	a,sp
      0006D0 24 F7            [12] 2388 	add	a,#0xf7
      0006D2 F5 81            [12] 2389 	mov	sp,a
      0006D4 D0 04            [24] 2390 	pop	ar4
      0006D6 D0 06            [24] 2391 	pop	ar6
      0006D8                       2392 00106$:
                                   2393 ;	../../core/net/rime/rudolph0.c:148: c->current.h.chunk++;
      0006D8 E5 81            [12] 2394 	mov	a,sp
      0006DA 24 FB            [12] 2395 	add	a,#0xfb
      0006DC F8               [12] 2396 	mov	r0,a
      0006DD 74 58            [12] 2397 	mov	a,#0x58
      0006DF 26               [12] 2398 	add	a,@r0
      0006E0 FB               [12] 2399 	mov	r3,a
      0006E1 E4               [12] 2400 	clr	a
      0006E2 08               [12] 2401 	inc	r0
      0006E3 36               [12] 2402 	addc	a,@r0
      0006E4 FC               [12] 2403 	mov	r4,a
      0006E5 08               [12] 2404 	inc	r0
      0006E6 86 05            [24] 2405 	mov	ar5,@r0
      0006E8 74 02            [12] 2406 	mov	a,#0x02
      0006EA 2B               [12] 2407 	add	a,r3
      0006EB FF               [12] 2408 	mov	r7,a
      0006EC E4               [12] 2409 	clr	a
      0006ED 3C               [12] 2410 	addc	a,r4
      0006EE FC               [12] 2411 	mov	r4,a
      0006EF 8D 06            [24] 2412 	mov	ar6,r5
      0006F1 8F 82            [24] 2413 	mov	dpl,r7
      0006F3 8C 83            [24] 2414 	mov	dph,r4
      0006F5 8E F0            [24] 2415 	mov	b,r6
      0006F7 12r00r00         [24] 2416 	lcall	__gptrget
      0006FA FA               [12] 2417 	mov	r2,a
      0006FB A3               [24] 2418 	inc	dptr
      0006FC 12r00r00         [24] 2419 	lcall	__gptrget
      0006FF FD               [12] 2420 	mov	r5,a
      000700 0A               [12] 2421 	inc	r2
      000701 BA 00 01         [24] 2422 	cjne	r2,#0x00,00167$
      000704 0D               [12] 2423 	inc	r5
      000705                       2424 00167$:
      000705 8F 82            [24] 2425 	mov	dpl,r7
      000707 8C 83            [24] 2426 	mov	dph,r4
      000709 8E F0            [24] 2427 	mov	b,r6
      00070B EA               [12] 2428 	mov	a,r2
      00070C 12r00r00         [24] 2429 	lcall	__gptrput
      00070F A3               [24] 2430 	inc	dptr
      000710 ED               [12] 2431 	mov	a,r5
      000711 12r00r00         [24] 2432 	lcall	__gptrput
      000714 80 1D            [24] 2433 	sjmp	00119$
      000716                       2434 00110$:
                                   2435 ;	../../core/net/rime/rudolph0.c:150: } else if(p->h.chunk > c->current.h.chunk) {
      000716 E5 81            [12] 2436 	mov	a,sp
      000718 24 F1            [12] 2437 	add	a,#0xf1
      00071A F8               [12] 2438 	mov	r0,a
      00071B C3               [12] 2439 	clr	c
      00071C E6               [12] 2440 	mov	a,@r0
      00071D 9E               [12] 2441 	subb	a,r6
      00071E 08               [12] 2442 	inc	r0
      00071F E6               [12] 2443 	mov	a,@r0
      000720 9F               [12] 2444 	subb	a,r7
      000721 50 10            [24] 2445 	jnc	00119$
                                   2446 ;	../../core/net/rime/rudolph0.c:152: send_nack(c);
      000723 E5 81            [12] 2447 	mov	a,sp
      000725 24 FB            [12] 2448 	add	a,#0xfb
      000727 F8               [12] 2449 	mov	r0,a
      000728 86 82            [24] 2450 	mov	dpl,@r0
      00072A 08               [12] 2451 	inc	r0
      00072B 86 83            [24] 2452 	mov	dph,@r0
      00072D 08               [12] 2453 	inc	r0
      00072E 86 F0            [24] 2454 	mov	b,@r0
      000730 12r01r10         [24] 2455 	lcall	_send_nack
      000733                       2456 00119$:
                                   2457 ;	../../core/net/rime/rudolph0.c:158: }
      000733 E5 81            [12] 2458 	mov	a,sp
      000735 24 ED            [12] 2459 	add	a,#0xed
      000737 F5 81            [12] 2460 	mov	sp,a
      000739 22               [24] 2461 	ret
                                   2462 ;------------------------------------------------------------
                                   2463 ;Allocation info for local variables in function 'recv_nack'
                                   2464 ;------------------------------------------------------------
                                   2465 ;polite                    Allocated to registers r5 r6 r7 
                                   2466 ;c                         Allocated to stack - sp -2
                                   2467 ;p                         Allocated to registers r2 r3 r4 
                                   2468 ;------------------------------------------------------------
                                   2469 ;	../../core/net/rime/rudolph0.c:161: recv_nack(struct polite_conn *polite)
                                   2470 ;	-----------------------------------------
                                   2471 ;	 function recv_nack
                                   2472 ;	-----------------------------------------
      00073A                       2473 _recv_nack:
      00073A 05 81            [12] 2474 	inc	sp
      00073C 05 81            [12] 2475 	inc	sp
      00073E 05 81            [12] 2476 	inc	sp
      000740 AD 82            [24] 2477 	mov	r5,dpl
      000742 AE 83            [24] 2478 	mov	r6,dph
      000744 AF F0            [24] 2479 	mov	r7,b
                                   2480 ;	../../core/net/rime/rudolph0.c:163: struct rudolph0_conn *c = (struct rudolph0_conn *)
      000746 ED               [12] 2481 	mov	a,r5
      000747 24 D6            [12] 2482 	add	a,#0xd6
      000749 FD               [12] 2483 	mov	r5,a
      00074A EE               [12] 2484 	mov	a,r6
      00074B 34 FF            [12] 2485 	addc	a,#0xff
      00074D FE               [12] 2486 	mov	r6,a
      00074E A8 81            [24] 2487 	mov	r0,sp
      000750 18               [12] 2488 	dec	r0
      000751 18               [12] 2489 	dec	r0
      000752 A6 05            [24] 2490 	mov	@r0,ar5
      000754 08               [12] 2491 	inc	r0
      000755 A6 06            [24] 2492 	mov	@r0,ar6
      000757 08               [12] 2493 	inc	r0
      000758 A6 07            [24] 2494 	mov	@r0,ar7
                                   2495 ;	../../core/net/rime/rudolph0.c:166: struct rudolph0_datapacket *p = packetbuf_dataptr();
      00075A 12r00r00         [24] 2496 	lcall	_packetbuf_dataptr
                                   2497 ;	../../core/net/rime/rudolph0.c:168: if(p->h.type == TYPE_NACK && c->state == STATE_SENDER) {
      00075D AA 82            [24] 2498 	mov	r2,dpl
      00075F AB 83            [24] 2499 	mov	r3,dph
      000761 AC F0            [24] 2500 	mov	r4,b
      000763 12r00r00         [24] 2501 	lcall	__gptrget
      000766 FF               [12] 2502 	mov	r7,a
      000767 BF 01 02         [24] 2503 	cjne	r7,#0x01,00121$
      00076A 80 03            [24] 2504 	sjmp	00122$
      00076C                       2505 00121$:
      00076C 02r08r6F         [24] 2506 	ljmp	00107$
      00076F                       2507 00122$:
      00076F A8 81            [24] 2508 	mov	r0,sp
      000771 18               [12] 2509 	dec	r0
      000772 18               [12] 2510 	dec	r0
      000773 74 57            [12] 2511 	mov	a,#0x57
      000775 26               [12] 2512 	add	a,@r0
      000776 FD               [12] 2513 	mov	r5,a
      000777 E4               [12] 2514 	clr	a
      000778 08               [12] 2515 	inc	r0
      000779 36               [12] 2516 	addc	a,@r0
      00077A FE               [12] 2517 	mov	r6,a
      00077B 08               [12] 2518 	inc	r0
      00077C 86 07            [24] 2519 	mov	ar7,@r0
      00077E 8D 82            [24] 2520 	mov	dpl,r5
      000780 8E 83            [24] 2521 	mov	dph,r6
      000782 8F F0            [24] 2522 	mov	b,r7
      000784 12r00r00         [24] 2523 	lcall	__gptrget
      000787 FD               [12] 2524 	mov	r5,a
      000788 BD 01 02         [24] 2525 	cjne	r5,#0x01,00123$
      00078B 80 03            [24] 2526 	sjmp	00124$
      00078D                       2527 00123$:
      00078D 02r08r6F         [24] 2528 	ljmp	00107$
      000790                       2529 00124$:
                                   2530 ;	../../core/net/rime/rudolph0.c:169: if(p->h.version == c->current.h.version) {
      000790 74 01            [12] 2531 	mov	a,#0x01
      000792 2A               [12] 2532 	add	a,r2
      000793 FD               [12] 2533 	mov	r5,a
      000794 E4               [12] 2534 	clr	a
      000795 3B               [12] 2535 	addc	a,r3
      000796 FE               [12] 2536 	mov	r6,a
      000797 8C 07            [24] 2537 	mov	ar7,r4
      000799 8D 82            [24] 2538 	mov	dpl,r5
      00079B 8E 83            [24] 2539 	mov	dph,r6
      00079D 8F F0            [24] 2540 	mov	b,r7
      00079F 12r00r00         [24] 2541 	lcall	__gptrget
      0007A2 FD               [12] 2542 	mov	r5,a
      0007A3 C0 02            [24] 2543 	push	ar2
      0007A5 C0 03            [24] 2544 	push	ar3
      0007A7 C0 04            [24] 2545 	push	ar4
      0007A9 E5 81            [12] 2546 	mov	a,sp
      0007AB 24 FB            [12] 2547 	add	a,#0xfb
      0007AD F8               [12] 2548 	mov	r0,a
      0007AE 74 59            [12] 2549 	mov	a,#0x59
      0007B0 26               [12] 2550 	add	a,@r0
      0007B1 FC               [12] 2551 	mov	r4,a
      0007B2 E4               [12] 2552 	clr	a
      0007B3 08               [12] 2553 	inc	r0
      0007B4 36               [12] 2554 	addc	a,@r0
      0007B5 FE               [12] 2555 	mov	r6,a
      0007B6 08               [12] 2556 	inc	r0
      0007B7 86 07            [24] 2557 	mov	ar7,@r0
      0007B9 8C 82            [24] 2558 	mov	dpl,r4
      0007BB 8E 83            [24] 2559 	mov	dph,r6
      0007BD 8F F0            [24] 2560 	mov	b,r7
      0007BF 12r00r00         [24] 2561 	lcall	__gptrget
      0007C2 FC               [12] 2562 	mov	r4,a
      0007C3 ED               [12] 2563 	mov	a,r5
      0007C4 B5 04 02         [24] 2564 	cjne	a,ar4,00125$
      0007C7 80 08            [24] 2565 	sjmp	00126$
      0007C9                       2566 00125$:
      0007C9 D0 04            [24] 2567 	pop	ar4
      0007CB D0 03            [24] 2568 	pop	ar3
      0007CD D0 02            [24] 2569 	pop	ar2
      0007CF 80 3C            [24] 2570 	sjmp	00102$
      0007D1                       2571 00126$:
      0007D1 D0 04            [24] 2572 	pop	ar4
      0007D3 D0 03            [24] 2573 	pop	ar3
      0007D5 D0 02            [24] 2574 	pop	ar2
                                   2575 ;	../../core/net/rime/rudolph0.c:171: c->current.h.chunk = p->h.chunk;
      0007D7 A8 81            [24] 2576 	mov	r0,sp
      0007D9 18               [12] 2577 	dec	r0
      0007DA 18               [12] 2578 	dec	r0
      0007DB 74 5A            [12] 2579 	mov	a,#0x5a
      0007DD 26               [12] 2580 	add	a,@r0
      0007DE FD               [12] 2581 	mov	r5,a
      0007DF E4               [12] 2582 	clr	a
      0007E0 08               [12] 2583 	inc	r0
      0007E1 36               [12] 2584 	addc	a,@r0
      0007E2 FE               [12] 2585 	mov	r6,a
      0007E3 08               [12] 2586 	inc	r0
      0007E4 86 07            [24] 2587 	mov	ar7,@r0
      0007E6 74 02            [12] 2588 	mov	a,#0x02
      0007E8 2A               [12] 2589 	add	a,r2
      0007E9 FA               [12] 2590 	mov	r2,a
      0007EA E4               [12] 2591 	clr	a
      0007EB 3B               [12] 2592 	addc	a,r3
      0007EC FB               [12] 2593 	mov	r3,a
      0007ED 8A 82            [24] 2594 	mov	dpl,r2
      0007EF 8B 83            [24] 2595 	mov	dph,r3
      0007F1 8C F0            [24] 2596 	mov	b,r4
      0007F3 12r00r00         [24] 2597 	lcall	__gptrget
      0007F6 FA               [12] 2598 	mov	r2,a
      0007F7 A3               [24] 2599 	inc	dptr
      0007F8 12r00r00         [24] 2600 	lcall	__gptrget
      0007FB FB               [12] 2601 	mov	r3,a
      0007FC 8D 82            [24] 2602 	mov	dpl,r5
      0007FE 8E 83            [24] 2603 	mov	dph,r6
      000800 8F F0            [24] 2604 	mov	b,r7
      000802 EA               [12] 2605 	mov	a,r2
      000803 12r00r00         [24] 2606 	lcall	__gptrput
      000806 A3               [24] 2607 	inc	dptr
      000807 EB               [12] 2608 	mov	a,r3
      000808 12r00r00         [24] 2609 	lcall	__gptrput
      00080B 80 1D            [24] 2610 	sjmp	00103$
      00080D                       2611 00102$:
                                   2612 ;	../../core/net/rime/rudolph0.c:174: c->current.h.chunk = 0;
      00080D A8 81            [24] 2613 	mov	r0,sp
      00080F 18               [12] 2614 	dec	r0
      000810 18               [12] 2615 	dec	r0
      000811 74 5A            [12] 2616 	mov	a,#0x5a
      000813 26               [12] 2617 	add	a,@r0
      000814 FD               [12] 2618 	mov	r5,a
      000815 E4               [12] 2619 	clr	a
      000816 08               [12] 2620 	inc	r0
      000817 36               [12] 2621 	addc	a,@r0
      000818 FE               [12] 2622 	mov	r6,a
      000819 08               [12] 2623 	inc	r0
      00081A 86 07            [24] 2624 	mov	ar7,@r0
      00081C 8D 82            [24] 2625 	mov	dpl,r5
      00081E 8E 83            [24] 2626 	mov	dph,r6
      000820 8F F0            [24] 2627 	mov	b,r7
      000822 E4               [12] 2628 	clr	a
      000823 12r00r00         [24] 2629 	lcall	__gptrput
      000826 A3               [24] 2630 	inc	dptr
      000827 12r00r00         [24] 2631 	lcall	__gptrput
      00082A                       2632 00103$:
                                   2633 ;	../../core/net/rime/rudolph0.c:176: read_new_datapacket(c);
      00082A A8 81            [24] 2634 	mov	r0,sp
      00082C 18               [12] 2635 	dec	r0
      00082D 18               [12] 2636 	dec	r0
      00082E 86 82            [24] 2637 	mov	dpl,@r0
      000830 08               [12] 2638 	inc	r0
      000831 86 83            [24] 2639 	mov	dph,@r0
      000833 08               [12] 2640 	inc	r0
      000834 86 F0            [24] 2641 	mov	b,@r0
      000836 12r00r00         [24] 2642 	lcall	_read_new_datapacket
                                   2643 ;	../../core/net/rime/rudolph0.c:177: stbroadcast_set_timer(&c->c, c->send_interval);
      000839 A8 81            [24] 2644 	mov	r0,sp
      00083B 18               [12] 2645 	dec	r0
      00083C 18               [12] 2646 	dec	r0
      00083D 74 55            [12] 2647 	mov	a,#0x55
      00083F 26               [12] 2648 	add	a,@r0
      000840 FD               [12] 2649 	mov	r5,a
      000841 E4               [12] 2650 	clr	a
      000842 08               [12] 2651 	inc	r0
      000843 36               [12] 2652 	addc	a,@r0
      000844 FE               [12] 2653 	mov	r6,a
      000845 08               [12] 2654 	inc	r0
      000846 86 07            [24] 2655 	mov	ar7,@r0
      000848 8D 82            [24] 2656 	mov	dpl,r5
      00084A 8E 83            [24] 2657 	mov	dph,r6
      00084C 8F F0            [24] 2658 	mov	b,r7
      00084E 12r00r00         [24] 2659 	lcall	__gptrget
      000851 FD               [12] 2660 	mov	r5,a
      000852 A3               [24] 2661 	inc	dptr
      000853 12r00r00         [24] 2662 	lcall	__gptrget
      000856 FE               [12] 2663 	mov	r6,a
      000857 C0 05            [24] 2664 	push	ar5
      000859 C0 06            [24] 2665 	push	ar6
      00085B E5 81            [12] 2666 	mov	a,sp
      00085D 24 FC            [12] 2667 	add	a,#0xfc
      00085F F8               [12] 2668 	mov	r0,a
      000860 86 82            [24] 2669 	mov	dpl,@r0
      000862 08               [12] 2670 	inc	r0
      000863 86 83            [24] 2671 	mov	dph,@r0
      000865 08               [12] 2672 	inc	r0
      000866 86 F0            [24] 2673 	mov	b,@r0
      000868 12r00r00         [24] 2674 	lcall	_stbroadcast_set_timer
      00086B 15 81            [12] 2675 	dec	sp
      00086D 15 81            [12] 2676 	dec	sp
      00086F                       2677 00107$:
                                   2678 ;	../../core/net/rime/rudolph0.c:179: }
      00086F 15 81            [12] 2679 	dec	sp
      000871 15 81            [12] 2680 	dec	sp
      000873 15 81            [12] 2681 	dec	sp
      000875 22               [24] 2682 	ret
                                   2683 ;------------------------------------------------------------
                                   2684 ;Allocation info for local variables in function 'rudolph0_open'
                                   2685 ;------------------------------------------------------------
                                   2686 ;channel                   Allocated to stack - sp -6
                                   2687 ;cb                        Allocated to stack - sp -9
                                   2688 ;c                         Allocated to stack - sp -2
                                   2689 ;------------------------------------------------------------
                                   2690 ;	../../core/net/rime/rudolph0.c:185: rudolph0_open(struct rudolph0_conn *c, uint16_t channel,
                                   2691 ;	-----------------------------------------
                                   2692 ;	 function rudolph0_open
                                   2693 ;	-----------------------------------------
      000876                       2694 _rudolph0_open:
      000876 C0 82            [24] 2695 	push	dpl
      000878 C0 83            [24] 2696 	push	dph
      00087A C0 F0            [24] 2697 	push	b
                                   2698 ;	../../core/net/rime/rudolph0.c:188: stbroadcast_open(&c->c, channel, &stbroadcast);
      00087C 74r06            [12] 2699 	mov	a,#_stbroadcast
      00087E C0 E0            [24] 2700 	push	acc
      000880 74s00            [12] 2701 	mov	a,#(_stbroadcast >> 8)
      000882 C0 E0            [24] 2702 	push	acc
      000884 74 80            [12] 2703 	mov	a,#0x80
      000886 C0 E0            [24] 2704 	push	acc
      000888 E5 81            [12] 2705 	mov	a,sp
      00088A 24 F7            [12] 2706 	add	a,#0xf7
      00088C F8               [12] 2707 	mov	r0,a
      00088D E6               [12] 2708 	mov	a,@r0
      00088E C0 E0            [24] 2709 	push	acc
      000890 08               [12] 2710 	inc	r0
      000891 E6               [12] 2711 	mov	a,@r0
      000892 C0 E0            [24] 2712 	push	acc
      000894 E5 81            [12] 2713 	mov	a,sp
      000896 24 F9            [12] 2714 	add	a,#0xf9
      000898 F8               [12] 2715 	mov	r0,a
      000899 86 82            [24] 2716 	mov	dpl,@r0
      00089B 08               [12] 2717 	inc	r0
      00089C 86 83            [24] 2718 	mov	dph,@r0
      00089E 08               [12] 2719 	inc	r0
      00089F 86 F0            [24] 2720 	mov	b,@r0
      0008A1 12r00r00         [24] 2721 	lcall	_stbroadcast_open
      0008A4 E5 81            [12] 2722 	mov	a,sp
      0008A6 24 FB            [12] 2723 	add	a,#0xfb
                                   2724 ;	../../core/net/rime/rudolph0.c:189: polite_open(&c->nackc, channel + 1, &polite);
      0008A8 F5 81            [12] 2725 	mov	sp,a
      0008AA 24 FA            [12] 2726 	add	a,#0xfa
      0008AC F8               [12] 2727 	mov	r0,a
      0008AD 86 03            [24] 2728 	mov	ar3,@r0
      0008AF 08               [12] 2729 	inc	r0
      0008B0 86 04            [24] 2730 	mov	ar4,@r0
      0008B2 0B               [12] 2731 	inc	r3
      0008B3 BB 00 01         [24] 2732 	cjne	r3,#0x00,00103$
      0008B6 0C               [12] 2733 	inc	r4
      0008B7                       2734 00103$:
      0008B7 A8 81            [24] 2735 	mov	r0,sp
      0008B9 18               [12] 2736 	dec	r0
      0008BA 18               [12] 2737 	dec	r0
      0008BB 74 2A            [12] 2738 	mov	a,#0x2a
      0008BD 26               [12] 2739 	add	a,@r0
      0008BE FA               [12] 2740 	mov	r2,a
      0008BF E4               [12] 2741 	clr	a
      0008C0 08               [12] 2742 	inc	r0
      0008C1 36               [12] 2743 	addc	a,@r0
      0008C2 FE               [12] 2744 	mov	r6,a
      0008C3 08               [12] 2745 	inc	r0
      0008C4 86 07            [24] 2746 	mov	ar7,@r0
      0008C6 74r00            [12] 2747 	mov	a,#_polite
      0008C8 C0 E0            [24] 2748 	push	acc
      0008CA 74s00            [12] 2749 	mov	a,#(_polite >> 8)
      0008CC C0 E0            [24] 2750 	push	acc
      0008CE 74 80            [12] 2751 	mov	a,#0x80
      0008D0 C0 E0            [24] 2752 	push	acc
      0008D2 C0 03            [24] 2753 	push	ar3
      0008D4 C0 04            [24] 2754 	push	ar4
      0008D6 8A 82            [24] 2755 	mov	dpl,r2
      0008D8 8E 83            [24] 2756 	mov	dph,r6
      0008DA 8F F0            [24] 2757 	mov	b,r7
      0008DC 12r00r00         [24] 2758 	lcall	_polite_open
      0008DF E5 81            [12] 2759 	mov	a,sp
      0008E1 24 FB            [12] 2760 	add	a,#0xfb
      0008E3 F5 81            [12] 2761 	mov	sp,a
                                   2762 ;	../../core/net/rime/rudolph0.c:190: c->cb = cb;
      0008E5 A8 81            [24] 2763 	mov	r0,sp
      0008E7 18               [12] 2764 	dec	r0
      0008E8 18               [12] 2765 	dec	r0
      0008E9 74 52            [12] 2766 	mov	a,#0x52
      0008EB 26               [12] 2767 	add	a,@r0
      0008EC FD               [12] 2768 	mov	r5,a
      0008ED E4               [12] 2769 	clr	a
      0008EE 08               [12] 2770 	inc	r0
      0008EF 36               [12] 2771 	addc	a,@r0
      0008F0 FE               [12] 2772 	mov	r6,a
      0008F1 08               [12] 2773 	inc	r0
      0008F2 86 07            [24] 2774 	mov	ar7,@r0
      0008F4 8D 82            [24] 2775 	mov	dpl,r5
      0008F6 8E 83            [24] 2776 	mov	dph,r6
      0008F8 8F F0            [24] 2777 	mov	b,r7
      0008FA E5 81            [12] 2778 	mov	a,sp
      0008FC 24 F7            [12] 2779 	add	a,#0xf7
      0008FE F8               [12] 2780 	mov	r0,a
      0008FF E6               [12] 2781 	mov	a,@r0
      000900 12r00r00         [24] 2782 	lcall	__gptrput
      000903 A3               [24] 2783 	inc	dptr
      000904 08               [12] 2784 	inc	r0
      000905 E6               [12] 2785 	mov	a,@r0
      000906 12r00r00         [24] 2786 	lcall	__gptrput
      000909 A3               [24] 2787 	inc	dptr
      00090A 08               [12] 2788 	inc	r0
      00090B E6               [12] 2789 	mov	a,@r0
      00090C 12r00r00         [24] 2790 	lcall	__gptrput
                                   2791 ;	../../core/net/rime/rudolph0.c:191: c->current.h.version = 0;
      00090F A8 81            [24] 2792 	mov	r0,sp
      000911 18               [12] 2793 	dec	r0
      000912 18               [12] 2794 	dec	r0
      000913 74 58            [12] 2795 	mov	a,#0x58
      000915 26               [12] 2796 	add	a,@r0
      000916 FD               [12] 2797 	mov	r5,a
      000917 E4               [12] 2798 	clr	a
      000918 08               [12] 2799 	inc	r0
      000919 36               [12] 2800 	addc	a,@r0
      00091A FE               [12] 2801 	mov	r6,a
      00091B 08               [12] 2802 	inc	r0
      00091C 86 07            [24] 2803 	mov	ar7,@r0
      00091E 0D               [12] 2804 	inc	r5
      00091F BD 00 01         [24] 2805 	cjne	r5,#0x00,00104$
      000922 0E               [12] 2806 	inc	r6
      000923                       2807 00104$:
      000923 8D 82            [24] 2808 	mov	dpl,r5
      000925 8E 83            [24] 2809 	mov	dph,r6
      000927 8F F0            [24] 2810 	mov	b,r7
      000929 E4               [12] 2811 	clr	a
      00092A 12r00r00         [24] 2812 	lcall	__gptrput
                                   2813 ;	../../core/net/rime/rudolph0.c:192: c->state = STATE_RECEIVER;
      00092D A8 81            [24] 2814 	mov	r0,sp
      00092F 18               [12] 2815 	dec	r0
      000930 18               [12] 2816 	dec	r0
      000931 74 57            [12] 2817 	mov	a,#0x57
      000933 26               [12] 2818 	add	a,@r0
      000934 FD               [12] 2819 	mov	r5,a
      000935 E4               [12] 2820 	clr	a
      000936 08               [12] 2821 	inc	r0
      000937 36               [12] 2822 	addc	a,@r0
      000938 FE               [12] 2823 	mov	r6,a
      000939 08               [12] 2824 	inc	r0
      00093A 86 07            [24] 2825 	mov	ar7,@r0
      00093C 8D 82            [24] 2826 	mov	dpl,r5
      00093E 8E 83            [24] 2827 	mov	dph,r6
      000940 8F F0            [24] 2828 	mov	b,r7
      000942 E4               [12] 2829 	clr	a
      000943 12r00r00         [24] 2830 	lcall	__gptrput
                                   2831 ;	../../core/net/rime/rudolph0.c:193: c->send_interval = DEFAULT_SEND_INTERVAL;
      000946 A8 81            [24] 2832 	mov	r0,sp
      000948 18               [12] 2833 	dec	r0
      000949 18               [12] 2834 	dec	r0
      00094A 74 55            [12] 2835 	mov	a,#0x55
      00094C 26               [12] 2836 	add	a,@r0
      00094D FD               [12] 2837 	mov	r5,a
      00094E E4               [12] 2838 	clr	a
      00094F 08               [12] 2839 	inc	r0
      000950 36               [12] 2840 	addc	a,@r0
      000951 FE               [12] 2841 	mov	r6,a
      000952 08               [12] 2842 	inc	r0
      000953 86 07            [24] 2843 	mov	ar7,@r0
      000955 8D 82            [24] 2844 	mov	dpl,r5
      000957 8E 83            [24] 2845 	mov	dph,r6
      000959 8F F0            [24] 2846 	mov	b,r7
      00095B 74 40            [12] 2847 	mov	a,#0x40
      00095D 12r00r00         [24] 2848 	lcall	__gptrput
      000960 A3               [24] 2849 	inc	dptr
      000961 E4               [12] 2850 	clr	a
      000962 12r00r00         [24] 2851 	lcall	__gptrput
                                   2852 ;	../../core/net/rime/rudolph0.c:194: }
      000965 15 81            [12] 2853 	dec	sp
      000967 15 81            [12] 2854 	dec	sp
      000969 15 81            [12] 2855 	dec	sp
      00096B 22               [24] 2856 	ret
                                   2857 ;------------------------------------------------------------
                                   2858 ;Allocation info for local variables in function 'rudolph0_close'
                                   2859 ;------------------------------------------------------------
                                   2860 ;c                         Allocated to registers r5 r6 r7 
                                   2861 ;------------------------------------------------------------
                                   2862 ;	../../core/net/rime/rudolph0.c:197: rudolph0_close(struct rudolph0_conn *c)
                                   2863 ;	-----------------------------------------
                                   2864 ;	 function rudolph0_close
                                   2865 ;	-----------------------------------------
      00096C                       2866 _rudolph0_close:
                                   2867 ;	../../core/net/rime/rudolph0.c:199: stbroadcast_close(&c->c);
      00096C AD 82            [24] 2868 	mov	r5,dpl
      00096E AE 83            [24] 2869 	mov	r6,dph
      000970 AF F0            [24] 2870 	mov	r7,b
      000972 C0 07            [24] 2871 	push	ar7
      000974 C0 06            [24] 2872 	push	ar6
      000976 C0 05            [24] 2873 	push	ar5
      000978 12r00r00         [24] 2874 	lcall	_stbroadcast_close
      00097B D0 05            [24] 2875 	pop	ar5
      00097D D0 06            [24] 2876 	pop	ar6
      00097F D0 07            [24] 2877 	pop	ar7
                                   2878 ;	../../core/net/rime/rudolph0.c:200: polite_close(&c->nackc);
      000981 74 2A            [12] 2879 	mov	a,#0x2a
      000983 2D               [12] 2880 	add	a,r5
      000984 FD               [12] 2881 	mov	r5,a
      000985 E4               [12] 2882 	clr	a
      000986 3E               [12] 2883 	addc	a,r6
      000987 FE               [12] 2884 	mov	r6,a
      000988 8D 82            [24] 2885 	mov	dpl,r5
      00098A 8E 83            [24] 2886 	mov	dph,r6
      00098C 8F F0            [24] 2887 	mov	b,r7
                                   2888 ;	../../core/net/rime/rudolph0.c:201: }
      00098E 02r00r00         [24] 2889 	ljmp	_polite_close
                                   2890 ;------------------------------------------------------------
                                   2891 ;Allocation info for local variables in function 'rudolph0_send'
                                   2892 ;------------------------------------------------------------
                                   2893 ;send_interval             Allocated to stack - sp -9
                                   2894 ;c                         Allocated to stack - sp -5
                                   2895 ;sloc0                     Allocated to stack - sp -2
                                   2896 ;------------------------------------------------------------
                                   2897 ;	../../core/net/rime/rudolph0.c:204: rudolph0_send(struct rudolph0_conn *c, clock_time_t send_interval)
                                   2898 ;	-----------------------------------------
                                   2899 ;	 function rudolph0_send
                                   2900 ;	-----------------------------------------
      000991                       2901 _rudolph0_send:
      000991 C0 82            [24] 2902 	push	dpl
      000993 C0 83            [24] 2903 	push	dph
      000995 C0 F0            [24] 2904 	push	b
      000997 05 81            [12] 2905 	inc	sp
      000999 05 81            [12] 2906 	inc	sp
      00099B 05 81            [12] 2907 	inc	sp
                                   2908 ;	../../core/net/rime/rudolph0.c:206: c->state = STATE_SENDER;
      00099D E5 81            [12] 2909 	mov	a,sp
      00099F 24 FB            [12] 2910 	add	a,#0xfb
      0009A1 F8               [12] 2911 	mov	r0,a
      0009A2 74 57            [12] 2912 	mov	a,#0x57
      0009A4 26               [12] 2913 	add	a,@r0
      0009A5 FA               [12] 2914 	mov	r2,a
      0009A6 E4               [12] 2915 	clr	a
      0009A7 08               [12] 2916 	inc	r0
      0009A8 36               [12] 2917 	addc	a,@r0
      0009A9 FB               [12] 2918 	mov	r3,a
      0009AA 08               [12] 2919 	inc	r0
      0009AB 86 04            [24] 2920 	mov	ar4,@r0
      0009AD 8A 82            [24] 2921 	mov	dpl,r2
      0009AF 8B 83            [24] 2922 	mov	dph,r3
      0009B1 8C F0            [24] 2923 	mov	b,r4
      0009B3 74 01            [12] 2924 	mov	a,#0x01
      0009B5 12r00r00         [24] 2925 	lcall	__gptrput
                                   2926 ;	../../core/net/rime/rudolph0.c:207: c->current.h.version++;
      0009B8 E5 81            [12] 2927 	mov	a,sp
      0009BA 24 FB            [12] 2928 	add	a,#0xfb
      0009BC F8               [12] 2929 	mov	r0,a
      0009BD 74 58            [12] 2930 	mov	a,#0x58
      0009BF 26               [12] 2931 	add	a,@r0
      0009C0 FA               [12] 2932 	mov	r2,a
      0009C1 E4               [12] 2933 	clr	a
      0009C2 08               [12] 2934 	inc	r0
      0009C3 36               [12] 2935 	addc	a,@r0
      0009C4 FB               [12] 2936 	mov	r3,a
      0009C5 08               [12] 2937 	inc	r0
      0009C6 86 04            [24] 2938 	mov	ar4,@r0
      0009C8 A8 81            [24] 2939 	mov	r0,sp
      0009CA 18               [12] 2940 	dec	r0
      0009CB 18               [12] 2941 	dec	r0
      0009CC 74 01            [12] 2942 	mov	a,#0x01
      0009CE 2A               [12] 2943 	add	a,r2
      0009CF F6               [12] 2944 	mov	@r0,a
      0009D0 E4               [12] 2945 	clr	a
      0009D1 3B               [12] 2946 	addc	a,r3
      0009D2 08               [12] 2947 	inc	r0
      0009D3 F6               [12] 2948 	mov	@r0,a
      0009D4 08               [12] 2949 	inc	r0
      0009D5 A6 04            [24] 2950 	mov	@r0,ar4
      0009D7 A8 81            [24] 2951 	mov	r0,sp
      0009D9 18               [12] 2952 	dec	r0
      0009DA 18               [12] 2953 	dec	r0
      0009DB 86 82            [24] 2954 	mov	dpl,@r0
      0009DD 08               [12] 2955 	inc	r0
      0009DE 86 83            [24] 2956 	mov	dph,@r0
      0009E0 08               [12] 2957 	inc	r0
      0009E1 86 F0            [24] 2958 	mov	b,@r0
      0009E3 12r00r00         [24] 2959 	lcall	__gptrget
      0009E6 FF               [12] 2960 	mov	r7,a
      0009E7 0F               [12] 2961 	inc	r7
      0009E8 A8 81            [24] 2962 	mov	r0,sp
      0009EA 18               [12] 2963 	dec	r0
      0009EB 18               [12] 2964 	dec	r0
      0009EC 86 82            [24] 2965 	mov	dpl,@r0
      0009EE 08               [12] 2966 	inc	r0
      0009EF 86 83            [24] 2967 	mov	dph,@r0
      0009F1 08               [12] 2968 	inc	r0
      0009F2 86 F0            [24] 2969 	mov	b,@r0
      0009F4 EF               [12] 2970 	mov	a,r7
      0009F5 12r00r00         [24] 2971 	lcall	__gptrput
                                   2972 ;	../../core/net/rime/rudolph0.c:208: c->current.h.version++;
      0009F8 0F               [12] 2973 	inc	r7
      0009F9 A8 81            [24] 2974 	mov	r0,sp
      0009FB 18               [12] 2975 	dec	r0
      0009FC 18               [12] 2976 	dec	r0
      0009FD 86 82            [24] 2977 	mov	dpl,@r0
      0009FF 08               [12] 2978 	inc	r0
      000A00 86 83            [24] 2979 	mov	dph,@r0
      000A02 08               [12] 2980 	inc	r0
      000A03 86 F0            [24] 2981 	mov	b,@r0
      000A05 EF               [12] 2982 	mov	a,r7
      000A06 12r00r00         [24] 2983 	lcall	__gptrput
                                   2984 ;	../../core/net/rime/rudolph0.c:209: c->current.h.chunk = 0;
      000A09 74 02            [12] 2985 	mov	a,#0x02
      000A0B 2A               [12] 2986 	add	a,r2
      000A0C FD               [12] 2987 	mov	r5,a
      000A0D E4               [12] 2988 	clr	a
      000A0E 3B               [12] 2989 	addc	a,r3
      000A0F FE               [12] 2990 	mov	r6,a
      000A10 8C 07            [24] 2991 	mov	ar7,r4
      000A12 8D 82            [24] 2992 	mov	dpl,r5
      000A14 8E 83            [24] 2993 	mov	dph,r6
      000A16 8F F0            [24] 2994 	mov	b,r7
      000A18 E4               [12] 2995 	clr	a
      000A19 12r00r00         [24] 2996 	lcall	__gptrput
      000A1C A3               [24] 2997 	inc	dptr
      000A1D 12r00r00         [24] 2998 	lcall	__gptrput
                                   2999 ;	../../core/net/rime/rudolph0.c:210: c->current.h.type = TYPE_DATA;
      000A20 8A 82            [24] 3000 	mov	dpl,r2
      000A22 8B 83            [24] 3001 	mov	dph,r3
      000A24 8C F0            [24] 3002 	mov	b,r4
      000A26 12r00r00         [24] 3003 	lcall	__gptrput
                                   3004 ;	../../core/net/rime/rudolph0.c:211: read_new_datapacket(c);
      000A29 E5 81            [12] 3005 	mov	a,sp
      000A2B 24 FB            [12] 3006 	add	a,#0xfb
      000A2D F8               [12] 3007 	mov	r0,a
      000A2E 86 82            [24] 3008 	mov	dpl,@r0
      000A30 08               [12] 3009 	inc	r0
      000A31 86 83            [24] 3010 	mov	dph,@r0
      000A33 08               [12] 3011 	inc	r0
      000A34 86 F0            [24] 3012 	mov	b,@r0
      000A36 12r00r00         [24] 3013 	lcall	_read_new_datapacket
                                   3014 ;	../../core/net/rime/rudolph0.c:212: packetbuf_reference(&c->current, sizeof(struct rudolph0_datapacket));
      000A39 E5 81            [12] 3015 	mov	a,sp
      000A3B 24 FB            [12] 3016 	add	a,#0xfb
      000A3D F8               [12] 3017 	mov	r0,a
      000A3E 74 58            [12] 3018 	mov	a,#0x58
      000A40 26               [12] 3019 	add	a,@r0
      000A41 FD               [12] 3020 	mov	r5,a
      000A42 E4               [12] 3021 	clr	a
      000A43 08               [12] 3022 	inc	r0
      000A44 36               [12] 3023 	addc	a,@r0
      000A45 FE               [12] 3024 	mov	r6,a
      000A46 08               [12] 3025 	inc	r0
      000A47 86 07            [24] 3026 	mov	ar7,@r0
      000A49 74 45            [12] 3027 	mov	a,#0x45
      000A4B C0 E0            [24] 3028 	push	acc
      000A4D E4               [12] 3029 	clr	a
      000A4E C0 E0            [24] 3030 	push	acc
      000A50 8D 82            [24] 3031 	mov	dpl,r5
      000A52 8E 83            [24] 3032 	mov	dph,r6
      000A54 8F F0            [24] 3033 	mov	b,r7
      000A56 12r00r00         [24] 3034 	lcall	_packetbuf_reference
      000A59 15 81            [12] 3035 	dec	sp
      000A5B 15 81            [12] 3036 	dec	sp
                                   3037 ;	../../core/net/rime/rudolph0.c:213: c->send_interval = send_interval;
      000A5D E5 81            [12] 3038 	mov	a,sp
      000A5F 24 FB            [12] 3039 	add	a,#0xfb
      000A61 F8               [12] 3040 	mov	r0,a
      000A62 74 55            [12] 3041 	mov	a,#0x55
      000A64 26               [12] 3042 	add	a,@r0
      000A65 FD               [12] 3043 	mov	r5,a
      000A66 E4               [12] 3044 	clr	a
      000A67 08               [12] 3045 	inc	r0
      000A68 36               [12] 3046 	addc	a,@r0
      000A69 FE               [12] 3047 	mov	r6,a
      000A6A 08               [12] 3048 	inc	r0
      000A6B 86 07            [24] 3049 	mov	ar7,@r0
      000A6D 8D 82            [24] 3050 	mov	dpl,r5
      000A6F 8E 83            [24] 3051 	mov	dph,r6
      000A71 8F F0            [24] 3052 	mov	b,r7
      000A73 E5 81            [12] 3053 	mov	a,sp
      000A75 24 F7            [12] 3054 	add	a,#0xf7
      000A77 F8               [12] 3055 	mov	r0,a
      000A78 E6               [12] 3056 	mov	a,@r0
      000A79 12r00r00         [24] 3057 	lcall	__gptrput
      000A7C A3               [24] 3058 	inc	dptr
      000A7D 08               [12] 3059 	inc	r0
      000A7E E6               [12] 3060 	mov	a,@r0
      000A7F 12r00r00         [24] 3061 	lcall	__gptrput
                                   3062 ;	../../core/net/rime/rudolph0.c:214: stbroadcast_send_stubborn(&c->c, c->send_interval);
      000A82 E5 81            [12] 3063 	mov	a,sp
      000A84 24 F7            [12] 3064 	add	a,#0xf7
      000A86 F8               [12] 3065 	mov	r0,a
      000A87 E6               [12] 3066 	mov	a,@r0
      000A88 C0 E0            [24] 3067 	push	acc
      000A8A 08               [12] 3068 	inc	r0
      000A8B E6               [12] 3069 	mov	a,@r0
      000A8C C0 E0            [24] 3070 	push	acc
      000A8E E5 81            [12] 3071 	mov	a,sp
      000A90 24 F9            [12] 3072 	add	a,#0xf9
      000A92 F8               [12] 3073 	mov	r0,a
      000A93 86 82            [24] 3074 	mov	dpl,@r0
      000A95 08               [12] 3075 	inc	r0
      000A96 86 83            [24] 3076 	mov	dph,@r0
      000A98 08               [12] 3077 	inc	r0
      000A99 86 F0            [24] 3078 	mov	b,@r0
      000A9B 12r00r00         [24] 3079 	lcall	_stbroadcast_send_stubborn
      000A9E 15 81            [12] 3080 	dec	sp
      000AA0 15 81            [12] 3081 	dec	sp
                                   3082 ;	../../core/net/rime/rudolph0.c:215: }
      000AA2 E5 81            [12] 3083 	mov	a,sp
      000AA4 24 FA            [12] 3084 	add	a,#0xfa
      000AA6 F5 81            [12] 3085 	mov	sp,a
      000AA8 22               [24] 3086 	ret
                                   3087 ;------------------------------------------------------------
                                   3088 ;Allocation info for local variables in function 'rudolph0_force_restart'
                                   3089 ;------------------------------------------------------------
                                   3090 ;c                         Allocated to registers r5 r6 r7 
                                   3091 ;------------------------------------------------------------
                                   3092 ;	../../core/net/rime/rudolph0.c:218: rudolph0_force_restart(struct rudolph0_conn *c)
                                   3093 ;	-----------------------------------------
                                   3094 ;	 function rudolph0_force_restart
                                   3095 ;	-----------------------------------------
      000AA9                       3096 _rudolph0_force_restart:
      000AA9 AD 82            [24] 3097 	mov	r5,dpl
      000AAB AE 83            [24] 3098 	mov	r6,dph
      000AAD AF F0            [24] 3099 	mov	r7,b
                                   3100 ;	../../core/net/rime/rudolph0.c:220: c->current.h.chunk = 0;
      000AAF 74 58            [12] 3101 	mov	a,#0x58
      000AB1 2D               [12] 3102 	add	a,r5
      000AB2 FA               [12] 3103 	mov	r2,a
      000AB3 E4               [12] 3104 	clr	a
      000AB4 3E               [12] 3105 	addc	a,r6
      000AB5 FB               [12] 3106 	mov	r3,a
      000AB6 8F 04            [24] 3107 	mov	ar4,r7
      000AB8 74 02            [12] 3108 	mov	a,#0x02
      000ABA 2A               [12] 3109 	add	a,r2
      000ABB FA               [12] 3110 	mov	r2,a
      000ABC E4               [12] 3111 	clr	a
      000ABD 3B               [12] 3112 	addc	a,r3
      000ABE FB               [12] 3113 	mov	r3,a
      000ABF 8A 82            [24] 3114 	mov	dpl,r2
      000AC1 8B 83            [24] 3115 	mov	dph,r3
      000AC3 8C F0            [24] 3116 	mov	b,r4
      000AC5 E4               [12] 3117 	clr	a
      000AC6 12r00r00         [24] 3118 	lcall	__gptrput
      000AC9 A3               [24] 3119 	inc	dptr
      000ACA 12r00r00         [24] 3120 	lcall	__gptrput
                                   3121 ;	../../core/net/rime/rudolph0.c:221: send_nack(c);
      000ACD 8D 82            [24] 3122 	mov	dpl,r5
      000ACF 8E 83            [24] 3123 	mov	dph,r6
      000AD1 8F F0            [24] 3124 	mov	b,r7
                                   3125 ;	../../core/net/rime/rudolph0.c:222: }
      000AD3 02r01r10         [24] 3126 	ljmp	_send_nack
                                   3127 ;------------------------------------------------------------
                                   3128 ;Allocation info for local variables in function 'rudolph0_stop'
                                   3129 ;------------------------------------------------------------
                                   3130 ;c                         Allocated to registers r5 r6 r7 
                                   3131 ;------------------------------------------------------------
                                   3132 ;	../../core/net/rime/rudolph0.c:225: rudolph0_stop(struct rudolph0_conn *c)
                                   3133 ;	-----------------------------------------
                                   3134 ;	 function rudolph0_stop
                                   3135 ;	-----------------------------------------
      000AD6                       3136 _rudolph0_stop:
                                   3137 ;	../../core/net/rime/rudolph0.c:227: stbroadcast_cancel(&c->c);
                                   3138 ;	../../core/net/rime/rudolph0.c:228: }
      000AD6 02r00r00         [24] 3139 	ljmp	_stbroadcast_cancel
                                   3140 ;------------------------------------------------------------
                                   3141 ;Allocation info for local variables in function 'rudolph0_version'
                                   3142 ;------------------------------------------------------------
                                   3143 ;c                         Allocated to registers r5 r6 r7 
                                   3144 ;------------------------------------------------------------
                                   3145 ;	../../core/net/rime/rudolph0.c:231: rudolph0_version(struct rudolph0_conn *c)
                                   3146 ;	-----------------------------------------
                                   3147 ;	 function rudolph0_version
                                   3148 ;	-----------------------------------------
      000AD9                       3149 _rudolph0_version:
      000AD9 AD 82            [24] 3150 	mov	r5,dpl
      000ADB AE 83            [24] 3151 	mov	r6,dph
      000ADD AF F0            [24] 3152 	mov	r7,b
                                   3153 ;	../../core/net/rime/rudolph0.c:233: return c->current.h.version;
      000ADF 74 58            [12] 3154 	mov	a,#0x58
      000AE1 2D               [12] 3155 	add	a,r5
      000AE2 FD               [12] 3156 	mov	r5,a
      000AE3 E4               [12] 3157 	clr	a
      000AE4 3E               [12] 3158 	addc	a,r6
      000AE5 FE               [12] 3159 	mov	r6,a
      000AE6 0D               [12] 3160 	inc	r5
      000AE7 BD 00 01         [24] 3161 	cjne	r5,#0x00,00103$
      000AEA 0E               [12] 3162 	inc	r6
      000AEB                       3163 00103$:
      000AEB 8D 82            [24] 3164 	mov	dpl,r5
      000AED 8E 83            [24] 3165 	mov	dph,r6
      000AEF 8F F0            [24] 3166 	mov	b,r7
      000AF1 12r00r00         [24] 3167 	lcall	__gptrget
      000AF4 FD               [12] 3168 	mov	r5,a
      000AF5 7F 00            [12] 3169 	mov	r7,#0x00
      000AF7 8D 82            [24] 3170 	mov	dpl,r5
      000AF9 8F 83            [24] 3171 	mov	dph,r7
                                   3172 ;	../../core/net/rime/rudolph0.c:234: }
      000AFB 22               [24] 3173 	ret
                                   3174 ;------------------------------------------------------------
                                   3175 ;Allocation info for local variables in function 'rudolph0_set_version'
                                   3176 ;------------------------------------------------------------
                                   3177 ;version                   Allocated to stack - sp -3
                                   3178 ;c                         Allocated to registers r5 r6 r7 
                                   3179 ;------------------------------------------------------------
                                   3180 ;	../../core/net/rime/rudolph0.c:237: rudolph0_set_version(struct rudolph0_conn *c, int version)
                                   3181 ;	-----------------------------------------
                                   3182 ;	 function rudolph0_set_version
                                   3183 ;	-----------------------------------------
      000AFC                       3184 _rudolph0_set_version:
      000AFC AD 82            [24] 3185 	mov	r5,dpl
      000AFE AE 83            [24] 3186 	mov	r6,dph
      000B00 AF F0            [24] 3187 	mov	r7,b
                                   3188 ;	../../core/net/rime/rudolph0.c:239: c->current.h.version = version;
      000B02 74 58            [12] 3189 	mov	a,#0x58
      000B04 2D               [12] 3190 	add	a,r5
      000B05 FD               [12] 3191 	mov	r5,a
      000B06 E4               [12] 3192 	clr	a
      000B07 3E               [12] 3193 	addc	a,r6
      000B08 FE               [12] 3194 	mov	r6,a
      000B09 0D               [12] 3195 	inc	r5
      000B0A BD 00 01         [24] 3196 	cjne	r5,#0x00,00103$
      000B0D 0E               [12] 3197 	inc	r6
      000B0E                       3198 00103$:
      000B0E E5 81            [12] 3199 	mov	a,sp
      000B10 24 FD            [12] 3200 	add	a,#0xfd
      000B12 F8               [12] 3201 	mov	r0,a
      000B13 86 04            [24] 3202 	mov	ar4,@r0
      000B15 8D 82            [24] 3203 	mov	dpl,r5
      000B17 8E 83            [24] 3204 	mov	dph,r6
      000B19 8F F0            [24] 3205 	mov	b,r7
      000B1B EC               [12] 3206 	mov	a,r4
                                   3207 ;	../../core/net/rime/rudolph0.c:240: }
      000B1C 02r00r00         [24] 3208 	ljmp	__gptrput
                                   3209 	.area CSEG    (CODE)
                                   3210 	.area CONST   (CODE)
      000000                       3211 _polite:
      000000r3As07                 3212 	.byte _recv_nack, (_recv_nack >> 8)
      000002 00 00                 3213 	.byte #0x00,#0x00
      000004 00 00                 3214 	.byte #0x00,#0x00
      000006                       3215 _stbroadcast:
      000006rB3s02                 3216 	.byte _recv, (_recv >> 8)
      000008r1Bs02                 3217 	.byte _sent, (_sent >> 8)
                                   3218 	.area XINIT   (CODE)
                                   3219 	.area CABS    (ABS,CODE)
