                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mmem
                                      6 	.optsdcc -mmcs51 --model-huge
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memmove
                                     12 	.globl _list_remove
                                     13 	.globl _list_add
                                     14 	.globl _list_init
                                     15 	.globl _avail_memory
                                     16 	.globl _mmem_alloc
                                     17 	.globl _mmem_free
                                     18 	.globl _mmem_init
                                     19 ;--------------------------------------------------------
                                     20 ; special function registers
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; special function bits
                                     26 ;--------------------------------------------------------
                                     27 	.area RSEG    (ABS,DATA)
      000000                         28 	.org 0x0000
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable register banks
                                     31 ;--------------------------------------------------------
                                     32 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         33 	.ds 8
                                     34 ;--------------------------------------------------------
                                     35 ; internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DSEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; overlayable items in internal ram 
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; indirectly addressable internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area ISEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; absolute internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area IABS    (ABS,DATA)
                                     49 	.area IABS    (ABS,DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; bit data
                                     52 ;--------------------------------------------------------
                                     53 	.area BSEG    (BIT)
                                     54 ;--------------------------------------------------------
                                     55 ; paged external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area PSEG    (PAG,XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XSEG    (XDATA)
      000000                         62 _avail_memory::
      000000                         63 	.ds 2
      000002                         64 _memory:
      000002                         65 	.ds 4096
                                     66 ;--------------------------------------------------------
                                     67 ; absolute external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XABS    (ABS,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; external initialized ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XISEG   (XDATA)
      000000                         74 _mmemlist_list:
      000000                         75 	.ds 3
      000003                         76 _mmemlist:
      000003                         77 	.ds 3
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area BANK1   (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'mmem_alloc'
                                    106 ;------------------------------------------------------------
                                    107 ;size                      Allocated to stack - sp -7
                                    108 ;m                         Allocated to stack - sp -2
                                    109 ;------------------------------------------------------------
                                    110 ;	../../../core/lib/mmem.c:83: mmem_alloc(struct mmem *m, unsigned int size)
                                    111 ;	-----------------------------------------
                                    112 ;	 function mmem_alloc
                                    113 ;	-----------------------------------------
      000000                        114 _mmem_alloc:
                           000007   115 	ar7 = 0x07
                           000006   116 	ar6 = 0x06
                           000005   117 	ar5 = 0x05
                           000004   118 	ar4 = 0x04
                           000003   119 	ar3 = 0x03
                           000002   120 	ar2 = 0x02
                           000001   121 	ar1 = 0x01
                           000000   122 	ar0 = 0x00
      000000 C0 82            [24]  123 	push	dpl
      000002 C0 83            [24]  124 	push	dph
      000004 C0 F0            [24]  125 	push	b
                                    126 ;	../../../core/lib/mmem.c:86: if(avail_memory < size) {
      000006 90r00r00         [24]  127 	mov	dptr,#_avail_memory
      000009 E0               [24]  128 	movx	a,@dptr
      00000A FB               [12]  129 	mov	r3,a
      00000B A3               [24]  130 	inc	dptr
      00000C E0               [24]  131 	movx	a,@dptr
      00000D FC               [12]  132 	mov	r4,a
      00000E E5 81            [12]  133 	mov	a,sp
      000010 24 F9            [12]  134 	add	a,#0xf9
      000012 F8               [12]  135 	mov	r0,a
      000013 C3               [12]  136 	clr	c
      000014 EB               [12]  137 	mov	a,r3
      000015 96               [12]  138 	subb	a,@r0
      000016 EC               [12]  139 	mov	a,r4
      000017 08               [12]  140 	inc	r0
      000018 96               [12]  141 	subb	a,@r0
      000019 50 06            [24]  142 	jnc	00102$
                                    143 ;	../../../core/lib/mmem.c:87: return 0;
      00001B 90 00 00         [24]  144 	mov	dptr,#0x0000
      00001E 02r00rD0         [24]  145 	ljmp	00103$
      000021                        146 00102$:
                                    147 ;	../../../core/lib/mmem.c:92: list_add(mmemlist, m);
      000021 A8 81            [24]  148 	mov	r0,sp
      000023 18               [12]  149 	dec	r0
      000024 18               [12]  150 	dec	r0
      000025 86 02            [24]  151 	mov	ar2,@r0
      000027 08               [12]  152 	inc	r0
      000028 86 03            [24]  153 	mov	ar3,@r0
      00002A 08               [12]  154 	inc	r0
      00002B 86 04            [24]  155 	mov	ar4,@r0
      00002D 90r00r03         [24]  156 	mov	dptr,#_mmemlist
      000030 E0               [24]  157 	movx	a,@dptr
      000031 FD               [12]  158 	mov	r5,a
      000032 A3               [24]  159 	inc	dptr
      000033 E0               [24]  160 	movx	a,@dptr
      000034 FE               [12]  161 	mov	r6,a
      000035 A3               [24]  162 	inc	dptr
      000036 E0               [24]  163 	movx	a,@dptr
      000037 FF               [12]  164 	mov	r7,a
      000038 C0 02            [24]  165 	push	ar2
      00003A C0 03            [24]  166 	push	ar3
      00003C C0 04            [24]  167 	push	ar4
      00003E 8D 82            [24]  168 	mov	dpl,r5
      000040 8E 83            [24]  169 	mov	dph,r6
      000042 8F F0            [24]  170 	mov	b,r7
      000044 78r00            [12]  171 	mov	r0,#_list_add
      000046 79s00            [12]  172 	mov	r1,#(_list_add >> 8)
      000048 7As00            [12]  173 	mov	r2,#(_list_add >> 16)
      00004A 12r00r00         [24]  174 	lcall	__sdcc_banked_call
      00004D 15 81            [12]  175 	dec	sp
      00004F 15 81            [12]  176 	dec	sp
      000051 15 81            [12]  177 	dec	sp
                                    178 ;	../../../core/lib/mmem.c:96: m->ptr = &memory[MMEM_SIZE - avail_memory];
      000053 A8 81            [24]  179 	mov	r0,sp
      000055 18               [12]  180 	dec	r0
      000056 18               [12]  181 	dec	r0
      000057 74 05            [12]  182 	mov	a,#0x05
      000059 26               [12]  183 	add	a,@r0
      00005A FD               [12]  184 	mov	r5,a
      00005B E4               [12]  185 	clr	a
      00005C 08               [12]  186 	inc	r0
      00005D 36               [12]  187 	addc	a,@r0
      00005E FE               [12]  188 	mov	r6,a
      00005F 08               [12]  189 	inc	r0
      000060 86 07            [24]  190 	mov	ar7,@r0
      000062 90r00r00         [24]  191 	mov	dptr,#_avail_memory
      000065 E0               [24]  192 	movx	a,@dptr
      000066 FB               [12]  193 	mov	r3,a
      000067 A3               [24]  194 	inc	dptr
      000068 E0               [24]  195 	movx	a,@dptr
      000069 FC               [12]  196 	mov	r4,a
      00006A E4               [12]  197 	clr	a
      00006B C3               [12]  198 	clr	c
      00006C 9B               [12]  199 	subb	a,r3
      00006D FB               [12]  200 	mov	r3,a
      00006E 74 10            [12]  201 	mov	a,#0x10
      000070 9C               [12]  202 	subb	a,r4
      000071 FC               [12]  203 	mov	r4,a
      000072 EB               [12]  204 	mov	a,r3
      000073 24r02            [12]  205 	add	a,#_memory
      000075 FB               [12]  206 	mov	r3,a
      000076 EC               [12]  207 	mov	a,r4
      000077 34s00            [12]  208 	addc	a,#(_memory >> 8)
      000079 FC               [12]  209 	mov	r4,a
      00007A 7A 00            [12]  210 	mov	r2,#0x00
      00007C 8D 82            [24]  211 	mov	dpl,r5
      00007E 8E 83            [24]  212 	mov	dph,r6
      000080 8F F0            [24]  213 	mov	b,r7
      000082 EB               [12]  214 	mov	a,r3
      000083 12r00r00         [24]  215 	lcall	__gptrput
      000086 A3               [24]  216 	inc	dptr
      000087 EC               [12]  217 	mov	a,r4
      000088 12r00r00         [24]  218 	lcall	__gptrput
      00008B A3               [24]  219 	inc	dptr
      00008C EA               [12]  220 	mov	a,r2
      00008D 12r00r00         [24]  221 	lcall	__gptrput
                                    222 ;	../../../core/lib/mmem.c:99: m->size = size;
      000090 A8 81            [24]  223 	mov	r0,sp
      000092 18               [12]  224 	dec	r0
      000093 18               [12]  225 	dec	r0
      000094 74 03            [12]  226 	mov	a,#0x03
      000096 26               [12]  227 	add	a,@r0
      000097 FD               [12]  228 	mov	r5,a
      000098 E4               [12]  229 	clr	a
      000099 08               [12]  230 	inc	r0
      00009A 36               [12]  231 	addc	a,@r0
      00009B FE               [12]  232 	mov	r6,a
      00009C 08               [12]  233 	inc	r0
      00009D 86 07            [24]  234 	mov	ar7,@r0
      00009F 8D 82            [24]  235 	mov	dpl,r5
      0000A1 8E 83            [24]  236 	mov	dph,r6
      0000A3 8F F0            [24]  237 	mov	b,r7
      0000A5 E5 81            [12]  238 	mov	a,sp
      0000A7 24 F9            [12]  239 	add	a,#0xf9
      0000A9 F8               [12]  240 	mov	r0,a
      0000AA E6               [12]  241 	mov	a,@r0
      0000AB 12r00r00         [24]  242 	lcall	__gptrput
      0000AE A3               [24]  243 	inc	dptr
      0000AF 08               [12]  244 	inc	r0
      0000B0 E6               [12]  245 	mov	a,@r0
      0000B1 12r00r00         [24]  246 	lcall	__gptrput
                                    247 ;	../../../core/lib/mmem.c:102: avail_memory -= size;
      0000B4 90r00r00         [24]  248 	mov	dptr,#_avail_memory
      0000B7 E0               [24]  249 	movx	a,@dptr
      0000B8 FE               [12]  250 	mov	r6,a
      0000B9 A3               [24]  251 	inc	dptr
      0000BA E0               [24]  252 	movx	a,@dptr
      0000BB FF               [12]  253 	mov	r7,a
      0000BC E5 81            [12]  254 	mov	a,sp
      0000BE 24 F9            [12]  255 	add	a,#0xf9
      0000C0 F8               [12]  256 	mov	r0,a
      0000C1 90r00r00         [24]  257 	mov	dptr,#_avail_memory
      0000C4 EE               [12]  258 	mov	a,r6
      0000C5 C3               [12]  259 	clr	c
      0000C6 96               [12]  260 	subb	a,@r0
      0000C7 F0               [24]  261 	movx	@dptr,a
      0000C8 EF               [12]  262 	mov	a,r7
      0000C9 08               [12]  263 	inc	r0
      0000CA 96               [12]  264 	subb	a,@r0
      0000CB A3               [24]  265 	inc	dptr
      0000CC F0               [24]  266 	movx	@dptr,a
                                    267 ;	../../../core/lib/mmem.c:106: return 1;
      0000CD 90 00 01         [24]  268 	mov	dptr,#0x0001
      0000D0                        269 00103$:
                                    270 ;	../../../core/lib/mmem.c:107: }
      0000D0 15 81            [12]  271 	dec	sp
      0000D2 15 81            [12]  272 	dec	sp
      0000D4 15 81            [12]  273 	dec	sp
      0000D6 02r00r00         [24]  274 	ljmp	__sdcc_banked_ret
                                    275 ;------------------------------------------------------------
                                    276 ;Allocation info for local variables in function 'mmem_free'
                                    277 ;------------------------------------------------------------
                                    278 ;m                         Allocated to stack - sp -13
                                    279 ;n                         Allocated to stack - sp -2
                                    280 ;sloc0                     Allocated to stack - sp -10
                                    281 ;sloc1                     Allocated to stack - sp -8
                                    282 ;sloc2                     Allocated to stack - sp -5
                                    283 ;------------------------------------------------------------
                                    284 ;	../../../core/lib/mmem.c:119: mmem_free(struct mmem *m)
                                    285 ;	-----------------------------------------
                                    286 ;	 function mmem_free
                                    287 ;	-----------------------------------------
      0000D9                        288 _mmem_free:
      0000D9 C0 82            [24]  289 	push	dpl
      0000DB C0 83            [24]  290 	push	dph
      0000DD C0 F0            [24]  291 	push	b
      0000DF E5 81            [12]  292 	mov	a,sp
      0000E1 24 0B            [12]  293 	add	a,#0x0b
                                    294 ;	../../../core/lib/mmem.c:123: if(m->next != NULL) {
      0000E3 F5 81            [12]  295 	mov	sp,a
      0000E5 24 F3            [12]  296 	add	a,#0xf3
      0000E7 F8               [12]  297 	mov	r0,a
      0000E8 86 82            [24]  298 	mov	dpl,@r0
      0000EA 08               [12]  299 	inc	r0
      0000EB 86 83            [24]  300 	mov	dph,@r0
      0000ED 08               [12]  301 	inc	r0
      0000EE 86 F0            [24]  302 	mov	b,@r0
      0000F0 12r00r00         [24]  303 	lcall	__gptrget
      0000F3 FA               [12]  304 	mov	r2,a
      0000F4 A3               [24]  305 	inc	dptr
      0000F5 12r00r00         [24]  306 	lcall	__gptrget
      0000F8 FB               [12]  307 	mov	r3,a
      0000F9 A3               [24]  308 	inc	dptr
      0000FA 12r00r00         [24]  309 	lcall	__gptrget
      0000FD FC               [12]  310 	mov	r4,a
      0000FE EA               [12]  311 	mov	a,r2
      0000FF 4B               [12]  312 	orl	a,r3
      000100 70 03            [24]  313 	jnz	00121$
      000102 02r02r69         [24]  314 	ljmp	00103$
      000105                        315 00121$:
                                    316 ;	../../../core/lib/mmem.c:127: &memory[MMEM_SIZE - avail_memory] - (char *)m->next->ptr);
      000105 90r00r00         [24]  317 	mov	dptr,#_avail_memory
      000108 E0               [24]  318 	movx	a,@dptr
      000109 FE               [12]  319 	mov	r6,a
      00010A A3               [24]  320 	inc	dptr
      00010B E0               [24]  321 	movx	a,@dptr
      00010C FF               [12]  322 	mov	r7,a
      00010D E4               [12]  323 	clr	a
      00010E C3               [12]  324 	clr	c
      00010F 9E               [12]  325 	subb	a,r6
      000110 FE               [12]  326 	mov	r6,a
      000111 74 10            [12]  327 	mov	a,#0x10
      000113 9F               [12]  328 	subb	a,r7
      000114 FF               [12]  329 	mov	r7,a
      000115 E5 81            [12]  330 	mov	a,sp
      000117 24 F6            [12]  331 	add	a,#0xf6
      000119 F8               [12]  332 	mov	r0,a
      00011A EE               [12]  333 	mov	a,r6
      00011B 24r02            [12]  334 	add	a,#_memory
      00011D F6               [12]  335 	mov	@r0,a
      00011E EF               [12]  336 	mov	a,r7
      00011F 34s00            [12]  337 	addc	a,#(_memory >> 8)
      000121 08               [12]  338 	inc	r0
      000122 F6               [12]  339 	mov	@r0,a
      000123 74 05            [12]  340 	mov	a,#0x05
      000125 2A               [12]  341 	add	a,r2
      000126 FA               [12]  342 	mov	r2,a
      000127 E4               [12]  343 	clr	a
      000128 3B               [12]  344 	addc	a,r3
      000129 FB               [12]  345 	mov	r3,a
      00012A 8A 82            [24]  346 	mov	dpl,r2
      00012C 8B 83            [24]  347 	mov	dph,r3
      00012E 8C F0            [24]  348 	mov	b,r4
      000130 12r00r00         [24]  349 	lcall	__gptrget
      000133 FA               [12]  350 	mov	r2,a
      000134 A3               [24]  351 	inc	dptr
      000135 12r00r00         [24]  352 	lcall	__gptrget
      000138 FB               [12]  353 	mov	r3,a
      000139 A3               [24]  354 	inc	dptr
      00013A 12r00r00         [24]  355 	lcall	__gptrget
      00013D FC               [12]  356 	mov	r4,a
      00013E 8A 05            [24]  357 	mov	ar5,r2
      000140 8B 06            [24]  358 	mov	ar6,r3
      000142 8C 07            [24]  359 	mov	ar7,r4
      000144 E5 81            [12]  360 	mov	a,sp
      000146 24 F6            [12]  361 	add	a,#0xf6
      000148 F8               [12]  362 	mov	r0,a
      000149 E6               [12]  363 	mov	a,@r0
      00014A C3               [12]  364 	clr	c
      00014B 9D               [12]  365 	subb	a,r5
      00014C F6               [12]  366 	mov	@r0,a
      00014D 08               [12]  367 	inc	r0
      00014E E6               [12]  368 	mov	a,@r0
      00014F 9E               [12]  369 	subb	a,r6
      000150 F6               [12]  370 	mov	@r0,a
                                    371 ;	../../../core/lib/mmem.c:126: memmove(m->ptr, m->next->ptr,
      000151 E5 81            [12]  372 	mov	a,sp
      000153 24 F3            [12]  373 	add	a,#0xf3
      000155 F8               [12]  374 	mov	r0,a
      000156 74 05            [12]  375 	mov	a,#0x05
      000158 26               [12]  376 	add	a,@r0
      000159 FD               [12]  377 	mov	r5,a
      00015A E4               [12]  378 	clr	a
      00015B 08               [12]  379 	inc	r0
      00015C 36               [12]  380 	addc	a,@r0
      00015D FE               [12]  381 	mov	r6,a
      00015E 08               [12]  382 	inc	r0
      00015F 86 07            [24]  383 	mov	ar7,@r0
      000161 8D 82            [24]  384 	mov	dpl,r5
      000163 8E 83            [24]  385 	mov	dph,r6
      000165 8F F0            [24]  386 	mov	b,r7
      000167 12r00r00         [24]  387 	lcall	__gptrget
      00016A FD               [12]  388 	mov	r5,a
      00016B A3               [24]  389 	inc	dptr
      00016C 12r00r00         [24]  390 	lcall	__gptrget
      00016F FE               [12]  391 	mov	r6,a
      000170 A3               [24]  392 	inc	dptr
      000171 12r00r00         [24]  393 	lcall	__gptrget
      000174 FF               [12]  394 	mov	r7,a
      000175 E5 81            [12]  395 	mov	a,sp
      000177 24 F6            [12]  396 	add	a,#0xf6
      000179 F8               [12]  397 	mov	r0,a
      00017A E6               [12]  398 	mov	a,@r0
      00017B C0 E0            [24]  399 	push	acc
      00017D 08               [12]  400 	inc	r0
      00017E E6               [12]  401 	mov	a,@r0
      00017F C0 E0            [24]  402 	push	acc
      000181 C0 02            [24]  403 	push	ar2
      000183 C0 03            [24]  404 	push	ar3
      000185 C0 04            [24]  405 	push	ar4
      000187 8D 82            [24]  406 	mov	dpl,r5
      000189 8E 83            [24]  407 	mov	dph,r6
      00018B 8F F0            [24]  408 	mov	b,r7
      00018D 78r00            [12]  409 	mov	r0,#_memmove
      00018F 79s00            [12]  410 	mov	r1,#(_memmove >> 8)
      000191 7As00            [12]  411 	mov	r2,#(_memmove >> 16)
      000193 12r00r00         [24]  412 	lcall	__sdcc_banked_call
      000196 E5 81            [12]  413 	mov	a,sp
      000198 24 FB            [12]  414 	add	a,#0xfb
                                    415 ;	../../../core/lib/mmem.c:131: for(n = m->next; n != NULL; n = n->next) {
      00019A F5 81            [12]  416 	mov	sp,a
      00019C 24 F3            [12]  417 	add	a,#0xf3
      00019E F8               [12]  418 	mov	r0,a
      00019F 86 82            [24]  419 	mov	dpl,@r0
      0001A1 08               [12]  420 	inc	r0
      0001A2 86 83            [24]  421 	mov	dph,@r0
      0001A4 08               [12]  422 	inc	r0
      0001A5 86 F0            [24]  423 	mov	b,@r0
      0001A7 A9 81            [24]  424 	mov	r1,sp
      0001A9 19               [12]  425 	dec	r1
      0001AA 19               [12]  426 	dec	r1
      0001AB 12r00r00         [24]  427 	lcall	__gptrget
      0001AE F7               [12]  428 	mov	@r1,a
      0001AF A3               [24]  429 	inc	dptr
      0001B0 12r00r00         [24]  430 	lcall	__gptrget
      0001B3 09               [12]  431 	inc	r1
      0001B4 F7               [12]  432 	mov	@r1,a
      0001B5 A3               [24]  433 	inc	dptr
      0001B6 12r00r00         [24]  434 	lcall	__gptrget
      0001B9 09               [12]  435 	inc	r1
      0001BA F7               [12]  436 	mov	@r1,a
      0001BB E5 81            [12]  437 	mov	a,sp
      0001BD 24 F3            [12]  438 	add	a,#0xf3
      0001BF F8               [12]  439 	mov	r0,a
      0001C0 E5 81            [12]  440 	mov	a,sp
      0001C2 24 F8            [12]  441 	add	a,#0xf8
      0001C4 F9               [12]  442 	mov	r1,a
      0001C5 74 03            [12]  443 	mov	a,#0x03
      0001C7 26               [12]  444 	add	a,@r0
      0001C8 F7               [12]  445 	mov	@r1,a
      0001C9 E4               [12]  446 	clr	a
      0001CA 08               [12]  447 	inc	r0
      0001CB 36               [12]  448 	addc	a,@r0
      0001CC 09               [12]  449 	inc	r1
      0001CD F7               [12]  450 	mov	@r1,a
      0001CE 08               [12]  451 	inc	r0
      0001CF 09               [12]  452 	inc	r1
      0001D0 E6               [12]  453 	mov	a,@r0
      0001D1 F7               [12]  454 	mov	@r1,a
      0001D2                        455 00105$:
      0001D2 A8 81            [24]  456 	mov	r0,sp
      0001D4 18               [12]  457 	dec	r0
      0001D5 18               [12]  458 	dec	r0
      0001D6 E6               [12]  459 	mov	a,@r0
      0001D7 08               [12]  460 	inc	r0
      0001D8 46               [12]  461 	orl	a,@r0
      0001D9 70 03            [24]  462 	jnz	00122$
      0001DB 02r02r69         [24]  463 	ljmp	00103$
      0001DE                        464 00122$:
                                    465 ;	../../../core/lib/mmem.c:132: n->ptr = (void *)((char *)n->ptr - m->size);
      0001DE A8 81            [24]  466 	mov	r0,sp
      0001E0 18               [12]  467 	dec	r0
      0001E1 18               [12]  468 	dec	r0
      0001E2 74 05            [12]  469 	mov	a,#0x05
      0001E4 26               [12]  470 	add	a,@r0
      0001E5 FD               [12]  471 	mov	r5,a
      0001E6 E4               [12]  472 	clr	a
      0001E7 08               [12]  473 	inc	r0
      0001E8 36               [12]  474 	addc	a,@r0
      0001E9 FE               [12]  475 	mov	r6,a
      0001EA 08               [12]  476 	inc	r0
      0001EB 86 07            [24]  477 	mov	ar7,@r0
      0001ED 8D 82            [24]  478 	mov	dpl,r5
      0001EF 8E 83            [24]  479 	mov	dph,r6
      0001F1 8F F0            [24]  480 	mov	b,r7
      0001F3 12r00r00         [24]  481 	lcall	__gptrget
      0001F6 FA               [12]  482 	mov	r2,a
      0001F7 A3               [24]  483 	inc	dptr
      0001F8 12r00r00         [24]  484 	lcall	__gptrget
      0001FB FB               [12]  485 	mov	r3,a
      0001FC A3               [24]  486 	inc	dptr
      0001FD 12r00r00         [24]  487 	lcall	__gptrget
      000200 FC               [12]  488 	mov	r4,a
      000201 E5 81            [12]  489 	mov	a,sp
      000203 24 FB            [12]  490 	add	a,#0xfb
      000205 F8               [12]  491 	mov	r0,a
      000206 A6 02            [24]  492 	mov	@r0,ar2
      000208 08               [12]  493 	inc	r0
      000209 A6 03            [24]  494 	mov	@r0,ar3
      00020B 08               [12]  495 	inc	r0
      00020C A6 04            [24]  496 	mov	@r0,ar4
      00020E E5 81            [12]  497 	mov	a,sp
      000210 24 F8            [12]  498 	add	a,#0xf8
      000212 F8               [12]  499 	mov	r0,a
      000213 86 82            [24]  500 	mov	dpl,@r0
      000215 08               [12]  501 	inc	r0
      000216 86 83            [24]  502 	mov	dph,@r0
      000218 08               [12]  503 	inc	r0
      000219 86 F0            [24]  504 	mov	b,@r0
      00021B 12r00r00         [24]  505 	lcall	__gptrget
      00021E FB               [12]  506 	mov	r3,a
      00021F A3               [24]  507 	inc	dptr
      000220 12r00r00         [24]  508 	lcall	__gptrget
      000223 FC               [12]  509 	mov	r4,a
      000224 E5 81            [12]  510 	mov	a,sp
      000226 24 FB            [12]  511 	add	a,#0xfb
      000228 F8               [12]  512 	mov	r0,a
      000229 E6               [12]  513 	mov	a,@r0
      00022A C3               [12]  514 	clr	c
      00022B 9B               [12]  515 	subb	a,r3
      00022C FB               [12]  516 	mov	r3,a
      00022D 08               [12]  517 	inc	r0
      00022E E6               [12]  518 	mov	a,@r0
      00022F 9C               [12]  519 	subb	a,r4
      000230 FC               [12]  520 	mov	r4,a
      000231 08               [12]  521 	inc	r0
      000232 86 02            [24]  522 	mov	ar2,@r0
      000234 8D 82            [24]  523 	mov	dpl,r5
      000236 8E 83            [24]  524 	mov	dph,r6
      000238 8F F0            [24]  525 	mov	b,r7
      00023A EB               [12]  526 	mov	a,r3
      00023B 12r00r00         [24]  527 	lcall	__gptrput
      00023E A3               [24]  528 	inc	dptr
      00023F EC               [12]  529 	mov	a,r4
      000240 12r00r00         [24]  530 	lcall	__gptrput
      000243 A3               [24]  531 	inc	dptr
      000244 EA               [12]  532 	mov	a,r2
      000245 12r00r00         [24]  533 	lcall	__gptrput
                                    534 ;	../../../core/lib/mmem.c:131: for(n = m->next; n != NULL; n = n->next) {
      000248 A8 81            [24]  535 	mov	r0,sp
      00024A 18               [12]  536 	dec	r0
      00024B 18               [12]  537 	dec	r0
      00024C 86 82            [24]  538 	mov	dpl,@r0
      00024E 08               [12]  539 	inc	r0
      00024F 86 83            [24]  540 	mov	dph,@r0
      000251 08               [12]  541 	inc	r0
      000252 86 F0            [24]  542 	mov	b,@r0
      000254 12r00r00         [24]  543 	lcall	__gptrget
      000257 18               [12]  544 	dec	r0
      000258 18               [12]  545 	dec	r0
      000259 F6               [12]  546 	mov	@r0,a
      00025A A3               [24]  547 	inc	dptr
      00025B 12r00r00         [24]  548 	lcall	__gptrget
      00025E 08               [12]  549 	inc	r0
      00025F F6               [12]  550 	mov	@r0,a
      000260 A3               [24]  551 	inc	dptr
      000261 12r00r00         [24]  552 	lcall	__gptrget
      000264 08               [12]  553 	inc	r0
      000265 F6               [12]  554 	mov	@r0,a
      000266 02r01rD2         [24]  555 	ljmp	00105$
      000269                        556 00103$:
                                    557 ;	../../../core/lib/mmem.c:136: avail_memory += m->size;
      000269 E5 81            [12]  558 	mov	a,sp
      00026B 24 F3            [12]  559 	add	a,#0xf3
      00026D F8               [12]  560 	mov	r0,a
      00026E 74 03            [12]  561 	mov	a,#0x03
      000270 26               [12]  562 	add	a,@r0
      000271 FD               [12]  563 	mov	r5,a
      000272 E4               [12]  564 	clr	a
      000273 08               [12]  565 	inc	r0
      000274 36               [12]  566 	addc	a,@r0
      000275 FE               [12]  567 	mov	r6,a
      000276 08               [12]  568 	inc	r0
      000277 86 07            [24]  569 	mov	ar7,@r0
      000279 8D 82            [24]  570 	mov	dpl,r5
      00027B 8E 83            [24]  571 	mov	dph,r6
      00027D 8F F0            [24]  572 	mov	b,r7
      00027F 12r00r00         [24]  573 	lcall	__gptrget
      000282 FD               [12]  574 	mov	r5,a
      000283 A3               [24]  575 	inc	dptr
      000284 12r00r00         [24]  576 	lcall	__gptrget
      000287 FE               [12]  577 	mov	r6,a
      000288 90r00r00         [24]  578 	mov	dptr,#_avail_memory
      00028B E0               [24]  579 	movx	a,@dptr
      00028C FC               [12]  580 	mov	r4,a
      00028D A3               [24]  581 	inc	dptr
      00028E E0               [24]  582 	movx	a,@dptr
      00028F FF               [12]  583 	mov	r7,a
      000290 90r00r00         [24]  584 	mov	dptr,#_avail_memory
      000293 ED               [12]  585 	mov	a,r5
      000294 2C               [12]  586 	add	a,r4
      000295 F0               [24]  587 	movx	@dptr,a
      000296 EE               [12]  588 	mov	a,r6
      000297 3F               [12]  589 	addc	a,r7
      000298 A3               [24]  590 	inc	dptr
      000299 F0               [24]  591 	movx	@dptr,a
                                    592 ;	../../../core/lib/mmem.c:139: list_remove(mmemlist, m);
      00029A E5 81            [12]  593 	mov	a,sp
      00029C 24 F3            [12]  594 	add	a,#0xf3
      00029E F8               [12]  595 	mov	r0,a
      00029F 86 05            [24]  596 	mov	ar5,@r0
      0002A1 08               [12]  597 	inc	r0
      0002A2 86 06            [24]  598 	mov	ar6,@r0
      0002A4 08               [12]  599 	inc	r0
      0002A5 86 07            [24]  600 	mov	ar7,@r0
      0002A7 90r00r03         [24]  601 	mov	dptr,#_mmemlist
      0002AA E0               [24]  602 	movx	a,@dptr
      0002AB FA               [12]  603 	mov	r2,a
      0002AC A3               [24]  604 	inc	dptr
      0002AD E0               [24]  605 	movx	a,@dptr
      0002AE FB               [12]  606 	mov	r3,a
      0002AF A3               [24]  607 	inc	dptr
      0002B0 E0               [24]  608 	movx	a,@dptr
      0002B1 FC               [12]  609 	mov	r4,a
      0002B2 C0 05            [24]  610 	push	ar5
      0002B4 C0 06            [24]  611 	push	ar6
      0002B6 C0 07            [24]  612 	push	ar7
      0002B8 8A 82            [24]  613 	mov	dpl,r2
      0002BA 8B 83            [24]  614 	mov	dph,r3
      0002BC 8C F0            [24]  615 	mov	b,r4
      0002BE 78r00            [12]  616 	mov	r0,#_list_remove
      0002C0 79s00            [12]  617 	mov	r1,#(_list_remove >> 8)
      0002C2 7As00            [12]  618 	mov	r2,#(_list_remove >> 16)
      0002C4 12r00r00         [24]  619 	lcall	__sdcc_banked_call
      0002C7 15 81            [12]  620 	dec	sp
      0002C9 15 81            [12]  621 	dec	sp
      0002CB 15 81            [12]  622 	dec	sp
                                    623 ;	../../../core/lib/mmem.c:140: }
      0002CD E5 81            [12]  624 	mov	a,sp
      0002CF 24 F2            [12]  625 	add	a,#0xf2
      0002D1 F5 81            [12]  626 	mov	sp,a
      0002D3 02r00r00         [24]  627 	ljmp	__sdcc_banked_ret
                                    628 ;------------------------------------------------------------
                                    629 ;Allocation info for local variables in function 'mmem_init'
                                    630 ;------------------------------------------------------------
                                    631 ;	../../../core/lib/mmem.c:152: mmem_init(void)
                                    632 ;	-----------------------------------------
                                    633 ;	 function mmem_init
                                    634 ;	-----------------------------------------
      0002D6                        635 _mmem_init:
                                    636 ;	../../../core/lib/mmem.c:154: list_init(mmemlist);
      0002D6 90r00r03         [24]  637 	mov	dptr,#_mmemlist
      0002D9 E0               [24]  638 	movx	a,@dptr
      0002DA FD               [12]  639 	mov	r5,a
      0002DB A3               [24]  640 	inc	dptr
      0002DC E0               [24]  641 	movx	a,@dptr
      0002DD FE               [12]  642 	mov	r6,a
      0002DE A3               [24]  643 	inc	dptr
      0002DF E0               [24]  644 	movx	a,@dptr
      0002E0 FF               [12]  645 	mov	r7,a
      0002E1 8D 82            [24]  646 	mov	dpl,r5
      0002E3 8E 83            [24]  647 	mov	dph,r6
      0002E5 8F F0            [24]  648 	mov	b,r7
      0002E7 78r00            [12]  649 	mov	r0,#_list_init
      0002E9 79s00            [12]  650 	mov	r1,#(_list_init >> 8)
      0002EB 7As00            [12]  651 	mov	r2,#(_list_init >> 16)
      0002ED 12r00r00         [24]  652 	lcall	__sdcc_banked_call
                                    653 ;	../../../core/lib/mmem.c:155: avail_memory = MMEM_SIZE;
      0002F0 90r00r00         [24]  654 	mov	dptr,#_avail_memory
      0002F3 E4               [12]  655 	clr	a
      0002F4 F0               [24]  656 	movx	@dptr,a
      0002F5 74 10            [12]  657 	mov	a,#0x10
      0002F7 A3               [24]  658 	inc	dptr
      0002F8 F0               [24]  659 	movx	@dptr,a
                                    660 ;	../../../core/lib/mmem.c:156: }
      0002F9 02r00r00         [24]  661 	ljmp	__sdcc_banked_ret
                                    662 	.area CSEG    (CODE)
                                    663 	.area CONST   (CODE)
                                    664 	.area XINIT   (CODE)
      000000                        665 __xinit__mmemlist_list:
                                    666 ; generic printIvalPtr
      000000 00 00 00               667 	.byte #0x00,#0x00,#0x00
      000003                        668 __xinit__mmemlist:
      000003r00s00 00               669 	.byte _mmemlist_list, (_mmemlist_list >> 8),#0x00
                                    670 	.area CABS    (ABS,CODE)
