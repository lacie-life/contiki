                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module elfloader
                                      6 	.optsdcc -mmcs51 --model-huge
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _symtab_lookup
                                     12 	.globl _elfloader_arch_write_rom
                                     13 	.globl _elfloader_arch_relocate
                                     14 	.globl _elfloader_arch_allocate_rom
                                     15 	.globl _elfloader_arch_allocate_ram
                                     16 	.globl _cfs_seek
                                     17 	.globl _cfs_read
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _strncmp
                                     21 	.globl _strcmp
                                     22 	.globl _memcmp
                                     23 	.globl _ACTIVE
                                     24 	.globl _TX_BYTE
                                     25 	.globl _RX_BYTE
                                     26 	.globl _ERR
                                     27 	.globl _FE
                                     28 	.globl _SLAVE
                                     29 	.globl _RE
                                     30 	.globl _MODE
                                     31 	.globl _T3OVFIF
                                     32 	.globl _T3CH0IF
                                     33 	.globl _T3CH1IF
                                     34 	.globl _T4OVFIF
                                     35 	.globl _T4CH0IF
                                     36 	.globl _T4CH1IF
                                     37 	.globl _OVFIM
                                     38 	.globl _B_0
                                     39 	.globl _B_1
                                     40 	.globl _B_2
                                     41 	.globl _B_3
                                     42 	.globl _B_4
                                     43 	.globl _B_5
                                     44 	.globl _B_6
                                     45 	.globl _B_7
                                     46 	.globl _P2IF
                                     47 	.globl _UTX0IF
                                     48 	.globl _UTX1IF
                                     49 	.globl _P1IF
                                     50 	.globl _WDTIF
                                     51 	.globl _ACC_0
                                     52 	.globl _ACC_1
                                     53 	.globl _ACC_2
                                     54 	.globl _ACC_3
                                     55 	.globl _ACC_4
                                     56 	.globl _ACC_5
                                     57 	.globl _ACC_6
                                     58 	.globl _ACC_7
                                     59 	.globl _P
                                     60 	.globl _F1
                                     61 	.globl _OV
                                     62 	.globl _RS0
                                     63 	.globl _RS1
                                     64 	.globl _F0
                                     65 	.globl _AC
                                     66 	.globl _CY
                                     67 	.globl _DMAIF
                                     68 	.globl _T1IF
                                     69 	.globl _T2IF
                                     70 	.globl _T3IF
                                     71 	.globl _T4IF
                                     72 	.globl _P0IF
                                     73 	.globl _STIF
                                     74 	.globl _DMAIE
                                     75 	.globl _T1IE
                                     76 	.globl _T2IE
                                     77 	.globl _T3IE
                                     78 	.globl _T4IE
                                     79 	.globl _P0IE
                                     80 	.globl _RFERRIE
                                     81 	.globl _ADCIE
                                     82 	.globl _URX0IE
                                     83 	.globl _URX1IE
                                     84 	.globl _ENCIE
                                     85 	.globl _STIE
                                     86 	.globl _EA
                                     87 	.globl _P2_0
                                     88 	.globl _P2_1
                                     89 	.globl _P2_2
                                     90 	.globl _P2_3
                                     91 	.globl _P2_4
                                     92 	.globl _P2_5
                                     93 	.globl _P2_6
                                     94 	.globl _P2_7
                                     95 	.globl _ENCIF_0
                                     96 	.globl _ENCIF_1
                                     97 	.globl _P1_0
                                     98 	.globl _P1_1
                                     99 	.globl _P1_2
                                    100 	.globl _P1_3
                                    101 	.globl _P1_4
                                    102 	.globl _P1_5
                                    103 	.globl _P1_6
                                    104 	.globl _P1_7
                                    105 	.globl _IT0
                                    106 	.globl _RFERRIF
                                    107 	.globl _IT1
                                    108 	.globl _URX0IF
                                    109 	.globl _ADCIF
                                    110 	.globl _URX1IF
                                    111 	.globl _P0_0
                                    112 	.globl _P0_1
                                    113 	.globl _P0_2
                                    114 	.globl _P0_3
                                    115 	.globl _P0_4
                                    116 	.globl _P0_5
                                    117 	.globl _P0_6
                                    118 	.globl _P0_7
                                    119 	.globl _WDCTL
                                    120 	.globl _U1GCR
                                    121 	.globl _U1UCR
                                    122 	.globl _U1BAUD
                                    123 	.globl _U1DBUF
                                    124 	.globl _U1CSR
                                    125 	.globl _U0GCR
                                    126 	.globl _U0UCR
                                    127 	.globl _U0BAUD
                                    128 	.globl _U0DBUF
                                    129 	.globl _U0CSR
                                    130 	.globl _TIMIF
                                    131 	.globl _T4CC1
                                    132 	.globl _T4CCTL1
                                    133 	.globl _T4CC0
                                    134 	.globl _T4CCTL0
                                    135 	.globl _T4CTL
                                    136 	.globl _T4CNT
                                    137 	.globl _T3CC1
                                    138 	.globl _T3CCTL1
                                    139 	.globl _T3CC0
                                    140 	.globl _T3CCTL0
                                    141 	.globl _T3CTL
                                    142 	.globl _T3CNT
                                    143 	.globl _T2MSEL
                                    144 	.globl _T2IRQM
                                    145 	.globl _T2MOVF2
                                    146 	.globl _T2MOVF1
                                    147 	.globl _T2MOVF0
                                    148 	.globl _T2M1
                                    149 	.globl _T2M0
                                    150 	.globl _T2IRQF
                                    151 	.globl _T2EVTCFG
                                    152 	.globl _T2CTRL
                                    153 	.globl _T1STAT
                                    154 	.globl _T1CCTL2
                                    155 	.globl _T1CCTL1
                                    156 	.globl _T1CCTL0
                                    157 	.globl _T1CTL
                                    158 	.globl _T1CNTH
                                    159 	.globl _T1CNTL
                                    160 	.globl _T1CC2H
                                    161 	.globl _T1CC2L
                                    162 	.globl _T1CC1H
                                    163 	.globl _T1CC1L
                                    164 	.globl _T1CC0H
                                    165 	.globl _T1CC0L
                                    166 	.globl _CLKCONSTA
                                    167 	.globl _CLKCONCMD
                                    168 	.globl _SLEEPSTA
                                    169 	.globl _SLEEPCMD
                                    170 	.globl _STLOAD
                                    171 	.globl _ST2
                                    172 	.globl _ST1
                                    173 	.globl _ST0
                                    174 	.globl _RFERRF
                                    175 	.globl _RFIRQF0
                                    176 	.globl _RFST
                                    177 	.globl _RFD
                                    178 	.globl _RFIRQF1
                                    179 	.globl _PSBANK
                                    180 	.globl _FMAP
                                    181 	.globl _MEMCTR
                                    182 	.globl __XPAGE
                                    183 	.globl _MPAGE
                                    184 	.globl _PMUX
                                    185 	.globl _P2DIR
                                    186 	.globl _P1DIR
                                    187 	.globl _P0DIR
                                    188 	.globl _P2INP
                                    189 	.globl _P1INP
                                    190 	.globl _P2SEL
                                    191 	.globl _P1SEL
                                    192 	.globl _P0SEL
                                    193 	.globl _APCFG
                                    194 	.globl _PERCFG
                                    195 	.globl _P0INP
                                    196 	.globl _P2IEN
                                    197 	.globl _P1IEN
                                    198 	.globl _P0IEN
                                    199 	.globl _PICTL
                                    200 	.globl _P2IFG
                                    201 	.globl _P1IFG
                                    202 	.globl _P0IFG
                                    203 	.globl _DMAREQ
                                    204 	.globl _DMAARM
                                    205 	.globl _DMA0CFGH
                                    206 	.globl _DMA0CFGL
                                    207 	.globl _DMA1CFGH
                                    208 	.globl _DMA1CFGL
                                    209 	.globl _DMAIRQ
                                    210 	.globl _ENCCS
                                    211 	.globl _ENCDO
                                    212 	.globl _ENCDI
                                    213 	.globl _RNDH
                                    214 	.globl _RNDL
                                    215 	.globl _ADCH
                                    216 	.globl _ADCL
                                    217 	.globl _ADCCON3
                                    218 	.globl _ADCCON2
                                    219 	.globl _ADCCON1
                                    220 	.globl _B
                                    221 	.globl _IRCON2
                                    222 	.globl _ACC
                                    223 	.globl _PSW
                                    224 	.globl _IRCON
                                    225 	.globl _IP1
                                    226 	.globl _IEN1
                                    227 	.globl _IP0
                                    228 	.globl _IEN0
                                    229 	.globl _P2
                                    230 	.globl _S1CON
                                    231 	.globl _IEN2
                                    232 	.globl _S0CON
                                    233 	.globl _DPS
                                    234 	.globl _P1
                                    235 	.globl _TCON
                                    236 	.globl _PCON
                                    237 	.globl _DPH1
                                    238 	.globl _DPL1
                                    239 	.globl _DPH0
                                    240 	.globl _DPL0
                                    241 	.globl _SP
                                    242 	.globl _P0
                                    243 	.globl _elfloader_autostart_processes
                                    244 	.globl _elfloader_unknown
                                    245 	.globl _X_IEEE_ADDR
                                    246 	.globl _X_INFOPAGE
                                    247 	.globl _X_P2DIR
                                    248 	.globl _X_P1DIR
                                    249 	.globl _X_P0DIR
                                    250 	.globl _X_U1GCR
                                    251 	.globl _X_U1UCR
                                    252 	.globl _X_U1BAUD
                                    253 	.globl _X_U1DBUF
                                    254 	.globl _X_U1CSR
                                    255 	.globl _X_P2INP
                                    256 	.globl _X_P1INP
                                    257 	.globl _X_P2SEL
                                    258 	.globl _X_P1SEL
                                    259 	.globl _X_P0SEL
                                    260 	.globl _X_APCFG
                                    261 	.globl _X_PERCFG
                                    262 	.globl _X_T4CC1
                                    263 	.globl _X_T4CCTL1
                                    264 	.globl _X_T4CC0
                                    265 	.globl _X_T4CCTL0
                                    266 	.globl _X_T4CTL
                                    267 	.globl _X_T4CNT
                                    268 	.globl _X_RFIRQF0
                                    269 	.globl _X_T1CCTL2
                                    270 	.globl _X_T1CCTL1
                                    271 	.globl _X_T1CCTL0
                                    272 	.globl _X_T1CTL
                                    273 	.globl _X_T1CNTH
                                    274 	.globl _X_T1CNTL
                                    275 	.globl _X_RFST
                                    276 	.globl _X_T1CC2H
                                    277 	.globl _X_T1CC2L
                                    278 	.globl _X_T1CC1H
                                    279 	.globl _X_T1CC1L
                                    280 	.globl _X_T1CC0H
                                    281 	.globl _X_T1CC0L
                                    282 	.globl _X_RFD
                                    283 	.globl _X_TIMIF
                                    284 	.globl _X_DMAREQ
                                    285 	.globl _X_DMAARM
                                    286 	.globl _X_DMA0CFGH
                                    287 	.globl _X_DMA0CFGL
                                    288 	.globl _X_DMA1CFGH
                                    289 	.globl _X_DMA1CFGL
                                    290 	.globl _X_DMAIRQ
                                    291 	.globl _X_T3CC1
                                    292 	.globl _X_T3CCTL1
                                    293 	.globl _X_T3CC0
                                    294 	.globl _X_T3CCTL0
                                    295 	.globl _X_T3CTL
                                    296 	.globl _X_T3CNT
                                    297 	.globl _X_WDCTL
                                    298 	.globl _X_MEMCTR
                                    299 	.globl _X_CLKCONCMD
                                    300 	.globl _X_U0GCR
                                    301 	.globl _X_U0UCR
                                    302 	.globl _X_T2MSEL
                                    303 	.globl _X_U0BAUD
                                    304 	.globl _X_U0DBUF
                                    305 	.globl _X_RFERRF
                                    306 	.globl _X_SLEEPCMD
                                    307 	.globl _X_RNDH
                                    308 	.globl _X_RNDL
                                    309 	.globl _X_ADCH
                                    310 	.globl _X_ADCL
                                    311 	.globl _X_ADCCON3
                                    312 	.globl _X_ADCCON2
                                    313 	.globl _X_ADCCON1
                                    314 	.globl _X_ENCCS
                                    315 	.globl _X_ENCDO
                                    316 	.globl _X_ENCDI
                                    317 	.globl _X_T1STAT
                                    318 	.globl _X_PMUX
                                    319 	.globl _X_STLOAD
                                    320 	.globl _X_P2IEN
                                    321 	.globl _X_P0IEN
                                    322 	.globl _X_T2IRQM
                                    323 	.globl _X_T2MOVF2
                                    324 	.globl _X_T2MOVF1
                                    325 	.globl _X_T2MOVF0
                                    326 	.globl _X_T2M1
                                    327 	.globl _X_T2M0
                                    328 	.globl _X_T2IRQF
                                    329 	.globl _X_P2
                                    330 	.globl _X_PSBANK
                                    331 	.globl _X_FMAP
                                    332 	.globl _X_CLKCONSTA
                                    333 	.globl _X_SLEEPSTA
                                    334 	.globl _X_T2EVTCFG
                                    335 	.globl _X_ST2
                                    336 	.globl _X_ST1
                                    337 	.globl _X_ST0
                                    338 	.globl _X_T2CTRL
                                    339 	.globl _X__XPAGE
                                    340 	.globl _X_MPAGE
                                    341 	.globl _X_RFIRQF1
                                    342 	.globl _X_P1
                                    343 	.globl _X_P0INP
                                    344 	.globl _X_P1IEN
                                    345 	.globl _X_PICTL
                                    346 	.globl _X_P2IFG
                                    347 	.globl _X_P1IFG
                                    348 	.globl _X_P0IFG
                                    349 	.globl _X_U0CSR
                                    350 	.globl _X_P0
                                    351 	.globl _USBF5
                                    352 	.globl _USBF4
                                    353 	.globl _USBF3
                                    354 	.globl _USBF2
                                    355 	.globl _USBF1
                                    356 	.globl _USBF0
                                    357 	.globl _USBCNTH
                                    358 	.globl _USBCNTL
                                    359 	.globl _USBCNT0
                                    360 	.globl _USBCSOH
                                    361 	.globl _USBCSOL
                                    362 	.globl _USBMAXO
                                    363 	.globl _USBCSIH
                                    364 	.globl _USBCSIL
                                    365 	.globl _USBCS0
                                    366 	.globl _USBMAXI
                                    367 	.globl _USBCTRL
                                    368 	.globl _USBINDEX
                                    369 	.globl _USBFRMH
                                    370 	.globl _USBFRML
                                    371 	.globl _USBCIE
                                    372 	.globl _USBOIE
                                    373 	.globl _USBIIE
                                    374 	.globl _USBCIF
                                    375 	.globl _USBOIF
                                    376 	.globl _USBIIF
                                    377 	.globl _USBPOW
                                    378 	.globl _USBADDR
                                    379 	.globl _CSPT
                                    380 	.globl _CSPZ
                                    381 	.globl _CSPY
                                    382 	.globl _CSPX
                                    383 	.globl _CSPSTAT
                                    384 	.globl _CSPCTRL
                                    385 	.globl _CSPPROG23
                                    386 	.globl _CSPPROG22
                                    387 	.globl _CSPPROG21
                                    388 	.globl _CSPPROG20
                                    389 	.globl _CSPPROG19
                                    390 	.globl _CSPPROG18
                                    391 	.globl _CSPPROG17
                                    392 	.globl _CSPPROG16
                                    393 	.globl _CSPPROG15
                                    394 	.globl _CSPPROG14
                                    395 	.globl _CSPPROG13
                                    396 	.globl _CSPPROG12
                                    397 	.globl _CSPPROG11
                                    398 	.globl _CSPPROG10
                                    399 	.globl _CSPPROG9
                                    400 	.globl _CSPPROG8
                                    401 	.globl _CSPPROG7
                                    402 	.globl _CSPPROG6
                                    403 	.globl _CSPPROG5
                                    404 	.globl _CSPPROG4
                                    405 	.globl _CSPPROG3
                                    406 	.globl _CSPPROG2
                                    407 	.globl _CSPPROG1
                                    408 	.globl _CSPPROG0
                                    409 	.globl _RFC_OBS_CTRL2
                                    410 	.globl _RFC_OBS_CTRL1
                                    411 	.globl _RFC_OBS_CTRL0
                                    412 	.globl _TXFILTCFG
                                    413 	.globl _PTEST1
                                    414 	.globl _PTEST0
                                    415 	.globl _ATEST
                                    416 	.globl _DACTEST2
                                    417 	.globl _DACTEST1
                                    418 	.globl _DACTEST0
                                    419 	.globl _MDMTEST1
                                    420 	.globl _MDMTEST0
                                    421 	.globl _ADCTEST2
                                    422 	.globl _ADCTEST1
                                    423 	.globl _ADCTEST0
                                    424 	.globl _AGCCTRL3
                                    425 	.globl _AGCCTRL2
                                    426 	.globl _AGCCTRL1
                                    427 	.globl _AGCCTRL0
                                    428 	.globl _FSCAL3
                                    429 	.globl _FSCAL2
                                    430 	.globl _FSCAL1
                                    431 	.globl _FSCAL0
                                    432 	.globl _FSCTRL
                                    433 	.globl _RXCTRL
                                    434 	.globl _FREQEST
                                    435 	.globl _MDMCTRL1
                                    436 	.globl _MDMCTRL0
                                    437 	.globl _RFRND
                                    438 	.globl _RFERRM
                                    439 	.globl _RFIRQM1
                                    440 	.globl _RFIRQM0
                                    441 	.globl _TXLAST_PTR
                                    442 	.globl _TXFIRST_PTR
                                    443 	.globl _RXP1_PTR
                                    444 	.globl _RXLAST_PTR
                                    445 	.globl _RXFIRST_PTR
                                    446 	.globl _TXFIFOCNT
                                    447 	.globl _RXFIFOCNT
                                    448 	.globl _RXFIRST
                                    449 	.globl _RSSISTAT
                                    450 	.globl _RSSI
                                    451 	.globl _CCACTRL1
                                    452 	.globl _CCACTRL0
                                    453 	.globl _FSMCTRL
                                    454 	.globl _FIFOPCTRL
                                    455 	.globl _FSMSTAT1
                                    456 	.globl _FSMSTAT0
                                    457 	.globl _TXCTRL
                                    458 	.globl _TXPOWER
                                    459 	.globl _FREQCTRL
                                    460 	.globl _FREQTUNE
                                    461 	.globl _RXMASKCLR
                                    462 	.globl _RXMASKSET
                                    463 	.globl _RXENABLE
                                    464 	.globl _FRMCTRL1
                                    465 	.globl _FRMCTRL0
                                    466 	.globl _SRCEXTEN2
                                    467 	.globl _SRCEXTEN1
                                    468 	.globl _SRCEXTEN0
                                    469 	.globl _SRCSHORTEN2
                                    470 	.globl _SRCSHORTEN1
                                    471 	.globl _SRCSHORTEN0
                                    472 	.globl _SRCMATCH
                                    473 	.globl _FRMFILT1
                                    474 	.globl _FRMFILT0
                                    475 	.globl _SHORT_ADDR1
                                    476 	.globl _SHORT_ADDR0
                                    477 	.globl _PAN_ID1
                                    478 	.globl _PAN_ID0
                                    479 	.globl _EXT_ADDR7
                                    480 	.globl _EXT_ADDR6
                                    481 	.globl _EXT_ADDR5
                                    482 	.globl _EXT_ADDR4
                                    483 	.globl _EXT_ADDR3
                                    484 	.globl _EXT_ADDR2
                                    485 	.globl _EXT_ADDR1
                                    486 	.globl _EXT_ADDR0
                                    487 	.globl _SRCSHORTPENDEN2
                                    488 	.globl _SRCSHORTPENDEN1
                                    489 	.globl _SRCSHORTPENDEN0
                                    490 	.globl _SRCEXTPENDEN2
                                    491 	.globl _SRCEXTPENDEN1
                                    492 	.globl _SRCEXTPENDEN0
                                    493 	.globl _SRCRESINDEX
                                    494 	.globl _SRCRESMASK2
                                    495 	.globl _SRCRESMASK1
                                    496 	.globl _SRCRESMASK0
                                    497 	.globl _SRC_ADDR_TABLE
                                    498 	.globl _TXFIFO
                                    499 	.globl _RXFIFO
                                    500 	.globl _RFCORE_RAM
                                    501 	.globl _CMPCTL
                                    502 	.globl _OPAMPS
                                    503 	.globl _OPAMPC
                                    504 	.globl _STCV2
                                    505 	.globl _STCV1
                                    506 	.globl _STCV0
                                    507 	.globl _STCS
                                    508 	.globl _STCC
                                    509 	.globl _T1CC4H
                                    510 	.globl _T1CC4L
                                    511 	.globl _T1CC3H
                                    512 	.globl _T1CC3L
                                    513 	.globl _XX_T1CC2H
                                    514 	.globl _XX_T1CC2L
                                    515 	.globl _XX_T1CC1H
                                    516 	.globl _XX_T1CC1L
                                    517 	.globl _XX_T1CC0H
                                    518 	.globl _XX_T1CC0L
                                    519 	.globl _T1CCTL4
                                    520 	.globl _T1CCTL3
                                    521 	.globl _XX_T1CCTL2
                                    522 	.globl _XX_T1CCTL1
                                    523 	.globl _XX_T1CCTL0
                                    524 	.globl _CLD
                                    525 	.globl _IRCTL
                                    526 	.globl _CHIPINFO1
                                    527 	.globl _CHIPINFO0
                                    528 	.globl _FWDATA
                                    529 	.globl _FADDRH
                                    530 	.globl _FADDRL
                                    531 	.globl _FCTL
                                    532 	.globl _IVCTRL
                                    533 	.globl _BATTMON
                                    534 	.globl _SRCRC
                                    535 	.globl _DBGDATA
                                    536 	.globl _TESTREG0
                                    537 	.globl _CHIPID
                                    538 	.globl _CHVER
                                    539 	.globl _OBSSEL5
                                    540 	.globl _OBSSEL4
                                    541 	.globl _OBSSEL3
                                    542 	.globl _OBSSEL2
                                    543 	.globl _OBSSEL1
                                    544 	.globl _OBSSEL0
                                    545 	.globl _I2CIO
                                    546 	.globl _I2CWC
                                    547 	.globl _I2CADDR
                                    548 	.globl _I2CDATA
                                    549 	.globl _I2CSTAT
                                    550 	.globl _I2CCFG
                                    551 	.globl _OPAMPMC
                                    552 	.globl _MONMUX
                                    553 	.globl _elfloader_init
                                    554 	.globl _elfloader_load
                                    555 ;--------------------------------------------------------
                                    556 ; special function registers
                                    557 ;--------------------------------------------------------
                                    558 	.area RSEG    (ABS,DATA)
      000000                        559 	.org 0x0000
                           000080   560 _P0	=	0x0080
                           000081   561 _SP	=	0x0081
                           000082   562 _DPL0	=	0x0082
                           000083   563 _DPH0	=	0x0083
                           000084   564 _DPL1	=	0x0084
                           000085   565 _DPH1	=	0x0085
                           000087   566 _PCON	=	0x0087
                           000088   567 _TCON	=	0x0088
                           000090   568 _P1	=	0x0090
                           000092   569 _DPS	=	0x0092
                           000098   570 _S0CON	=	0x0098
                           00009A   571 _IEN2	=	0x009a
                           00009B   572 _S1CON	=	0x009b
                           0000A0   573 _P2	=	0x00a0
                           0000A8   574 _IEN0	=	0x00a8
                           0000A9   575 _IP0	=	0x00a9
                           0000B8   576 _IEN1	=	0x00b8
                           0000B9   577 _IP1	=	0x00b9
                           0000C0   578 _IRCON	=	0x00c0
                           0000D0   579 _PSW	=	0x00d0
                           0000E0   580 _ACC	=	0x00e0
                           0000E8   581 _IRCON2	=	0x00e8
                           0000F0   582 _B	=	0x00f0
                           0000B4   583 _ADCCON1	=	0x00b4
                           0000B5   584 _ADCCON2	=	0x00b5
                           0000B6   585 _ADCCON3	=	0x00b6
                           0000BA   586 _ADCL	=	0x00ba
                           0000BB   587 _ADCH	=	0x00bb
                           0000BC   588 _RNDL	=	0x00bc
                           0000BD   589 _RNDH	=	0x00bd
                           0000B1   590 _ENCDI	=	0x00b1
                           0000B2   591 _ENCDO	=	0x00b2
                           0000B3   592 _ENCCS	=	0x00b3
                           0000D1   593 _DMAIRQ	=	0x00d1
                           0000D2   594 _DMA1CFGL	=	0x00d2
                           0000D3   595 _DMA1CFGH	=	0x00d3
                           0000D4   596 _DMA0CFGL	=	0x00d4
                           0000D5   597 _DMA0CFGH	=	0x00d5
                           0000D6   598 _DMAARM	=	0x00d6
                           0000D7   599 _DMAREQ	=	0x00d7
                           000089   600 _P0IFG	=	0x0089
                           00008A   601 _P1IFG	=	0x008a
                           00008B   602 _P2IFG	=	0x008b
                           00008C   603 _PICTL	=	0x008c
                           0000AB   604 _P0IEN	=	0x00ab
                           00008D   605 _P1IEN	=	0x008d
                           0000AC   606 _P2IEN	=	0x00ac
                           00008F   607 _P0INP	=	0x008f
                           0000F1   608 _PERCFG	=	0x00f1
                           0000F2   609 _APCFG	=	0x00f2
                           0000F3   610 _P0SEL	=	0x00f3
                           0000F4   611 _P1SEL	=	0x00f4
                           0000F5   612 _P2SEL	=	0x00f5
                           0000F6   613 _P1INP	=	0x00f6
                           0000F7   614 _P2INP	=	0x00f7
                           0000FD   615 _P0DIR	=	0x00fd
                           0000FE   616 _P1DIR	=	0x00fe
                           0000FF   617 _P2DIR	=	0x00ff
                           0000AE   618 _PMUX	=	0x00ae
                           000093   619 _MPAGE	=	0x0093
                           000093   620 __XPAGE	=	0x0093
                           0000C7   621 _MEMCTR	=	0x00c7
                           00009F   622 _FMAP	=	0x009f
                           00009F   623 _PSBANK	=	0x009f
                           000091   624 _RFIRQF1	=	0x0091
                           0000D9   625 _RFD	=	0x00d9
                           0000E1   626 _RFST	=	0x00e1
                           0000E9   627 _RFIRQF0	=	0x00e9
                           0000BF   628 _RFERRF	=	0x00bf
                           000095   629 _ST0	=	0x0095
                           000096   630 _ST1	=	0x0096
                           000097   631 _ST2	=	0x0097
                           0000AD   632 _STLOAD	=	0x00ad
                           0000BE   633 _SLEEPCMD	=	0x00be
                           00009D   634 _SLEEPSTA	=	0x009d
                           0000C6   635 _CLKCONCMD	=	0x00c6
                           00009E   636 _CLKCONSTA	=	0x009e
                           0000DA   637 _T1CC0L	=	0x00da
                           0000DB   638 _T1CC0H	=	0x00db
                           0000DC   639 _T1CC1L	=	0x00dc
                           0000DD   640 _T1CC1H	=	0x00dd
                           0000DE   641 _T1CC2L	=	0x00de
                           0000DF   642 _T1CC2H	=	0x00df
                           0000E2   643 _T1CNTL	=	0x00e2
                           0000E3   644 _T1CNTH	=	0x00e3
                           0000E4   645 _T1CTL	=	0x00e4
                           0000E5   646 _T1CCTL0	=	0x00e5
                           0000E6   647 _T1CCTL1	=	0x00e6
                           0000E7   648 _T1CCTL2	=	0x00e7
                           0000AF   649 _T1STAT	=	0x00af
                           000094   650 _T2CTRL	=	0x0094
                           00009C   651 _T2EVTCFG	=	0x009c
                           0000A1   652 _T2IRQF	=	0x00a1
                           0000A2   653 _T2M0	=	0x00a2
                           0000A3   654 _T2M1	=	0x00a3
                           0000A4   655 _T2MOVF0	=	0x00a4
                           0000A5   656 _T2MOVF1	=	0x00a5
                           0000A6   657 _T2MOVF2	=	0x00a6
                           0000A7   658 _T2IRQM	=	0x00a7
                           0000C3   659 _T2MSEL	=	0x00c3
                           0000CA   660 _T3CNT	=	0x00ca
                           0000CB   661 _T3CTL	=	0x00cb
                           0000CC   662 _T3CCTL0	=	0x00cc
                           0000CD   663 _T3CC0	=	0x00cd
                           0000CE   664 _T3CCTL1	=	0x00ce
                           0000CF   665 _T3CC1	=	0x00cf
                           0000EA   666 _T4CNT	=	0x00ea
                           0000EB   667 _T4CTL	=	0x00eb
                           0000EC   668 _T4CCTL0	=	0x00ec
                           0000ED   669 _T4CC0	=	0x00ed
                           0000EE   670 _T4CCTL1	=	0x00ee
                           0000EF   671 _T4CC1	=	0x00ef
                           0000D8   672 _TIMIF	=	0x00d8
                           000086   673 _U0CSR	=	0x0086
                           0000C1   674 _U0DBUF	=	0x00c1
                           0000C2   675 _U0BAUD	=	0x00c2
                           0000C4   676 _U0UCR	=	0x00c4
                           0000C5   677 _U0GCR	=	0x00c5
                           0000F8   678 _U1CSR	=	0x00f8
                           0000F9   679 _U1DBUF	=	0x00f9
                           0000FA   680 _U1BAUD	=	0x00fa
                           0000FB   681 _U1UCR	=	0x00fb
                           0000FC   682 _U1GCR	=	0x00fc
                           0000C9   683 _WDCTL	=	0x00c9
                                    684 ;--------------------------------------------------------
                                    685 ; special function bits
                                    686 ;--------------------------------------------------------
                                    687 	.area RSEG    (ABS,DATA)
      000000                        688 	.org 0x0000
                           000087   689 _P0_7	=	0x0087
                           000086   690 _P0_6	=	0x0086
                           000085   691 _P0_5	=	0x0085
                           000084   692 _P0_4	=	0x0084
                           000083   693 _P0_3	=	0x0083
                           000082   694 _P0_2	=	0x0082
                           000081   695 _P0_1	=	0x0081
                           000080   696 _P0_0	=	0x0080
                           00008F   697 _URX1IF	=	0x008f
                           00008D   698 _ADCIF	=	0x008d
                           00008B   699 _URX0IF	=	0x008b
                           00008A   700 _IT1	=	0x008a
                           000089   701 _RFERRIF	=	0x0089
                           000088   702 _IT0	=	0x0088
                           000097   703 _P1_7	=	0x0097
                           000096   704 _P1_6	=	0x0096
                           000095   705 _P1_5	=	0x0095
                           000094   706 _P1_4	=	0x0094
                           000093   707 _P1_3	=	0x0093
                           000092   708 _P1_2	=	0x0092
                           000091   709 _P1_1	=	0x0091
                           000090   710 _P1_0	=	0x0090
                           000099   711 _ENCIF_1	=	0x0099
                           000098   712 _ENCIF_0	=	0x0098
                           0000A7   713 _P2_7	=	0x00a7
                           0000A6   714 _P2_6	=	0x00a6
                           0000A5   715 _P2_5	=	0x00a5
                           0000A4   716 _P2_4	=	0x00a4
                           0000A3   717 _P2_3	=	0x00a3
                           0000A2   718 _P2_2	=	0x00a2
                           0000A1   719 _P2_1	=	0x00a1
                           0000A0   720 _P2_0	=	0x00a0
                           0000AF   721 _EA	=	0x00af
                           0000AD   722 _STIE	=	0x00ad
                           0000AC   723 _ENCIE	=	0x00ac
                           0000AB   724 _URX1IE	=	0x00ab
                           0000AA   725 _URX0IE	=	0x00aa
                           0000A9   726 _ADCIE	=	0x00a9
                           0000A8   727 _RFERRIE	=	0x00a8
                           0000BD   728 _P0IE	=	0x00bd
                           0000BC   729 _T4IE	=	0x00bc
                           0000BB   730 _T3IE	=	0x00bb
                           0000BA   731 _T2IE	=	0x00ba
                           0000B9   732 _T1IE	=	0x00b9
                           0000B8   733 _DMAIE	=	0x00b8
                           0000C7   734 _STIF	=	0x00c7
                           0000C5   735 _P0IF	=	0x00c5
                           0000C4   736 _T4IF	=	0x00c4
                           0000C3   737 _T3IF	=	0x00c3
                           0000C2   738 _T2IF	=	0x00c2
                           0000C1   739 _T1IF	=	0x00c1
                           0000C0   740 _DMAIF	=	0x00c0
                           0000D7   741 _CY	=	0x00d7
                           0000D6   742 _AC	=	0x00d6
                           0000D5   743 _F0	=	0x00d5
                           0000D4   744 _RS1	=	0x00d4
                           0000D3   745 _RS0	=	0x00d3
                           0000D2   746 _OV	=	0x00d2
                           0000D1   747 _F1	=	0x00d1
                           0000D0   748 _P	=	0x00d0
                           0000E7   749 _ACC_7	=	0x00e7
                           0000E6   750 _ACC_6	=	0x00e6
                           0000E5   751 _ACC_5	=	0x00e5
                           0000E4   752 _ACC_4	=	0x00e4
                           0000E3   753 _ACC_3	=	0x00e3
                           0000E2   754 _ACC_2	=	0x00e2
                           0000E1   755 _ACC_1	=	0x00e1
                           0000E0   756 _ACC_0	=	0x00e0
                           0000EC   757 _WDTIF	=	0x00ec
                           0000EB   758 _P1IF	=	0x00eb
                           0000EA   759 _UTX1IF	=	0x00ea
                           0000E9   760 _UTX0IF	=	0x00e9
                           0000E8   761 _P2IF	=	0x00e8
                           0000F7   762 _B_7	=	0x00f7
                           0000F6   763 _B_6	=	0x00f6
                           0000F5   764 _B_5	=	0x00f5
                           0000F4   765 _B_4	=	0x00f4
                           0000F3   766 _B_3	=	0x00f3
                           0000F2   767 _B_2	=	0x00f2
                           0000F1   768 _B_1	=	0x00f1
                           0000F0   769 _B_0	=	0x00f0
                           0000DE   770 _OVFIM	=	0x00de
                           0000DD   771 _T4CH1IF	=	0x00dd
                           0000DC   772 _T4CH0IF	=	0x00dc
                           0000DB   773 _T4OVFIF	=	0x00db
                           0000DA   774 _T3CH1IF	=	0x00da
                           0000D9   775 _T3CH0IF	=	0x00d9
                           0000D8   776 _T3OVFIF	=	0x00d8
                           0000FF   777 _MODE	=	0x00ff
                           0000FE   778 _RE	=	0x00fe
                           0000FD   779 _SLAVE	=	0x00fd
                           0000FC   780 _FE	=	0x00fc
                           0000FB   781 _ERR	=	0x00fb
                           0000FA   782 _RX_BYTE	=	0x00fa
                           0000F9   783 _TX_BYTE	=	0x00f9
                           0000F8   784 _ACTIVE	=	0x00f8
                                    785 ;--------------------------------------------------------
                                    786 ; overlayable register banks
                                    787 ;--------------------------------------------------------
                                    788 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        789 	.ds 8
                                    790 ;--------------------------------------------------------
                                    791 ; internal ram data
                                    792 ;--------------------------------------------------------
                                    793 	.area DSEG    (DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; overlayable items in internal ram 
                                    796 ;--------------------------------------------------------
                                    797 ;--------------------------------------------------------
                                    798 ; indirectly addressable internal ram data
                                    799 ;--------------------------------------------------------
                                    800 	.area ISEG    (DATA)
                                    801 ;--------------------------------------------------------
                                    802 ; absolute internal ram data
                                    803 ;--------------------------------------------------------
                                    804 	.area IABS    (ABS,DATA)
                                    805 	.area IABS    (ABS,DATA)
                                    806 ;--------------------------------------------------------
                                    807 ; bit data
                                    808 ;--------------------------------------------------------
                                    809 	.area BSEG    (BIT)
                                    810 ;--------------------------------------------------------
                                    811 ; paged external ram data
                                    812 ;--------------------------------------------------------
                                    813 	.area PSEG    (PAG,XDATA)
                                    814 ;--------------------------------------------------------
                                    815 ; external ram data
                                    816 ;--------------------------------------------------------
                                    817 	.area XSEG    (XDATA)
                           0061A6   818 _MONMUX	=	0x61a6
                           0061A6   819 _OPAMPMC	=	0x61a6
                           006230   820 _I2CCFG	=	0x6230
                           006231   821 _I2CSTAT	=	0x6231
                           006232   822 _I2CDATA	=	0x6232
                           006233   823 _I2CADDR	=	0x6233
                           006234   824 _I2CWC	=	0x6234
                           006235   825 _I2CIO	=	0x6235
                           006243   826 _OBSSEL0	=	0x6243
                           006244   827 _OBSSEL1	=	0x6244
                           006245   828 _OBSSEL2	=	0x6245
                           006246   829 _OBSSEL3	=	0x6246
                           006247   830 _OBSSEL4	=	0x6247
                           006248   831 _OBSSEL5	=	0x6248
                           006249   832 _CHVER	=	0x6249
                           00624A   833 _CHIPID	=	0x624a
                           00624B   834 _TESTREG0	=	0x624b
                           006260   835 _DBGDATA	=	0x6260
                           006262   836 _SRCRC	=	0x6262
                           006264   837 _BATTMON	=	0x6264
                           006265   838 _IVCTRL	=	0x6265
                           006270   839 _FCTL	=	0x6270
                           006271   840 _FADDRL	=	0x6271
                           006272   841 _FADDRH	=	0x6272
                           006273   842 _FWDATA	=	0x6273
                           006276   843 _CHIPINFO0	=	0x6276
                           006277   844 _CHIPINFO1	=	0x6277
                           006281   845 _IRCTL	=	0x6281
                           006290   846 _CLD	=	0x6290
                           0062A0   847 _XX_T1CCTL0	=	0x62a0
                           0062A1   848 _XX_T1CCTL1	=	0x62a1
                           0062A2   849 _XX_T1CCTL2	=	0x62a2
                           0062A3   850 _T1CCTL3	=	0x62a3
                           0062A4   851 _T1CCTL4	=	0x62a4
                           0062A6   852 _XX_T1CC0L	=	0x62a6
                           0062A7   853 _XX_T1CC0H	=	0x62a7
                           0062A8   854 _XX_T1CC1L	=	0x62a8
                           0062A9   855 _XX_T1CC1H	=	0x62a9
                           0062AA   856 _XX_T1CC2L	=	0x62aa
                           0062AB   857 _XX_T1CC2H	=	0x62ab
                           0062AC   858 _T1CC3L	=	0x62ac
                           0062AD   859 _T1CC3H	=	0x62ad
                           0062AE   860 _T1CC4L	=	0x62ae
                           0062AF   861 _T1CC4H	=	0x62af
                           0062B0   862 _STCC	=	0x62b0
                           0062B1   863 _STCS	=	0x62b1
                           0062B2   864 _STCV0	=	0x62b2
                           0062B3   865 _STCV1	=	0x62b3
                           0062B4   866 _STCV2	=	0x62b4
                           0062C0   867 _OPAMPC	=	0x62c0
                           0062C1   868 _OPAMPS	=	0x62c1
                           0062D0   869 _CMPCTL	=	0x62d0
                           006000   870 _RFCORE_RAM	=	0x6000
                           006000   871 _RXFIFO	=	0x6000
                           006080   872 _TXFIFO	=	0x6080
                           006100   873 _SRC_ADDR_TABLE	=	0x6100
                           006160   874 _SRCRESMASK0	=	0x6160
                           006161   875 _SRCRESMASK1	=	0x6161
                           006162   876 _SRCRESMASK2	=	0x6162
                           006163   877 _SRCRESINDEX	=	0x6163
                           006164   878 _SRCEXTPENDEN0	=	0x6164
                           006165   879 _SRCEXTPENDEN1	=	0x6165
                           006166   880 _SRCEXTPENDEN2	=	0x6166
                           006167   881 _SRCSHORTPENDEN0	=	0x6167
                           006168   882 _SRCSHORTPENDEN1	=	0x6168
                           006169   883 _SRCSHORTPENDEN2	=	0x6169
                           00616A   884 _EXT_ADDR0	=	0x616a
                           00616B   885 _EXT_ADDR1	=	0x616b
                           00616C   886 _EXT_ADDR2	=	0x616c
                           00616D   887 _EXT_ADDR3	=	0x616d
                           00616E   888 _EXT_ADDR4	=	0x616e
                           00616F   889 _EXT_ADDR5	=	0x616f
                           006170   890 _EXT_ADDR6	=	0x6170
                           006171   891 _EXT_ADDR7	=	0x6171
                           006172   892 _PAN_ID0	=	0x6172
                           006173   893 _PAN_ID1	=	0x6173
                           006174   894 _SHORT_ADDR0	=	0x6174
                           006175   895 _SHORT_ADDR1	=	0x6175
                           006180   896 _FRMFILT0	=	0x6180
                           006181   897 _FRMFILT1	=	0x6181
                           006182   898 _SRCMATCH	=	0x6182
                           006183   899 _SRCSHORTEN0	=	0x6183
                           006184   900 _SRCSHORTEN1	=	0x6184
                           006185   901 _SRCSHORTEN2	=	0x6185
                           006186   902 _SRCEXTEN0	=	0x6186
                           006187   903 _SRCEXTEN1	=	0x6187
                           006188   904 _SRCEXTEN2	=	0x6188
                           006189   905 _FRMCTRL0	=	0x6189
                           00618A   906 _FRMCTRL1	=	0x618a
                           00618B   907 _RXENABLE	=	0x618b
                           00618C   908 _RXMASKSET	=	0x618c
                           00618D   909 _RXMASKCLR	=	0x618d
                           00618E   910 _FREQTUNE	=	0x618e
                           00618F   911 _FREQCTRL	=	0x618f
                           006190   912 _TXPOWER	=	0x6190
                           006191   913 _TXCTRL	=	0x6191
                           006192   914 _FSMSTAT0	=	0x6192
                           006193   915 _FSMSTAT1	=	0x6193
                           006194   916 _FIFOPCTRL	=	0x6194
                           006195   917 _FSMCTRL	=	0x6195
                           006196   918 _CCACTRL0	=	0x6196
                           006197   919 _CCACTRL1	=	0x6197
                           006198   920 _RSSI	=	0x6198
                           006199   921 _RSSISTAT	=	0x6199
                           00619A   922 _RXFIRST	=	0x619a
                           00619B   923 _RXFIFOCNT	=	0x619b
                           00619C   924 _TXFIFOCNT	=	0x619c
                           00619D   925 _RXFIRST_PTR	=	0x619d
                           00619E   926 _RXLAST_PTR	=	0x619e
                           00619F   927 _RXP1_PTR	=	0x619f
                           0061A1   928 _TXFIRST_PTR	=	0x61a1
                           0061A2   929 _TXLAST_PTR	=	0x61a2
                           0061A3   930 _RFIRQM0	=	0x61a3
                           0061A4   931 _RFIRQM1	=	0x61a4
                           0061A5   932 _RFERRM	=	0x61a5
                           0061A7   933 _RFRND	=	0x61a7
                           0061A8   934 _MDMCTRL0	=	0x61a8
                           0061A9   935 _MDMCTRL1	=	0x61a9
                           0061AA   936 _FREQEST	=	0x61aa
                           0061AB   937 _RXCTRL	=	0x61ab
                           0061AC   938 _FSCTRL	=	0x61ac
                           0061AD   939 _FSCAL0	=	0x61ad
                           0061AE   940 _FSCAL1	=	0x61ae
                           0061AF   941 _FSCAL2	=	0x61af
                           0061B0   942 _FSCAL3	=	0x61b0
                           0061B1   943 _AGCCTRL0	=	0x61b1
                           0061B2   944 _AGCCTRL1	=	0x61b2
                           0061B3   945 _AGCCTRL2	=	0x61b3
                           0061B4   946 _AGCCTRL3	=	0x61b4
                           0061B5   947 _ADCTEST0	=	0x61b5
                           0061B6   948 _ADCTEST1	=	0x61b6
                           0061B7   949 _ADCTEST2	=	0x61b7
                           0061B8   950 _MDMTEST0	=	0x61b8
                           0061B9   951 _MDMTEST1	=	0x61b9
                           0061BA   952 _DACTEST0	=	0x61ba
                           0061BB   953 _DACTEST1	=	0x61bb
                           0061BC   954 _DACTEST2	=	0x61bc
                           0061BD   955 _ATEST	=	0x61bd
                           0061BE   956 _PTEST0	=	0x61be
                           0061BF   957 _PTEST1	=	0x61bf
                           0061FA   958 _TXFILTCFG	=	0x61fa
                           0061EB   959 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   960 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   961 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   962 _CSPPROG0	=	0x61c0
                           0061C1   963 _CSPPROG1	=	0x61c1
                           0061C2   964 _CSPPROG2	=	0x61c2
                           0061C3   965 _CSPPROG3	=	0x61c3
                           0061C4   966 _CSPPROG4	=	0x61c4
                           0061C5   967 _CSPPROG5	=	0x61c5
                           0061C6   968 _CSPPROG6	=	0x61c6
                           0061C7   969 _CSPPROG7	=	0x61c7
                           0061C8   970 _CSPPROG8	=	0x61c8
                           0061C9   971 _CSPPROG9	=	0x61c9
                           0061CA   972 _CSPPROG10	=	0x61ca
                           0061CB   973 _CSPPROG11	=	0x61cb
                           0061CC   974 _CSPPROG12	=	0x61cc
                           0061CD   975 _CSPPROG13	=	0x61cd
                           0061CE   976 _CSPPROG14	=	0x61ce
                           0061CF   977 _CSPPROG15	=	0x61cf
                           0061D0   978 _CSPPROG16	=	0x61d0
                           0061D1   979 _CSPPROG17	=	0x61d1
                           0061D2   980 _CSPPROG18	=	0x61d2
                           0061D3   981 _CSPPROG19	=	0x61d3
                           0061D4   982 _CSPPROG20	=	0x61d4
                           0061D5   983 _CSPPROG21	=	0x61d5
                           0061D6   984 _CSPPROG22	=	0x61d6
                           0061D7   985 _CSPPROG23	=	0x61d7
                           0061E0   986 _CSPCTRL	=	0x61e0
                           0061E1   987 _CSPSTAT	=	0x61e1
                           0061E2   988 _CSPX	=	0x61e2
                           0061E3   989 _CSPY	=	0x61e3
                           0061E4   990 _CSPZ	=	0x61e4
                           0061E5   991 _CSPT	=	0x61e5
                           006200   992 _USBADDR	=	0x6200
                           006201   993 _USBPOW	=	0x6201
                           006202   994 _USBIIF	=	0x6202
                           006204   995 _USBOIF	=	0x6204
                           006206   996 _USBCIF	=	0x6206
                           006207   997 _USBIIE	=	0x6207
                           006209   998 _USBOIE	=	0x6209
                           00620B   999 _USBCIE	=	0x620b
                           00620C  1000 _USBFRML	=	0x620c
                           00620D  1001 _USBFRMH	=	0x620d
                           00620E  1002 _USBINDEX	=	0x620e
                           00620F  1003 _USBCTRL	=	0x620f
                           006210  1004 _USBMAXI	=	0x6210
                           006211  1005 _USBCS0	=	0x6211
                           006211  1006 _USBCSIL	=	0x6211
                           006212  1007 _USBCSIH	=	0x6212
                           006213  1008 _USBMAXO	=	0x6213
                           006214  1009 _USBCSOL	=	0x6214
                           006215  1010 _USBCSOH	=	0x6215
                           006216  1011 _USBCNT0	=	0x6216
                           006216  1012 _USBCNTL	=	0x6216
                           006217  1013 _USBCNTH	=	0x6217
                           006220  1014 _USBF0	=	0x6220
                           006222  1015 _USBF1	=	0x6222
                           006224  1016 _USBF2	=	0x6224
                           006226  1017 _USBF3	=	0x6226
                           006228  1018 _USBF4	=	0x6228
                           00622A  1019 _USBF5	=	0x622a
                           007080  1020 _X_P0	=	0x7080
                           007086  1021 _X_U0CSR	=	0x7086
                           007089  1022 _X_P0IFG	=	0x7089
                           00708A  1023 _X_P1IFG	=	0x708a
                           00708B  1024 _X_P2IFG	=	0x708b
                           00708C  1025 _X_PICTL	=	0x708c
                           00708D  1026 _X_P1IEN	=	0x708d
                           00708F  1027 _X_P0INP	=	0x708f
                           007090  1028 _X_P1	=	0x7090
                           007091  1029 _X_RFIRQF1	=	0x7091
                           007093  1030 _X_MPAGE	=	0x7093
                           007093  1031 _X__XPAGE	=	0x7093
                           007094  1032 _X_T2CTRL	=	0x7094
                           007095  1033 _X_ST0	=	0x7095
                           007096  1034 _X_ST1	=	0x7096
                           007097  1035 _X_ST2	=	0x7097
                           00709C  1036 _X_T2EVTCFG	=	0x709c
                           00709D  1037 _X_SLEEPSTA	=	0x709d
                           00709E  1038 _X_CLKCONSTA	=	0x709e
                           00709F  1039 _X_FMAP	=	0x709f
                           00709F  1040 _X_PSBANK	=	0x709f
                           0070A0  1041 _X_P2	=	0x70a0
                           0070A1  1042 _X_T2IRQF	=	0x70a1
                           0070A2  1043 _X_T2M0	=	0x70a2
                           0070A3  1044 _X_T2M1	=	0x70a3
                           0070A4  1045 _X_T2MOVF0	=	0x70a4
                           0070A5  1046 _X_T2MOVF1	=	0x70a5
                           0070A6  1047 _X_T2MOVF2	=	0x70a6
                           0070A7  1048 _X_T2IRQM	=	0x70a7
                           0070AB  1049 _X_P0IEN	=	0x70ab
                           0070AC  1050 _X_P2IEN	=	0x70ac
                           0070AD  1051 _X_STLOAD	=	0x70ad
                           0070AE  1052 _X_PMUX	=	0x70ae
                           0070AF  1053 _X_T1STAT	=	0x70af
                           0070B1  1054 _X_ENCDI	=	0x70b1
                           0070B2  1055 _X_ENCDO	=	0x70b2
                           0070B3  1056 _X_ENCCS	=	0x70b3
                           0070B4  1057 _X_ADCCON1	=	0x70b4
                           0070B5  1058 _X_ADCCON2	=	0x70b5
                           0070B6  1059 _X_ADCCON3	=	0x70b6
                           0070BA  1060 _X_ADCL	=	0x70ba
                           0070BB  1061 _X_ADCH	=	0x70bb
                           0070BC  1062 _X_RNDL	=	0x70bc
                           0070BD  1063 _X_RNDH	=	0x70bd
                           0070BE  1064 _X_SLEEPCMD	=	0x70be
                           0070BF  1065 _X_RFERRF	=	0x70bf
                           0070C1  1066 _X_U0DBUF	=	0x70c1
                           0070C2  1067 _X_U0BAUD	=	0x70c2
                           0070C3  1068 _X_T2MSEL	=	0x70c3
                           0070C4  1069 _X_U0UCR	=	0x70c4
                           0070C5  1070 _X_U0GCR	=	0x70c5
                           0070C6  1071 _X_CLKCONCMD	=	0x70c6
                           0070C7  1072 _X_MEMCTR	=	0x70c7
                           0070C9  1073 _X_WDCTL	=	0x70c9
                           0070CA  1074 _X_T3CNT	=	0x70ca
                           0070CB  1075 _X_T3CTL	=	0x70cb
                           0070CC  1076 _X_T3CCTL0	=	0x70cc
                           0070CD  1077 _X_T3CC0	=	0x70cd
                           0070CE  1078 _X_T3CCTL1	=	0x70ce
                           0070CF  1079 _X_T3CC1	=	0x70cf
                           0070D1  1080 _X_DMAIRQ	=	0x70d1
                           0070D2  1081 _X_DMA1CFGL	=	0x70d2
                           0070D3  1082 _X_DMA1CFGH	=	0x70d3
                           0070D4  1083 _X_DMA0CFGL	=	0x70d4
                           0070D5  1084 _X_DMA0CFGH	=	0x70d5
                           0070D6  1085 _X_DMAARM	=	0x70d6
                           0070D7  1086 _X_DMAREQ	=	0x70d7
                           0070D8  1087 _X_TIMIF	=	0x70d8
                           0070D9  1088 _X_RFD	=	0x70d9
                           0070DA  1089 _X_T1CC0L	=	0x70da
                           0070DB  1090 _X_T1CC0H	=	0x70db
                           0070DC  1091 _X_T1CC1L	=	0x70dc
                           0070DD  1092 _X_T1CC1H	=	0x70dd
                           0070DE  1093 _X_T1CC2L	=	0x70de
                           0070DF  1094 _X_T1CC2H	=	0x70df
                           0070E1  1095 _X_RFST	=	0x70e1
                           0070E2  1096 _X_T1CNTL	=	0x70e2
                           0070E3  1097 _X_T1CNTH	=	0x70e3
                           0070E4  1098 _X_T1CTL	=	0x70e4
                           0070E5  1099 _X_T1CCTL0	=	0x70e5
                           0070E6  1100 _X_T1CCTL1	=	0x70e6
                           0070E7  1101 _X_T1CCTL2	=	0x70e7
                           0070E9  1102 _X_RFIRQF0	=	0x70e9
                           0070EA  1103 _X_T4CNT	=	0x70ea
                           0070EB  1104 _X_T4CTL	=	0x70eb
                           0070EC  1105 _X_T4CCTL0	=	0x70ec
                           0070ED  1106 _X_T4CC0	=	0x70ed
                           0070EE  1107 _X_T4CCTL1	=	0x70ee
                           0070EF  1108 _X_T4CC1	=	0x70ef
                           0070F1  1109 _X_PERCFG	=	0x70f1
                           0070F2  1110 _X_APCFG	=	0x70f2
                           0070F3  1111 _X_P0SEL	=	0x70f3
                           0070F4  1112 _X_P1SEL	=	0x70f4
                           0070F5  1113 _X_P2SEL	=	0x70f5
                           0070F6  1114 _X_P1INP	=	0x70f6
                           0070F7  1115 _X_P2INP	=	0x70f7
                           0070F8  1116 _X_U1CSR	=	0x70f8
                           0070F9  1117 _X_U1DBUF	=	0x70f9
                           0070FA  1118 _X_U1BAUD	=	0x70fa
                           0070FB  1119 _X_U1UCR	=	0x70fb
                           0070FC  1120 _X_U1GCR	=	0x70fc
                           0070FD  1121 _X_P0DIR	=	0x70fd
                           0070FE  1122 _X_P1DIR	=	0x70fe
                           0070FF  1123 _X_P2DIR	=	0x70ff
                           007800  1124 _X_INFOPAGE	=	0x7800
                           00780C  1125 _X_IEEE_ADDR	=	0x780c
      000000                       1126 _elfloader_unknown::
      000000                       1127 	.ds 30
      00001E                       1128 _elfloader_autostart_processes::
      00001E                       1129 	.ds 3
      000021                       1130 _bss:
      000021                       1131 	.ds 6
      000027                       1132 _data:
      000027                       1133 	.ds 6
      00002D                       1134 _rodata:
      00002D                       1135 	.ds 6
      000033                       1136 _text:
      000033                       1137 	.ds 6
                                   1138 ;--------------------------------------------------------
                                   1139 ; absolute external ram data
                                   1140 ;--------------------------------------------------------
                                   1141 	.area XABS    (ABS,XDATA)
                                   1142 ;--------------------------------------------------------
                                   1143 ; external initialized ram data
                                   1144 ;--------------------------------------------------------
                                   1145 	.area XISEG   (XDATA)
                                   1146 	.area HOME    (CODE)
                                   1147 	.area GSINIT0 (CODE)
                                   1148 	.area GSINIT1 (CODE)
                                   1149 	.area GSINIT2 (CODE)
                                   1150 	.area GSINIT3 (CODE)
                                   1151 	.area GSINIT4 (CODE)
                                   1152 	.area GSINIT5 (CODE)
                                   1153 	.area GSINIT  (CODE)
                                   1154 	.area GSFINAL (CODE)
                                   1155 	.area CSEG    (CODE)
                                   1156 ;--------------------------------------------------------
                                   1157 ; global & static initialisations
                                   1158 ;--------------------------------------------------------
                                   1159 	.area HOME    (CODE)
                                   1160 	.area GSINIT  (CODE)
                                   1161 	.area GSFINAL (CODE)
                                   1162 	.area GSINIT  (CODE)
                                   1163 ;--------------------------------------------------------
                                   1164 ; Home
                                   1165 ;--------------------------------------------------------
                                   1166 	.area HOME    (CODE)
                                   1167 	.area HOME    (CODE)
                                   1168 ;--------------------------------------------------------
                                   1169 ; code
                                   1170 ;--------------------------------------------------------
                                   1171 	.area BANK1   (CODE)
                                   1172 ;------------------------------------------------------------
                                   1173 ;Allocation info for local variables in function 'seek_read'
                                   1174 ;------------------------------------------------------------
                                   1175 ;offset                    Allocated to stack - sp -4
                                   1176 ;buf                       Allocated to stack - sp -7
                                   1177 ;len                       Allocated to stack - sp -9
                                   1178 ;fd                        Allocated to registers r6 r7 
                                   1179 ;------------------------------------------------------------
                                   1180 ;	../../../core/loader/elfloader.c:149: seek_read(int fd, unsigned int offset, char *buf, int len)
                                   1181 ;	-----------------------------------------
                                   1182 ;	 function seek_read
                                   1183 ;	-----------------------------------------
      000000                       1184 _seek_read:
                           000007  1185 	ar7 = 0x07
                           000006  1186 	ar6 = 0x06
                           000005  1187 	ar5 = 0x05
                           000004  1188 	ar4 = 0x04
                           000003  1189 	ar3 = 0x03
                           000002  1190 	ar2 = 0x02
                           000001  1191 	ar1 = 0x01
                           000000  1192 	ar0 = 0x00
      000000 AE 82            [24] 1193 	mov	r6,dpl
      000002 AF 83            [24] 1194 	mov	r7,dph
                                   1195 ;	../../../core/loader/elfloader.c:151: cfs_seek(fd, offset, CFS_SEEK_SET);
      000004 C0 07            [24] 1196 	push	ar7
      000006 C0 06            [24] 1197 	push	ar6
      000008 E4               [12] 1198 	clr	a
      000009 C0 E0            [24] 1199 	push	acc
      00000B C0 E0            [24] 1200 	push	acc
      00000D E5 81            [12] 1201 	mov	a,sp
      00000F 24 F8            [12] 1202 	add	a,#0xf8
      000011 F8               [12] 1203 	mov	r0,a
      000012 E6               [12] 1204 	mov	a,@r0
      000013 C0 E0            [24] 1205 	push	acc
      000015 08               [12] 1206 	inc	r0
      000016 E6               [12] 1207 	mov	a,@r0
      000017 C0 E0            [24] 1208 	push	acc
      000019 8E 82            [24] 1209 	mov	dpl,r6
      00001B 8F 83            [24] 1210 	mov	dph,r7
      00001D 78r00            [12] 1211 	mov	r0,#_cfs_seek
      00001F 79s00            [12] 1212 	mov	r1,#(_cfs_seek >> 8)
      000021 7As00            [12] 1213 	mov	r2,#(_cfs_seek >> 16)
      000023 12r00r00         [24] 1214 	lcall	__sdcc_banked_call
      000026 E5 81            [12] 1215 	mov	a,sp
      000028 24 FC            [12] 1216 	add	a,#0xfc
      00002A F5 81            [12] 1217 	mov	sp,a
      00002C D0 06            [24] 1218 	pop	ar6
      00002E D0 07            [24] 1219 	pop	ar7
                                   1220 ;	../../../core/loader/elfloader.c:152: cfs_read(fd, buf, len);
      000030 E5 81            [12] 1221 	mov	a,sp
      000032 24 F9            [12] 1222 	add	a,#0xf9
      000034 F8               [12] 1223 	mov	r0,a
      000035 86 03            [24] 1224 	mov	ar3,@r0
      000037 08               [12] 1225 	inc	r0
      000038 86 04            [24] 1226 	mov	ar4,@r0
      00003A 08               [12] 1227 	inc	r0
      00003B 86 05            [24] 1228 	mov	ar5,@r0
      00003D E5 81            [12] 1229 	mov	a,sp
      00003F 24 F7            [12] 1230 	add	a,#0xf7
      000041 F8               [12] 1231 	mov	r0,a
      000042 E6               [12] 1232 	mov	a,@r0
      000043 C0 E0            [24] 1233 	push	acc
      000045 08               [12] 1234 	inc	r0
      000046 E6               [12] 1235 	mov	a,@r0
      000047 C0 E0            [24] 1236 	push	acc
      000049 C0 03            [24] 1237 	push	ar3
      00004B C0 04            [24] 1238 	push	ar4
      00004D C0 05            [24] 1239 	push	ar5
      00004F 8E 82            [24] 1240 	mov	dpl,r6
      000051 8F 83            [24] 1241 	mov	dph,r7
      000053 78r00            [12] 1242 	mov	r0,#_cfs_read
      000055 79s00            [12] 1243 	mov	r1,#(_cfs_read >> 8)
      000057 7As00            [12] 1244 	mov	r2,#(_cfs_read >> 16)
      000059 12r00r00         [24] 1245 	lcall	__sdcc_banked_call
      00005C E5 81            [12] 1246 	mov	a,sp
      00005E 24 FB            [12] 1247 	add	a,#0xfb
      000060 F5 81            [12] 1248 	mov	sp,a
                                   1249 ;	../../../core/loader/elfloader.c:164: }
      000062 02r00r00         [24] 1250 	ljmp	__sdcc_banked_ret
                                   1251 ;------------------------------------------------------------
                                   1252 ;Allocation info for local variables in function 'find_local_symbol'
                                   1253 ;------------------------------------------------------------
                                   1254 ;symbol                    Allocated to stack - sp -65
                                   1255 ;symtab                    Allocated to stack - sp -67
                                   1256 ;symtabsize                Allocated to stack - sp -69
                                   1257 ;strtab                    Allocated to stack - sp -71
                                   1258 ;fd                        Allocated to stack - sp -59
                                   1259 ;s                         Allocated to stack - sp -45
                                   1260 ;a                         Allocated to registers 
                                   1261 ;name                      Allocated to stack - sp -29
                                   1262 ;sect                      Allocated to registers r2 r6 r7 
                                   1263 ;sloc0                     Allocated to stack - sp -57
                                   1264 ;sloc1                     Allocated to stack - sp -55
                                   1265 ;sloc2                     Allocated to stack - sp -53
                                   1266 ;sloc3                     Allocated to stack - sp -49
                                   1267 ;sloc4                     Allocated to stack - sp -48
                                   1268 ;------------------------------------------------------------
                                   1269 ;	../../../core/loader/elfloader.c:176: find_local_symbol(int fd, const char *symbol,
                                   1270 ;	-----------------------------------------
                                   1271 ;	 function find_local_symbol
                                   1272 ;	-----------------------------------------
      000065                       1273 _find_local_symbol:
      000065 C0 82            [24] 1274 	push	dpl
      000067 C0 83            [24] 1275 	push	dph
      000069 E5 81            [12] 1276 	mov	a,sp
      00006B 24 3A            [12] 1277 	add	a,#0x3a
                                   1278 ;	../../../core/loader/elfloader.c:185: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
      00006D F5 81            [12] 1279 	mov	sp,a
      00006F 24 BD            [12] 1280 	add	a,#0xbd
      000071 F8               [12] 1281 	mov	r0,a
      000072 86 04            [24] 1282 	mov	ar4,@r0
      000074 08               [12] 1283 	inc	r0
      000075 86 05            [24] 1284 	mov	ar5,@r0
      000077 E5 81            [12] 1285 	mov	a,sp
      000079 24 E3            [12] 1286 	add	a,#0xe3
      00007B FB               [12] 1287 	mov	r3,a
      00007C E5 81            [12] 1288 	mov	a,sp
      00007E 24 B9            [12] 1289 	add	a,#0xb9
      000080 F8               [12] 1290 	mov	r0,a
      000081 E5 81            [12] 1291 	mov	a,sp
      000083 24 C7            [12] 1292 	add	a,#0xc7
      000085 F9               [12] 1293 	mov	r1,a
      000086 E6               [12] 1294 	mov	a,@r0
      000087 F7               [12] 1295 	mov	@r1,a
      000088 08               [12] 1296 	inc	r0
      000089 09               [12] 1297 	inc	r1
      00008A E6               [12] 1298 	mov	a,@r0
      00008B F7               [12] 1299 	mov	@r1,a
      00008C E5 81            [12] 1300 	mov	a,sp
      00008E 24 CF            [12] 1301 	add	a,#0xcf
      000090 F8               [12] 1302 	mov	r0,a
      000091 A6 03            [24] 1303 	mov	@r0,ar3
      000093                       1304 00116$:
      000093 E5 81            [12] 1305 	mov	a,sp
      000095 24 BD            [12] 1306 	add	a,#0xbd
      000097 F8               [12] 1307 	mov	r0,a
      000098 86 02            [24] 1308 	mov	ar2,@r0
      00009A 08               [12] 1309 	inc	r0
      00009B 86 07            [24] 1310 	mov	ar7,@r0
      00009D E5 81            [12] 1311 	mov	a,sp
      00009F 24 BB            [12] 1312 	add	a,#0xbb
      0000A1 F8               [12] 1313 	mov	r0,a
      0000A2 E5 81            [12] 1314 	mov	a,sp
      0000A4 24 C9            [12] 1315 	add	a,#0xc9
      0000A6 F9               [12] 1316 	mov	r1,a
      0000A7 E6               [12] 1317 	mov	a,@r0
      0000A8 2A               [12] 1318 	add	a,r2
      0000A9 F7               [12] 1319 	mov	@r1,a
      0000AA 08               [12] 1320 	inc	r0
      0000AB E6               [12] 1321 	mov	a,@r0
      0000AC 3F               [12] 1322 	addc	a,r7
      0000AD 09               [12] 1323 	inc	r1
      0000AE F7               [12] 1324 	mov	@r1,a
      0000AF 8C 06            [24] 1325 	mov	ar6,r4
      0000B1 8D 07            [24] 1326 	mov	ar7,r5
      0000B3 E5 81            [12] 1327 	mov	a,sp
      0000B5 24 C9            [12] 1328 	add	a,#0xc9
      0000B7 F8               [12] 1329 	mov	r0,a
      0000B8 C3               [12] 1330 	clr	c
      0000B9 EE               [12] 1331 	mov	a,r6
      0000BA 96               [12] 1332 	subb	a,@r0
      0000BB EF               [12] 1333 	mov	a,r7
      0000BC 08               [12] 1334 	inc	r0
      0000BD 96               [12] 1335 	subb	a,@r0
      0000BE 40 03            [24] 1336 	jc	00148$
      0000C0 02r02rA8         [24] 1337 	ljmp	00114$
      0000C3                       1338 00148$:
                                   1339 ;	../../../core/loader/elfloader.c:186: seek_read(fd, a, (char *)&s, sizeof(s));
      0000C3 E5 81            [12] 1340 	mov	a,sp
      0000C5 24 D3            [12] 1341 	add	a,#0xd3
      0000C7 F9               [12] 1342 	mov	r1,a
      0000C8 FA               [12] 1343 	mov	r2,a
      0000C9 7E 00            [12] 1344 	mov	r6,#0x00
      0000CB 7F 40            [12] 1345 	mov	r7,#0x40
      0000CD C0 05            [24] 1346 	push	ar5
      0000CF C0 04            [24] 1347 	push	ar4
      0000D1 C0 03            [24] 1348 	push	ar3
      0000D3 C0 01            [24] 1349 	push	ar1
      0000D5 74 10            [12] 1350 	mov	a,#0x10
      0000D7 C0 E0            [24] 1351 	push	acc
      0000D9 E4               [12] 1352 	clr	a
      0000DA C0 E0            [24] 1353 	push	acc
      0000DC C0 02            [24] 1354 	push	ar2
      0000DE C0 06            [24] 1355 	push	ar6
      0000E0 C0 07            [24] 1356 	push	ar7
      0000E2 C0 04            [24] 1357 	push	ar4
      0000E4 C0 05            [24] 1358 	push	ar5
      0000E6 E5 81            [12] 1359 	mov	a,sp
      0000E8 24 BA            [12] 1360 	add	a,#0xba
      0000EA F8               [12] 1361 	mov	r0,a
      0000EB 86 82            [24] 1362 	mov	dpl,@r0
      0000ED 08               [12] 1363 	inc	r0
      0000EE 86 83            [24] 1364 	mov	dph,@r0
      0000F0 78r00            [12] 1365 	mov	r0,#_seek_read
      0000F2 79s00            [12] 1366 	mov	r1,#(_seek_read >> 8)
      0000F4 7As00            [12] 1367 	mov	r2,#(_seek_read >> 16)
      0000F6 12r00r00         [24] 1368 	lcall	__sdcc_banked_call
      0000F9 E5 81            [12] 1369 	mov	a,sp
      0000FB 24 F9            [12] 1370 	add	a,#0xf9
      0000FD F5 81            [12] 1371 	mov	sp,a
      0000FF D0 01            [24] 1372 	pop	ar1
      000101 D0 03            [24] 1373 	pop	ar3
      000103 D0 04            [24] 1374 	pop	ar4
      000105 D0 05            [24] 1375 	pop	ar5
                                   1376 ;	../../../core/loader/elfloader.c:188: if(s.st_name != 0) {
      000107 E5 81            [12] 1377 	mov	a,sp
      000109 24 CB            [12] 1378 	add	a,#0xcb
      00010B F8               [12] 1379 	mov	r0,a
      00010C E7               [12] 1380 	mov	a,@r1
      00010D F6               [12] 1381 	mov	@r0,a
      00010E 09               [12] 1382 	inc	r1
      00010F E7               [12] 1383 	mov	a,@r1
      000110 08               [12] 1384 	inc	r0
      000111 F6               [12] 1385 	mov	@r0,a
      000112 09               [12] 1386 	inc	r1
      000113 E7               [12] 1387 	mov	a,@r1
      000114 08               [12] 1388 	inc	r0
      000115 F6               [12] 1389 	mov	@r0,a
      000116 09               [12] 1390 	inc	r1
      000117 E7               [12] 1391 	mov	a,@r1
      000118 08               [12] 1392 	inc	r0
      000119 F6               [12] 1393 	mov	@r0,a
      00011A 19               [12] 1394 	dec	r1
      00011B 19               [12] 1395 	dec	r1
      00011C 19               [12] 1396 	dec	r1
      00011D E5 81            [12] 1397 	mov	a,sp
      00011F 24 CB            [12] 1398 	add	a,#0xcb
      000121 F8               [12] 1399 	mov	r0,a
      000122 E6               [12] 1400 	mov	a,@r0
      000123 08               [12] 1401 	inc	r0
      000124 46               [12] 1402 	orl	a,@r0
      000125 08               [12] 1403 	inc	r0
      000126 46               [12] 1404 	orl	a,@r0
      000127 08               [12] 1405 	inc	r0
      000128 46               [12] 1406 	orl	a,@r0
      000129 70 03            [24] 1407 	jnz	00149$
      00012B 02r02r9E         [24] 1408 	ljmp	00117$
      00012E                       1409 00149$:
                                   1410 ;	../../../core/loader/elfloader.c:189: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      00012E C0 01            [24] 1411 	push	ar1
      000130 E5 81            [12] 1412 	mov	a,sp
      000132 24 CF            [12] 1413 	add	a,#0xcf
      000134 F8               [12] 1414 	mov	r0,a
      000135 A6 03            [24] 1415 	mov	@r0,ar3
      000137 08               [12] 1416 	inc	r0
      000138 76 00            [12] 1417 	mov	@r0,#0x00
      00013A 08               [12] 1418 	inc	r0
      00013B 76 40            [12] 1419 	mov	@r0,#0x40
      00013D E5 81            [12] 1420 	mov	a,sp
      00013F 24 CA            [12] 1421 	add	a,#0xca
      000141 F8               [12] 1422 	mov	r0,a
      000142 86 06            [24] 1423 	mov	ar6,@r0
      000144 08               [12] 1424 	inc	r0
      000145 86 07            [24] 1425 	mov	ar7,@r0
      000147 E5 81            [12] 1426 	mov	a,sp
      000149 24 C6            [12] 1427 	add	a,#0xc6
      00014B F8               [12] 1428 	mov	r0,a
      00014C EE               [12] 1429 	mov	a,r6
      00014D 26               [12] 1430 	add	a,@r0
      00014E FE               [12] 1431 	mov	r6,a
      00014F EF               [12] 1432 	mov	a,r7
      000150 08               [12] 1433 	inc	r0
      000151 36               [12] 1434 	addc	a,@r0
      000152 FF               [12] 1435 	mov	r7,a
      000153 C0 05            [24] 1436 	push	ar5
      000155 C0 04            [24] 1437 	push	ar4
      000157 C0 03            [24] 1438 	push	ar3
      000159 C0 01            [24] 1439 	push	ar1
      00015B 74 1E            [12] 1440 	mov	a,#0x1e
      00015D C0 E0            [24] 1441 	push	acc
      00015F E4               [12] 1442 	clr	a
      000160 C0 E0            [24] 1443 	push	acc
      000162 E5 81            [12] 1444 	mov	a,sp
      000164 24 C9            [12] 1445 	add	a,#0xc9
      000166 F8               [12] 1446 	mov	r0,a
      000167 E6               [12] 1447 	mov	a,@r0
      000168 C0 E0            [24] 1448 	push	acc
      00016A 08               [12] 1449 	inc	r0
      00016B E6               [12] 1450 	mov	a,@r0
      00016C C0 E0            [24] 1451 	push	acc
      00016E 08               [12] 1452 	inc	r0
      00016F E6               [12] 1453 	mov	a,@r0
      000170 C0 E0            [24] 1454 	push	acc
      000172 C0 06            [24] 1455 	push	ar6
      000174 C0 07            [24] 1456 	push	ar7
      000176 E5 81            [12] 1457 	mov	a,sp
      000178 24 B9            [12] 1458 	add	a,#0xb9
      00017A F8               [12] 1459 	mov	r0,a
      00017B 86 82            [24] 1460 	mov	dpl,@r0
      00017D 08               [12] 1461 	inc	r0
      00017E 86 83            [24] 1462 	mov	dph,@r0
      000180 78r00            [12] 1463 	mov	r0,#_seek_read
      000182 79s00            [12] 1464 	mov	r1,#(_seek_read >> 8)
      000184 7As00            [12] 1465 	mov	r2,#(_seek_read >> 16)
      000186 12r00r00         [24] 1466 	lcall	__sdcc_banked_call
      000189 E5 81            [12] 1467 	mov	a,sp
      00018B 24 F9            [12] 1468 	add	a,#0xf9
      00018D F5 81            [12] 1469 	mov	sp,a
      00018F D0 01            [24] 1470 	pop	ar1
      000191 D0 03            [24] 1471 	pop	ar3
      000193 D0 04            [24] 1472 	pop	ar4
      000195 D0 05            [24] 1473 	pop	ar5
                                   1474 ;	../../../core/loader/elfloader.c:190: if(strcmp(name, symbol) == 0) {
      000197 E5 81            [12] 1475 	mov	a,sp
      000199 24 CE            [12] 1476 	add	a,#0xce
      00019B F8               [12] 1477 	mov	r0,a
      00019C 86 02            [24] 1478 	mov	ar2,@r0
      00019E 7E 00            [12] 1479 	mov	r6,#0x00
      0001A0 7F 40            [12] 1480 	mov	r7,#0x40
      0001A2 C0 05            [24] 1481 	push	ar5
      0001A4 C0 04            [24] 1482 	push	ar4
      0001A6 C0 03            [24] 1483 	push	ar3
      0001A8 C0 01            [24] 1484 	push	ar1
      0001AA E5 81            [12] 1485 	mov	a,sp
      0001AC 24 BA            [12] 1486 	add	a,#0xba
      0001AE F8               [12] 1487 	mov	r0,a
      0001AF E6               [12] 1488 	mov	a,@r0
      0001B0 C0 E0            [24] 1489 	push	acc
      0001B2 08               [12] 1490 	inc	r0
      0001B3 E6               [12] 1491 	mov	a,@r0
      0001B4 C0 E0            [24] 1492 	push	acc
      0001B6 08               [12] 1493 	inc	r0
      0001B7 E6               [12] 1494 	mov	a,@r0
      0001B8 C0 E0            [24] 1495 	push	acc
      0001BA 8A 82            [24] 1496 	mov	dpl,r2
      0001BC 8E 83            [24] 1497 	mov	dph,r6
      0001BE 8F F0            [24] 1498 	mov	b,r7
      0001C0 78r00            [12] 1499 	mov	r0,#_strcmp
      0001C2 79s00            [12] 1500 	mov	r1,#(_strcmp >> 8)
      0001C4 7As00            [12] 1501 	mov	r2,#(_strcmp >> 16)
      0001C6 12r00r00         [24] 1502 	lcall	__sdcc_banked_call
      0001C9 AE 82            [24] 1503 	mov	r6,dpl
      0001CB AF 83            [24] 1504 	mov	r7,dph
      0001CD 15 81            [12] 1505 	dec	sp
      0001CF 15 81            [12] 1506 	dec	sp
      0001D1 15 81            [12] 1507 	dec	sp
      0001D3 D0 01            [24] 1508 	pop	ar1
      0001D5 D0 03            [24] 1509 	pop	ar3
      0001D7 D0 04            [24] 1510 	pop	ar4
      0001D9 D0 05            [24] 1511 	pop	ar5
      0001DB D0 01            [24] 1512 	pop	ar1
      0001DD EE               [12] 1513 	mov	a,r6
      0001DE 4F               [12] 1514 	orl	a,r7
      0001DF 60 03            [24] 1515 	jz	00150$
      0001E1 02r02r9E         [24] 1516 	ljmp	00117$
      0001E4                       1517 00150$:
                                   1518 ;	../../../core/loader/elfloader.c:191: if(s.st_shndx == bss.number) {
      0001E4 74 0E            [12] 1519 	mov	a,#0x0e
      0001E6 29               [12] 1520 	add	a,r1
      0001E7 F8               [12] 1521 	mov	r0,a
      0001E8 86 06            [24] 1522 	mov	ar6,@r0
      0001EA 08               [12] 1523 	inc	r0
      0001EB 86 05            [24] 1524 	mov	ar5,@r0
      0001ED 90r00r21         [24] 1525 	mov	dptr,#_bss
      0001F0 E0               [24] 1526 	movx	a,@dptr
      0001F1 FA               [12] 1527 	mov	r2,a
      0001F2 C0 01            [24] 1528 	push	ar1
      0001F4 7F 00            [12] 1529 	mov	r7,#0x00
      0001F6 EE               [12] 1530 	mov	a,r6
      0001F7 B5 02 06         [24] 1531 	cjne	a,ar2,00151$
      0001FA ED               [12] 1532 	mov	a,r5
      0001FB B5 07 02         [24] 1533 	cjne	a,ar7,00151$
      0001FE 80 04            [24] 1534 	sjmp	00152$
      000200                       1535 00151$:
      000200 D0 01            [24] 1536 	pop	ar1
      000202 80 0A            [24] 1537 	sjmp	00108$
      000204                       1538 00152$:
      000204 D0 01            [24] 1539 	pop	ar1
                                   1540 ;	../../../core/loader/elfloader.c:192: sect = &bss;
      000206 7Ar21            [12] 1541 	mov	r2,#_bss
      000208 7Es00            [12] 1542 	mov	r6,#(_bss >> 8)
      00020A 7F 00            [12] 1543 	mov	r7,#0x00
      00020C 80 4A            [24] 1544 	sjmp	00109$
      00020E                       1545 00108$:
                                   1546 ;	../../../core/loader/elfloader.c:193: } else if(s.st_shndx == data.number) {
      00020E C0 01            [24] 1547 	push	ar1
      000210 90r00r27         [24] 1548 	mov	dptr,#_data
      000213 E0               [24] 1549 	movx	a,@dptr
      000214 FF               [12] 1550 	mov	r7,a
      000215 7C 00            [12] 1551 	mov	r4,#0x00
      000217 EE               [12] 1552 	mov	a,r6
      000218 B5 07 06         [24] 1553 	cjne	a,ar7,00153$
      00021B ED               [12] 1554 	mov	a,r5
      00021C B5 04 02         [24] 1555 	cjne	a,ar4,00153$
      00021F 80 04            [24] 1556 	sjmp	00154$
      000221                       1557 00153$:
      000221 D0 01            [24] 1558 	pop	ar1
      000223 80 0A            [24] 1559 	sjmp	00105$
      000225                       1560 00154$:
      000225 D0 01            [24] 1561 	pop	ar1
                                   1562 ;	../../../core/loader/elfloader.c:194: sect = &data;
      000227 7Ar27            [12] 1563 	mov	r2,#_data
      000229 7Es00            [12] 1564 	mov	r6,#(_data >> 8)
      00022B 7F 00            [12] 1565 	mov	r7,#0x00
      00022D 80 29            [24] 1566 	sjmp	00109$
      00022F                       1567 00105$:
                                   1568 ;	../../../core/loader/elfloader.c:195: } else if(s.st_shndx == text.number) {
      00022F C0 01            [24] 1569 	push	ar1
      000231 90r00r33         [24] 1570 	mov	dptr,#_text
      000234 E0               [24] 1571 	movx	a,@dptr
      000235 FF               [12] 1572 	mov	r7,a
      000236 7C 00            [12] 1573 	mov	r4,#0x00
      000238 EE               [12] 1574 	mov	a,r6
      000239 B5 07 06         [24] 1575 	cjne	a,ar7,00155$
      00023C ED               [12] 1576 	mov	a,r5
      00023D B5 04 02         [24] 1577 	cjne	a,ar4,00155$
      000240 80 04            [24] 1578 	sjmp	00156$
      000242                       1579 00155$:
      000242 D0 01            [24] 1580 	pop	ar1
      000244 80 0A            [24] 1581 	sjmp	00102$
      000246                       1582 00156$:
      000246 D0 01            [24] 1583 	pop	ar1
                                   1584 ;	../../../core/loader/elfloader.c:196: sect = &text;
      000248 7Ar33            [12] 1585 	mov	r2,#_text
      00024A 7Es00            [12] 1586 	mov	r6,#(_text >> 8)
      00024C 7F 00            [12] 1587 	mov	r7,#0x00
      00024E 80 08            [24] 1588 	sjmp	00109$
      000250                       1589 00102$:
                                   1590 ;	../../../core/loader/elfloader.c:198: return NULL;
      000250 90 00 00         [24] 1591 	mov	dptr,#0x0000
      000253 75 F0 00         [24] 1592 	mov	b,#0x00
      000256 80 56            [24] 1593 	sjmp	00118$
      000258                       1594 00109$:
                                   1595 ;	../../../core/loader/elfloader.c:200: return &(sect->address[s.st_value]);
      000258 74 03            [12] 1596 	mov	a,#0x03
      00025A 2A               [12] 1597 	add	a,r2
      00025B FA               [12] 1598 	mov	r2,a
      00025C E4               [12] 1599 	clr	a
      00025D 3E               [12] 1600 	addc	a,r6
      00025E FE               [12] 1601 	mov	r6,a
      00025F 8A 82            [24] 1602 	mov	dpl,r2
      000261 8E 83            [24] 1603 	mov	dph,r6
      000263 8F F0            [24] 1604 	mov	b,r7
      000265 12r00r00         [24] 1605 	lcall	__gptrget
      000268 FD               [12] 1606 	mov	r5,a
      000269 A3               [24] 1607 	inc	dptr
      00026A 12r00r00         [24] 1608 	lcall	__gptrget
      00026D FE               [12] 1609 	mov	r6,a
      00026E A3               [24] 1610 	inc	dptr
      00026F 12r00r00         [24] 1611 	lcall	__gptrget
      000272 FF               [12] 1612 	mov	r7,a
      000273 E9               [12] 1613 	mov	a,r1
      000274 24 04            [12] 1614 	add	a,#0x04
      000276 F9               [12] 1615 	mov	r1,a
      000277 E5 81            [12] 1616 	mov	a,sp
      000279 24 CB            [12] 1617 	add	a,#0xcb
      00027B F8               [12] 1618 	mov	r0,a
      00027C E7               [12] 1619 	mov	a,@r1
      00027D F6               [12] 1620 	mov	@r0,a
      00027E 09               [12] 1621 	inc	r1
      00027F E7               [12] 1622 	mov	a,@r1
      000280 08               [12] 1623 	inc	r0
      000281 F6               [12] 1624 	mov	@r0,a
      000282 09               [12] 1625 	inc	r1
      000283 E7               [12] 1626 	mov	a,@r1
      000284 08               [12] 1627 	inc	r0
      000285 F6               [12] 1628 	mov	@r0,a
      000286 09               [12] 1629 	inc	r1
      000287 E7               [12] 1630 	mov	a,@r1
      000288 08               [12] 1631 	inc	r0
      000289 F6               [12] 1632 	mov	@r0,a
      00028A E5 81            [12] 1633 	mov	a,sp
      00028C 24 CB            [12] 1634 	add	a,#0xcb
      00028E F8               [12] 1635 	mov	r0,a
      00028F E6               [12] 1636 	mov	a,@r0
      000290 2D               [12] 1637 	add	a,r5
      000291 FA               [12] 1638 	mov	r2,a
      000292 08               [12] 1639 	inc	r0
      000293 E6               [12] 1640 	mov	a,@r0
      000294 3E               [12] 1641 	addc	a,r6
      000295 FE               [12] 1642 	mov	r6,a
      000296 8A 82            [24] 1643 	mov	dpl,r2
      000298 8E 83            [24] 1644 	mov	dph,r6
      00029A 8F F0            [24] 1645 	mov	b,r7
      00029C 80 10            [24] 1646 	sjmp	00118$
      00029E                       1647 00117$:
                                   1648 ;	../../../core/loader/elfloader.c:185: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
      00029E 74 10            [12] 1649 	mov	a,#0x10
      0002A0 2C               [12] 1650 	add	a,r4
      0002A1 FC               [12] 1651 	mov	r4,a
      0002A2 E4               [12] 1652 	clr	a
      0002A3 3D               [12] 1653 	addc	a,r5
      0002A4 FD               [12] 1654 	mov	r5,a
      0002A5 02r00r93         [24] 1655 	ljmp	00116$
      0002A8                       1656 00114$:
                                   1657 ;	../../../core/loader/elfloader.c:204: return NULL;
      0002A8 90 00 00         [24] 1658 	mov	dptr,#0x0000
      0002AB 75 F0 00         [24] 1659 	mov	b,#0x00
      0002AE                       1660 00118$:
                                   1661 ;	../../../core/loader/elfloader.c:205: }
      0002AE E5 81            [12] 1662 	mov	a,sp
      0002B0 24 C4            [12] 1663 	add	a,#0xc4
      0002B2 F5 81            [12] 1664 	mov	sp,a
      0002B4 02r00r00         [24] 1665 	ljmp	__sdcc_banked_ret
                                   1666 ;------------------------------------------------------------
                                   1667 ;Allocation info for local variables in function 'relocate_section'
                                   1668 ;------------------------------------------------------------
                                   1669 ;section                   Allocated to stack - sp -82
                                   1670 ;size                      Allocated to stack - sp -84
                                   1671 ;sectionaddr               Allocated to stack - sp -86
                                   1672 ;sectionbase               Allocated to stack - sp -89
                                   1673 ;strs                      Allocated to stack - sp -91
                                   1674 ;strtab                    Allocated to stack - sp -93
                                   1675 ;symtab                    Allocated to stack - sp -95
                                   1676 ;symtabsize                Allocated to stack - sp -97
                                   1677 ;using_relas               Allocated to stack - sp -98
                                   1678 ;fd                        Allocated to stack - sp -77
                                   1679 ;rela                      Allocated to stack - sp -64
                                   1680 ;rel_size                  Allocated to stack - sp -52
                                   1681 ;s                         Allocated to stack - sp -50
                                   1682 ;a                         Allocated to stack - sp -34
                                   1683 ;name                      Allocated to stack - sp -32
                                   1684 ;addr                      Allocated to stack - sp -2
                                   1685 ;sect                      Allocated to registers r2 r3 r4 
                                   1686 ;sloc0                     Allocated to stack - sp -75
                                   1687 ;sloc1                     Allocated to stack - sp -73
                                   1688 ;sloc2                     Allocated to stack - sp -70
                                   1689 ;sloc3                     Allocated to stack - sp -68
                                   1690 ;sloc4                     Allocated to stack - sp +4
                                   1691 ;------------------------------------------------------------
                                   1692 ;	../../../core/loader/elfloader.c:208: relocate_section(int fd,
                                   1693 ;	-----------------------------------------
                                   1694 ;	 function relocate_section
                                   1695 ;	-----------------------------------------
      0002B7                       1696 _relocate_section:
      0002B7 C0 82            [24] 1697 	push	dpl
      0002B9 C0 83            [24] 1698 	push	dph
      0002BB E5 81            [12] 1699 	mov	a,sp
      0002BD 24 4C            [12] 1700 	add	a,#0x4c
                                   1701 ;	../../../core/loader/elfloader.c:227: if(using_relas) {
      0002BF F5 81            [12] 1702 	mov	sp,a
      0002C1 24 9E            [12] 1703 	add	a,#0x9e
      0002C3 F8               [12] 1704 	mov	r0,a
      0002C4 E6               [12] 1705 	mov	a,@r0
      0002C5 60 0C            [24] 1706 	jz	00102$
                                   1707 ;	../../../core/loader/elfloader.c:228: rel_size = sizeof(struct elf32_rela);
      0002C7 E5 81            [12] 1708 	mov	a,sp
      0002C9 24 CC            [12] 1709 	add	a,#0xcc
      0002CB F8               [12] 1710 	mov	r0,a
      0002CC 76 0C            [12] 1711 	mov	@r0,#0x0c
      0002CE 08               [12] 1712 	inc	r0
      0002CF 76 00            [12] 1713 	mov	@r0,#0x00
      0002D1 80 0A            [24] 1714 	sjmp	00103$
      0002D3                       1715 00102$:
                                   1716 ;	../../../core/loader/elfloader.c:230: rel_size = sizeof(struct elf32_rel);
      0002D3 E5 81            [12] 1717 	mov	a,sp
      0002D5 24 CC            [12] 1718 	add	a,#0xcc
      0002D7 F8               [12] 1719 	mov	r0,a
      0002D8 76 08            [12] 1720 	mov	@r0,#0x08
      0002DA 08               [12] 1721 	inc	r0
      0002DB 76 00            [12] 1722 	mov	@r0,#0x00
      0002DD                       1723 00103$:
                                   1724 ;	../../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      0002DD E5 81            [12] 1725 	mov	a,sp
      0002DF 24 AE            [12] 1726 	add	a,#0xae
      0002E1 F8               [12] 1727 	mov	r0,a
      0002E2 E5 81            [12] 1728 	mov	a,sp
      0002E4 24 DE            [12] 1729 	add	a,#0xde
      0002E6 F9               [12] 1730 	mov	r1,a
      0002E7 E6               [12] 1731 	mov	a,@r0
      0002E8 F7               [12] 1732 	mov	@r1,a
      0002E9 08               [12] 1733 	inc	r0
      0002EA 09               [12] 1734 	inc	r1
      0002EB E6               [12] 1735 	mov	a,@r0
      0002EC F7               [12] 1736 	mov	@r1,a
      0002ED E5 81            [12] 1737 	mov	a,sp
      0002EF 24 A3            [12] 1738 	add	a,#0xa3
      0002F1 F8               [12] 1739 	mov	r0,a
      0002F2 E5 81            [12] 1740 	mov	a,sp
      0002F4 24 BA            [12] 1741 	add	a,#0xba
      0002F6 F9               [12] 1742 	mov	r1,a
      0002F7 E6               [12] 1743 	mov	a,@r0
      0002F8 F7               [12] 1744 	mov	@r1,a
      0002F9 08               [12] 1745 	inc	r0
      0002FA 09               [12] 1746 	inc	r1
      0002FB E6               [12] 1747 	mov	a,@r0
      0002FC F7               [12] 1748 	mov	@r1,a
      0002FD E5 81            [12] 1749 	mov	a,sp
      0002FF 24 CE            [12] 1750 	add	a,#0xce
      000301 F9               [12] 1751 	mov	r1,a
      000302 24 0E            [12] 1752 	add	a,#0x0e
      000304 F8               [12] 1753 	mov	r0,a
      000305 C0 00            [24] 1754 	push	ar0
      000307 E5 81            [12] 1755 	mov	a,sp
      000309 24 A9            [12] 1756 	add	a,#0xa9
      00030B F8               [12] 1757 	mov	r0,a
      00030C C0 01            [24] 1758 	push	ar1
      00030E E5 81            [12] 1759 	mov	a,sp
      000310 24 B3            [12] 1760 	add	a,#0xb3
      000312 F9               [12] 1761 	mov	r1,a
      000313 E6               [12] 1762 	mov	a,@r0
      000314 F7               [12] 1763 	mov	@r1,a
      000315 08               [12] 1764 	inc	r0
      000316 09               [12] 1765 	inc	r1
      000317 E6               [12] 1766 	mov	a,@r0
      000318 F7               [12] 1767 	mov	@r1,a
      000319 D0 01            [24] 1768 	pop	ar1
      00031B D0 00            [24] 1769 	pop	ar0
      00031D                       1770 00147$:
      00031D C0 00            [24] 1771 	push	ar0
      00031F C0 00            [24] 1772 	push	ar0
      000321 E5 81            [12] 1773 	mov	a,sp
      000323 24 AC            [12] 1774 	add	a,#0xac
      000325 F8               [12] 1775 	mov	r0,a
      000326 86 02            [24] 1776 	mov	ar2,@r0
      000328 08               [12] 1777 	inc	r0
      000329 86 03            [24] 1778 	mov	ar3,@r0
      00032B E5 81            [12] 1779 	mov	a,sp
      00032D 24 AA            [12] 1780 	add	a,#0xaa
      00032F F8               [12] 1781 	mov	r0,a
      000330 E6               [12] 1782 	mov	a,@r0
      000331 2A               [12] 1783 	add	a,r2
      000332 FA               [12] 1784 	mov	r2,a
      000333 08               [12] 1785 	inc	r0
      000334 E6               [12] 1786 	mov	a,@r0
      000335 3B               [12] 1787 	addc	a,r3
      000336 FB               [12] 1788 	mov	r3,a
      000337 E5 81            [12] 1789 	mov	a,sp
      000339 24 DC            [12] 1790 	add	a,#0xdc
      00033B F8               [12] 1791 	mov	r0,a
      00033C 86 06            [24] 1792 	mov	ar6,@r0
      00033E 08               [12] 1793 	inc	r0
      00033F 86 07            [24] 1794 	mov	ar7,@r0
      000341 D0 00            [24] 1795 	pop	ar0
      000343 C3               [12] 1796 	clr	c
      000344 EE               [12] 1797 	mov	a,r6
      000345 9A               [12] 1798 	subb	a,r2
      000346 EF               [12] 1799 	mov	a,r7
      000347 9B               [12] 1800 	subb	a,r3
      000348 D0 00            [24] 1801 	pop	ar0
      00034A 40 03            [24] 1802 	jc	00227$
      00034C 02r08r2A         [24] 1803 	ljmp	00145$
      00034F                       1804 00227$:
                                   1805 ;	../../../core/loader/elfloader.c:234: seek_read(fd, a, (char *)&rela, rel_size);
      00034F C0 00            [24] 1806 	push	ar0
      000351 E5 81            [12] 1807 	mov	a,sp
      000353 24 BF            [12] 1808 	add	a,#0xbf
      000355 FF               [12] 1809 	mov	r7,a
      000356 FE               [12] 1810 	mov	r6,a
      000357 7B 00            [12] 1811 	mov	r3,#0x00
      000359 7A 40            [12] 1812 	mov	r2,#0x40
      00035B C0 07            [24] 1813 	push	ar7
      00035D C0 01            [24] 1814 	push	ar1
      00035F C0 00            [24] 1815 	push	ar0
      000361 85 00 F0         [24] 1816 	mov	b,ar0
      000364 E5 81            [12] 1817 	mov	a,sp
      000366 24 C8            [12] 1818 	add	a,#0xc8
      000368 F8               [12] 1819 	mov	r0,a
      000369 E6               [12] 1820 	mov	a,@r0
      00036A C0 E0            [24] 1821 	push	acc
      00036C 08               [12] 1822 	inc	r0
      00036D E6               [12] 1823 	mov	a,@r0
      00036E C0 E0            [24] 1824 	push	acc
      000370 A8 F0            [24] 1825 	mov	r0,b
      000372 C0 06            [24] 1826 	push	ar6
      000374 C0 03            [24] 1827 	push	ar3
      000376 C0 02            [24] 1828 	push	ar2
      000378 85 00 F0         [24] 1829 	mov	b,ar0
      00037B E5 81            [12] 1830 	mov	a,sp
      00037D 24 D5            [12] 1831 	add	a,#0xd5
      00037F F8               [12] 1832 	mov	r0,a
      000380 E6               [12] 1833 	mov	a,@r0
      000381 C0 E0            [24] 1834 	push	acc
      000383 08               [12] 1835 	inc	r0
      000384 E6               [12] 1836 	mov	a,@r0
      000385 C0 E0            [24] 1837 	push	acc
      000387 A8 F0            [24] 1838 	mov	r0,b
      000389 C0 00            [24] 1839 	push	ar0
      00038B E5 81            [12] 1840 	mov	a,sp
      00038D 24 A7            [12] 1841 	add	a,#0xa7
      00038F F8               [12] 1842 	mov	r0,a
      000390 86 82            [24] 1843 	mov	dpl,@r0
      000392 08               [12] 1844 	inc	r0
      000393 86 83            [24] 1845 	mov	dph,@r0
      000395 D0 00            [24] 1846 	pop	ar0
      000397 78r00            [12] 1847 	mov	r0,#_seek_read
      000399 79s00            [12] 1848 	mov	r1,#(_seek_read >> 8)
      00039B 7As00            [12] 1849 	mov	r2,#(_seek_read >> 16)
      00039D 12r00r00         [24] 1850 	lcall	__sdcc_banked_call
      0003A0 E5 81            [12] 1851 	mov	a,sp
      0003A2 24 F9            [12] 1852 	add	a,#0xf9
      0003A4 F5 81            [12] 1853 	mov	sp,a
      0003A6 D0 00            [24] 1854 	pop	ar0
      0003A8 D0 01            [24] 1855 	pop	ar1
      0003AA D0 07            [24] 1856 	pop	ar7
                                   1857 ;	../../../core/loader/elfloader.c:237: (char *)&s, sizeof(s));
      0003AC 89 06            [24] 1858 	mov	ar6,r1
      0003AE C0 00            [24] 1859 	push	ar0
      0003B0 E5 81            [12] 1860 	mov	a,sp
      0003B2 24 B5            [12] 1861 	add	a,#0xb5
      0003B4 F8               [12] 1862 	mov	r0,a
      0003B5 A6 06            [24] 1863 	mov	@r0,ar6
      0003B7 08               [12] 1864 	inc	r0
      0003B8 76 00            [12] 1865 	mov	@r0,#0x00
      0003BA 08               [12] 1866 	inc	r0
      0003BB 76 40            [12] 1867 	mov	@r0,#0x40
      0003BD D0 00            [24] 1868 	pop	ar0
                                   1869 ;	../../../core/loader/elfloader.c:236: symtab + sizeof(struct elf32_sym) * ELF32_R_SYM(rela.r_info),
      0003BF 74 04            [12] 1870 	mov	a,#0x04
      0003C1 2F               [12] 1871 	add	a,r7
      0003C2 F8               [12] 1872 	mov	r0,a
      0003C3 86 02            [24] 1873 	mov	ar2,@r0
      0003C5 08               [12] 1874 	inc	r0
      0003C6 86 03            [24] 1875 	mov	ar3,@r0
      0003C8 08               [12] 1876 	inc	r0
      0003C9 86 05            [24] 1877 	mov	ar5,@r0
      0003CB 08               [12] 1878 	inc	r0
      0003CC 86 06            [24] 1879 	mov	ar6,@r0
      0003CE 18               [12] 1880 	dec	r0
      0003CF 18               [12] 1881 	dec	r0
      0003D0 18               [12] 1882 	dec	r0
      0003D1 8B 02            [24] 1883 	mov	ar2,r3
      0003D3 8D 03            [24] 1884 	mov	ar3,r5
      0003D5 EB               [12] 1885 	mov	a,r3
      0003D6 C4               [12] 1886 	swap	a
      0003D7 54 F0            [12] 1887 	anl	a,#0xf0
      0003D9 CA               [12] 1888 	xch	a,r2
      0003DA C4               [12] 1889 	swap	a
      0003DB CA               [12] 1890 	xch	a,r2
      0003DC 6A               [12] 1891 	xrl	a,r2
      0003DD CA               [12] 1892 	xch	a,r2
      0003DE 54 F0            [12] 1893 	anl	a,#0xf0
      0003E0 CA               [12] 1894 	xch	a,r2
      0003E1 6A               [12] 1895 	xrl	a,r2
      0003E2 FB               [12] 1896 	mov	r3,a
      0003E3 C0 00            [24] 1897 	push	ar0
      0003E5 E5 81            [12] 1898 	mov	a,sp
      0003E7 24 9F            [12] 1899 	add	a,#0x9f
      0003E9 F8               [12] 1900 	mov	r0,a
      0003EA EA               [12] 1901 	mov	a,r2
      0003EB 26               [12] 1902 	add	a,@r0
      0003EC FA               [12] 1903 	mov	r2,a
      0003ED EB               [12] 1904 	mov	a,r3
      0003EE 08               [12] 1905 	inc	r0
      0003EF 36               [12] 1906 	addc	a,@r0
      0003F0 FB               [12] 1907 	mov	r3,a
      0003F1 D0 00            [24] 1908 	pop	ar0
                                   1909 ;	../../../core/loader/elfloader.c:235: seek_read(fd,
      0003F3 C0 07            [24] 1910 	push	ar7
      0003F5 C0 01            [24] 1911 	push	ar1
      0003F7 C0 00            [24] 1912 	push	ar0
      0003F9 74 10            [12] 1913 	mov	a,#0x10
      0003FB C0 E0            [24] 1914 	push	acc
      0003FD E4               [12] 1915 	clr	a
      0003FE C0 E0            [24] 1916 	push	acc
      000400 85 00 F0         [24] 1917 	mov	b,ar0
      000403 E5 81            [12] 1918 	mov	a,sp
      000405 24 B1            [12] 1919 	add	a,#0xb1
      000407 F8               [12] 1920 	mov	r0,a
      000408 E6               [12] 1921 	mov	a,@r0
      000409 C0 E0            [24] 1922 	push	acc
      00040B 08               [12] 1923 	inc	r0
      00040C E6               [12] 1924 	mov	a,@r0
      00040D C0 E0            [24] 1925 	push	acc
      00040F 08               [12] 1926 	inc	r0
      000410 E6               [12] 1927 	mov	a,@r0
      000411 C0 E0            [24] 1928 	push	acc
      000413 A8 F0            [24] 1929 	mov	r0,b
      000415 C0 02            [24] 1930 	push	ar2
      000417 C0 03            [24] 1931 	push	ar3
      000419 C0 00            [24] 1932 	push	ar0
      00041B E5 81            [12] 1933 	mov	a,sp
      00041D 24 A7            [12] 1934 	add	a,#0xa7
      00041F F8               [12] 1935 	mov	r0,a
      000420 86 82            [24] 1936 	mov	dpl,@r0
      000422 08               [12] 1937 	inc	r0
      000423 86 83            [24] 1938 	mov	dph,@r0
      000425 D0 00            [24] 1939 	pop	ar0
      000427 78r00            [12] 1940 	mov	r0,#_seek_read
      000429 79s00            [12] 1941 	mov	r1,#(_seek_read >> 8)
      00042B 7As00            [12] 1942 	mov	r2,#(_seek_read >> 16)
      00042D 12r00r00         [24] 1943 	lcall	__sdcc_banked_call
      000430 E5 81            [12] 1944 	mov	a,sp
      000432 24 F9            [12] 1945 	add	a,#0xf9
      000434 F5 81            [12] 1946 	mov	sp,a
      000436 D0 00            [24] 1947 	pop	ar0
      000438 D0 01            [24] 1948 	pop	ar1
      00043A D0 07            [24] 1949 	pop	ar7
                                   1950 ;	../../../core/loader/elfloader.c:238: if(s.st_name != 0) {
      00043C 87 04            [24] 1951 	mov	ar4,@r1
      00043E 09               [12] 1952 	inc	r1
      00043F 87 05            [24] 1953 	mov	ar5,@r1
      000441 09               [12] 1954 	inc	r1
      000442 87 03            [24] 1955 	mov	ar3,@r1
      000444 09               [12] 1956 	inc	r1
      000445 87 02            [24] 1957 	mov	ar2,@r1
      000447 19               [12] 1958 	dec	r1
      000448 19               [12] 1959 	dec	r1
      000449 19               [12] 1960 	dec	r1
      00044A D0 00            [24] 1961 	pop	ar0
      00044C EC               [12] 1962 	mov	a,r4
      00044D 4D               [12] 1963 	orl	a,r5
      00044E 4B               [12] 1964 	orl	a,r3
      00044F 4A               [12] 1965 	orl	a,r2
      000450 70 03            [24] 1966 	jnz	00228$
      000452 02r06r5F         [24] 1967 	ljmp	00141$
      000455                       1968 00228$:
                                   1969 ;	../../../core/loader/elfloader.c:239: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      000455 C0 00            [24] 1970 	push	ar0
      000457 E5 81            [12] 1971 	mov	a,sp
      000459 24 DF            [12] 1972 	add	a,#0xdf
      00045B FE               [12] 1973 	mov	r6,a
      00045C C0 00            [24] 1974 	push	ar0
      00045E E5 81            [12] 1975 	mov	a,sp
      000460 24 B5            [12] 1976 	add	a,#0xb5
      000462 F8               [12] 1977 	mov	r0,a
      000463 A6 06            [24] 1978 	mov	@r0,ar6
      000465 08               [12] 1979 	inc	r0
      000466 76 00            [12] 1980 	mov	@r0,#0x00
      000468 08               [12] 1981 	inc	r0
      000469 76 40            [12] 1982 	mov	@r0,#0x40
      00046B 8C 02            [24] 1983 	mov	ar2,r4
      00046D E5 81            [12] 1984 	mov	a,sp
      00046F 24 B8            [12] 1985 	add	a,#0xb8
      000471 F8               [12] 1986 	mov	r0,a
      000472 EA               [12] 1987 	mov	a,r2
      000473 26               [12] 1988 	add	a,@r0
      000474 FA               [12] 1989 	mov	r2,a
      000475 ED               [12] 1990 	mov	a,r5
      000476 08               [12] 1991 	inc	r0
      000477 36               [12] 1992 	addc	a,@r0
      000478 FD               [12] 1993 	mov	r5,a
      000479 D0 00            [24] 1994 	pop	ar0
      00047B C0 07            [24] 1995 	push	ar7
      00047D C0 06            [24] 1996 	push	ar6
      00047F C0 01            [24] 1997 	push	ar1
      000481 C0 00            [24] 1998 	push	ar0
      000483 74 1E            [12] 1999 	mov	a,#0x1e
      000485 C0 E0            [24] 2000 	push	acc
      000487 E4               [12] 2001 	clr	a
      000488 C0 E0            [24] 2002 	push	acc
      00048A 85 00 F0         [24] 2003 	mov	b,ar0
      00048D E5 81            [12] 2004 	mov	a,sp
      00048F 24 B0            [12] 2005 	add	a,#0xb0
      000491 F8               [12] 2006 	mov	r0,a
      000492 E6               [12] 2007 	mov	a,@r0
      000493 C0 E0            [24] 2008 	push	acc
      000495 08               [12] 2009 	inc	r0
      000496 E6               [12] 2010 	mov	a,@r0
      000497 C0 E0            [24] 2011 	push	acc
      000499 08               [12] 2012 	inc	r0
      00049A E6               [12] 2013 	mov	a,@r0
      00049B C0 E0            [24] 2014 	push	acc
      00049D A8 F0            [24] 2015 	mov	r0,b
      00049F C0 02            [24] 2016 	push	ar2
      0004A1 C0 05            [24] 2017 	push	ar5
      0004A3 C0 00            [24] 2018 	push	ar0
      0004A5 E5 81            [12] 2019 	mov	a,sp
      0004A7 24 A6            [12] 2020 	add	a,#0xa6
      0004A9 F8               [12] 2021 	mov	r0,a
      0004AA 86 82            [24] 2022 	mov	dpl,@r0
      0004AC 08               [12] 2023 	inc	r0
      0004AD 86 83            [24] 2024 	mov	dph,@r0
      0004AF D0 00            [24] 2025 	pop	ar0
      0004B1 78r00            [12] 2026 	mov	r0,#_seek_read
      0004B3 79s00            [12] 2027 	mov	r1,#(_seek_read >> 8)
      0004B5 7As00            [12] 2028 	mov	r2,#(_seek_read >> 16)
      0004B7 12r00r00         [24] 2029 	lcall	__sdcc_banked_call
      0004BA E5 81            [12] 2030 	mov	a,sp
      0004BC 24 F9            [12] 2031 	add	a,#0xf9
      0004BE F5 81            [12] 2032 	mov	sp,a
      0004C0 D0 00            [24] 2033 	pop	ar0
      0004C2 D0 01            [24] 2034 	pop	ar1
      0004C4 D0 06            [24] 2035 	pop	ar6
                                   2036 ;	../../../core/loader/elfloader.c:241: addr = (char *)symtab_lookup(name);
      0004C6 8E 05            [24] 2037 	mov	ar5,r6
      0004C8 7C 00            [12] 2038 	mov	r4,#0x00
      0004CA 7B 40            [12] 2039 	mov	r3,#0x40
      0004CC 8D 82            [24] 2040 	mov	dpl,r5
      0004CE 8C 83            [24] 2041 	mov	dph,r4
      0004D0 8B F0            [24] 2042 	mov	b,r3
      0004D2 C0 06            [24] 2043 	push	ar6
      0004D4 C0 01            [24] 2044 	push	ar1
      0004D6 C0 00            [24] 2045 	push	ar0
      0004D8 78r00            [12] 2046 	mov	r0,#_symtab_lookup
      0004DA 79s00            [12] 2047 	mov	r1,#(_symtab_lookup >> 8)
      0004DC 7As00            [12] 2048 	mov	r2,#(_symtab_lookup >> 16)
      0004DE 12r00r00         [24] 2049 	lcall	__sdcc_banked_call
      0004E1 AB 82            [24] 2050 	mov	r3,dpl
      0004E3 AC 83            [24] 2051 	mov	r4,dph
      0004E5 AD F0            [24] 2052 	mov	r5,b
      0004E7 D0 00            [24] 2053 	pop	ar0
      0004E9 D0 01            [24] 2054 	pop	ar1
      0004EB D0 06            [24] 2055 	pop	ar6
      0004ED D0 07            [24] 2056 	pop	ar7
      0004EF C0 00            [24] 2057 	push	ar0
      0004F1 E5 81            [12] 2058 	mov	a,sp
      0004F3 24 FC            [12] 2059 	add	a,#0xfc
      0004F5 F8               [12] 2060 	mov	r0,a
      0004F6 A6 03            [24] 2061 	mov	@r0,ar3
      0004F8 08               [12] 2062 	inc	r0
      0004F9 A6 04            [24] 2063 	mov	@r0,ar4
      0004FB 08               [12] 2064 	inc	r0
      0004FC A6 05            [24] 2065 	mov	@r0,ar5
      0004FE D0 00            [24] 2066 	pop	ar0
                                   2067 ;	../../../core/loader/elfloader.c:243: if(addr == NULL) {
      000500 E5 81            [12] 2068 	mov	a,sp
      000502 24 FD            [12] 2069 	add	a,#0xfd
      000504 F8               [12] 2070 	mov	r0,a
      000505 E6               [12] 2071 	mov	a,@r0
      000506 08               [12] 2072 	inc	r0
      000507 46               [12] 2073 	orl	a,@r0
      000508 D0 00            [24] 2074 	pop	ar0
      00050A 60 03            [24] 2075 	jz	00229$
      00050C 02r05r92         [24] 2076 	ljmp	00111$
      00050F                       2077 00229$:
                                   2078 ;	../../../core/loader/elfloader.c:245: addr = find_local_symbol(fd, name, symtab, symtabsize, strtab);
      00050F 8E 05            [24] 2079 	mov	ar5,r6
      000511 7C 00            [12] 2080 	mov	r4,#0x00
      000513 7B 40            [12] 2081 	mov	r3,#0x40
      000515 C0 07            [24] 2082 	push	ar7
      000517 C0 06            [24] 2083 	push	ar6
      000519 C0 01            [24] 2084 	push	ar1
      00051B C0 00            [24] 2085 	push	ar0
      00051D 85 00 F0         [24] 2086 	mov	b,ar0
      000520 E5 81            [12] 2087 	mov	a,sp
      000522 24 B6            [12] 2088 	add	a,#0xb6
      000524 F8               [12] 2089 	mov	r0,a
      000525 E6               [12] 2090 	mov	a,@r0
      000526 C0 E0            [24] 2091 	push	acc
      000528 08               [12] 2092 	inc	r0
      000529 E6               [12] 2093 	mov	a,@r0
      00052A C0 E0            [24] 2094 	push	acc
      00052C A8 F0            [24] 2095 	mov	r0,b
      00052E 85 00 F0         [24] 2096 	mov	b,ar0
      000531 E5 81            [12] 2097 	mov	a,sp
      000533 24 99            [12] 2098 	add	a,#0x99
      000535 F8               [12] 2099 	mov	r0,a
      000536 E6               [12] 2100 	mov	a,@r0
      000537 C0 E0            [24] 2101 	push	acc
      000539 08               [12] 2102 	inc	r0
      00053A E6               [12] 2103 	mov	a,@r0
      00053B C0 E0            [24] 2104 	push	acc
      00053D A8 F0            [24] 2105 	mov	r0,b
      00053F 85 00 F0         [24] 2106 	mov	b,ar0
      000542 E5 81            [12] 2107 	mov	a,sp
      000544 24 99            [12] 2108 	add	a,#0x99
      000546 F8               [12] 2109 	mov	r0,a
      000547 E6               [12] 2110 	mov	a,@r0
      000548 C0 E0            [24] 2111 	push	acc
      00054A 08               [12] 2112 	inc	r0
      00054B E6               [12] 2113 	mov	a,@r0
      00054C C0 E0            [24] 2114 	push	acc
      00054E A8 F0            [24] 2115 	mov	r0,b
      000550 C0 05            [24] 2116 	push	ar5
      000552 C0 04            [24] 2117 	push	ar4
      000554 C0 03            [24] 2118 	push	ar3
      000556 C0 00            [24] 2119 	push	ar0
      000558 E5 81            [12] 2120 	mov	a,sp
      00055A 24 A5            [12] 2121 	add	a,#0xa5
      00055C F8               [12] 2122 	mov	r0,a
      00055D 86 82            [24] 2123 	mov	dpl,@r0
      00055F 08               [12] 2124 	inc	r0
      000560 86 83            [24] 2125 	mov	dph,@r0
      000562 D0 00            [24] 2126 	pop	ar0
      000564 78r65            [12] 2127 	mov	r0,#_find_local_symbol
      000566 79s00            [12] 2128 	mov	r1,#(_find_local_symbol >> 8)
      000568 7As00            [12] 2129 	mov	r2,#(_find_local_symbol >> 16)
      00056A 12r00r00         [24] 2130 	lcall	__sdcc_banked_call
      00056D AB 82            [24] 2131 	mov	r3,dpl
      00056F AC 83            [24] 2132 	mov	r4,dph
      000571 AD F0            [24] 2133 	mov	r5,b
      000573 E5 81            [12] 2134 	mov	a,sp
      000575 24 F7            [12] 2135 	add	a,#0xf7
      000577 F5 81            [12] 2136 	mov	sp,a
      000579 D0 00            [24] 2137 	pop	ar0
      00057B D0 01            [24] 2138 	pop	ar1
      00057D D0 06            [24] 2139 	pop	ar6
      00057F D0 07            [24] 2140 	pop	ar7
      000581 C0 00            [24] 2141 	push	ar0
      000583 E5 81            [12] 2142 	mov	a,sp
      000585 24 FD            [12] 2143 	add	a,#0xfd
      000587 F8               [12] 2144 	mov	r0,a
      000588 A6 03            [24] 2145 	mov	@r0,ar3
      00058A 08               [12] 2146 	inc	r0
      00058B A6 04            [24] 2147 	mov	@r0,ar4
      00058D 08               [12] 2148 	inc	r0
      00058E A6 05            [24] 2149 	mov	@r0,ar5
      000590 D0 00            [24] 2150 	pop	ar0
                                   2151 ;	../../../core/loader/elfloader.c:246: PRINTF("found address %p\n", addr);
      000592                       2152 00111$:
                                   2153 ;	../../../core/loader/elfloader.c:248: if(addr == NULL) {
      000592 C0 00            [24] 2154 	push	ar0
      000594 E5 81            [12] 2155 	mov	a,sp
      000596 24 FD            [12] 2156 	add	a,#0xfd
      000598 F8               [12] 2157 	mov	r0,a
      000599 E6               [12] 2158 	mov	a,@r0
      00059A 08               [12] 2159 	inc	r0
      00059B 46               [12] 2160 	orl	a,@r0
      00059C D0 00            [24] 2161 	pop	ar0
      00059E 60 03            [24] 2162 	jz	00230$
      0005A0 02r07r3E         [24] 2163 	ljmp	00142$
      0005A3                       2164 00230$:
                                   2165 ;	../../../core/loader/elfloader.c:249: if(s.st_shndx == bss.number) {
      0005A3 86 04            [24] 2166 	mov	ar4,@r0
      0005A5 08               [12] 2167 	inc	r0
      0005A6 86 05            [24] 2168 	mov	ar5,@r0
      0005A8 18               [12] 2169 	dec	r0
      0005A9 90r00r21         [24] 2170 	mov	dptr,#_bss
      0005AC E0               [24] 2171 	movx	a,@dptr
      0005AD FB               [12] 2172 	mov	r3,a
      0005AE 7A 00            [12] 2173 	mov	r2,#0x00
      0005B0 EC               [12] 2174 	mov	a,r4
      0005B1 B5 03 0C         [24] 2175 	cjne	a,ar3,00124$
      0005B4 ED               [12] 2176 	mov	a,r5
      0005B5 B5 02 08         [24] 2177 	cjne	a,ar2,00124$
                                   2178 ;	../../../core/loader/elfloader.c:250: sect = &bss;
      0005B8 7Cr21            [12] 2179 	mov	r4,#_bss
      0005BA 7Ds00            [12] 2180 	mov	r5,#(_bss >> 8)
      0005BC 7E 00            [12] 2181 	mov	r6,#0x00
      0005BE 80 76            [24] 2182 	sjmp	00125$
      0005C0                       2183 00124$:
                                   2184 ;	../../../core/loader/elfloader.c:251: } else if(s.st_shndx == data.number) {
      0005C0 90r00r27         [24] 2185 	mov	dptr,#_data
      0005C3 E0               [24] 2186 	movx	a,@dptr
      0005C4 FB               [12] 2187 	mov	r3,a
      0005C5 7A 00            [12] 2188 	mov	r2,#0x00
      0005C7 EC               [12] 2189 	mov	a,r4
      0005C8 B5 03 0C         [24] 2190 	cjne	a,ar3,00121$
      0005CB ED               [12] 2191 	mov	a,r5
      0005CC B5 02 08         [24] 2192 	cjne	a,ar2,00121$
                                   2193 ;	../../../core/loader/elfloader.c:252: sect = &data;
      0005CF 7Cr27            [12] 2194 	mov	r4,#_data
      0005D1 7Ds00            [12] 2195 	mov	r5,#(_data >> 8)
      0005D3 7E 00            [12] 2196 	mov	r6,#0x00
      0005D5 80 5F            [24] 2197 	sjmp	00125$
      0005D7                       2198 00121$:
                                   2199 ;	../../../core/loader/elfloader.c:253: } else if(s.st_shndx == rodata.number) {
      0005D7 90r00r2D         [24] 2200 	mov	dptr,#_rodata
      0005DA E0               [24] 2201 	movx	a,@dptr
      0005DB FB               [12] 2202 	mov	r3,a
      0005DC 7A 00            [12] 2203 	mov	r2,#0x00
      0005DE EC               [12] 2204 	mov	a,r4
      0005DF B5 03 0C         [24] 2205 	cjne	a,ar3,00118$
      0005E2 ED               [12] 2206 	mov	a,r5
      0005E3 B5 02 08         [24] 2207 	cjne	a,ar2,00118$
                                   2208 ;	../../../core/loader/elfloader.c:254: sect = &rodata;
      0005E6 7Cr2D            [12] 2209 	mov	r4,#_rodata
      0005E8 7Ds00            [12] 2210 	mov	r5,#(_rodata >> 8)
      0005EA 7E 00            [12] 2211 	mov	r6,#0x00
      0005EC 80 48            [24] 2212 	sjmp	00125$
      0005EE                       2213 00118$:
                                   2214 ;	../../../core/loader/elfloader.c:255: } else if(s.st_shndx == text.number) {
      0005EE 90r00r33         [24] 2215 	mov	dptr,#_text
      0005F1 E0               [24] 2216 	movx	a,@dptr
      0005F2 FB               [12] 2217 	mov	r3,a
      0005F3 7A 00            [12] 2218 	mov	r2,#0x00
      0005F5 EC               [12] 2219 	mov	a,r4
      0005F6 B5 03 0C         [24] 2220 	cjne	a,ar3,00112$
      0005F9 ED               [12] 2221 	mov	a,r5
      0005FA B5 02 08         [24] 2222 	cjne	a,ar2,00112$
                                   2223 ;	../../../core/loader/elfloader.c:256: sect = &text;
      0005FD 7Cr33            [12] 2224 	mov	r4,#_text
      0005FF 7Ds00            [12] 2225 	mov	r5,#(_text >> 8)
      000601 7E 00            [12] 2226 	mov	r6,#0x00
                                   2227 ;	../../../core/loader/elfloader.c:258: PRINTF("elfloader unknown name: '%30s'\n", name);
      000603 80 31            [24] 2228 	sjmp	00125$
      000605                       2229 00112$:
                                   2230 ;	../../../core/loader/elfloader.c:259: memcpy(elfloader_unknown, name, sizeof(elfloader_unknown));
      000605 7D 00            [12] 2231 	mov	r5,#0x00
      000607 7C 40            [12] 2232 	mov	r4,#0x40
      000609 74 1E            [12] 2233 	mov	a,#0x1e
      00060B C0 E0            [24] 2234 	push	acc
      00060D E4               [12] 2235 	clr	a
      00060E C0 E0            [24] 2236 	push	acc
      000610 C0 06            [24] 2237 	push	ar6
      000612 C0 05            [24] 2238 	push	ar5
      000614 C0 04            [24] 2239 	push	ar4
      000616 90r00r00         [24] 2240 	mov	dptr,#_elfloader_unknown
      000619 75 F0 00         [24] 2241 	mov	b,#0x00
      00061C 78r00            [12] 2242 	mov	r0,#___memcpy
      00061E 79s00            [12] 2243 	mov	r1,#(___memcpy >> 8)
      000620 7As00            [12] 2244 	mov	r2,#(___memcpy >> 16)
      000622 12r00r00         [24] 2245 	lcall	__sdcc_banked_call
      000625 E5 81            [12] 2246 	mov	a,sp
      000627 24 FB            [12] 2247 	add	a,#0xfb
      000629 F5 81            [12] 2248 	mov	sp,a
                                   2249 ;	../../../core/loader/elfloader.c:260: elfloader_unknown[sizeof(elfloader_unknown) - 1] = 0;
      00062B 90r00r1D         [24] 2250 	mov	dptr,#(_elfloader_unknown + 0x001d)
      00062E E4               [12] 2251 	clr	a
      00062F F0               [24] 2252 	movx	@dptr,a
                                   2253 ;	../../../core/loader/elfloader.c:261: return ELFLOADER_SYMBOL_NOT_FOUND;
      000630 90 00 05         [24] 2254 	mov	dptr,#0x0005
      000633 02r08r2D         [24] 2255 	ljmp	00149$
      000636                       2256 00125$:
                                   2257 ;	../../../core/loader/elfloader.c:263: addr = sect->address;
      000636 74 03            [12] 2258 	mov	a,#0x03
      000638 2C               [12] 2259 	add	a,r4
      000639 FC               [12] 2260 	mov	r4,a
      00063A E4               [12] 2261 	clr	a
      00063B 3D               [12] 2262 	addc	a,r5
      00063C FD               [12] 2263 	mov	r5,a
      00063D 8C 82            [24] 2264 	mov	dpl,r4
      00063F 8D 83            [24] 2265 	mov	dph,r5
      000641 8E F0            [24] 2266 	mov	b,r6
      000643 C0 00            [24] 2267 	push	ar0
      000645 E5 81            [12] 2268 	mov	a,sp
      000647 24 FD            [12] 2269 	add	a,#0xfd
      000649 F8               [12] 2270 	mov	r0,a
      00064A 12r00r00         [24] 2271 	lcall	__gptrget
      00064D F6               [12] 2272 	mov	@r0,a
      00064E A3               [24] 2273 	inc	dptr
      00064F 12r00r00         [24] 2274 	lcall	__gptrget
      000652 08               [12] 2275 	inc	r0
      000653 F6               [12] 2276 	mov	@r0,a
      000654 A3               [24] 2277 	inc	dptr
      000655 12r00r00         [24] 2278 	lcall	__gptrget
      000658 08               [12] 2279 	inc	r0
      000659 F6               [12] 2280 	mov	@r0,a
      00065A D0 00            [24] 2281 	pop	ar0
      00065C 02r07r3E         [24] 2282 	ljmp	00142$
      00065F                       2283 00141$:
                                   2284 ;	../../../core/loader/elfloader.c:266: if(s.st_shndx == bss.number) {
      00065F C0 01            [24] 2285 	push	ar1
      000661 E5 81            [12] 2286 	mov	a,sp
      000663 24 BB            [12] 2287 	add	a,#0xbb
      000665 F9               [12] 2288 	mov	r1,a
      000666 E6               [12] 2289 	mov	a,@r0
      000667 F7               [12] 2290 	mov	@r1,a
      000668 08               [12] 2291 	inc	r0
      000669 E6               [12] 2292 	mov	a,@r0
      00066A 09               [12] 2293 	inc	r1
      00066B F7               [12] 2294 	mov	@r1,a
      00066C 18               [12] 2295 	dec	r0
      00066D D0 01            [24] 2296 	pop	ar1
      00066F 90r00r21         [24] 2297 	mov	dptr,#_bss
      000672 E0               [24] 2298 	movx	a,@dptr
      000673 FC               [12] 2299 	mov	r4,a
      000674 7B 00            [12] 2300 	mov	r3,#0x00
      000676 C0 00            [24] 2301 	push	ar0
      000678 E5 81            [12] 2302 	mov	a,sp
      00067A 24 BB            [12] 2303 	add	a,#0xbb
      00067C F8               [12] 2304 	mov	r0,a
      00067D E6               [12] 2305 	mov	a,@r0
      00067E B5 04 07         [24] 2306 	cjne	a,ar4,00239$
      000681 08               [12] 2307 	inc	r0
      000682 E6               [12] 2308 	mov	a,@r0
      000683 B5 03 02         [24] 2309 	cjne	a,ar3,00239$
      000686 80 04            [24] 2310 	sjmp	00240$
      000688                       2311 00239$:
      000688 D0 00            [24] 2312 	pop	ar0
      00068A 80 0B            [24] 2313 	sjmp	00138$
      00068C                       2314 00240$:
      00068C D0 00            [24] 2315 	pop	ar0
                                   2316 ;	../../../core/loader/elfloader.c:267: sect = &bss;
      00068E 7Ar21            [12] 2317 	mov	r2,#_bss
      000690 7Bs00            [12] 2318 	mov	r3,#(_bss >> 8)
      000692 7C 00            [12] 2319 	mov	r4,#0x00
      000694 02r07r18         [24] 2320 	ljmp	00139$
      000697                       2321 00138$:
                                   2322 ;	../../../core/loader/elfloader.c:268: } else if(s.st_shndx == data.number) {
      000697 C0 00            [24] 2323 	push	ar0
      000699 90r00r27         [24] 2324 	mov	dptr,#_data
      00069C E0               [24] 2325 	movx	a,@dptr
      00069D FE               [12] 2326 	mov	r6,a
      00069E 7D 00            [12] 2327 	mov	r5,#0x00
      0006A0 C0 00            [24] 2328 	push	ar0
      0006A2 E5 81            [12] 2329 	mov	a,sp
      0006A4 24 BA            [12] 2330 	add	a,#0xba
      0006A6 F8               [12] 2331 	mov	r0,a
      0006A7 E6               [12] 2332 	mov	a,@r0
      0006A8 B5 06 07         [24] 2333 	cjne	a,ar6,00241$
      0006AB 08               [12] 2334 	inc	r0
      0006AC E6               [12] 2335 	mov	a,@r0
      0006AD B5 05 02         [24] 2336 	cjne	a,ar5,00241$
      0006B0 80 06            [24] 2337 	sjmp	00242$
      0006B2                       2338 00241$:
      0006B2 D0 00            [24] 2339 	pop	ar0
      0006B4 D0 00            [24] 2340 	pop	ar0
      0006B6 80 0C            [24] 2341 	sjmp	00135$
      0006B8                       2342 00242$:
      0006B8 D0 00            [24] 2343 	pop	ar0
      0006BA D0 00            [24] 2344 	pop	ar0
                                   2345 ;	../../../core/loader/elfloader.c:269: sect = &data;
      0006BC 7Ar27            [12] 2346 	mov	r2,#_data
      0006BE 7Bs00            [12] 2347 	mov	r3,#(_data >> 8)
      0006C0 7C 00            [12] 2348 	mov	r4,#0x00
      0006C2 80 54            [24] 2349 	sjmp	00139$
      0006C4                       2350 00135$:
                                   2351 ;	../../../core/loader/elfloader.c:270: } else if(s.st_shndx == rodata.number) {
      0006C4 90r00r2D         [24] 2352 	mov	dptr,#_rodata
      0006C7 E0               [24] 2353 	movx	a,@dptr
      0006C8 FE               [12] 2354 	mov	r6,a
      0006C9 7D 00            [12] 2355 	mov	r5,#0x00
      0006CB C0 00            [24] 2356 	push	ar0
      0006CD E5 81            [12] 2357 	mov	a,sp
      0006CF 24 BB            [12] 2358 	add	a,#0xbb
      0006D1 F8               [12] 2359 	mov	r0,a
      0006D2 E6               [12] 2360 	mov	a,@r0
      0006D3 B5 06 07         [24] 2361 	cjne	a,ar6,00243$
      0006D6 08               [12] 2362 	inc	r0
      0006D7 E6               [12] 2363 	mov	a,@r0
      0006D8 B5 05 02         [24] 2364 	cjne	a,ar5,00243$
      0006DB 80 04            [24] 2365 	sjmp	00244$
      0006DD                       2366 00243$:
      0006DD D0 00            [24] 2367 	pop	ar0
      0006DF 80 0A            [24] 2368 	sjmp	00132$
      0006E1                       2369 00244$:
      0006E1 D0 00            [24] 2370 	pop	ar0
                                   2371 ;	../../../core/loader/elfloader.c:271: sect = &rodata;
      0006E3 7Ar2D            [12] 2372 	mov	r2,#_rodata
      0006E5 7Bs00            [12] 2373 	mov	r3,#(_rodata >> 8)
      0006E7 7C 00            [12] 2374 	mov	r4,#0x00
      0006E9 80 2D            [24] 2375 	sjmp	00139$
      0006EB                       2376 00132$:
                                   2377 ;	../../../core/loader/elfloader.c:272: } else if(s.st_shndx == text.number) {
      0006EB 90r00r33         [24] 2378 	mov	dptr,#_text
      0006EE E0               [24] 2379 	movx	a,@dptr
      0006EF FE               [12] 2380 	mov	r6,a
      0006F0 7D 00            [12] 2381 	mov	r5,#0x00
      0006F2 C0 00            [24] 2382 	push	ar0
      0006F4 E5 81            [12] 2383 	mov	a,sp
      0006F6 24 BB            [12] 2384 	add	a,#0xbb
      0006F8 F8               [12] 2385 	mov	r0,a
      0006F9 E6               [12] 2386 	mov	a,@r0
      0006FA B5 06 07         [24] 2387 	cjne	a,ar6,00245$
      0006FD 08               [12] 2388 	inc	r0
      0006FE E6               [12] 2389 	mov	a,@r0
      0006FF B5 05 02         [24] 2390 	cjne	a,ar5,00245$
      000702 80 04            [24] 2391 	sjmp	00246$
      000704                       2392 00245$:
      000704 D0 00            [24] 2393 	pop	ar0
      000706 80 0A            [24] 2394 	sjmp	00129$
      000708                       2395 00246$:
      000708 D0 00            [24] 2396 	pop	ar0
                                   2397 ;	../../../core/loader/elfloader.c:273: sect = &text;
      00070A 7Ar33            [12] 2398 	mov	r2,#_text
      00070C 7Bs00            [12] 2399 	mov	r3,#(_text >> 8)
      00070E 7C 00            [12] 2400 	mov	r4,#0x00
      000710 80 06            [24] 2401 	sjmp	00139$
      000712                       2402 00129$:
                                   2403 ;	../../../core/loader/elfloader.c:275: return ELFLOADER_SEGMENT_NOT_FOUND;
      000712 90 00 06         [24] 2404 	mov	dptr,#0x0006
      000715 02r08r2D         [24] 2405 	ljmp	00149$
      000718                       2406 00139$:
                                   2407 ;	../../../core/loader/elfloader.c:278: addr = sect->address;
      000718 74 03            [12] 2408 	mov	a,#0x03
      00071A 2A               [12] 2409 	add	a,r2
      00071B FA               [12] 2410 	mov	r2,a
      00071C E4               [12] 2411 	clr	a
      00071D 3B               [12] 2412 	addc	a,r3
      00071E FB               [12] 2413 	mov	r3,a
      00071F 8A 82            [24] 2414 	mov	dpl,r2
      000721 8B 83            [24] 2415 	mov	dph,r3
      000723 8C F0            [24] 2416 	mov	b,r4
      000725 C0 00            [24] 2417 	push	ar0
      000727 E5 81            [12] 2418 	mov	a,sp
      000729 24 FD            [12] 2419 	add	a,#0xfd
      00072B F8               [12] 2420 	mov	r0,a
      00072C 12r00r00         [24] 2421 	lcall	__gptrget
      00072F F6               [12] 2422 	mov	@r0,a
      000730 A3               [24] 2423 	inc	dptr
      000731 12r00r00         [24] 2424 	lcall	__gptrget
      000734 08               [12] 2425 	inc	r0
      000735 F6               [12] 2426 	mov	@r0,a
      000736 A3               [24] 2427 	inc	dptr
      000737 12r00r00         [24] 2428 	lcall	__gptrget
      00073A 08               [12] 2429 	inc	r0
      00073B F6               [12] 2430 	mov	@r0,a
      00073C D0 00            [24] 2431 	pop	ar0
      00073E                       2432 00142$:
                                   2433 ;	../../../core/loader/elfloader.c:281: if(!using_relas) {
      00073E C0 00            [24] 2434 	push	ar0
      000740 E5 81            [12] 2435 	mov	a,sp
      000742 24 9D            [12] 2436 	add	a,#0x9d
      000744 F8               [12] 2437 	mov	r0,a
      000745 E6               [12] 2438 	mov	a,@r0
      000746 D0 00            [24] 2439 	pop	ar0
      000748 70 59            [24] 2440 	jnz	00144$
                                   2441 ;	../../../core/loader/elfloader.c:283: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
      00074A 74 08            [12] 2442 	mov	a,#0x08
      00074C 2F               [12] 2443 	add	a,r7
      00074D FE               [12] 2444 	mov	r6,a
      00074E 7D 00            [12] 2445 	mov	r5,#0x00
      000750 7C 40            [12] 2446 	mov	r4,#0x40
      000752 C0 00            [24] 2447 	push	ar0
      000754 A8 07            [24] 2448 	mov	r0,ar7
      000756 86 02            [24] 2449 	mov	ar2,@r0
      000758 08               [12] 2450 	inc	r0
      000759 86 03            [24] 2451 	mov	ar3,@r0
      00075B E5 81            [12] 2452 	mov	a,sp
      00075D 24 B4            [12] 2453 	add	a,#0xb4
      00075F F8               [12] 2454 	mov	r0,a
      000760 EA               [12] 2455 	mov	a,r2
      000761 26               [12] 2456 	add	a,@r0
      000762 FA               [12] 2457 	mov	r2,a
      000763 EB               [12] 2458 	mov	a,r3
      000764 08               [12] 2459 	inc	r0
      000765 36               [12] 2460 	addc	a,@r0
      000766 FB               [12] 2461 	mov	r3,a
      000767 D0 00            [24] 2462 	pop	ar0
      000769 C0 07            [24] 2463 	push	ar7
      00076B C0 01            [24] 2464 	push	ar1
      00076D C0 00            [24] 2465 	push	ar0
      00076F 74 04            [12] 2466 	mov	a,#0x04
      000771 C0 E0            [24] 2467 	push	acc
      000773 E4               [12] 2468 	clr	a
      000774 C0 E0            [24] 2469 	push	acc
      000776 C0 06            [24] 2470 	push	ar6
      000778 C0 05            [24] 2471 	push	ar5
      00077A C0 04            [24] 2472 	push	ar4
      00077C C0 02            [24] 2473 	push	ar2
      00077E C0 03            [24] 2474 	push	ar3
      000780 C0 00            [24] 2475 	push	ar0
      000782 E5 81            [12] 2476 	mov	a,sp
      000784 24 A8            [12] 2477 	add	a,#0xa8
      000786 F8               [12] 2478 	mov	r0,a
      000787 86 82            [24] 2479 	mov	dpl,@r0
      000789 08               [12] 2480 	inc	r0
      00078A 86 83            [24] 2481 	mov	dph,@r0
      00078C D0 00            [24] 2482 	pop	ar0
      00078E 78r00            [12] 2483 	mov	r0,#_seek_read
      000790 79s00            [12] 2484 	mov	r1,#(_seek_read >> 8)
      000792 7As00            [12] 2485 	mov	r2,#(_seek_read >> 16)
      000794 12r00r00         [24] 2486 	lcall	__sdcc_banked_call
      000797 E5 81            [12] 2487 	mov	a,sp
      000799 24 F9            [12] 2488 	add	a,#0xf9
      00079B F5 81            [12] 2489 	mov	sp,a
      00079D D0 00            [24] 2490 	pop	ar0
      00079F D0 01            [24] 2491 	pop	ar1
      0007A1 D0 07            [24] 2492 	pop	ar7
      0007A3                       2493 00144$:
                                   2494 ;	../../../core/loader/elfloader.c:286: elfloader_arch_relocate(fd, sectionaddr, sectionbase, &rela, addr);
      0007A3 7E 00            [12] 2495 	mov	r6,#0x00
      0007A5 7D 40            [12] 2496 	mov	r5,#0x40
      0007A7 C0 01            [24] 2497 	push	ar1
      0007A9 C0 00            [24] 2498 	push	ar0
      0007AB 85 00 F0         [24] 2499 	mov	b,ar0
      0007AE E5 81            [12] 2500 	mov	a,sp
      0007B0 24 FC            [12] 2501 	add	a,#0xfc
      0007B2 F8               [12] 2502 	mov	r0,a
      0007B3 E6               [12] 2503 	mov	a,@r0
      0007B4 C0 E0            [24] 2504 	push	acc
      0007B6 08               [12] 2505 	inc	r0
      0007B7 E6               [12] 2506 	mov	a,@r0
      0007B8 C0 E0            [24] 2507 	push	acc
      0007BA 08               [12] 2508 	inc	r0
      0007BB E6               [12] 2509 	mov	a,@r0
      0007BC C0 E0            [24] 2510 	push	acc
      0007BE A8 F0            [24] 2511 	mov	r0,b
      0007C0 C0 07            [24] 2512 	push	ar7
      0007C2 C0 06            [24] 2513 	push	ar6
      0007C4 C0 05            [24] 2514 	push	ar5
      0007C6 85 00 F0         [24] 2515 	mov	b,ar0
      0007C9 E5 81            [12] 2516 	mov	a,sp
      0007CB 24 9F            [12] 2517 	add	a,#0x9f
      0007CD F8               [12] 2518 	mov	r0,a
      0007CE E6               [12] 2519 	mov	a,@r0
      0007CF C0 E0            [24] 2520 	push	acc
      0007D1 08               [12] 2521 	inc	r0
      0007D2 E6               [12] 2522 	mov	a,@r0
      0007D3 C0 E0            [24] 2523 	push	acc
      0007D5 08               [12] 2524 	inc	r0
      0007D6 E6               [12] 2525 	mov	a,@r0
      0007D7 C0 E0            [24] 2526 	push	acc
      0007D9 A8 F0            [24] 2527 	mov	r0,b
      0007DB 85 00 F0         [24] 2528 	mov	b,ar0
      0007DE E5 81            [12] 2529 	mov	a,sp
      0007E0 24 AA            [12] 2530 	add	a,#0xaa
      0007E2 F8               [12] 2531 	mov	r0,a
      0007E3 E6               [12] 2532 	mov	a,@r0
      0007E4 C0 E0            [24] 2533 	push	acc
      0007E6 08               [12] 2534 	inc	r0
      0007E7 E6               [12] 2535 	mov	a,@r0
      0007E8 C0 E0            [24] 2536 	push	acc
      0007EA A8 F0            [24] 2537 	mov	r0,b
      0007EC C0 00            [24] 2538 	push	ar0
      0007EE E5 81            [12] 2539 	mov	a,sp
      0007F0 24 A5            [12] 2540 	add	a,#0xa5
      0007F2 F8               [12] 2541 	mov	r0,a
      0007F3 86 82            [24] 2542 	mov	dpl,@r0
      0007F5 08               [12] 2543 	inc	r0
      0007F6 86 83            [24] 2544 	mov	dph,@r0
      0007F8 D0 00            [24] 2545 	pop	ar0
      0007FA 78r00            [12] 2546 	mov	r0,#_elfloader_arch_relocate
      0007FC 79s00            [12] 2547 	mov	r1,#(_elfloader_arch_relocate >> 8)
      0007FE 7As00            [12] 2548 	mov	r2,#(_elfloader_arch_relocate >> 16)
      000800 12r00r00         [24] 2549 	lcall	__sdcc_banked_call
      000803 E5 81            [12] 2550 	mov	a,sp
      000805 24 F5            [12] 2551 	add	a,#0xf5
      000807 F5 81            [12] 2552 	mov	sp,a
      000809 D0 00            [24] 2553 	pop	ar0
      00080B D0 01            [24] 2554 	pop	ar1
                                   2555 ;	../../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      00080D C0 00            [24] 2556 	push	ar0
      00080F E5 81            [12] 2557 	mov	a,sp
      000811 24 CB            [12] 2558 	add	a,#0xcb
      000813 F8               [12] 2559 	mov	r0,a
      000814 86 04            [24] 2560 	mov	ar4,@r0
      000816 08               [12] 2561 	inc	r0
      000817 86 05            [24] 2562 	mov	ar5,@r0
      000819 E5 81            [12] 2563 	mov	a,sp
      00081B 24 DD            [12] 2564 	add	a,#0xdd
      00081D F8               [12] 2565 	mov	r0,a
      00081E EC               [12] 2566 	mov	a,r4
      00081F 26               [12] 2567 	add	a,@r0
      000820 F6               [12] 2568 	mov	@r0,a
      000821 ED               [12] 2569 	mov	a,r5
      000822 08               [12] 2570 	inc	r0
      000823 36               [12] 2571 	addc	a,@r0
      000824 F6               [12] 2572 	mov	@r0,a
      000825 D0 00            [24] 2573 	pop	ar0
      000827 02r03r1D         [24] 2574 	ljmp	00147$
      00082A                       2575 00145$:
                                   2576 ;	../../../core/loader/elfloader.c:288: return ELFLOADER_OK;
      00082A 90 00 00         [24] 2577 	mov	dptr,#0x0000
      00082D                       2578 00149$:
                                   2579 ;	../../../core/loader/elfloader.c:289: }
      00082D E5 81            [12] 2580 	mov	a,sp
      00082F 24 B2            [12] 2581 	add	a,#0xb2
      000831 F5 81            [12] 2582 	mov	sp,a
      000833 02r00r00         [24] 2583 	ljmp	__sdcc_banked_ret
                                   2584 ;------------------------------------------------------------
                                   2585 ;Allocation info for local variables in function 'find_program_processes'
                                   2586 ;------------------------------------------------------------
                                   2587 ;symtab                    Allocated to stack - sp -64
                                   2588 ;size                      Allocated to stack - sp -66
                                   2589 ;strtab                    Allocated to stack - sp -68
                                   2590 ;fd                        Allocated to stack - sp -59
                                   2591 ;s                         Allocated to stack - sp -15
                                   2592 ;a                         Allocated to registers 
                                   2593 ;name                      Allocated to stack - sp -45
                                   2594 ;sloc0                     Allocated to stack - sp -57
                                   2595 ;sloc1                     Allocated to stack - sp -55
                                   2596 ;sloc2                     Allocated to stack - sp -53
                                   2597 ;sloc3                     Allocated to stack - sp -49
                                   2598 ;sloc4                     Allocated to stack - sp -48
                                   2599 ;------------------------------------------------------------
                                   2600 ;	../../../core/loader/elfloader.c:292: find_program_processes(int fd,
                                   2601 ;	-----------------------------------------
                                   2602 ;	 function find_program_processes
                                   2603 ;	-----------------------------------------
      000836                       2604 _find_program_processes:
      000836 C0 82            [24] 2605 	push	dpl
      000838 C0 83            [24] 2606 	push	dph
      00083A E5 81            [12] 2607 	mov	a,sp
      00083C 24 3A            [12] 2608 	add	a,#0x3a
                                   2609 ;	../../../core/loader/elfloader.c:300: for(a = symtab; a < symtab + size; a += sizeof(s)) {
      00083E F5 81            [12] 2610 	mov	sp,a
      000840 24 C0            [12] 2611 	add	a,#0xc0
      000842 F8               [12] 2612 	mov	r0,a
      000843 86 04            [24] 2613 	mov	ar4,@r0
      000845 08               [12] 2614 	inc	r0
      000846 86 05            [24] 2615 	mov	ar5,@r0
      000848 E5 81            [12] 2616 	mov	a,sp
      00084A 24 D3            [12] 2617 	add	a,#0xd3
      00084C FB               [12] 2618 	mov	r3,a
      00084D E5 81            [12] 2619 	mov	a,sp
      00084F 24 BC            [12] 2620 	add	a,#0xbc
      000851 F8               [12] 2621 	mov	r0,a
      000852 E5 81            [12] 2622 	mov	a,sp
      000854 24 C7            [12] 2623 	add	a,#0xc7
      000856 F9               [12] 2624 	mov	r1,a
      000857 E6               [12] 2625 	mov	a,@r0
      000858 F7               [12] 2626 	mov	@r1,a
      000859 08               [12] 2627 	inc	r0
      00085A 09               [12] 2628 	inc	r1
      00085B E6               [12] 2629 	mov	a,@r0
      00085C F7               [12] 2630 	mov	@r1,a
      00085D E5 81            [12] 2631 	mov	a,sp
      00085F 24 CF            [12] 2632 	add	a,#0xcf
      000861 F8               [12] 2633 	mov	r0,a
      000862 A6 03            [24] 2634 	mov	@r0,ar3
      000864                       2635 00107$:
      000864 E5 81            [12] 2636 	mov	a,sp
      000866 24 C0            [12] 2637 	add	a,#0xc0
      000868 F8               [12] 2638 	mov	r0,a
      000869 86 02            [24] 2639 	mov	ar2,@r0
      00086B 08               [12] 2640 	inc	r0
      00086C 86 07            [24] 2641 	mov	ar7,@r0
      00086E E5 81            [12] 2642 	mov	a,sp
      000870 24 BE            [12] 2643 	add	a,#0xbe
      000872 F8               [12] 2644 	mov	r0,a
      000873 E5 81            [12] 2645 	mov	a,sp
      000875 24 C9            [12] 2646 	add	a,#0xc9
      000877 F9               [12] 2647 	mov	r1,a
      000878 E6               [12] 2648 	mov	a,@r0
      000879 2A               [12] 2649 	add	a,r2
      00087A F7               [12] 2650 	mov	@r1,a
      00087B 08               [12] 2651 	inc	r0
      00087C E6               [12] 2652 	mov	a,@r0
      00087D 3F               [12] 2653 	addc	a,r7
      00087E 09               [12] 2654 	inc	r1
      00087F F7               [12] 2655 	mov	@r1,a
      000880 8C 06            [24] 2656 	mov	ar6,r4
      000882 8D 07            [24] 2657 	mov	ar7,r5
      000884 E5 81            [12] 2658 	mov	a,sp
      000886 24 C9            [12] 2659 	add	a,#0xc9
      000888 F8               [12] 2660 	mov	r0,a
      000889 C3               [12] 2661 	clr	c
      00088A EE               [12] 2662 	mov	a,r6
      00088B 96               [12] 2663 	subb	a,@r0
      00088C EF               [12] 2664 	mov	a,r7
      00088D 08               [12] 2665 	inc	r0
      00088E 96               [12] 2666 	subb	a,@r0
      00088F 40 03            [24] 2667 	jc	00127$
      000891 02r09rEE         [24] 2668 	ljmp	00105$
      000894                       2669 00127$:
                                   2670 ;	../../../core/loader/elfloader.c:301: seek_read(fd, a, (char *)&s, sizeof(s));
      000894 E5 81            [12] 2671 	mov	a,sp
      000896 24 F1            [12] 2672 	add	a,#0xf1
      000898 F9               [12] 2673 	mov	r1,a
      000899 FA               [12] 2674 	mov	r2,a
      00089A 7E 00            [12] 2675 	mov	r6,#0x00
      00089C 7F 40            [12] 2676 	mov	r7,#0x40
      00089E C0 05            [24] 2677 	push	ar5
      0008A0 C0 04            [24] 2678 	push	ar4
      0008A2 C0 03            [24] 2679 	push	ar3
      0008A4 C0 01            [24] 2680 	push	ar1
      0008A6 74 10            [12] 2681 	mov	a,#0x10
      0008A8 C0 E0            [24] 2682 	push	acc
      0008AA E4               [12] 2683 	clr	a
      0008AB C0 E0            [24] 2684 	push	acc
      0008AD C0 02            [24] 2685 	push	ar2
      0008AF C0 06            [24] 2686 	push	ar6
      0008B1 C0 07            [24] 2687 	push	ar7
      0008B3 C0 04            [24] 2688 	push	ar4
      0008B5 C0 05            [24] 2689 	push	ar5
      0008B7 E5 81            [12] 2690 	mov	a,sp
      0008B9 24 BA            [12] 2691 	add	a,#0xba
      0008BB F8               [12] 2692 	mov	r0,a
      0008BC 86 82            [24] 2693 	mov	dpl,@r0
      0008BE 08               [12] 2694 	inc	r0
      0008BF 86 83            [24] 2695 	mov	dph,@r0
      0008C1 78r00            [12] 2696 	mov	r0,#_seek_read
      0008C3 79s00            [12] 2697 	mov	r1,#(_seek_read >> 8)
      0008C5 7As00            [12] 2698 	mov	r2,#(_seek_read >> 16)
      0008C7 12r00r00         [24] 2699 	lcall	__sdcc_banked_call
      0008CA E5 81            [12] 2700 	mov	a,sp
      0008CC 24 F9            [12] 2701 	add	a,#0xf9
      0008CE F5 81            [12] 2702 	mov	sp,a
      0008D0 D0 01            [24] 2703 	pop	ar1
      0008D2 D0 03            [24] 2704 	pop	ar3
      0008D4 D0 04            [24] 2705 	pop	ar4
      0008D6 D0 05            [24] 2706 	pop	ar5
                                   2707 ;	../../../core/loader/elfloader.c:303: if(s.st_name != 0) {
      0008D8 E5 81            [12] 2708 	mov	a,sp
      0008DA 24 CB            [12] 2709 	add	a,#0xcb
      0008DC F8               [12] 2710 	mov	r0,a
      0008DD E7               [12] 2711 	mov	a,@r1
      0008DE F6               [12] 2712 	mov	@r0,a
      0008DF 09               [12] 2713 	inc	r1
      0008E0 E7               [12] 2714 	mov	a,@r1
      0008E1 08               [12] 2715 	inc	r0
      0008E2 F6               [12] 2716 	mov	@r0,a
      0008E3 09               [12] 2717 	inc	r1
      0008E4 E7               [12] 2718 	mov	a,@r1
      0008E5 08               [12] 2719 	inc	r0
      0008E6 F6               [12] 2720 	mov	@r0,a
      0008E7 09               [12] 2721 	inc	r1
      0008E8 E7               [12] 2722 	mov	a,@r1
      0008E9 08               [12] 2723 	inc	r0
      0008EA F6               [12] 2724 	mov	@r0,a
      0008EB 19               [12] 2725 	dec	r1
      0008EC 19               [12] 2726 	dec	r1
      0008ED 19               [12] 2727 	dec	r1
      0008EE E5 81            [12] 2728 	mov	a,sp
      0008F0 24 CB            [12] 2729 	add	a,#0xcb
      0008F2 F8               [12] 2730 	mov	r0,a
      0008F3 E6               [12] 2731 	mov	a,@r0
      0008F4 08               [12] 2732 	inc	r0
      0008F5 46               [12] 2733 	orl	a,@r0
      0008F6 08               [12] 2734 	inc	r0
      0008F7 46               [12] 2735 	orl	a,@r0
      0008F8 08               [12] 2736 	inc	r0
      0008F9 46               [12] 2737 	orl	a,@r0
      0008FA 70 03            [24] 2738 	jnz	00128$
      0008FC 02r09rE4         [24] 2739 	ljmp	00108$
      0008FF                       2740 00128$:
                                   2741 ;	../../../core/loader/elfloader.c:304: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      0008FF C0 01            [24] 2742 	push	ar1
      000901 E5 81            [12] 2743 	mov	a,sp
      000903 24 CF            [12] 2744 	add	a,#0xcf
      000905 F8               [12] 2745 	mov	r0,a
      000906 A6 03            [24] 2746 	mov	@r0,ar3
      000908 08               [12] 2747 	inc	r0
      000909 76 00            [12] 2748 	mov	@r0,#0x00
      00090B 08               [12] 2749 	inc	r0
      00090C 76 40            [12] 2750 	mov	@r0,#0x40
      00090E E5 81            [12] 2751 	mov	a,sp
      000910 24 CA            [12] 2752 	add	a,#0xca
      000912 F8               [12] 2753 	mov	r0,a
      000913 86 06            [24] 2754 	mov	ar6,@r0
      000915 08               [12] 2755 	inc	r0
      000916 86 07            [24] 2756 	mov	ar7,@r0
      000918 E5 81            [12] 2757 	mov	a,sp
      00091A 24 C6            [12] 2758 	add	a,#0xc6
      00091C F8               [12] 2759 	mov	r0,a
      00091D EE               [12] 2760 	mov	a,r6
      00091E 26               [12] 2761 	add	a,@r0
      00091F FE               [12] 2762 	mov	r6,a
      000920 EF               [12] 2763 	mov	a,r7
      000921 08               [12] 2764 	inc	r0
      000922 36               [12] 2765 	addc	a,@r0
      000923 FF               [12] 2766 	mov	r7,a
      000924 C0 05            [24] 2767 	push	ar5
      000926 C0 04            [24] 2768 	push	ar4
      000928 C0 03            [24] 2769 	push	ar3
      00092A C0 01            [24] 2770 	push	ar1
      00092C 74 1E            [12] 2771 	mov	a,#0x1e
      00092E C0 E0            [24] 2772 	push	acc
      000930 E4               [12] 2773 	clr	a
      000931 C0 E0            [24] 2774 	push	acc
      000933 E5 81            [12] 2775 	mov	a,sp
      000935 24 C9            [12] 2776 	add	a,#0xc9
      000937 F8               [12] 2777 	mov	r0,a
      000938 E6               [12] 2778 	mov	a,@r0
      000939 C0 E0            [24] 2779 	push	acc
      00093B 08               [12] 2780 	inc	r0
      00093C E6               [12] 2781 	mov	a,@r0
      00093D C0 E0            [24] 2782 	push	acc
      00093F 08               [12] 2783 	inc	r0
      000940 E6               [12] 2784 	mov	a,@r0
      000941 C0 E0            [24] 2785 	push	acc
      000943 C0 06            [24] 2786 	push	ar6
      000945 C0 07            [24] 2787 	push	ar7
      000947 E5 81            [12] 2788 	mov	a,sp
      000949 24 B9            [12] 2789 	add	a,#0xb9
      00094B F8               [12] 2790 	mov	r0,a
      00094C 86 82            [24] 2791 	mov	dpl,@r0
      00094E 08               [12] 2792 	inc	r0
      00094F 86 83            [24] 2793 	mov	dph,@r0
      000951 78r00            [12] 2794 	mov	r0,#_seek_read
      000953 79s00            [12] 2795 	mov	r1,#(_seek_read >> 8)
      000955 7As00            [12] 2796 	mov	r2,#(_seek_read >> 16)
      000957 12r00r00         [24] 2797 	lcall	__sdcc_banked_call
      00095A E5 81            [12] 2798 	mov	a,sp
      00095C 24 F9            [12] 2799 	add	a,#0xf9
      00095E F5 81            [12] 2800 	mov	sp,a
      000960 D0 01            [24] 2801 	pop	ar1
      000962 D0 03            [24] 2802 	pop	ar3
      000964 D0 04            [24] 2803 	pop	ar4
      000966 D0 05            [24] 2804 	pop	ar5
                                   2805 ;	../../../core/loader/elfloader.c:305: if(strcmp(name, "autostart_processes") == 0) {
      000968 E5 81            [12] 2806 	mov	a,sp
      00096A 24 CE            [12] 2807 	add	a,#0xce
      00096C F8               [12] 2808 	mov	r0,a
      00096D 86 02            [24] 2809 	mov	ar2,@r0
      00096F 7E 00            [12] 2810 	mov	r6,#0x00
      000971 7F 40            [12] 2811 	mov	r7,#0x40
      000973 C0 05            [24] 2812 	push	ar5
      000975 C0 04            [24] 2813 	push	ar4
      000977 C0 03            [24] 2814 	push	ar3
      000979 C0 01            [24] 2815 	push	ar1
      00097B 74r07            [12] 2816 	mov	a,#___str_0
      00097D C0 E0            [24] 2817 	push	acc
      00097F 74s00            [12] 2818 	mov	a,#(___str_0 >> 8)
      000981 C0 E0            [24] 2819 	push	acc
      000983 74 80            [12] 2820 	mov	a,#0x80
      000985 C0 E0            [24] 2821 	push	acc
      000987 8A 82            [24] 2822 	mov	dpl,r2
      000989 8E 83            [24] 2823 	mov	dph,r6
      00098B 8F F0            [24] 2824 	mov	b,r7
      00098D 78r00            [12] 2825 	mov	r0,#_strcmp
      00098F 79s00            [12] 2826 	mov	r1,#(_strcmp >> 8)
      000991 7As00            [12] 2827 	mov	r2,#(_strcmp >> 16)
      000993 12r00r00         [24] 2828 	lcall	__sdcc_banked_call
      000996 AE 82            [24] 2829 	mov	r6,dpl
      000998 AF 83            [24] 2830 	mov	r7,dph
      00099A 15 81            [12] 2831 	dec	sp
      00099C 15 81            [12] 2832 	dec	sp
      00099E 15 81            [12] 2833 	dec	sp
      0009A0 D0 01            [24] 2834 	pop	ar1
      0009A2 D0 03            [24] 2835 	pop	ar3
      0009A4 D0 04            [24] 2836 	pop	ar4
      0009A6 D0 05            [24] 2837 	pop	ar5
      0009A8 D0 01            [24] 2838 	pop	ar1
      0009AA EE               [12] 2839 	mov	a,r6
      0009AB 4F               [12] 2840 	orl	a,r7
      0009AC 70 36            [24] 2841 	jnz	00108$
                                   2842 ;	../../../core/loader/elfloader.c:306: return &data.address[s.st_value];
      0009AE 90r00r2A         [24] 2843 	mov	dptr,#(_data + 0x0003)
      0009B1 E0               [24] 2844 	movx	a,@dptr
      0009B2 FD               [12] 2845 	mov	r5,a
      0009B3 A3               [24] 2846 	inc	dptr
      0009B4 E0               [24] 2847 	movx	a,@dptr
      0009B5 FE               [12] 2848 	mov	r6,a
      0009B6 A3               [24] 2849 	inc	dptr
      0009B7 E0               [24] 2850 	movx	a,@dptr
      0009B8 FF               [12] 2851 	mov	r7,a
      0009B9 E9               [12] 2852 	mov	a,r1
      0009BA 24 04            [12] 2853 	add	a,#0x04
      0009BC F9               [12] 2854 	mov	r1,a
      0009BD E5 81            [12] 2855 	mov	a,sp
      0009BF 24 CB            [12] 2856 	add	a,#0xcb
      0009C1 F8               [12] 2857 	mov	r0,a
      0009C2 E7               [12] 2858 	mov	a,@r1
      0009C3 F6               [12] 2859 	mov	@r0,a
      0009C4 09               [12] 2860 	inc	r1
      0009C5 E7               [12] 2861 	mov	a,@r1
      0009C6 08               [12] 2862 	inc	r0
      0009C7 F6               [12] 2863 	mov	@r0,a
      0009C8 09               [12] 2864 	inc	r1
      0009C9 E7               [12] 2865 	mov	a,@r1
      0009CA 08               [12] 2866 	inc	r0
      0009CB F6               [12] 2867 	mov	@r0,a
      0009CC 09               [12] 2868 	inc	r1
      0009CD E7               [12] 2869 	mov	a,@r1
      0009CE 08               [12] 2870 	inc	r0
      0009CF F6               [12] 2871 	mov	@r0,a
      0009D0 E5 81            [12] 2872 	mov	a,sp
      0009D2 24 CB            [12] 2873 	add	a,#0xcb
      0009D4 F8               [12] 2874 	mov	r0,a
      0009D5 E6               [12] 2875 	mov	a,@r0
      0009D6 2D               [12] 2876 	add	a,r5
      0009D7 FA               [12] 2877 	mov	r2,a
      0009D8 08               [12] 2878 	inc	r0
      0009D9 E6               [12] 2879 	mov	a,@r0
      0009DA 3E               [12] 2880 	addc	a,r6
      0009DB FE               [12] 2881 	mov	r6,a
      0009DC 8A 82            [24] 2882 	mov	dpl,r2
      0009DE 8E 83            [24] 2883 	mov	dph,r6
      0009E0 8F F0            [24] 2884 	mov	b,r7
      0009E2 80 10            [24] 2885 	sjmp	00109$
      0009E4                       2886 00108$:
                                   2887 ;	../../../core/loader/elfloader.c:300: for(a = symtab; a < symtab + size; a += sizeof(s)) {
      0009E4 74 10            [12] 2888 	mov	a,#0x10
      0009E6 2C               [12] 2889 	add	a,r4
      0009E7 FC               [12] 2890 	mov	r4,a
      0009E8 E4               [12] 2891 	clr	a
      0009E9 3D               [12] 2892 	addc	a,r5
      0009EA FD               [12] 2893 	mov	r5,a
      0009EB 02r08r64         [24] 2894 	ljmp	00107$
      0009EE                       2895 00105$:
                                   2896 ;	../../../core/loader/elfloader.c:310: return NULL;
      0009EE 90 00 00         [24] 2897 	mov	dptr,#0x0000
      0009F1 75 F0 00         [24] 2898 	mov	b,#0x00
      0009F4                       2899 00109$:
                                   2900 ;	../../../core/loader/elfloader.c:312: }
      0009F4 E5 81            [12] 2901 	mov	a,sp
      0009F6 24 C4            [12] 2902 	add	a,#0xc4
      0009F8 F5 81            [12] 2903 	mov	sp,a
      0009FA 02r00r00         [24] 2904 	ljmp	__sdcc_banked_ret
                                   2905 ;------------------------------------------------------------
                                   2906 ;Allocation info for local variables in function 'elfloader_init'
                                   2907 ;------------------------------------------------------------
                                   2908 ;	../../../core/loader/elfloader.c:315: elfloader_init(void)
                                   2909 ;	-----------------------------------------
                                   2910 ;	 function elfloader_init
                                   2911 ;	-----------------------------------------
      0009FD                       2912 _elfloader_init:
                                   2913 ;	../../../core/loader/elfloader.c:317: elfloader_autostart_processes = NULL;
      0009FD 90r00r1E         [24] 2914 	mov	dptr,#_elfloader_autostart_processes
      000A00 E4               [12] 2915 	clr	a
      000A01 F0               [24] 2916 	movx	@dptr,a
      000A02 A3               [24] 2917 	inc	dptr
      000A03 F0               [24] 2918 	movx	@dptr,a
      000A04 A3               [24] 2919 	inc	dptr
      000A05 F0               [24] 2920 	movx	@dptr,a
                                   2921 ;	../../../core/loader/elfloader.c:318: }
      000A06 02r00r00         [24] 2922 	ljmp	__sdcc_banked_ret
                                   2923 ;------------------------------------------------------------
                                   2924 ;Allocation info for local variables in function 'elfloader_load'
                                   2925 ;------------------------------------------------------------
                                   2926 ;fd                        Allocated to stack - sp -230
                                   2927 ;ehdr                      Allocated to stack - sp -114
                                   2928 ;shdr                      Allocated to stack - sp -61
                                   2929 ;strtable                  Allocated to stack - sp -154
                                   2930 ;strs                      Allocated to stack - sp -19
                                   2931 ;shdrptr                   Allocated to stack - sp -168
                                   2932 ;nameptr                   Allocated to registers 
                                   2933 ;name                      Allocated to stack - sp -166
                                   2934 ;i                         Allocated to stack - sp -21
                                   2935 ;shdrnum                   Allocated to stack - sp -17
                                   2936 ;shdrsize                  Allocated to stack - sp -15
                                   2937 ;using_relas               Allocated to stack - sp -62
                                   2938 ;textoff                   Allocated to stack - sp -13
                                   2939 ;textsize                  Allocated to stack - sp -11
                                   2940 ;textrelaoff               Allocated to stack - sp -172
                                   2941 ;textrelasize              Allocated to stack - sp -212
                                   2942 ;dataoff                   Allocated to stack - sp -9
                                   2943 ;datasize                  Allocated to stack - sp -214
                                   2944 ;datarelaoff               Allocated to stack - sp -228
                                   2945 ;datarelasize              Allocated to stack - sp -216
                                   2946 ;rodataoff                 Allocated to stack - sp -7
                                   2947 ;rodatasize                Allocated to stack - sp -218
                                   2948 ;rodatarelaoff             Allocated to stack - sp -226
                                   2949 ;rodatarelasize            Allocated to stack - sp -220
                                   2950 ;symtaboff                 Allocated to stack - sp -5
                                   2951 ;symtabsize                Allocated to stack - sp -3
                                   2952 ;strtaboff                 Allocated to stack - sp -1
                                   2953 ;strtabsize                Allocated to stack - sp -222
                                   2954 ;bsssize                   Allocated to stack - sp -224
                                   2955 ;process                   Allocated to stack - sp -176
                                   2956 ;ret                       Allocated to registers r6 r7 
                                   2957 ;sloc0                     Allocated to stack - sp -228
                                   2958 ;sloc1                     Allocated to stack - sp -226
                                   2959 ;sloc2                     Allocated to stack - sp -224
                                   2960 ;sloc3                     Allocated to stack - sp -26
                                   2961 ;sloc4                     Allocated to stack - sp -222
                                   2962 ;sloc5                     Allocated to stack - sp -220
                                   2963 ;sloc6                     Allocated to stack - sp -218
                                   2964 ;sloc7                     Allocated to stack - sp -216
                                   2965 ;sloc8                     Allocated to stack - sp -214
                                   2966 ;sloc9                     Allocated to stack - sp -212
                                   2967 ;sloc10                    Allocated to stack - sp -210
                                   2968 ;sloc11                    Allocated to stack - sp -12
                                   2969 ;sloc12                    Allocated to stack - sp -209
                                   2970 ;sloc13                    Allocated to stack - sp -208
                                   2971 ;sloc14                    Allocated to stack - sp -207
                                   2972 ;sloc15                    Allocated to stack - sp -206
                                   2973 ;sloc16                    Allocated to stack - sp -205
                                   2974 ;sloc17                    Allocated to stack - sp -204
                                   2975 ;sloc18                    Allocated to stack - sp -203
                                   2976 ;sloc19                    Allocated to stack - sp -202
                                   2977 ;sloc20                    Allocated to stack - sp -201
                                   2978 ;sloc21                    Allocated to stack - sp -200
                                   2979 ;sloc22                    Allocated to stack - sp -199
                                   2980 ;sloc23                    Allocated to stack - sp -198
                                   2981 ;sloc24                    Allocated to stack - sp -197
                                   2982 ;sloc25                    Allocated to stack - sp -196
                                   2983 ;sloc26                    Allocated to stack - sp -195
                                   2984 ;sloc27                    Allocated to stack - sp -194
                                   2985 ;sloc28                    Allocated to stack - sp -193
                                   2986 ;sloc29                    Allocated to stack - sp -192
                                   2987 ;sloc30                    Allocated to stack - sp -191
                                   2988 ;sloc31                    Allocated to stack - sp -190
                                   2989 ;sloc32                    Allocated to stack - sp -189
                                   2990 ;sloc33                    Allocated to stack - sp -188
                                   2991 ;sloc34                    Allocated to stack - sp -187
                                   2992 ;sloc35                    Allocated to stack - sp -186
                                   2993 ;sloc36                    Allocated to stack - sp -185
                                   2994 ;sloc37                    Allocated to stack - sp -184
                                   2995 ;sloc38                    Allocated to stack - sp -183
                                   2996 ;sloc39                    Allocated to stack - sp -182
                                   2997 ;sloc40                    Allocated to stack - sp -181
                                   2998 ;sloc41                    Allocated to stack - sp -180
                                   2999 ;sloc42                    Allocated to stack - sp -179
                                   3000 ;sloc43                    Allocated to stack - sp -178
                                   3001 ;sloc44                    Allocated to stack - sp -177
                                   3002 ;sloc45                    Allocated to stack - sp -176
                                   3003 ;sloc46                    Allocated to stack - sp -172
                                   3004 ;sloc47                    Allocated to stack - sp -170
                                   3005 ;------------------------------------------------------------
                                   3006 ;	../../../core/loader/elfloader.c:337: elfloader_load(int fd)
                                   3007 ;	-----------------------------------------
                                   3008 ;	 function elfloader_load
                                   3009 ;	-----------------------------------------
      000A09                       3010 _elfloader_load:
      000A09 C0 82            [24] 3011 	push	dpl
      000A0B C0 83            [24] 3012 	push	dph
      000A0D E5 81            [12] 3013 	mov	a,sp
      000A0F 24 E5            [12] 3014 	add	a,#0xe5
                                   3015 ;	../../../core/loader/elfloader.c:350: unsigned char using_relas = -1;
      000A11 F5 81            [12] 3016 	mov	sp,a
      000A13 24 C2            [12] 3017 	add	a,#0xc2
      000A15 F8               [12] 3018 	mov	r0,a
      000A16 76 FF            [12] 3019 	mov	@r0,#0xff
                                   3020 ;	../../../core/loader/elfloader.c:351: unsigned short textoff = 0, textsize, textrelaoff = 0, textrelasize;
      000A18 E5 81            [12] 3021 	mov	a,sp
      000A1A 24 F3            [12] 3022 	add	a,#0xf3
      000A1C F8               [12] 3023 	mov	r0,a
      000A1D E4               [12] 3024 	clr	a
      000A1E F6               [12] 3025 	mov	@r0,a
      000A1F 08               [12] 3026 	inc	r0
      000A20 F6               [12] 3027 	mov	@r0,a
      000A21 E5 81            [12] 3028 	mov	a,sp
      000A23 24 54            [12] 3029 	add	a,#0x54
      000A25 F8               [12] 3030 	mov	r0,a
      000A26 E4               [12] 3031 	clr	a
      000A27 F6               [12] 3032 	mov	@r0,a
      000A28 08               [12] 3033 	inc	r0
      000A29 F6               [12] 3034 	mov	@r0,a
                                   3035 ;	../../../core/loader/elfloader.c:352: unsigned short dataoff = 0, datasize, datarelaoff = 0, datarelasize;
      000A2A E5 81            [12] 3036 	mov	a,sp
      000A2C 24 F7            [12] 3037 	add	a,#0xf7
      000A2E F8               [12] 3038 	mov	r0,a
      000A2F E4               [12] 3039 	clr	a
      000A30 F6               [12] 3040 	mov	@r0,a
      000A31 08               [12] 3041 	inc	r0
      000A32 F6               [12] 3042 	mov	@r0,a
      000A33 E5 81            [12] 3043 	mov	a,sp
      000A35 24 1C            [12] 3044 	add	a,#0x1c
      000A37 F8               [12] 3045 	mov	r0,a
      000A38 E4               [12] 3046 	clr	a
      000A39 F6               [12] 3047 	mov	@r0,a
      000A3A 08               [12] 3048 	inc	r0
      000A3B F6               [12] 3049 	mov	@r0,a
                                   3050 ;	../../../core/loader/elfloader.c:353: unsigned short rodataoff = 0, rodatasize, rodatarelaoff = 0, rodatarelasize;
      000A3C E5 81            [12] 3051 	mov	a,sp
      000A3E 24 F9            [12] 3052 	add	a,#0xf9
      000A40 F8               [12] 3053 	mov	r0,a
      000A41 E4               [12] 3054 	clr	a
      000A42 F6               [12] 3055 	mov	@r0,a
      000A43 08               [12] 3056 	inc	r0
      000A44 F6               [12] 3057 	mov	@r0,a
      000A45 E5 81            [12] 3058 	mov	a,sp
      000A47 24 1E            [12] 3059 	add	a,#0x1e
      000A49 F8               [12] 3060 	mov	r0,a
      000A4A E4               [12] 3061 	clr	a
      000A4B F6               [12] 3062 	mov	@r0,a
      000A4C 08               [12] 3063 	inc	r0
      000A4D F6               [12] 3064 	mov	@r0,a
                                   3065 ;	../../../core/loader/elfloader.c:354: unsigned short symtaboff = 0, symtabsize;
      000A4E E5 81            [12] 3066 	mov	a,sp
      000A50 24 FB            [12] 3067 	add	a,#0xfb
      000A52 F8               [12] 3068 	mov	r0,a
      000A53 E4               [12] 3069 	clr	a
      000A54 F6               [12] 3070 	mov	@r0,a
      000A55 08               [12] 3071 	inc	r0
      000A56 F6               [12] 3072 	mov	@r0,a
                                   3073 ;	../../../core/loader/elfloader.c:355: unsigned short strtaboff = 0, strtabsize;
      000A57 A8 81            [24] 3074 	mov	r0,sp
      000A59 18               [12] 3075 	dec	r0
      000A5A F6               [12] 3076 	mov	@r0,a
      000A5B 08               [12] 3077 	inc	r0
      000A5C F6               [12] 3078 	mov	@r0,a
                                   3079 ;	../../../core/loader/elfloader.c:356: unsigned short bsssize = 0;
      000A5D E5 81            [12] 3080 	mov	a,sp
      000A5F 24 20            [12] 3081 	add	a,#0x20
      000A61 F8               [12] 3082 	mov	r0,a
      000A62 E4               [12] 3083 	clr	a
      000A63 F6               [12] 3084 	mov	@r0,a
      000A64 08               [12] 3085 	inc	r0
      000A65 F6               [12] 3086 	mov	@r0,a
                                   3087 ;	../../../core/loader/elfloader.c:361: elfloader_unknown[0] = 0;
      000A66 90r00r00         [24] 3088 	mov	dptr,#_elfloader_unknown
      000A69 F0               [24] 3089 	movx	@dptr,a
                                   3090 ;	../../../core/loader/elfloader.c:364: seek_read(fd, 0, (char *)&ehdr, sizeof(ehdr));
      000A6A E5 81            [12] 3091 	mov	a,sp
      000A6C 24 8E            [12] 3092 	add	a,#0x8e
      000A6E FA               [12] 3093 	mov	r2,a
      000A6F FB               [12] 3094 	mov	r3,a
      000A70 7C 00            [12] 3095 	mov	r4,#0x00
      000A72 7F 40            [12] 3096 	mov	r7,#0x40
      000A74 C0 02            [24] 3097 	push	ar2
      000A76 74 34            [12] 3098 	mov	a,#0x34
      000A78 C0 E0            [24] 3099 	push	acc
      000A7A E4               [12] 3100 	clr	a
      000A7B C0 E0            [24] 3101 	push	acc
      000A7D C0 03            [24] 3102 	push	ar3
      000A7F C0 04            [24] 3103 	push	ar4
      000A81 C0 07            [24] 3104 	push	ar7
      000A83 C0 E0            [24] 3105 	push	acc
      000A85 C0 E0            [24] 3106 	push	acc
      000A87 E5 81            [12] 3107 	mov	a,sp
      000A89 24 12            [12] 3108 	add	a,#0x12
      000A8B F8               [12] 3109 	mov	r0,a
      000A8C 86 82            [24] 3110 	mov	dpl,@r0
      000A8E 08               [12] 3111 	inc	r0
      000A8F 86 83            [24] 3112 	mov	dph,@r0
      000A91 78r00            [12] 3113 	mov	r0,#_seek_read
      000A93 79s00            [12] 3114 	mov	r1,#(_seek_read >> 8)
      000A95 7As00            [12] 3115 	mov	r2,#(_seek_read >> 16)
      000A97 12r00r00         [24] 3116 	lcall	__sdcc_banked_call
      000A9A E5 81            [12] 3117 	mov	a,sp
      000A9C 24 F9            [12] 3118 	add	a,#0xf9
      000A9E F5 81            [12] 3119 	mov	sp,a
      000AA0 D0 02            [24] 3120 	pop	ar2
                                   3121 ;	../../../core/loader/elfloader.c:369: if(memcmp(ehdr.e_ident, elf_magic_header, sizeof(elf_magic_header)) != 0) {
      000AA2 8A 07            [24] 3122 	mov	ar7,r2
      000AA4 7E 00            [12] 3123 	mov	r6,#0x00
      000AA6 7C 40            [12] 3124 	mov	r4,#0x40
      000AA8 C0 02            [24] 3125 	push	ar2
      000AAA 74 07            [12] 3126 	mov	a,#0x07
      000AAC C0 E0            [24] 3127 	push	acc
      000AAE E4               [12] 3128 	clr	a
      000AAF C0 E0            [24] 3129 	push	acc
      000AB1 74r00            [12] 3130 	mov	a,#_elf_magic_header
      000AB3 C0 E0            [24] 3131 	push	acc
      000AB5 74s00            [12] 3132 	mov	a,#(_elf_magic_header >> 8)
      000AB7 C0 E0            [24] 3133 	push	acc
      000AB9 74 80            [12] 3134 	mov	a,#0x80
      000ABB C0 E0            [24] 3135 	push	acc
      000ABD 8F 82            [24] 3136 	mov	dpl,r7
      000ABF 8E 83            [24] 3137 	mov	dph,r6
      000AC1 8C F0            [24] 3138 	mov	b,r4
      000AC3 78r00            [12] 3139 	mov	r0,#_memcmp
      000AC5 79s00            [12] 3140 	mov	r1,#(_memcmp >> 8)
      000AC7 7As00            [12] 3141 	mov	r2,#(_memcmp >> 16)
      000AC9 12r00r00         [24] 3142 	lcall	__sdcc_banked_call
      000ACC AE 82            [24] 3143 	mov	r6,dpl
      000ACE AF 83            [24] 3144 	mov	r7,dph
      000AD0 E5 81            [12] 3145 	mov	a,sp
      000AD2 24 FB            [12] 3146 	add	a,#0xfb
      000AD4 F5 81            [12] 3147 	mov	sp,a
      000AD6 D0 02            [24] 3148 	pop	ar2
      000AD8 EE               [12] 3149 	mov	a,r6
      000AD9 4F               [12] 3150 	orl	a,r7
      000ADA 60 06            [24] 3151 	jz	00104$
                                   3152 ;	../../../core/loader/elfloader.c:371: return ELFLOADER_BAD_ELF_HEADER;
      000ADC 90 00 01         [24] 3153 	mov	dptr,#0x0001
      000ADF 02r1ArB8         [24] 3154 	ljmp	00207$
      000AE2                       3155 00104$:
                                   3156 ;	../../../core/loader/elfloader.c:375: shdrptr = ehdr.e_shoff;
      000AE2 74 20            [12] 3157 	mov	a,#0x20
      000AE4 2A               [12] 3158 	add	a,r2
      000AE5 F9               [12] 3159 	mov	r1,a
      000AE6 87 06            [24] 3160 	mov	ar6,@r1
      000AE8 09               [12] 3161 	inc	r1
      000AE9 87 07            [24] 3162 	mov	ar7,@r1
      000AEB 19               [12] 3163 	dec	r1
                                   3164 ;	../../../core/loader/elfloader.c:376: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
      000AEC E5 81            [12] 3165 	mov	a,sp
      000AEE 24 C3            [12] 3166 	add	a,#0xc3
      000AF0 F8               [12] 3167 	mov	r0,a
      000AF1 FB               [12] 3168 	mov	r3,a
      000AF2 7C 00            [12] 3169 	mov	r4,#0x00
      000AF4 7D 40            [12] 3170 	mov	r5,#0x40
      000AF6 C0 02            [24] 3171 	push	ar2
      000AF8 C0 01            [24] 3172 	push	ar1
      000AFA C0 00            [24] 3173 	push	ar0
      000AFC 74 28            [12] 3174 	mov	a,#0x28
      000AFE C0 E0            [24] 3175 	push	acc
      000B00 E4               [12] 3176 	clr	a
      000B01 C0 E0            [24] 3177 	push	acc
      000B03 C0 03            [24] 3178 	push	ar3
      000B05 C0 04            [24] 3179 	push	ar4
      000B07 C0 05            [24] 3180 	push	ar5
      000B09 C0 06            [24] 3181 	push	ar6
      000B0B C0 07            [24] 3182 	push	ar7
      000B0D C0 00            [24] 3183 	push	ar0
      000B0F E5 81            [12] 3184 	mov	a,sp
      000B11 24 0F            [12] 3185 	add	a,#0x0f
      000B13 F8               [12] 3186 	mov	r0,a
      000B14 86 82            [24] 3187 	mov	dpl,@r0
      000B16 08               [12] 3188 	inc	r0
      000B17 86 83            [24] 3189 	mov	dph,@r0
      000B19 D0 00            [24] 3190 	pop	ar0
      000B1B 78r00            [12] 3191 	mov	r0,#_seek_read
      000B1D 79s00            [12] 3192 	mov	r1,#(_seek_read >> 8)
      000B1F 7As00            [12] 3193 	mov	r2,#(_seek_read >> 16)
      000B21 12r00r00         [24] 3194 	lcall	__sdcc_banked_call
      000B24 E5 81            [12] 3195 	mov	a,sp
      000B26 24 F9            [12] 3196 	add	a,#0xf9
      000B28 F5 81            [12] 3197 	mov	sp,a
      000B2A D0 00            [24] 3198 	pop	ar0
      000B2C D0 01            [24] 3199 	pop	ar1
      000B2E D0 02            [24] 3200 	pop	ar2
                                   3201 ;	../../../core/loader/elfloader.c:379: shdrsize = ehdr.e_shentsize;
      000B30 74 2E            [12] 3202 	mov	a,#0x2e
      000B32 2A               [12] 3203 	add	a,r2
      000B33 FF               [12] 3204 	mov	r7,a
      000B34 C0 00            [24] 3205 	push	ar0
      000B36 E5 81            [12] 3206 	mov	a,sp
      000B38 24 F0            [12] 3207 	add	a,#0xf0
      000B3A F8               [12] 3208 	mov	r0,a
      000B3B C0 01            [24] 3209 	push	ar1
      000B3D A9 07            [24] 3210 	mov	r1,ar7
      000B3F E7               [12] 3211 	mov	a,@r1
      000B40 F6               [12] 3212 	mov	@r0,a
      000B41 09               [12] 3213 	inc	r1
      000B42 E7               [12] 3214 	mov	a,@r1
      000B43 08               [12] 3215 	inc	r0
      000B44 F6               [12] 3216 	mov	@r0,a
      000B45 D0 01            [24] 3217 	pop	ar1
                                   3218 ;	../../../core/loader/elfloader.c:380: shdrnum = ehdr.e_shnum;
      000B47 74 30            [12] 3219 	mov	a,#0x30
      000B49 2A               [12] 3220 	add	a,r2
      000B4A FF               [12] 3221 	mov	r7,a
      000B4B E5 81            [12] 3222 	mov	a,sp
      000B4D 24 EE            [12] 3223 	add	a,#0xee
      000B4F F8               [12] 3224 	mov	r0,a
      000B50 C0 01            [24] 3225 	push	ar1
      000B52 A9 07            [24] 3226 	mov	r1,ar7
      000B54 E7               [12] 3227 	mov	a,@r1
      000B55 F6               [12] 3228 	mov	@r0,a
      000B56 09               [12] 3229 	inc	r1
      000B57 E7               [12] 3230 	mov	a,@r1
      000B58 08               [12] 3231 	inc	r0
      000B59 F6               [12] 3232 	mov	@r0,a
      000B5A D0 01            [24] 3233 	pop	ar1
      000B5C D0 00            [24] 3234 	pop	ar0
                                   3235 ;	../../../core/loader/elfloader.c:386: (char *)&strtable, sizeof(strtable));
      000B5E E5 81            [12] 3236 	mov	a,sp
      000B60 24 66            [12] 3237 	add	a,#0x66
      000B62 FF               [12] 3238 	mov	r7,a
      000B63 FE               [12] 3239 	mov	r6,a
      000B64 7D 00            [12] 3240 	mov	r5,#0x00
      000B66 7C 40            [12] 3241 	mov	r4,#0x40
                                   3242 ;	../../../core/loader/elfloader.c:385: seek_read(fd, ehdr.e_shoff + shdrsize * ehdr.e_shstrndx,
      000B68 C0 00            [24] 3243 	push	ar0
      000B6A E5 81            [12] 3244 	mov	a,sp
      000B6C 24 21            [12] 3245 	add	a,#0x21
      000B6E F8               [12] 3246 	mov	r0,a
      000B6F E7               [12] 3247 	mov	a,@r1
      000B70 F6               [12] 3248 	mov	@r0,a
      000B71 09               [12] 3249 	inc	r1
      000B72 E7               [12] 3250 	mov	a,@r1
      000B73 08               [12] 3251 	inc	r0
      000B74 F6               [12] 3252 	mov	@r0,a
      000B75 19               [12] 3253 	dec	r1
      000B76 74 32            [12] 3254 	mov	a,#0x32
      000B78 2A               [12] 3255 	add	a,r2
      000B79 FB               [12] 3256 	mov	r3,a
      000B7A A8 03            [24] 3257 	mov	r0,ar3
      000B7C 86 02            [24] 3258 	mov	ar2,@r0
      000B7E 08               [12] 3259 	inc	r0
      000B7F 86 03            [24] 3260 	mov	ar3,@r0
      000B81 D0 00            [24] 3261 	pop	ar0
      000B83 C0 07            [24] 3262 	push	ar7
      000B85 C0 06            [24] 3263 	push	ar6
      000B87 C0 05            [24] 3264 	push	ar5
      000B89 C0 04            [24] 3265 	push	ar4
      000B8B C0 01            [24] 3266 	push	ar1
      000B8D C0 00            [24] 3267 	push	ar0
      000B8F C0 02            [24] 3268 	push	ar2
      000B91 C0 03            [24] 3269 	push	ar3
      000B93 C0 00            [24] 3270 	push	ar0
      000B95 E5 81            [12] 3271 	mov	a,sp
      000B97 24 E8            [12] 3272 	add	a,#0xe8
      000B99 F8               [12] 3273 	mov	r0,a
      000B9A 86 82            [24] 3274 	mov	dpl,@r0
      000B9C 08               [12] 3275 	inc	r0
      000B9D 86 83            [24] 3276 	mov	dph,@r0
      000B9F D0 00            [24] 3277 	pop	ar0
      000BA1 12r00r00         [24] 3278 	lcall	__mulint
      000BA4 AA 82            [24] 3279 	mov	r2,dpl
      000BA6 AB 83            [24] 3280 	mov	r3,dph
      000BA8 15 81            [12] 3281 	dec	sp
      000BAA 15 81            [12] 3282 	dec	sp
      000BAC D0 00            [24] 3283 	pop	ar0
      000BAE D0 01            [24] 3284 	pop	ar1
      000BB0 D0 04            [24] 3285 	pop	ar4
      000BB2 D0 05            [24] 3286 	pop	ar5
      000BB4 D0 06            [24] 3287 	pop	ar6
      000BB6 D0 07            [24] 3288 	pop	ar7
      000BB8 C0 00            [24] 3289 	push	ar0
      000BBA E5 81            [12] 3290 	mov	a,sp
      000BBC 24 21            [12] 3291 	add	a,#0x21
      000BBE F8               [12] 3292 	mov	r0,a
      000BBF EA               [12] 3293 	mov	a,r2
      000BC0 26               [12] 3294 	add	a,@r0
      000BC1 FA               [12] 3295 	mov	r2,a
      000BC2 EB               [12] 3296 	mov	a,r3
      000BC3 08               [12] 3297 	inc	r0
      000BC4 36               [12] 3298 	addc	a,@r0
      000BC5 FB               [12] 3299 	mov	r3,a
      000BC6 D0 00            [24] 3300 	pop	ar0
      000BC8 C0 07            [24] 3301 	push	ar7
      000BCA C0 01            [24] 3302 	push	ar1
      000BCC C0 00            [24] 3303 	push	ar0
      000BCE 74 28            [12] 3304 	mov	a,#0x28
      000BD0 C0 E0            [24] 3305 	push	acc
      000BD2 E4               [12] 3306 	clr	a
      000BD3 C0 E0            [24] 3307 	push	acc
      000BD5 C0 06            [24] 3308 	push	ar6
      000BD7 C0 05            [24] 3309 	push	ar5
      000BD9 C0 04            [24] 3310 	push	ar4
      000BDB C0 02            [24] 3311 	push	ar2
      000BDD C0 03            [24] 3312 	push	ar3
      000BDF C0 00            [24] 3313 	push	ar0
      000BE1 E5 81            [12] 3314 	mov	a,sp
      000BE3 24 0F            [12] 3315 	add	a,#0x0f
      000BE5 F8               [12] 3316 	mov	r0,a
      000BE6 86 82            [24] 3317 	mov	dpl,@r0
      000BE8 08               [12] 3318 	inc	r0
      000BE9 86 83            [24] 3319 	mov	dph,@r0
      000BEB D0 00            [24] 3320 	pop	ar0
      000BED 78r00            [12] 3321 	mov	r0,#_seek_read
      000BEF 79s00            [12] 3322 	mov	r1,#(_seek_read >> 8)
      000BF1 7As00            [12] 3323 	mov	r2,#(_seek_read >> 16)
      000BF3 12r00r00         [24] 3324 	lcall	__sdcc_banked_call
      000BF6 E5 81            [12] 3325 	mov	a,sp
      000BF8 24 F9            [12] 3326 	add	a,#0xf9
      000BFA F5 81            [12] 3327 	mov	sp,a
      000BFC D0 00            [24] 3328 	pop	ar0
      000BFE D0 01            [24] 3329 	pop	ar1
      000C00 D0 07            [24] 3330 	pop	ar7
                                   3331 ;	../../../core/loader/elfloader.c:391: strs = strtable.sh_offset;
      000C02 74 10            [12] 3332 	mov	a,#0x10
      000C04 2F               [12] 3333 	add	a,r7
      000C05 FF               [12] 3334 	mov	r7,a
      000C06 C0 00            [24] 3335 	push	ar0
      000C08 E5 81            [12] 3336 	mov	a,sp
      000C0A 24 EC            [12] 3337 	add	a,#0xec
      000C0C F8               [12] 3338 	mov	r0,a
      000C0D C0 01            [24] 3339 	push	ar1
      000C0F A9 07            [24] 3340 	mov	r1,ar7
      000C11 E7               [12] 3341 	mov	a,@r1
      000C12 F6               [12] 3342 	mov	@r0,a
      000C13 09               [12] 3343 	inc	r1
      000C14 E7               [12] 3344 	mov	a,@r1
      000C15 08               [12] 3345 	inc	r0
      000C16 F6               [12] 3346 	mov	@r0,a
      000C17 D0 01            [24] 3347 	pop	ar1
                                   3348 ;	../../../core/loader/elfloader.c:414: rodatasize = rodatarelasize = symtabsize = strtabsize = 0;
      000C19 E5 81            [12] 3349 	mov	a,sp
      000C1B 24 21            [12] 3350 	add	a,#0x21
      000C1D F8               [12] 3351 	mov	r0,a
      000C1E E4               [12] 3352 	clr	a
      000C1F F6               [12] 3353 	mov	@r0,a
      000C20 08               [12] 3354 	inc	r0
      000C21 F6               [12] 3355 	mov	@r0,a
      000C22 E5 81            [12] 3356 	mov	a,sp
      000C24 24 FC            [12] 3357 	add	a,#0xfc
      000C26 F8               [12] 3358 	mov	r0,a
      000C27 E4               [12] 3359 	clr	a
      000C28 F6               [12] 3360 	mov	@r0,a
      000C29 08               [12] 3361 	inc	r0
      000C2A F6               [12] 3362 	mov	@r0,a
      000C2B E5 81            [12] 3363 	mov	a,sp
      000C2D 24 23            [12] 3364 	add	a,#0x23
      000C2F F8               [12] 3365 	mov	r0,a
      000C30 E4               [12] 3366 	clr	a
      000C31 F6               [12] 3367 	mov	@r0,a
      000C32 08               [12] 3368 	inc	r0
      000C33 F6               [12] 3369 	mov	@r0,a
      000C34 E5 81            [12] 3370 	mov	a,sp
      000C36 24 25            [12] 3371 	add	a,#0x25
      000C38 F8               [12] 3372 	mov	r0,a
      000C39 E4               [12] 3373 	clr	a
      000C3A F6               [12] 3374 	mov	@r0,a
      000C3B 08               [12] 3375 	inc	r0
      000C3C F6               [12] 3376 	mov	@r0,a
      000C3D E5 81            [12] 3377 	mov	a,sp
      000C3F 24 27            [12] 3378 	add	a,#0x27
      000C41 F8               [12] 3379 	mov	r0,a
      000C42 E4               [12] 3380 	clr	a
      000C43 F6               [12] 3381 	mov	@r0,a
      000C44 08               [12] 3382 	inc	r0
      000C45 F6               [12] 3383 	mov	@r0,a
      000C46 E5 81            [12] 3384 	mov	a,sp
      000C48 24 29            [12] 3385 	add	a,#0x29
      000C4A F8               [12] 3386 	mov	r0,a
      000C4B E4               [12] 3387 	clr	a
      000C4C F6               [12] 3388 	mov	@r0,a
      000C4D 08               [12] 3389 	inc	r0
      000C4E F6               [12] 3390 	mov	@r0,a
      000C4F E5 81            [12] 3391 	mov	a,sp
      000C51 24 2B            [12] 3392 	add	a,#0x2b
      000C53 F8               [12] 3393 	mov	r0,a
      000C54 E4               [12] 3394 	clr	a
      000C55 F6               [12] 3395 	mov	@r0,a
      000C56 08               [12] 3396 	inc	r0
      000C57 F6               [12] 3397 	mov	@r0,a
      000C58 E5 81            [12] 3398 	mov	a,sp
      000C5A 24 F4            [12] 3399 	add	a,#0xf4
      000C5C F8               [12] 3400 	mov	r0,a
      000C5D E4               [12] 3401 	clr	a
      000C5E F6               [12] 3402 	mov	@r0,a
      000C5F 08               [12] 3403 	inc	r0
      000C60 F6               [12] 3404 	mov	@r0,a
                                   3405 ;	../../../core/loader/elfloader.c:416: bss.number = data.number = rodata.number = text.number = -1;
      000C61 90r00r33         [24] 3406 	mov	dptr,#_text
      000C64 14               [12] 3407 	dec	a
      000C65 F0               [24] 3408 	movx	@dptr,a
      000C66 90r00r2D         [24] 3409 	mov	dptr,#_rodata
      000C69 F0               [24] 3410 	movx	@dptr,a
      000C6A 90r00r27         [24] 3411 	mov	dptr,#_data
      000C6D F0               [24] 3412 	movx	@dptr,a
      000C6E 90r00r21         [24] 3413 	mov	dptr,#_bss
      000C71 F0               [24] 3414 	movx	@dptr,a
                                   3415 ;	../../../core/loader/elfloader.c:418: shdrptr = ehdr.e_shoff;
      000C72 E5 81            [12] 3416 	mov	a,sp
      000C74 24 57            [12] 3417 	add	a,#0x57
      000C76 F8               [12] 3418 	mov	r0,a
      000C77 E7               [12] 3419 	mov	a,@r1
      000C78 F6               [12] 3420 	mov	@r0,a
      000C79 09               [12] 3421 	inc	r1
      000C7A E7               [12] 3422 	mov	a,@r1
      000C7B 08               [12] 3423 	inc	r0
      000C7C F6               [12] 3424 	mov	@r0,a
      000C7D D0 00            [24] 3425 	pop	ar0
                                   3426 ;	../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      000C7F 88 02            [24] 3427 	mov	ar2,r0
      000C81 E5 81            [12] 3428 	mov	a,sp
      000C83 24 2E            [12] 3429 	add	a,#0x2e
      000C85 F9               [12] 3430 	mov	r1,a
      000C86 E5 81            [12] 3431 	mov	a,sp
      000C88 24 5A            [12] 3432 	add	a,#0x5a
      000C8A F7               [12] 3433 	mov	@r1,a
      000C8B 74 04            [12] 3434 	mov	a,#0x04
      000C8D 28               [12] 3435 	add	a,r0
      000C8E F9               [12] 3436 	mov	r1,a
      000C8F C0 00            [24] 3437 	push	ar0
      000C91 E5 81            [12] 3438 	mov	a,sp
      000C93 24 2D            [12] 3439 	add	a,#0x2d
      000C95 F8               [12] 3440 	mov	r0,a
      000C96 C0 01            [24] 3441 	push	ar1
      000C98 E5 81            [12] 3442 	mov	a,sp
      000C9A 24 2D            [12] 3443 	add	a,#0x2d
      000C9C F9               [12] 3444 	mov	r1,a
      000C9D E6               [12] 3445 	mov	a,@r0
      000C9E F7               [12] 3446 	mov	@r1,a
      000C9F D0 01            [24] 3447 	pop	ar1
      000CA1 E5 81            [12] 3448 	mov	a,sp
      000CA3 24 2D            [12] 3449 	add	a,#0x2d
      000CA5 F8               [12] 3450 	mov	r0,a
      000CA6 C0 01            [24] 3451 	push	ar1
      000CA8 E5 81            [12] 3452 	mov	a,sp
      000CAA 24 2E            [12] 3453 	add	a,#0x2e
      000CAC F9               [12] 3454 	mov	r1,a
      000CAD E6               [12] 3455 	mov	a,@r0
      000CAE F7               [12] 3456 	mov	@r1,a
      000CAF D0 01            [24] 3457 	pop	ar1
      000CB1 E5 81            [12] 3458 	mov	a,sp
      000CB3 24 2D            [12] 3459 	add	a,#0x2d
      000CB5 F8               [12] 3460 	mov	r0,a
      000CB6 C0 01            [24] 3461 	push	ar1
      000CB8 E5 81            [12] 3462 	mov	a,sp
      000CBA 24 2F            [12] 3463 	add	a,#0x2f
      000CBC F9               [12] 3464 	mov	r1,a
      000CBD E6               [12] 3465 	mov	a,@r0
      000CBE F7               [12] 3466 	mov	@r1,a
      000CBF D0 01            [24] 3467 	pop	ar1
      000CC1 E5 81            [12] 3468 	mov	a,sp
      000CC3 24 2D            [12] 3469 	add	a,#0x2d
      000CC5 F8               [12] 3470 	mov	r0,a
      000CC6 C0 01            [24] 3471 	push	ar1
      000CC8 E5 81            [12] 3472 	mov	a,sp
      000CCA 24 30            [12] 3473 	add	a,#0x30
      000CCC F9               [12] 3474 	mov	r1,a
      000CCD E6               [12] 3475 	mov	a,@r0
      000CCE F7               [12] 3476 	mov	@r1,a
      000CCF D0 01            [24] 3477 	pop	ar1
      000CD1 E5 81            [12] 3478 	mov	a,sp
      000CD3 24 2D            [12] 3479 	add	a,#0x2d
      000CD5 F8               [12] 3480 	mov	r0,a
      000CD6 C0 01            [24] 3481 	push	ar1
      000CD8 E5 81            [12] 3482 	mov	a,sp
      000CDA 24 31            [12] 3483 	add	a,#0x31
      000CDC F9               [12] 3484 	mov	r1,a
      000CDD E6               [12] 3485 	mov	a,@r0
      000CDE F7               [12] 3486 	mov	@r1,a
      000CDF D0 01            [24] 3487 	pop	ar1
      000CE1 E5 81            [12] 3488 	mov	a,sp
      000CE3 24 2D            [12] 3489 	add	a,#0x2d
      000CE5 F8               [12] 3490 	mov	r0,a
      000CE6 C0 01            [24] 3491 	push	ar1
      000CE8 E5 81            [12] 3492 	mov	a,sp
      000CEA 24 32            [12] 3493 	add	a,#0x32
      000CEC F9               [12] 3494 	mov	r1,a
      000CED E6               [12] 3495 	mov	a,@r0
      000CEE F7               [12] 3496 	mov	@r1,a
      000CEF D0 01            [24] 3497 	pop	ar1
      000CF1 E5 81            [12] 3498 	mov	a,sp
      000CF3 24 2D            [12] 3499 	add	a,#0x2d
      000CF5 F8               [12] 3500 	mov	r0,a
      000CF6 C0 01            [24] 3501 	push	ar1
      000CF8 E5 81            [12] 3502 	mov	a,sp
      000CFA 24 33            [12] 3503 	add	a,#0x33
      000CFC F9               [12] 3504 	mov	r1,a
      000CFD E6               [12] 3505 	mov	a,@r0
      000CFE F7               [12] 3506 	mov	@r1,a
      000CFF D0 01            [24] 3507 	pop	ar1
      000D01 E5 81            [12] 3508 	mov	a,sp
      000D03 24 2D            [12] 3509 	add	a,#0x2d
      000D05 F8               [12] 3510 	mov	r0,a
      000D06 C0 01            [24] 3511 	push	ar1
      000D08 E5 81            [12] 3512 	mov	a,sp
      000D0A 24 34            [12] 3513 	add	a,#0x34
      000D0C F9               [12] 3514 	mov	r1,a
      000D0D E6               [12] 3515 	mov	a,@r0
      000D0E F7               [12] 3516 	mov	@r1,a
      000D0F D0 01            [24] 3517 	pop	ar1
      000D11 E5 81            [12] 3518 	mov	a,sp
      000D13 24 2D            [12] 3519 	add	a,#0x2d
      000D15 F8               [12] 3520 	mov	r0,a
      000D16 C0 01            [24] 3521 	push	ar1
      000D18 E5 81            [12] 3522 	mov	a,sp
      000D1A 24 35            [12] 3523 	add	a,#0x35
      000D1C F9               [12] 3524 	mov	r1,a
      000D1D E6               [12] 3525 	mov	a,@r0
      000D1E F7               [12] 3526 	mov	@r1,a
      000D1F D0 01            [24] 3527 	pop	ar1
      000D21 D0 00            [24] 3528 	pop	ar0
      000D23 C0 01            [24] 3529 	push	ar1
      000D25 E5 81            [12] 3530 	mov	a,sp
      000D27 24 37            [12] 3531 	add	a,#0x37
      000D29 F9               [12] 3532 	mov	r1,a
      000D2A 74 14            [12] 3533 	mov	a,#0x14
      000D2C 28               [12] 3534 	add	a,r0
      000D2D F7               [12] 3535 	mov	@r1,a
      000D2E D0 01            [24] 3536 	pop	ar1
      000D30 C0 00            [24] 3537 	push	ar0
      000D32 E5 81            [12] 3538 	mov	a,sp
      000D34 24 2D            [12] 3539 	add	a,#0x2d
      000D36 F8               [12] 3540 	mov	r0,a
      000D37 C0 01            [24] 3541 	push	ar1
      000D39 E5 81            [12] 3542 	mov	a,sp
      000D3B 24 37            [12] 3543 	add	a,#0x37
      000D3D F9               [12] 3544 	mov	r1,a
      000D3E E6               [12] 3545 	mov	a,@r0
      000D3F F7               [12] 3546 	mov	@r1,a
      000D40 D0 01            [24] 3547 	pop	ar1
      000D42 D0 00            [24] 3548 	pop	ar0
      000D44 C0 01            [24] 3549 	push	ar1
      000D46 E5 81            [12] 3550 	mov	a,sp
      000D48 24 39            [12] 3551 	add	a,#0x39
      000D4A F9               [12] 3552 	mov	r1,a
      000D4B 74 10            [12] 3553 	mov	a,#0x10
      000D4D 28               [12] 3554 	add	a,r0
      000D4E F7               [12] 3555 	mov	@r1,a
      000D4F D0 01            [24] 3556 	pop	ar1
      000D51 C0 00            [24] 3557 	push	ar0
      000D53 E5 81            [12] 3558 	mov	a,sp
      000D55 24 37            [12] 3559 	add	a,#0x37
      000D57 F8               [12] 3560 	mov	r0,a
      000D58 C0 01            [24] 3561 	push	ar1
      000D5A E5 81            [12] 3562 	mov	a,sp
      000D5C 24 39            [12] 3563 	add	a,#0x39
      000D5E F9               [12] 3564 	mov	r1,a
      000D5F E6               [12] 3565 	mov	a,@r0
      000D60 F7               [12] 3566 	mov	@r1,a
      000D61 D0 01            [24] 3567 	pop	ar1
      000D63 E5 81            [12] 3568 	mov	a,sp
      000D65 24 39            [12] 3569 	add	a,#0x39
      000D67 F8               [12] 3570 	mov	r0,a
      000D68 C0 01            [24] 3571 	push	ar1
      000D6A E5 81            [12] 3572 	mov	a,sp
      000D6C 24 3A            [12] 3573 	add	a,#0x3a
      000D6E F9               [12] 3574 	mov	r1,a
      000D6F E6               [12] 3575 	mov	a,@r0
      000D70 F7               [12] 3576 	mov	@r1,a
      000D71 D0 01            [24] 3577 	pop	ar1
      000D73 E5 81            [12] 3578 	mov	a,sp
      000D75 24 37            [12] 3579 	add	a,#0x37
      000D77 F8               [12] 3580 	mov	r0,a
      000D78 C0 01            [24] 3581 	push	ar1
      000D7A E5 81            [12] 3582 	mov	a,sp
      000D7C 24 3B            [12] 3583 	add	a,#0x3b
      000D7E F9               [12] 3584 	mov	r1,a
      000D7F E6               [12] 3585 	mov	a,@r0
      000D80 F7               [12] 3586 	mov	@r1,a
      000D81 D0 01            [24] 3587 	pop	ar1
      000D83 E5 81            [12] 3588 	mov	a,sp
      000D85 24 39            [12] 3589 	add	a,#0x39
      000D87 F8               [12] 3590 	mov	r0,a
      000D88 C0 01            [24] 3591 	push	ar1
      000D8A E5 81            [12] 3592 	mov	a,sp
      000D8C 24 3C            [12] 3593 	add	a,#0x3c
      000D8E F9               [12] 3594 	mov	r1,a
      000D8F E6               [12] 3595 	mov	a,@r0
      000D90 F7               [12] 3596 	mov	@r1,a
      000D91 D0 01            [24] 3597 	pop	ar1
      000D93 E5 81            [12] 3598 	mov	a,sp
      000D95 24 37            [12] 3599 	add	a,#0x37
      000D97 F8               [12] 3600 	mov	r0,a
      000D98 C0 01            [24] 3601 	push	ar1
      000D9A E5 81            [12] 3602 	mov	a,sp
      000D9C 24 3D            [12] 3603 	add	a,#0x3d
      000D9E F9               [12] 3604 	mov	r1,a
      000D9F E6               [12] 3605 	mov	a,@r0
      000DA0 F7               [12] 3606 	mov	@r1,a
      000DA1 D0 01            [24] 3607 	pop	ar1
      000DA3 E5 81            [12] 3608 	mov	a,sp
      000DA5 24 39            [12] 3609 	add	a,#0x39
      000DA7 F8               [12] 3610 	mov	r0,a
      000DA8 C0 01            [24] 3611 	push	ar1
      000DAA E5 81            [12] 3612 	mov	a,sp
      000DAC 24 3E            [12] 3613 	add	a,#0x3e
      000DAE F9               [12] 3614 	mov	r1,a
      000DAF E6               [12] 3615 	mov	a,@r0
      000DB0 F7               [12] 3616 	mov	@r1,a
      000DB1 D0 01            [24] 3617 	pop	ar1
      000DB3 E5 81            [12] 3618 	mov	a,sp
      000DB5 24 37            [12] 3619 	add	a,#0x37
      000DB7 F8               [12] 3620 	mov	r0,a
      000DB8 C0 01            [24] 3621 	push	ar1
      000DBA E5 81            [12] 3622 	mov	a,sp
      000DBC 24 3F            [12] 3623 	add	a,#0x3f
      000DBE F9               [12] 3624 	mov	r1,a
      000DBF E6               [12] 3625 	mov	a,@r0
      000DC0 F7               [12] 3626 	mov	@r1,a
      000DC1 D0 01            [24] 3627 	pop	ar1
      000DC3 E5 81            [12] 3628 	mov	a,sp
      000DC5 24 39            [12] 3629 	add	a,#0x39
      000DC7 F8               [12] 3630 	mov	r0,a
      000DC8 C0 01            [24] 3631 	push	ar1
      000DCA E5 81            [12] 3632 	mov	a,sp
      000DCC 24 40            [12] 3633 	add	a,#0x40
      000DCE F9               [12] 3634 	mov	r1,a
      000DCF E6               [12] 3635 	mov	a,@r0
      000DD0 F7               [12] 3636 	mov	@r1,a
      000DD1 D0 01            [24] 3637 	pop	ar1
      000DD3 E5 81            [12] 3638 	mov	a,sp
      000DD5 24 37            [12] 3639 	add	a,#0x37
      000DD7 F8               [12] 3640 	mov	r0,a
      000DD8 C0 01            [24] 3641 	push	ar1
      000DDA E5 81            [12] 3642 	mov	a,sp
      000DDC 24 41            [12] 3643 	add	a,#0x41
      000DDE F9               [12] 3644 	mov	r1,a
      000DDF E6               [12] 3645 	mov	a,@r0
      000DE0 F7               [12] 3646 	mov	@r1,a
      000DE1 D0 01            [24] 3647 	pop	ar1
      000DE3 E5 81            [12] 3648 	mov	a,sp
      000DE5 24 39            [12] 3649 	add	a,#0x39
      000DE7 F8               [12] 3650 	mov	r0,a
      000DE8 C0 01            [24] 3651 	push	ar1
      000DEA E5 81            [12] 3652 	mov	a,sp
      000DEC 24 42            [12] 3653 	add	a,#0x42
      000DEE F9               [12] 3654 	mov	r1,a
      000DEF E6               [12] 3655 	mov	a,@r0
      000DF0 F7               [12] 3656 	mov	@r1,a
      000DF1 D0 01            [24] 3657 	pop	ar1
      000DF3 E5 81            [12] 3658 	mov	a,sp
      000DF5 24 37            [12] 3659 	add	a,#0x37
      000DF7 F8               [12] 3660 	mov	r0,a
      000DF8 C0 01            [24] 3661 	push	ar1
      000DFA E5 81            [12] 3662 	mov	a,sp
      000DFC 24 43            [12] 3663 	add	a,#0x43
      000DFE F9               [12] 3664 	mov	r1,a
      000DFF E6               [12] 3665 	mov	a,@r0
      000E00 F7               [12] 3666 	mov	@r1,a
      000E01 D0 01            [24] 3667 	pop	ar1
      000E03 E5 81            [12] 3668 	mov	a,sp
      000E05 24 39            [12] 3669 	add	a,#0x39
      000E07 F8               [12] 3670 	mov	r0,a
      000E08 C0 01            [24] 3671 	push	ar1
      000E0A E5 81            [12] 3672 	mov	a,sp
      000E0C 24 44            [12] 3673 	add	a,#0x44
      000E0E F9               [12] 3674 	mov	r1,a
      000E0F E6               [12] 3675 	mov	a,@r0
      000E10 F7               [12] 3676 	mov	@r1,a
      000E11 D0 01            [24] 3677 	pop	ar1
      000E13 E5 81            [12] 3678 	mov	a,sp
      000E15 24 37            [12] 3679 	add	a,#0x37
      000E17 F8               [12] 3680 	mov	r0,a
      000E18 C0 01            [24] 3681 	push	ar1
      000E1A E5 81            [12] 3682 	mov	a,sp
      000E1C 24 45            [12] 3683 	add	a,#0x45
      000E1E F9               [12] 3684 	mov	r1,a
      000E1F E6               [12] 3685 	mov	a,@r0
      000E20 F7               [12] 3686 	mov	@r1,a
      000E21 D0 01            [24] 3687 	pop	ar1
      000E23 E5 81            [12] 3688 	mov	a,sp
      000E25 24 39            [12] 3689 	add	a,#0x39
      000E27 F8               [12] 3690 	mov	r0,a
      000E28 C0 01            [24] 3691 	push	ar1
      000E2A E5 81            [12] 3692 	mov	a,sp
      000E2C 24 46            [12] 3693 	add	a,#0x46
      000E2E F9               [12] 3694 	mov	r1,a
      000E2F E6               [12] 3695 	mov	a,@r0
      000E30 F7               [12] 3696 	mov	@r1,a
      000E31 D0 01            [24] 3697 	pop	ar1
      000E33 E5 81            [12] 3698 	mov	a,sp
      000E35 24 37            [12] 3699 	add	a,#0x37
      000E37 F8               [12] 3700 	mov	r0,a
      000E38 C0 01            [24] 3701 	push	ar1
      000E3A E5 81            [12] 3702 	mov	a,sp
      000E3C 24 47            [12] 3703 	add	a,#0x47
      000E3E F9               [12] 3704 	mov	r1,a
      000E3F E6               [12] 3705 	mov	a,@r0
      000E40 F7               [12] 3706 	mov	@r1,a
      000E41 D0 01            [24] 3707 	pop	ar1
      000E43 E5 81            [12] 3708 	mov	a,sp
      000E45 24 39            [12] 3709 	add	a,#0x39
      000E47 F8               [12] 3710 	mov	r0,a
      000E48 C0 01            [24] 3711 	push	ar1
      000E4A E5 81            [12] 3712 	mov	a,sp
      000E4C 24 48            [12] 3713 	add	a,#0x48
      000E4E F9               [12] 3714 	mov	r1,a
      000E4F E6               [12] 3715 	mov	a,@r0
      000E50 F7               [12] 3716 	mov	@r1,a
      000E51 D0 01            [24] 3717 	pop	ar1
      000E53 E5 81            [12] 3718 	mov	a,sp
      000E55 24 37            [12] 3719 	add	a,#0x37
      000E57 F8               [12] 3720 	mov	r0,a
      000E58 C0 01            [24] 3721 	push	ar1
      000E5A E5 81            [12] 3722 	mov	a,sp
      000E5C 24 49            [12] 3723 	add	a,#0x49
      000E5E F9               [12] 3724 	mov	r1,a
      000E5F E6               [12] 3725 	mov	a,@r0
      000E60 F7               [12] 3726 	mov	@r1,a
      000E61 D0 01            [24] 3727 	pop	ar1
      000E63 E5 81            [12] 3728 	mov	a,sp
      000E65 24 39            [12] 3729 	add	a,#0x39
      000E67 F8               [12] 3730 	mov	r0,a
      000E68 C0 01            [24] 3731 	push	ar1
      000E6A E5 81            [12] 3732 	mov	a,sp
      000E6C 24 4A            [12] 3733 	add	a,#0x4a
      000E6E F9               [12] 3734 	mov	r1,a
      000E6F E6               [12] 3735 	mov	a,@r0
      000E70 F7               [12] 3736 	mov	@r1,a
      000E71 D0 01            [24] 3737 	pop	ar1
      000E73 E5 81            [12] 3738 	mov	a,sp
      000E75 24 37            [12] 3739 	add	a,#0x37
      000E77 F8               [12] 3740 	mov	r0,a
      000E78 C0 01            [24] 3741 	push	ar1
      000E7A E5 81            [12] 3742 	mov	a,sp
      000E7C 24 4B            [12] 3743 	add	a,#0x4b
      000E7E F9               [12] 3744 	mov	r1,a
      000E7F E6               [12] 3745 	mov	a,@r0
      000E80 F7               [12] 3746 	mov	@r1,a
      000E81 D0 01            [24] 3747 	pop	ar1
      000E83 E5 81            [12] 3748 	mov	a,sp
      000E85 24 39            [12] 3749 	add	a,#0x39
      000E87 F8               [12] 3750 	mov	r0,a
      000E88 C0 01            [24] 3751 	push	ar1
      000E8A E5 81            [12] 3752 	mov	a,sp
      000E8C 24 4C            [12] 3753 	add	a,#0x4c
      000E8E F9               [12] 3754 	mov	r1,a
      000E8F E6               [12] 3755 	mov	a,@r0
      000E90 F7               [12] 3756 	mov	@r1,a
      000E91 D0 01            [24] 3757 	pop	ar1
      000E93 E5 81            [12] 3758 	mov	a,sp
      000E95 24 37            [12] 3759 	add	a,#0x37
      000E97 F8               [12] 3760 	mov	r0,a
      000E98 C0 01            [24] 3761 	push	ar1
      000E9A E5 81            [12] 3762 	mov	a,sp
      000E9C 24 4D            [12] 3763 	add	a,#0x4d
      000E9E F9               [12] 3764 	mov	r1,a
      000E9F E6               [12] 3765 	mov	a,@r0
      000EA0 F7               [12] 3766 	mov	@r1,a
      000EA1 D0 01            [24] 3767 	pop	ar1
      000EA3 E5 81            [12] 3768 	mov	a,sp
      000EA5 24 EA            [12] 3769 	add	a,#0xea
      000EA7 F8               [12] 3770 	mov	r0,a
      000EA8 E4               [12] 3771 	clr	a
      000EA9 F6               [12] 3772 	mov	@r0,a
      000EAA 08               [12] 3773 	inc	r0
      000EAB F6               [12] 3774 	mov	@r0,a
      000EAC D0 00            [24] 3775 	pop	ar0
                                   3776 ;	../../../core/loader/elfloader.c:585: return ELFLOADER_NO_STARTPOINT;
                                   3777 ;	../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      000EAE                       3778 00205$:
      000EAE C0 00            [24] 3779 	push	ar0
      000EB0 E5 81            [12] 3780 	mov	a,sp
      000EB2 24 EA            [12] 3781 	add	a,#0xea
      000EB4 F8               [12] 3782 	mov	r0,a
      000EB5 86 06            [24] 3783 	mov	ar6,@r0
      000EB7 08               [12] 3784 	inc	r0
      000EB8 86 07            [24] 3785 	mov	ar7,@r0
      000EBA E5 81            [12] 3786 	mov	a,sp
      000EBC 24 EE            [12] 3787 	add	a,#0xee
      000EBE F8               [12] 3788 	mov	r0,a
      000EBF C3               [12] 3789 	clr	c
      000EC0 EE               [12] 3790 	mov	a,r6
      000EC1 96               [12] 3791 	subb	a,@r0
      000EC2 EF               [12] 3792 	mov	a,r7
      000EC3 08               [12] 3793 	inc	r0
      000EC4 96               [12] 3794 	subb	a,@r0
      000EC5 D0 00            [24] 3795 	pop	ar0
      000EC7 40 03            [24] 3796 	jc	00336$
      000EC9 02r15rB2         [24] 3797 	ljmp	00150$
      000ECC                       3798 00336$:
                                   3799 ;	../../../core/loader/elfloader.c:421: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
      000ECC 8A 07            [24] 3800 	mov	ar7,r2
      000ECE 7E 00            [12] 3801 	mov	r6,#0x00
      000ED0 7C 40            [12] 3802 	mov	r4,#0x40
      000ED2 C0 02            [24] 3803 	push	ar2
      000ED4 C0 01            [24] 3804 	push	ar1
      000ED6 C0 00            [24] 3805 	push	ar0
      000ED8 74 28            [12] 3806 	mov	a,#0x28
      000EDA C0 E0            [24] 3807 	push	acc
      000EDC E4               [12] 3808 	clr	a
      000EDD C0 E0            [24] 3809 	push	acc
      000EDF C0 07            [24] 3810 	push	ar7
      000EE1 C0 06            [24] 3811 	push	ar6
      000EE3 C0 04            [24] 3812 	push	ar4
      000EE5 85 00 F0         [24] 3813 	mov	b,ar0
      000EE8 E5 81            [12] 3814 	mov	a,sp
      000EEA 24 50            [12] 3815 	add	a,#0x50
      000EEC F8               [12] 3816 	mov	r0,a
      000EED E6               [12] 3817 	mov	a,@r0
      000EEE C0 E0            [24] 3818 	push	acc
      000EF0 08               [12] 3819 	inc	r0
      000EF1 E6               [12] 3820 	mov	a,@r0
      000EF2 C0 E0            [24] 3821 	push	acc
      000EF4 A8 F0            [24] 3822 	mov	r0,b
      000EF6 C0 00            [24] 3823 	push	ar0
      000EF8 E5 81            [12] 3824 	mov	a,sp
      000EFA 24 0F            [12] 3825 	add	a,#0x0f
      000EFC F8               [12] 3826 	mov	r0,a
      000EFD 86 82            [24] 3827 	mov	dpl,@r0
      000EFF 08               [12] 3828 	inc	r0
      000F00 86 83            [24] 3829 	mov	dph,@r0
      000F02 D0 00            [24] 3830 	pop	ar0
      000F04 78r00            [12] 3831 	mov	r0,#_seek_read
      000F06 79s00            [12] 3832 	mov	r1,#(_seek_read >> 8)
      000F08 7As00            [12] 3833 	mov	r2,#(_seek_read >> 16)
      000F0A 12r00r00         [24] 3834 	lcall	__sdcc_banked_call
      000F0D E5 81            [12] 3835 	mov	a,sp
      000F0F 24 F9            [12] 3836 	add	a,#0xf9
      000F11 F5 81            [12] 3837 	mov	sp,a
      000F13 D0 00            [24] 3838 	pop	ar0
      000F15 D0 01            [24] 3839 	pop	ar1
      000F17 D0 02            [24] 3840 	pop	ar2
                                   3841 ;	../../../core/loader/elfloader.c:424: nameptr = strs + shdr.sh_name;
      000F19 86 06            [24] 3842 	mov	ar6,@r0
      000F1B 08               [12] 3843 	inc	r0
      000F1C 86 07            [24] 3844 	mov	ar7,@r0
      000F1E 18               [12] 3845 	dec	r0
      000F1F C0 00            [24] 3846 	push	ar0
      000F21 E5 81            [12] 3847 	mov	a,sp
      000F23 24 EC            [12] 3848 	add	a,#0xec
      000F25 F8               [12] 3849 	mov	r0,a
      000F26 EE               [12] 3850 	mov	a,r6
      000F27 26               [12] 3851 	add	a,@r0
      000F28 FE               [12] 3852 	mov	r6,a
      000F29 EF               [12] 3853 	mov	a,r7
      000F2A 08               [12] 3854 	inc	r0
      000F2B 36               [12] 3855 	addc	a,@r0
      000F2C FF               [12] 3856 	mov	r7,a
                                   3857 ;	../../../core/loader/elfloader.c:425: seek_read(fd, nameptr, name, sizeof(name));
      000F2D E5 81            [12] 3858 	mov	a,sp
      000F2F 24 2D            [12] 3859 	add	a,#0x2d
      000F31 F8               [12] 3860 	mov	r0,a
      000F32 86 03            [24] 3861 	mov	ar3,@r0
      000F34 7C 00            [12] 3862 	mov	r4,#0x00
      000F36 7D 40            [12] 3863 	mov	r5,#0x40
      000F38 D0 00            [24] 3864 	pop	ar0
      000F3A C0 02            [24] 3865 	push	ar2
      000F3C C0 01            [24] 3866 	push	ar1
      000F3E C0 00            [24] 3867 	push	ar0
      000F40 74 0C            [12] 3868 	mov	a,#0x0c
      000F42 C0 E0            [24] 3869 	push	acc
      000F44 E4               [12] 3870 	clr	a
      000F45 C0 E0            [24] 3871 	push	acc
      000F47 C0 03            [24] 3872 	push	ar3
      000F49 C0 04            [24] 3873 	push	ar4
      000F4B C0 05            [24] 3874 	push	ar5
      000F4D C0 06            [24] 3875 	push	ar6
      000F4F C0 07            [24] 3876 	push	ar7
      000F51 C0 00            [24] 3877 	push	ar0
      000F53 E5 81            [12] 3878 	mov	a,sp
      000F55 24 0F            [12] 3879 	add	a,#0x0f
      000F57 F8               [12] 3880 	mov	r0,a
      000F58 86 82            [24] 3881 	mov	dpl,@r0
      000F5A 08               [12] 3882 	inc	r0
      000F5B 86 83            [24] 3883 	mov	dph,@r0
      000F5D D0 00            [24] 3884 	pop	ar0
      000F5F 78r00            [12] 3885 	mov	r0,#_seek_read
      000F61 79s00            [12] 3886 	mov	r1,#(_seek_read >> 8)
      000F63 7As00            [12] 3887 	mov	r2,#(_seek_read >> 16)
      000F65 12r00r00         [24] 3888 	lcall	__sdcc_banked_call
      000F68 E5 81            [12] 3889 	mov	a,sp
      000F6A 24 F9            [12] 3890 	add	a,#0xf9
      000F6C F5 81            [12] 3891 	mov	sp,a
      000F6E D0 00            [24] 3892 	pop	ar0
      000F70 D0 01            [24] 3893 	pop	ar1
      000F72 D0 02            [24] 3894 	pop	ar2
                                   3895 ;	../../../core/loader/elfloader.c:435: if(shdr.sh_type == SHT_SYMTAB/*strncmp(name, ".symtab", 7) == 0*/) {
      000F74 87 07            [24] 3896 	mov	ar7,@r1
      000F76 09               [12] 3897 	inc	r1
      000F77 87 06            [24] 3898 	mov	ar6,@r1
      000F79 09               [12] 3899 	inc	r1
      000F7A 87 05            [24] 3900 	mov	ar5,@r1
      000F7C 09               [12] 3901 	inc	r1
      000F7D 87 04            [24] 3902 	mov	ar4,@r1
      000F7F 19               [12] 3903 	dec	r1
      000F80 19               [12] 3904 	dec	r1
      000F81 19               [12] 3905 	dec	r1
      000F82 BF 02 3E         [24] 3906 	cjne	r7,#0x02,00148$
      000F85 BE 00 3B         [24] 3907 	cjne	r6,#0x00,00148$
      000F88 BD 00 38         [24] 3908 	cjne	r5,#0x00,00148$
      000F8B BC 00 35         [24] 3909 	cjne	r4,#0x00,00148$
                                   3910 ;	../../../core/loader/elfloader.c:437: symtaboff = shdr.sh_offset;
      000F8E C0 00            [24] 3911 	push	ar0
      000F90 E5 81            [12] 3912 	mov	a,sp
      000F92 24 4D            [12] 3913 	add	a,#0x4d
      000F94 F8               [12] 3914 	mov	r0,a
      000F95 C0 01            [24] 3915 	push	ar1
      000F97 E5 81            [12] 3916 	mov	a,sp
      000F99 24 F9            [12] 3917 	add	a,#0xf9
      000F9B F9               [12] 3918 	mov	r1,a
      000F9C 86 00            [24] 3919 	mov	ar0,@r0
      000F9E E6               [12] 3920 	mov	a,@r0
      000F9F F7               [12] 3921 	mov	@r1,a
      000FA0 08               [12] 3922 	inc	r0
      000FA1 E6               [12] 3923 	mov	a,@r0
      000FA2 09               [12] 3924 	inc	r1
      000FA3 F7               [12] 3925 	mov	@r1,a
      000FA4 18               [12] 3926 	dec	r0
      000FA5 D0 01            [24] 3927 	pop	ar1
                                   3928 ;	../../../core/loader/elfloader.c:438: symtabsize = shdr.sh_size;
      000FA7 E5 81            [12] 3929 	mov	a,sp
      000FA9 24 4E            [12] 3930 	add	a,#0x4e
      000FAB F8               [12] 3931 	mov	r0,a
      000FAC C0 01            [24] 3932 	push	ar1
      000FAE E5 81            [12] 3933 	mov	a,sp
      000FB0 24 FB            [12] 3934 	add	a,#0xfb
      000FB2 F9               [12] 3935 	mov	r1,a
      000FB3 86 00            [24] 3936 	mov	ar0,@r0
      000FB5 E6               [12] 3937 	mov	a,@r0
      000FB6 F7               [12] 3938 	mov	@r1,a
      000FB7 08               [12] 3939 	inc	r0
      000FB8 E6               [12] 3940 	mov	a,@r0
      000FB9 09               [12] 3941 	inc	r1
      000FBA F7               [12] 3942 	mov	@r1,a
      000FBB 18               [12] 3943 	dec	r0
      000FBC D0 01            [24] 3944 	pop	ar1
      000FBE D0 00            [24] 3945 	pop	ar0
      000FC0 02r15r80         [24] 3946 	ljmp	00149$
      000FC3                       3947 00148$:
                                   3948 ;	../../../core/loader/elfloader.c:439: } else if(shdr.sh_type == SHT_STRTAB/*strncmp(name, ".strtab", 7) == 0*/) {
      000FC3 BF 03 3E         [24] 3949 	cjne	r7,#0x03,00145$
      000FC6 BE 00 3B         [24] 3950 	cjne	r6,#0x00,00145$
      000FC9 BD 00 38         [24] 3951 	cjne	r5,#0x00,00145$
      000FCC BC 00 35         [24] 3952 	cjne	r4,#0x00,00145$
                                   3953 ;	../../../core/loader/elfloader.c:441: strtaboff = shdr.sh_offset;
      000FCF C0 00            [24] 3954 	push	ar0
      000FD1 E5 81            [12] 3955 	mov	a,sp
      000FD3 24 4B            [12] 3956 	add	a,#0x4b
      000FD5 F8               [12] 3957 	mov	r0,a
      000FD6 C0 01            [24] 3958 	push	ar1
      000FD8 E5 81            [12] 3959 	mov	a,sp
      000FDA 24 FD            [12] 3960 	add	a,#0xfd
      000FDC F9               [12] 3961 	mov	r1,a
      000FDD 86 00            [24] 3962 	mov	ar0,@r0
      000FDF E6               [12] 3963 	mov	a,@r0
      000FE0 F7               [12] 3964 	mov	@r1,a
      000FE1 08               [12] 3965 	inc	r0
      000FE2 E6               [12] 3966 	mov	a,@r0
      000FE3 09               [12] 3967 	inc	r1
      000FE4 F7               [12] 3968 	mov	@r1,a
      000FE5 18               [12] 3969 	dec	r0
      000FE6 D0 01            [24] 3970 	pop	ar1
                                   3971 ;	../../../core/loader/elfloader.c:442: strtabsize = shdr.sh_size;
      000FE8 E5 81            [12] 3972 	mov	a,sp
      000FEA 24 4C            [12] 3973 	add	a,#0x4c
      000FEC F8               [12] 3974 	mov	r0,a
      000FED C0 01            [24] 3975 	push	ar1
      000FEF E5 81            [12] 3976 	mov	a,sp
      000FF1 24 20            [12] 3977 	add	a,#0x20
      000FF3 F9               [12] 3978 	mov	r1,a
      000FF4 86 00            [24] 3979 	mov	ar0,@r0
      000FF6 E6               [12] 3980 	mov	a,@r0
      000FF7 F7               [12] 3981 	mov	@r1,a
      000FF8 08               [12] 3982 	inc	r0
      000FF9 E6               [12] 3983 	mov	a,@r0
      000FFA 09               [12] 3984 	inc	r1
      000FFB F7               [12] 3985 	mov	@r1,a
      000FFC 18               [12] 3986 	dec	r0
      000FFD D0 01            [24] 3987 	pop	ar1
      000FFF D0 00            [24] 3988 	pop	ar0
      001001 02r15r80         [24] 3989 	ljmp	00149$
      001004                       3990 00145$:
                                   3991 ;	../../../core/loader/elfloader.c:443: } else if(strncmp(name, ".text", 5) == 0) {
      001004 C0 00            [24] 3992 	push	ar0
      001006 E5 81            [12] 3993 	mov	a,sp
      001008 24 2E            [12] 3994 	add	a,#0x2e
      00100A F8               [12] 3995 	mov	r0,a
      00100B 86 04            [24] 3996 	mov	ar4,@r0
      00100D 7E 00            [12] 3997 	mov	r6,#0x00
      00100F 7F 40            [12] 3998 	mov	r7,#0x40
      001011 D0 00            [24] 3999 	pop	ar0
      001013 C0 02            [24] 4000 	push	ar2
      001015 C0 01            [24] 4001 	push	ar1
      001017 C0 00            [24] 4002 	push	ar0
      001019 74 05            [12] 4003 	mov	a,#0x05
      00101B C0 E0            [24] 4004 	push	acc
      00101D E4               [12] 4005 	clr	a
      00101E C0 E0            [24] 4006 	push	acc
      001020 74r1B            [12] 4007 	mov	a,#___str_1
      001022 C0 E0            [24] 4008 	push	acc
      001024 74s00            [12] 4009 	mov	a,#(___str_1 >> 8)
      001026 C0 E0            [24] 4010 	push	acc
      001028 74 80            [12] 4011 	mov	a,#0x80
      00102A C0 E0            [24] 4012 	push	acc
      00102C 8C 82            [24] 4013 	mov	dpl,r4
      00102E 8E 83            [24] 4014 	mov	dph,r6
      001030 8F F0            [24] 4015 	mov	b,r7
      001032 78r00            [12] 4016 	mov	r0,#_strncmp
      001034 79s00            [12] 4017 	mov	r1,#(_strncmp >> 8)
      001036 7As00            [12] 4018 	mov	r2,#(_strncmp >> 16)
      001038 12r00r00         [24] 4019 	lcall	__sdcc_banked_call
      00103B AE 82            [24] 4020 	mov	r6,dpl
      00103D AF 83            [24] 4021 	mov	r7,dph
      00103F E5 81            [12] 4022 	mov	a,sp
      001041 24 FB            [12] 4023 	add	a,#0xfb
      001043 F5 81            [12] 4024 	mov	sp,a
      001045 D0 00            [24] 4025 	pop	ar0
      001047 D0 01            [24] 4026 	pop	ar1
      001049 D0 02            [24] 4027 	pop	ar2
      00104B EE               [12] 4028 	mov	a,r6
      00104C 4F               [12] 4029 	orl	a,r7
      00104D 70 53            [24] 4030 	jnz	00142$
                                   4031 ;	../../../core/loader/elfloader.c:444: textoff = shdr.sh_offset;
      00104F C0 00            [24] 4032 	push	ar0
      001051 E5 81            [12] 4033 	mov	a,sp
      001053 24 49            [12] 4034 	add	a,#0x49
      001055 F8               [12] 4035 	mov	r0,a
      001056 C0 01            [24] 4036 	push	ar1
      001058 E5 81            [12] 4037 	mov	a,sp
      00105A 24 F1            [12] 4038 	add	a,#0xf1
      00105C F9               [12] 4039 	mov	r1,a
      00105D 86 00            [24] 4040 	mov	ar0,@r0
      00105F E6               [12] 4041 	mov	a,@r0
      001060 F7               [12] 4042 	mov	@r1,a
      001061 08               [12] 4043 	inc	r0
      001062 E6               [12] 4044 	mov	a,@r0
      001063 09               [12] 4045 	inc	r1
      001064 F7               [12] 4046 	mov	@r1,a
      001065 18               [12] 4047 	dec	r0
      001066 D0 01            [24] 4048 	pop	ar1
                                   4049 ;	../../../core/loader/elfloader.c:445: textsize = shdr.sh_size;
      001068 E5 81            [12] 4050 	mov	a,sp
      00106A 24 4A            [12] 4051 	add	a,#0x4a
      00106C F8               [12] 4052 	mov	r0,a
      00106D C0 01            [24] 4053 	push	ar1
      00106F E5 81            [12] 4054 	mov	a,sp
      001071 24 F3            [12] 4055 	add	a,#0xf3
      001073 F9               [12] 4056 	mov	r1,a
      001074 86 00            [24] 4057 	mov	ar0,@r0
      001076 E6               [12] 4058 	mov	a,@r0
      001077 F7               [12] 4059 	mov	@r1,a
      001078 08               [12] 4060 	inc	r0
      001079 E6               [12] 4061 	mov	a,@r0
      00107A 09               [12] 4062 	inc	r1
      00107B F7               [12] 4063 	mov	@r1,a
      00107C 18               [12] 4064 	dec	r0
      00107D D0 01            [24] 4065 	pop	ar1
                                   4066 ;	../../../core/loader/elfloader.c:446: text.number = i;
      00107F E5 81            [12] 4067 	mov	a,sp
      001081 24 EA            [12] 4068 	add	a,#0xea
      001083 F8               [12] 4069 	mov	r0,a
      001084 86 07            [24] 4070 	mov	ar7,@r0
      001086 90r00r33         [24] 4071 	mov	dptr,#_text
      001089 EF               [12] 4072 	mov	a,r7
      00108A F0               [24] 4073 	movx	@dptr,a
                                   4074 ;	../../../core/loader/elfloader.c:447: text.offset = textoff;
      00108B E5 81            [12] 4075 	mov	a,sp
      00108D 24 F2            [12] 4076 	add	a,#0xf2
      00108F F8               [12] 4077 	mov	r0,a
      001090 86 03            [24] 4078 	mov	ar3,@r0
      001092 08               [12] 4079 	inc	r0
      001093 86 04            [24] 4080 	mov	ar4,@r0
      001095 D0 00            [24] 4081 	pop	ar0
      001097 90r00r34         [24] 4082 	mov	dptr,#(_text + 0x0001)
      00109A EB               [12] 4083 	mov	a,r3
      00109B F0               [24] 4084 	movx	@dptr,a
      00109C EC               [12] 4085 	mov	a,r4
      00109D A3               [24] 4086 	inc	dptr
      00109E F0               [24] 4087 	movx	@dptr,a
      00109F 02r15r80         [24] 4088 	ljmp	00149$
      0010A2                       4089 00142$:
                                   4090 ;	../../../core/loader/elfloader.c:448: } else if(strncmp(name, ".rel.text", 9) == 0) {
      0010A2 C0 00            [24] 4091 	push	ar0
      0010A4 E5 81            [12] 4092 	mov	a,sp
      0010A6 24 2F            [12] 4093 	add	a,#0x2f
      0010A8 F8               [12] 4094 	mov	r0,a
      0010A9 86 04            [24] 4095 	mov	ar4,@r0
      0010AB 7E 00            [12] 4096 	mov	r6,#0x00
      0010AD 7F 40            [12] 4097 	mov	r7,#0x40
      0010AF D0 00            [24] 4098 	pop	ar0
      0010B1 C0 02            [24] 4099 	push	ar2
      0010B3 C0 01            [24] 4100 	push	ar1
      0010B5 C0 00            [24] 4101 	push	ar0
      0010B7 74 09            [12] 4102 	mov	a,#0x09
      0010B9 C0 E0            [24] 4103 	push	acc
      0010BB E4               [12] 4104 	clr	a
      0010BC C0 E0            [24] 4105 	push	acc
      0010BE 74r21            [12] 4106 	mov	a,#___str_2
      0010C0 C0 E0            [24] 4107 	push	acc
      0010C2 74s00            [12] 4108 	mov	a,#(___str_2 >> 8)
      0010C4 C0 E0            [24] 4109 	push	acc
      0010C6 74 80            [12] 4110 	mov	a,#0x80
      0010C8 C0 E0            [24] 4111 	push	acc
      0010CA 8C 82            [24] 4112 	mov	dpl,r4
      0010CC 8E 83            [24] 4113 	mov	dph,r6
      0010CE 8F F0            [24] 4114 	mov	b,r7
      0010D0 78r00            [12] 4115 	mov	r0,#_strncmp
      0010D2 79s00            [12] 4116 	mov	r1,#(_strncmp >> 8)
      0010D4 7As00            [12] 4117 	mov	r2,#(_strncmp >> 16)
      0010D6 12r00r00         [24] 4118 	lcall	__sdcc_banked_call
      0010D9 AE 82            [24] 4119 	mov	r6,dpl
      0010DB AF 83            [24] 4120 	mov	r7,dph
      0010DD E5 81            [12] 4121 	mov	a,sp
      0010DF 24 FB            [12] 4122 	add	a,#0xfb
      0010E1 F5 81            [12] 4123 	mov	sp,a
      0010E3 D0 00            [24] 4124 	pop	ar0
      0010E5 D0 01            [24] 4125 	pop	ar1
      0010E7 D0 02            [24] 4126 	pop	ar2
      0010E9 EE               [12] 4127 	mov	a,r6
      0010EA 4F               [12] 4128 	orl	a,r7
      0010EB 70 3C            [24] 4129 	jnz	00139$
                                   4130 ;	../../../core/loader/elfloader.c:449: using_relas = 0;
      0010ED C0 00            [24] 4131 	push	ar0
      0010EF E5 81            [12] 4132 	mov	a,sp
      0010F1 24 C1            [12] 4133 	add	a,#0xc1
      0010F3 F8               [12] 4134 	mov	r0,a
      0010F4 76 00            [12] 4135 	mov	@r0,#0x00
                                   4136 ;	../../../core/loader/elfloader.c:450: textrelaoff = shdr.sh_offset;
      0010F6 E5 81            [12] 4137 	mov	a,sp
      0010F8 24 47            [12] 4138 	add	a,#0x47
      0010FA F8               [12] 4139 	mov	r0,a
      0010FB C0 01            [24] 4140 	push	ar1
      0010FD E5 81            [12] 4141 	mov	a,sp
      0010FF 24 52            [12] 4142 	add	a,#0x52
      001101 F9               [12] 4143 	mov	r1,a
      001102 86 00            [24] 4144 	mov	ar0,@r0
      001104 E6               [12] 4145 	mov	a,@r0
      001105 F7               [12] 4146 	mov	@r1,a
      001106 08               [12] 4147 	inc	r0
      001107 E6               [12] 4148 	mov	a,@r0
      001108 09               [12] 4149 	inc	r1
      001109 F7               [12] 4150 	mov	@r1,a
      00110A 18               [12] 4151 	dec	r0
      00110B D0 01            [24] 4152 	pop	ar1
                                   4153 ;	../../../core/loader/elfloader.c:451: textrelasize = shdr.sh_size;
      00110D E5 81            [12] 4154 	mov	a,sp
      00110F 24 48            [12] 4155 	add	a,#0x48
      001111 F8               [12] 4156 	mov	r0,a
      001112 C0 01            [24] 4157 	push	ar1
      001114 E5 81            [12] 4158 	mov	a,sp
      001116 24 2A            [12] 4159 	add	a,#0x2a
      001118 F9               [12] 4160 	mov	r1,a
      001119 86 00            [24] 4161 	mov	ar0,@r0
      00111B E6               [12] 4162 	mov	a,@r0
      00111C F7               [12] 4163 	mov	@r1,a
      00111D 08               [12] 4164 	inc	r0
      00111E E6               [12] 4165 	mov	a,@r0
      00111F 09               [12] 4166 	inc	r1
      001120 F7               [12] 4167 	mov	@r1,a
      001121 18               [12] 4168 	dec	r0
      001122 D0 01            [24] 4169 	pop	ar1
      001124 D0 00            [24] 4170 	pop	ar0
      001126 02r15r80         [24] 4171 	ljmp	00149$
      001129                       4172 00139$:
                                   4173 ;	../../../core/loader/elfloader.c:452: } else if(strncmp(name, ".rela.text", 10) == 0) {
      001129 C0 00            [24] 4174 	push	ar0
      00112B E5 81            [12] 4175 	mov	a,sp
      00112D 24 30            [12] 4176 	add	a,#0x30
      00112F F8               [12] 4177 	mov	r0,a
      001130 86 04            [24] 4178 	mov	ar4,@r0
      001132 7E 00            [12] 4179 	mov	r6,#0x00
      001134 7F 40            [12] 4180 	mov	r7,#0x40
      001136 D0 00            [24] 4181 	pop	ar0
      001138 C0 02            [24] 4182 	push	ar2
      00113A C0 01            [24] 4183 	push	ar1
      00113C C0 00            [24] 4184 	push	ar0
      00113E 74 0A            [12] 4185 	mov	a,#0x0a
      001140 C0 E0            [24] 4186 	push	acc
      001142 E4               [12] 4187 	clr	a
      001143 C0 E0            [24] 4188 	push	acc
      001145 74r2B            [12] 4189 	mov	a,#___str_3
      001147 C0 E0            [24] 4190 	push	acc
      001149 74s00            [12] 4191 	mov	a,#(___str_3 >> 8)
      00114B C0 E0            [24] 4192 	push	acc
      00114D 74 80            [12] 4193 	mov	a,#0x80
      00114F C0 E0            [24] 4194 	push	acc
      001151 8C 82            [24] 4195 	mov	dpl,r4
      001153 8E 83            [24] 4196 	mov	dph,r6
      001155 8F F0            [24] 4197 	mov	b,r7
      001157 78r00            [12] 4198 	mov	r0,#_strncmp
      001159 79s00            [12] 4199 	mov	r1,#(_strncmp >> 8)
      00115B 7As00            [12] 4200 	mov	r2,#(_strncmp >> 16)
      00115D 12r00r00         [24] 4201 	lcall	__sdcc_banked_call
      001160 AE 82            [24] 4202 	mov	r6,dpl
      001162 AF 83            [24] 4203 	mov	r7,dph
      001164 E5 81            [12] 4204 	mov	a,sp
      001166 24 FB            [12] 4205 	add	a,#0xfb
      001168 F5 81            [12] 4206 	mov	sp,a
      00116A D0 00            [24] 4207 	pop	ar0
      00116C D0 01            [24] 4208 	pop	ar1
      00116E D0 02            [24] 4209 	pop	ar2
      001170 EE               [12] 4210 	mov	a,r6
      001171 4F               [12] 4211 	orl	a,r7
      001172 70 3C            [24] 4212 	jnz	00136$
                                   4213 ;	../../../core/loader/elfloader.c:453: using_relas = 1;
      001174 C0 00            [24] 4214 	push	ar0
      001176 E5 81            [12] 4215 	mov	a,sp
      001178 24 C1            [12] 4216 	add	a,#0xc1
      00117A F8               [12] 4217 	mov	r0,a
      00117B 76 01            [12] 4218 	mov	@r0,#0x01
                                   4219 ;	../../../core/loader/elfloader.c:454: textrelaoff = shdr.sh_offset;
      00117D E5 81            [12] 4220 	mov	a,sp
      00117F 24 45            [12] 4221 	add	a,#0x45
      001181 F8               [12] 4222 	mov	r0,a
      001182 C0 01            [24] 4223 	push	ar1
      001184 E5 81            [12] 4224 	mov	a,sp
      001186 24 52            [12] 4225 	add	a,#0x52
      001188 F9               [12] 4226 	mov	r1,a
      001189 86 00            [24] 4227 	mov	ar0,@r0
      00118B E6               [12] 4228 	mov	a,@r0
      00118C F7               [12] 4229 	mov	@r1,a
      00118D 08               [12] 4230 	inc	r0
      00118E E6               [12] 4231 	mov	a,@r0
      00118F 09               [12] 4232 	inc	r1
      001190 F7               [12] 4233 	mov	@r1,a
      001191 18               [12] 4234 	dec	r0
      001192 D0 01            [24] 4235 	pop	ar1
                                   4236 ;	../../../core/loader/elfloader.c:455: textrelasize = shdr.sh_size;
      001194 E5 81            [12] 4237 	mov	a,sp
      001196 24 46            [12] 4238 	add	a,#0x46
      001198 F8               [12] 4239 	mov	r0,a
      001199 C0 01            [24] 4240 	push	ar1
      00119B E5 81            [12] 4241 	mov	a,sp
      00119D 24 2A            [12] 4242 	add	a,#0x2a
      00119F F9               [12] 4243 	mov	r1,a
      0011A0 86 00            [24] 4244 	mov	ar0,@r0
      0011A2 E6               [12] 4245 	mov	a,@r0
      0011A3 F7               [12] 4246 	mov	@r1,a
      0011A4 08               [12] 4247 	inc	r0
      0011A5 E6               [12] 4248 	mov	a,@r0
      0011A6 09               [12] 4249 	inc	r1
      0011A7 F7               [12] 4250 	mov	@r1,a
      0011A8 18               [12] 4251 	dec	r0
      0011A9 D0 01            [24] 4252 	pop	ar1
      0011AB D0 00            [24] 4253 	pop	ar0
      0011AD 02r15r80         [24] 4254 	ljmp	00149$
      0011B0                       4255 00136$:
                                   4256 ;	../../../core/loader/elfloader.c:456: } else if(strncmp(name, ".data", 5) == 0) {
      0011B0 C0 00            [24] 4257 	push	ar0
      0011B2 E5 81            [12] 4258 	mov	a,sp
      0011B4 24 31            [12] 4259 	add	a,#0x31
      0011B6 F8               [12] 4260 	mov	r0,a
      0011B7 86 04            [24] 4261 	mov	ar4,@r0
      0011B9 7E 00            [12] 4262 	mov	r6,#0x00
      0011BB 7F 40            [12] 4263 	mov	r7,#0x40
      0011BD D0 00            [24] 4264 	pop	ar0
      0011BF C0 02            [24] 4265 	push	ar2
      0011C1 C0 01            [24] 4266 	push	ar1
      0011C3 C0 00            [24] 4267 	push	ar0
      0011C5 74 05            [12] 4268 	mov	a,#0x05
      0011C7 C0 E0            [24] 4269 	push	acc
      0011C9 E4               [12] 4270 	clr	a
      0011CA C0 E0            [24] 4271 	push	acc
      0011CC 74r36            [12] 4272 	mov	a,#___str_4
      0011CE C0 E0            [24] 4273 	push	acc
      0011D0 74s00            [12] 4274 	mov	a,#(___str_4 >> 8)
      0011D2 C0 E0            [24] 4275 	push	acc
      0011D4 74 80            [12] 4276 	mov	a,#0x80
      0011D6 C0 E0            [24] 4277 	push	acc
      0011D8 8C 82            [24] 4278 	mov	dpl,r4
      0011DA 8E 83            [24] 4279 	mov	dph,r6
      0011DC 8F F0            [24] 4280 	mov	b,r7
      0011DE 78r00            [12] 4281 	mov	r0,#_strncmp
      0011E0 79s00            [12] 4282 	mov	r1,#(_strncmp >> 8)
      0011E2 7As00            [12] 4283 	mov	r2,#(_strncmp >> 16)
      0011E4 12r00r00         [24] 4284 	lcall	__sdcc_banked_call
      0011E7 AE 82            [24] 4285 	mov	r6,dpl
      0011E9 AF 83            [24] 4286 	mov	r7,dph
      0011EB E5 81            [12] 4287 	mov	a,sp
      0011ED 24 FB            [12] 4288 	add	a,#0xfb
      0011EF F5 81            [12] 4289 	mov	sp,a
      0011F1 D0 00            [24] 4290 	pop	ar0
      0011F3 D0 01            [24] 4291 	pop	ar1
      0011F5 D0 02            [24] 4292 	pop	ar2
      0011F7 EE               [12] 4293 	mov	a,r6
      0011F8 4F               [12] 4294 	orl	a,r7
      0011F9 70 53            [24] 4295 	jnz	00133$
                                   4296 ;	../../../core/loader/elfloader.c:457: dataoff = shdr.sh_offset;
      0011FB C0 00            [24] 4297 	push	ar0
      0011FD E5 81            [12] 4298 	mov	a,sp
      0011FF 24 43            [12] 4299 	add	a,#0x43
      001201 F8               [12] 4300 	mov	r0,a
      001202 C0 01            [24] 4301 	push	ar1
      001204 E5 81            [12] 4302 	mov	a,sp
      001206 24 F5            [12] 4303 	add	a,#0xf5
      001208 F9               [12] 4304 	mov	r1,a
      001209 86 00            [24] 4305 	mov	ar0,@r0
      00120B E6               [12] 4306 	mov	a,@r0
      00120C F7               [12] 4307 	mov	@r1,a
      00120D 08               [12] 4308 	inc	r0
      00120E E6               [12] 4309 	mov	a,@r0
      00120F 09               [12] 4310 	inc	r1
      001210 F7               [12] 4311 	mov	@r1,a
      001211 18               [12] 4312 	dec	r0
      001212 D0 01            [24] 4313 	pop	ar1
                                   4314 ;	../../../core/loader/elfloader.c:458: datasize = shdr.sh_size;
      001214 E5 81            [12] 4315 	mov	a,sp
      001216 24 44            [12] 4316 	add	a,#0x44
      001218 F8               [12] 4317 	mov	r0,a
      001219 C0 01            [24] 4318 	push	ar1
      00121B E5 81            [12] 4319 	mov	a,sp
      00121D 24 28            [12] 4320 	add	a,#0x28
      00121F F9               [12] 4321 	mov	r1,a
      001220 86 00            [24] 4322 	mov	ar0,@r0
      001222 E6               [12] 4323 	mov	a,@r0
      001223 F7               [12] 4324 	mov	@r1,a
      001224 08               [12] 4325 	inc	r0
      001225 E6               [12] 4326 	mov	a,@r0
      001226 09               [12] 4327 	inc	r1
      001227 F7               [12] 4328 	mov	@r1,a
      001228 18               [12] 4329 	dec	r0
      001229 D0 01            [24] 4330 	pop	ar1
                                   4331 ;	../../../core/loader/elfloader.c:459: data.number = i;
      00122B E5 81            [12] 4332 	mov	a,sp
      00122D 24 EA            [12] 4333 	add	a,#0xea
      00122F F8               [12] 4334 	mov	r0,a
      001230 86 07            [24] 4335 	mov	ar7,@r0
      001232 90r00r27         [24] 4336 	mov	dptr,#_data
      001235 EF               [12] 4337 	mov	a,r7
      001236 F0               [24] 4338 	movx	@dptr,a
                                   4339 ;	../../../core/loader/elfloader.c:460: data.offset = dataoff;
      001237 E5 81            [12] 4340 	mov	a,sp
      001239 24 F6            [12] 4341 	add	a,#0xf6
      00123B F8               [12] 4342 	mov	r0,a
      00123C 86 03            [24] 4343 	mov	ar3,@r0
      00123E 08               [12] 4344 	inc	r0
      00123F 86 04            [24] 4345 	mov	ar4,@r0
      001241 D0 00            [24] 4346 	pop	ar0
      001243 90r00r28         [24] 4347 	mov	dptr,#(_data + 0x0001)
      001246 EB               [12] 4348 	mov	a,r3
      001247 F0               [24] 4349 	movx	@dptr,a
      001248 EC               [12] 4350 	mov	a,r4
      001249 A3               [24] 4351 	inc	dptr
      00124A F0               [24] 4352 	movx	@dptr,a
      00124B 02r15r80         [24] 4353 	ljmp	00149$
      00124E                       4354 00133$:
                                   4355 ;	../../../core/loader/elfloader.c:461: } else if(strncmp(name, ".rodata", 7) == 0) {
      00124E C0 00            [24] 4356 	push	ar0
      001250 E5 81            [12] 4357 	mov	a,sp
      001252 24 32            [12] 4358 	add	a,#0x32
      001254 F8               [12] 4359 	mov	r0,a
      001255 86 04            [24] 4360 	mov	ar4,@r0
      001257 7E 00            [12] 4361 	mov	r6,#0x00
      001259 7F 40            [12] 4362 	mov	r7,#0x40
      00125B D0 00            [24] 4363 	pop	ar0
      00125D C0 02            [24] 4364 	push	ar2
      00125F C0 01            [24] 4365 	push	ar1
      001261 C0 00            [24] 4366 	push	ar0
      001263 74 07            [12] 4367 	mov	a,#0x07
      001265 C0 E0            [24] 4368 	push	acc
      001267 E4               [12] 4369 	clr	a
      001268 C0 E0            [24] 4370 	push	acc
      00126A 74r3C            [12] 4371 	mov	a,#___str_5
      00126C C0 E0            [24] 4372 	push	acc
      00126E 74s00            [12] 4373 	mov	a,#(___str_5 >> 8)
      001270 C0 E0            [24] 4374 	push	acc
      001272 74 80            [12] 4375 	mov	a,#0x80
      001274 C0 E0            [24] 4376 	push	acc
      001276 8C 82            [24] 4377 	mov	dpl,r4
      001278 8E 83            [24] 4378 	mov	dph,r6
      00127A 8F F0            [24] 4379 	mov	b,r7
      00127C 78r00            [12] 4380 	mov	r0,#_strncmp
      00127E 79s00            [12] 4381 	mov	r1,#(_strncmp >> 8)
      001280 7As00            [12] 4382 	mov	r2,#(_strncmp >> 16)
      001282 12r00r00         [24] 4383 	lcall	__sdcc_banked_call
      001285 AE 82            [24] 4384 	mov	r6,dpl
      001287 AF 83            [24] 4385 	mov	r7,dph
      001289 E5 81            [12] 4386 	mov	a,sp
      00128B 24 FB            [12] 4387 	add	a,#0xfb
      00128D F5 81            [12] 4388 	mov	sp,a
      00128F D0 00            [24] 4389 	pop	ar0
      001291 D0 01            [24] 4390 	pop	ar1
      001293 D0 02            [24] 4391 	pop	ar2
      001295 EE               [12] 4392 	mov	a,r6
      001296 4F               [12] 4393 	orl	a,r7
      001297 70 53            [24] 4394 	jnz	00130$
                                   4395 ;	../../../core/loader/elfloader.c:463: rodataoff = shdr.sh_offset;
      001299 C0 00            [24] 4396 	push	ar0
      00129B E5 81            [12] 4397 	mov	a,sp
      00129D 24 41            [12] 4398 	add	a,#0x41
      00129F F8               [12] 4399 	mov	r0,a
      0012A0 C0 01            [24] 4400 	push	ar1
      0012A2 E5 81            [12] 4401 	mov	a,sp
      0012A4 24 F7            [12] 4402 	add	a,#0xf7
      0012A6 F9               [12] 4403 	mov	r1,a
      0012A7 86 00            [24] 4404 	mov	ar0,@r0
      0012A9 E6               [12] 4405 	mov	a,@r0
      0012AA F7               [12] 4406 	mov	@r1,a
      0012AB 08               [12] 4407 	inc	r0
      0012AC E6               [12] 4408 	mov	a,@r0
      0012AD 09               [12] 4409 	inc	r1
      0012AE F7               [12] 4410 	mov	@r1,a
      0012AF 18               [12] 4411 	dec	r0
      0012B0 D0 01            [24] 4412 	pop	ar1
                                   4413 ;	../../../core/loader/elfloader.c:464: rodatasize = shdr.sh_size;
      0012B2 E5 81            [12] 4414 	mov	a,sp
      0012B4 24 42            [12] 4415 	add	a,#0x42
      0012B6 F8               [12] 4416 	mov	r0,a
      0012B7 C0 01            [24] 4417 	push	ar1
      0012B9 E5 81            [12] 4418 	mov	a,sp
      0012BB 24 24            [12] 4419 	add	a,#0x24
      0012BD F9               [12] 4420 	mov	r1,a
      0012BE 86 00            [24] 4421 	mov	ar0,@r0
      0012C0 E6               [12] 4422 	mov	a,@r0
      0012C1 F7               [12] 4423 	mov	@r1,a
      0012C2 08               [12] 4424 	inc	r0
      0012C3 E6               [12] 4425 	mov	a,@r0
      0012C4 09               [12] 4426 	inc	r1
      0012C5 F7               [12] 4427 	mov	@r1,a
      0012C6 18               [12] 4428 	dec	r0
      0012C7 D0 01            [24] 4429 	pop	ar1
                                   4430 ;	../../../core/loader/elfloader.c:465: rodata.number = i;
      0012C9 E5 81            [12] 4431 	mov	a,sp
      0012CB 24 EA            [12] 4432 	add	a,#0xea
      0012CD F8               [12] 4433 	mov	r0,a
      0012CE 86 07            [24] 4434 	mov	ar7,@r0
      0012D0 90r00r2D         [24] 4435 	mov	dptr,#_rodata
      0012D3 EF               [12] 4436 	mov	a,r7
      0012D4 F0               [24] 4437 	movx	@dptr,a
                                   4438 ;	../../../core/loader/elfloader.c:466: rodata.offset = rodataoff;
      0012D5 E5 81            [12] 4439 	mov	a,sp
      0012D7 24 F8            [12] 4440 	add	a,#0xf8
      0012D9 F8               [12] 4441 	mov	r0,a
      0012DA 86 03            [24] 4442 	mov	ar3,@r0
      0012DC 08               [12] 4443 	inc	r0
      0012DD 86 04            [24] 4444 	mov	ar4,@r0
      0012DF D0 00            [24] 4445 	pop	ar0
      0012E1 90r00r2E         [24] 4446 	mov	dptr,#(_rodata + 0x0001)
      0012E4 EB               [12] 4447 	mov	a,r3
      0012E5 F0               [24] 4448 	movx	@dptr,a
      0012E6 EC               [12] 4449 	mov	a,r4
      0012E7 A3               [24] 4450 	inc	dptr
      0012E8 F0               [24] 4451 	movx	@dptr,a
      0012E9 02r15r80         [24] 4452 	ljmp	00149$
      0012EC                       4453 00130$:
                                   4454 ;	../../../core/loader/elfloader.c:467: } else if(strncmp(name, ".rel.rodata", 11) == 0) {
      0012EC C0 00            [24] 4455 	push	ar0
      0012EE E5 81            [12] 4456 	mov	a,sp
      0012F0 24 33            [12] 4457 	add	a,#0x33
      0012F2 F8               [12] 4458 	mov	r0,a
      0012F3 86 04            [24] 4459 	mov	ar4,@r0
      0012F5 7E 00            [12] 4460 	mov	r6,#0x00
      0012F7 7F 40            [12] 4461 	mov	r7,#0x40
      0012F9 D0 00            [24] 4462 	pop	ar0
      0012FB C0 02            [24] 4463 	push	ar2
      0012FD C0 01            [24] 4464 	push	ar1
      0012FF C0 00            [24] 4465 	push	ar0
      001301 74 0B            [12] 4466 	mov	a,#0x0b
      001303 C0 E0            [24] 4467 	push	acc
      001305 E4               [12] 4468 	clr	a
      001306 C0 E0            [24] 4469 	push	acc
      001308 74r44            [12] 4470 	mov	a,#___str_6
      00130A C0 E0            [24] 4471 	push	acc
      00130C 74s00            [12] 4472 	mov	a,#(___str_6 >> 8)
      00130E C0 E0            [24] 4473 	push	acc
      001310 74 80            [12] 4474 	mov	a,#0x80
      001312 C0 E0            [24] 4475 	push	acc
      001314 8C 82            [24] 4476 	mov	dpl,r4
      001316 8E 83            [24] 4477 	mov	dph,r6
      001318 8F F0            [24] 4478 	mov	b,r7
      00131A 78r00            [12] 4479 	mov	r0,#_strncmp
      00131C 79s00            [12] 4480 	mov	r1,#(_strncmp >> 8)
      00131E 7As00            [12] 4481 	mov	r2,#(_strncmp >> 16)
      001320 12r00r00         [24] 4482 	lcall	__sdcc_banked_call
      001323 AE 82            [24] 4483 	mov	r6,dpl
      001325 AF 83            [24] 4484 	mov	r7,dph
      001327 E5 81            [12] 4485 	mov	a,sp
      001329 24 FB            [12] 4486 	add	a,#0xfb
      00132B F5 81            [12] 4487 	mov	sp,a
      00132D D0 00            [24] 4488 	pop	ar0
      00132F D0 01            [24] 4489 	pop	ar1
      001331 D0 02            [24] 4490 	pop	ar2
      001333 EE               [12] 4491 	mov	a,r6
      001334 4F               [12] 4492 	orl	a,r7
      001335 70 3C            [24] 4493 	jnz	00127$
                                   4494 ;	../../../core/loader/elfloader.c:469: using_relas = 0;
      001337 C0 00            [24] 4495 	push	ar0
      001339 E5 81            [12] 4496 	mov	a,sp
      00133B 24 C1            [12] 4497 	add	a,#0xc1
      00133D F8               [12] 4498 	mov	r0,a
      00133E 76 00            [12] 4499 	mov	@r0,#0x00
                                   4500 ;	../../../core/loader/elfloader.c:470: rodatarelaoff = shdr.sh_offset;
      001340 E5 81            [12] 4501 	mov	a,sp
      001342 24 3F            [12] 4502 	add	a,#0x3f
      001344 F8               [12] 4503 	mov	r0,a
      001345 C0 01            [24] 4504 	push	ar1
      001347 E5 81            [12] 4505 	mov	a,sp
      001349 24 1C            [12] 4506 	add	a,#0x1c
      00134B F9               [12] 4507 	mov	r1,a
      00134C 86 00            [24] 4508 	mov	ar0,@r0
      00134E E6               [12] 4509 	mov	a,@r0
      00134F F7               [12] 4510 	mov	@r1,a
      001350 08               [12] 4511 	inc	r0
      001351 E6               [12] 4512 	mov	a,@r0
      001352 09               [12] 4513 	inc	r1
      001353 F7               [12] 4514 	mov	@r1,a
      001354 18               [12] 4515 	dec	r0
      001355 D0 01            [24] 4516 	pop	ar1
                                   4517 ;	../../../core/loader/elfloader.c:471: rodatarelasize = shdr.sh_size;
      001357 E5 81            [12] 4518 	mov	a,sp
      001359 24 40            [12] 4519 	add	a,#0x40
      00135B F8               [12] 4520 	mov	r0,a
      00135C C0 01            [24] 4521 	push	ar1
      00135E E5 81            [12] 4522 	mov	a,sp
      001360 24 22            [12] 4523 	add	a,#0x22
      001362 F9               [12] 4524 	mov	r1,a
      001363 86 00            [24] 4525 	mov	ar0,@r0
      001365 E6               [12] 4526 	mov	a,@r0
      001366 F7               [12] 4527 	mov	@r1,a
      001367 08               [12] 4528 	inc	r0
      001368 E6               [12] 4529 	mov	a,@r0
      001369 09               [12] 4530 	inc	r1
      00136A F7               [12] 4531 	mov	@r1,a
      00136B 18               [12] 4532 	dec	r0
      00136C D0 01            [24] 4533 	pop	ar1
      00136E D0 00            [24] 4534 	pop	ar0
      001370 02r15r80         [24] 4535 	ljmp	00149$
      001373                       4536 00127$:
                                   4537 ;	../../../core/loader/elfloader.c:472: } else if(strncmp(name, ".rela.rodata", 12) == 0) {
      001373 C0 00            [24] 4538 	push	ar0
      001375 E5 81            [12] 4539 	mov	a,sp
      001377 24 34            [12] 4540 	add	a,#0x34
      001379 F8               [12] 4541 	mov	r0,a
      00137A 86 04            [24] 4542 	mov	ar4,@r0
      00137C 7E 00            [12] 4543 	mov	r6,#0x00
      00137E 7F 40            [12] 4544 	mov	r7,#0x40
      001380 D0 00            [24] 4545 	pop	ar0
      001382 C0 02            [24] 4546 	push	ar2
      001384 C0 01            [24] 4547 	push	ar1
      001386 C0 00            [24] 4548 	push	ar0
      001388 74 0C            [12] 4549 	mov	a,#0x0c
      00138A C0 E0            [24] 4550 	push	acc
      00138C E4               [12] 4551 	clr	a
      00138D C0 E0            [24] 4552 	push	acc
      00138F 74r50            [12] 4553 	mov	a,#___str_7
      001391 C0 E0            [24] 4554 	push	acc
      001393 74s00            [12] 4555 	mov	a,#(___str_7 >> 8)
      001395 C0 E0            [24] 4556 	push	acc
      001397 74 80            [12] 4557 	mov	a,#0x80
      001399 C0 E0            [24] 4558 	push	acc
      00139B 8C 82            [24] 4559 	mov	dpl,r4
      00139D 8E 83            [24] 4560 	mov	dph,r6
      00139F 8F F0            [24] 4561 	mov	b,r7
      0013A1 78r00            [12] 4562 	mov	r0,#_strncmp
      0013A3 79s00            [12] 4563 	mov	r1,#(_strncmp >> 8)
      0013A5 7As00            [12] 4564 	mov	r2,#(_strncmp >> 16)
      0013A7 12r00r00         [24] 4565 	lcall	__sdcc_banked_call
      0013AA AE 82            [24] 4566 	mov	r6,dpl
      0013AC AF 83            [24] 4567 	mov	r7,dph
      0013AE E5 81            [12] 4568 	mov	a,sp
      0013B0 24 FB            [12] 4569 	add	a,#0xfb
      0013B2 F5 81            [12] 4570 	mov	sp,a
      0013B4 D0 00            [24] 4571 	pop	ar0
      0013B6 D0 01            [24] 4572 	pop	ar1
      0013B8 D0 02            [24] 4573 	pop	ar2
      0013BA EE               [12] 4574 	mov	a,r6
      0013BB 4F               [12] 4575 	orl	a,r7
      0013BC 70 3C            [24] 4576 	jnz	00124$
                                   4577 ;	../../../core/loader/elfloader.c:473: using_relas = 1;
      0013BE C0 00            [24] 4578 	push	ar0
      0013C0 E5 81            [12] 4579 	mov	a,sp
      0013C2 24 C1            [12] 4580 	add	a,#0xc1
      0013C4 F8               [12] 4581 	mov	r0,a
      0013C5 76 01            [12] 4582 	mov	@r0,#0x01
                                   4583 ;	../../../core/loader/elfloader.c:474: rodatarelaoff = shdr.sh_offset;
      0013C7 E5 81            [12] 4584 	mov	a,sp
      0013C9 24 3D            [12] 4585 	add	a,#0x3d
      0013CB F8               [12] 4586 	mov	r0,a
      0013CC C0 01            [24] 4587 	push	ar1
      0013CE E5 81            [12] 4588 	mov	a,sp
      0013D0 24 1C            [12] 4589 	add	a,#0x1c
      0013D2 F9               [12] 4590 	mov	r1,a
      0013D3 86 00            [24] 4591 	mov	ar0,@r0
      0013D5 E6               [12] 4592 	mov	a,@r0
      0013D6 F7               [12] 4593 	mov	@r1,a
      0013D7 08               [12] 4594 	inc	r0
      0013D8 E6               [12] 4595 	mov	a,@r0
      0013D9 09               [12] 4596 	inc	r1
      0013DA F7               [12] 4597 	mov	@r1,a
      0013DB 18               [12] 4598 	dec	r0
      0013DC D0 01            [24] 4599 	pop	ar1
                                   4600 ;	../../../core/loader/elfloader.c:475: rodatarelasize = shdr.sh_size;
      0013DE E5 81            [12] 4601 	mov	a,sp
      0013E0 24 3E            [12] 4602 	add	a,#0x3e
      0013E2 F8               [12] 4603 	mov	r0,a
      0013E3 C0 01            [24] 4604 	push	ar1
      0013E5 E5 81            [12] 4605 	mov	a,sp
      0013E7 24 22            [12] 4606 	add	a,#0x22
      0013E9 F9               [12] 4607 	mov	r1,a
      0013EA 86 00            [24] 4608 	mov	ar0,@r0
      0013EC E6               [12] 4609 	mov	a,@r0
      0013ED F7               [12] 4610 	mov	@r1,a
      0013EE 08               [12] 4611 	inc	r0
      0013EF E6               [12] 4612 	mov	a,@r0
      0013F0 09               [12] 4613 	inc	r1
      0013F1 F7               [12] 4614 	mov	@r1,a
      0013F2 18               [12] 4615 	dec	r0
      0013F3 D0 01            [24] 4616 	pop	ar1
      0013F5 D0 00            [24] 4617 	pop	ar0
      0013F7 02r15r80         [24] 4618 	ljmp	00149$
      0013FA                       4619 00124$:
                                   4620 ;	../../../core/loader/elfloader.c:476: } else if(strncmp(name, ".rel.data", 9) == 0) {
      0013FA C0 00            [24] 4621 	push	ar0
      0013FC E5 81            [12] 4622 	mov	a,sp
      0013FE 24 35            [12] 4623 	add	a,#0x35
      001400 F8               [12] 4624 	mov	r0,a
      001401 86 04            [24] 4625 	mov	ar4,@r0
      001403 7E 00            [12] 4626 	mov	r6,#0x00
      001405 7F 40            [12] 4627 	mov	r7,#0x40
      001407 D0 00            [24] 4628 	pop	ar0
      001409 C0 02            [24] 4629 	push	ar2
      00140B C0 01            [24] 4630 	push	ar1
      00140D C0 00            [24] 4631 	push	ar0
      00140F 74 09            [12] 4632 	mov	a,#0x09
      001411 C0 E0            [24] 4633 	push	acc
      001413 E4               [12] 4634 	clr	a
      001414 C0 E0            [24] 4635 	push	acc
      001416 74r5D            [12] 4636 	mov	a,#___str_8
      001418 C0 E0            [24] 4637 	push	acc
      00141A 74s00            [12] 4638 	mov	a,#(___str_8 >> 8)
      00141C C0 E0            [24] 4639 	push	acc
      00141E 74 80            [12] 4640 	mov	a,#0x80
      001420 C0 E0            [24] 4641 	push	acc
      001422 8C 82            [24] 4642 	mov	dpl,r4
      001424 8E 83            [24] 4643 	mov	dph,r6
      001426 8F F0            [24] 4644 	mov	b,r7
      001428 78r00            [12] 4645 	mov	r0,#_strncmp
      00142A 79s00            [12] 4646 	mov	r1,#(_strncmp >> 8)
      00142C 7As00            [12] 4647 	mov	r2,#(_strncmp >> 16)
      00142E 12r00r00         [24] 4648 	lcall	__sdcc_banked_call
      001431 AE 82            [24] 4649 	mov	r6,dpl
      001433 AF 83            [24] 4650 	mov	r7,dph
      001435 E5 81            [12] 4651 	mov	a,sp
      001437 24 FB            [12] 4652 	add	a,#0xfb
      001439 F5 81            [12] 4653 	mov	sp,a
      00143B D0 00            [24] 4654 	pop	ar0
      00143D D0 01            [24] 4655 	pop	ar1
      00143F D0 02            [24] 4656 	pop	ar2
      001441 EE               [12] 4657 	mov	a,r6
      001442 4F               [12] 4658 	orl	a,r7
      001443 70 3C            [24] 4659 	jnz	00121$
                                   4660 ;	../../../core/loader/elfloader.c:478: using_relas = 0;
      001445 C0 00            [24] 4661 	push	ar0
      001447 E5 81            [12] 4662 	mov	a,sp
      001449 24 C1            [12] 4663 	add	a,#0xc1
      00144B F8               [12] 4664 	mov	r0,a
      00144C 76 00            [12] 4665 	mov	@r0,#0x00
                                   4666 ;	../../../core/loader/elfloader.c:479: datarelaoff = shdr.sh_offset;
      00144E E5 81            [12] 4667 	mov	a,sp
      001450 24 3B            [12] 4668 	add	a,#0x3b
      001452 F8               [12] 4669 	mov	r0,a
      001453 C0 01            [24] 4670 	push	ar1
      001455 E5 81            [12] 4671 	mov	a,sp
      001457 24 1A            [12] 4672 	add	a,#0x1a
      001459 F9               [12] 4673 	mov	r1,a
      00145A 86 00            [24] 4674 	mov	ar0,@r0
      00145C E6               [12] 4675 	mov	a,@r0
      00145D F7               [12] 4676 	mov	@r1,a
      00145E 08               [12] 4677 	inc	r0
      00145F E6               [12] 4678 	mov	a,@r0
      001460 09               [12] 4679 	inc	r1
      001461 F7               [12] 4680 	mov	@r1,a
      001462 18               [12] 4681 	dec	r0
      001463 D0 01            [24] 4682 	pop	ar1
                                   4683 ;	../../../core/loader/elfloader.c:480: datarelasize = shdr.sh_size;
      001465 E5 81            [12] 4684 	mov	a,sp
      001467 24 3C            [12] 4685 	add	a,#0x3c
      001469 F8               [12] 4686 	mov	r0,a
      00146A C0 01            [24] 4687 	push	ar1
      00146C E5 81            [12] 4688 	mov	a,sp
      00146E 24 26            [12] 4689 	add	a,#0x26
      001470 F9               [12] 4690 	mov	r1,a
      001471 86 00            [24] 4691 	mov	ar0,@r0
      001473 E6               [12] 4692 	mov	a,@r0
      001474 F7               [12] 4693 	mov	@r1,a
      001475 08               [12] 4694 	inc	r0
      001476 E6               [12] 4695 	mov	a,@r0
      001477 09               [12] 4696 	inc	r1
      001478 F7               [12] 4697 	mov	@r1,a
      001479 18               [12] 4698 	dec	r0
      00147A D0 01            [24] 4699 	pop	ar1
      00147C D0 00            [24] 4700 	pop	ar0
      00147E 02r15r80         [24] 4701 	ljmp	00149$
      001481                       4702 00121$:
                                   4703 ;	../../../core/loader/elfloader.c:481: } else if(strncmp(name, ".rela.data", 10) == 0) {
      001481 C0 00            [24] 4704 	push	ar0
      001483 E5 81            [12] 4705 	mov	a,sp
      001485 24 36            [12] 4706 	add	a,#0x36
      001487 F8               [12] 4707 	mov	r0,a
      001488 86 04            [24] 4708 	mov	ar4,@r0
      00148A 7E 00            [12] 4709 	mov	r6,#0x00
      00148C 7F 40            [12] 4710 	mov	r7,#0x40
      00148E D0 00            [24] 4711 	pop	ar0
      001490 C0 02            [24] 4712 	push	ar2
      001492 C0 01            [24] 4713 	push	ar1
      001494 C0 00            [24] 4714 	push	ar0
      001496 74 0A            [12] 4715 	mov	a,#0x0a
      001498 C0 E0            [24] 4716 	push	acc
      00149A E4               [12] 4717 	clr	a
      00149B C0 E0            [24] 4718 	push	acc
      00149D 74r67            [12] 4719 	mov	a,#___str_9
      00149F C0 E0            [24] 4720 	push	acc
      0014A1 74s00            [12] 4721 	mov	a,#(___str_9 >> 8)
      0014A3 C0 E0            [24] 4722 	push	acc
      0014A5 74 80            [12] 4723 	mov	a,#0x80
      0014A7 C0 E0            [24] 4724 	push	acc
      0014A9 8C 82            [24] 4725 	mov	dpl,r4
      0014AB 8E 83            [24] 4726 	mov	dph,r6
      0014AD 8F F0            [24] 4727 	mov	b,r7
      0014AF 78r00            [12] 4728 	mov	r0,#_strncmp
      0014B1 79s00            [12] 4729 	mov	r1,#(_strncmp >> 8)
      0014B3 7As00            [12] 4730 	mov	r2,#(_strncmp >> 16)
      0014B5 12r00r00         [24] 4731 	lcall	__sdcc_banked_call
      0014B8 AE 82            [24] 4732 	mov	r6,dpl
      0014BA AF 83            [24] 4733 	mov	r7,dph
      0014BC E5 81            [12] 4734 	mov	a,sp
      0014BE 24 FB            [12] 4735 	add	a,#0xfb
      0014C0 F5 81            [12] 4736 	mov	sp,a
      0014C2 D0 00            [24] 4737 	pop	ar0
      0014C4 D0 01            [24] 4738 	pop	ar1
      0014C6 D0 02            [24] 4739 	pop	ar2
      0014C8 EE               [12] 4740 	mov	a,r6
      0014C9 4F               [12] 4741 	orl	a,r7
      0014CA 70 3B            [24] 4742 	jnz	00118$
                                   4743 ;	../../../core/loader/elfloader.c:482: using_relas = 1;
      0014CC C0 00            [24] 4744 	push	ar0
      0014CE E5 81            [12] 4745 	mov	a,sp
      0014D0 24 C1            [12] 4746 	add	a,#0xc1
      0014D2 F8               [12] 4747 	mov	r0,a
      0014D3 76 01            [12] 4748 	mov	@r0,#0x01
                                   4749 ;	../../../core/loader/elfloader.c:483: datarelaoff = shdr.sh_offset;
      0014D5 E5 81            [12] 4750 	mov	a,sp
      0014D7 24 39            [12] 4751 	add	a,#0x39
      0014D9 F8               [12] 4752 	mov	r0,a
      0014DA C0 01            [24] 4753 	push	ar1
      0014DC E5 81            [12] 4754 	mov	a,sp
      0014DE 24 1A            [12] 4755 	add	a,#0x1a
      0014E0 F9               [12] 4756 	mov	r1,a
      0014E1 86 00            [24] 4757 	mov	ar0,@r0
      0014E3 E6               [12] 4758 	mov	a,@r0
      0014E4 F7               [12] 4759 	mov	@r1,a
      0014E5 08               [12] 4760 	inc	r0
      0014E6 E6               [12] 4761 	mov	a,@r0
      0014E7 09               [12] 4762 	inc	r1
      0014E8 F7               [12] 4763 	mov	@r1,a
      0014E9 18               [12] 4764 	dec	r0
      0014EA D0 01            [24] 4765 	pop	ar1
                                   4766 ;	../../../core/loader/elfloader.c:484: datarelasize = shdr.sh_size;
      0014EC E5 81            [12] 4767 	mov	a,sp
      0014EE 24 3A            [12] 4768 	add	a,#0x3a
      0014F0 F8               [12] 4769 	mov	r0,a
      0014F1 C0 01            [24] 4770 	push	ar1
      0014F3 E5 81            [12] 4771 	mov	a,sp
      0014F5 24 26            [12] 4772 	add	a,#0x26
      0014F7 F9               [12] 4773 	mov	r1,a
      0014F8 86 00            [24] 4774 	mov	ar0,@r0
      0014FA E6               [12] 4775 	mov	a,@r0
      0014FB F7               [12] 4776 	mov	@r1,a
      0014FC 08               [12] 4777 	inc	r0
      0014FD E6               [12] 4778 	mov	a,@r0
      0014FE 09               [12] 4779 	inc	r1
      0014FF F7               [12] 4780 	mov	@r1,a
      001500 18               [12] 4781 	dec	r0
      001501 D0 01            [24] 4782 	pop	ar1
      001503 D0 00            [24] 4783 	pop	ar0
      001505 80 79            [24] 4784 	sjmp	00149$
      001507                       4785 00118$:
                                   4786 ;	../../../core/loader/elfloader.c:485: } else if(strncmp(name, ".bss", 4) == 0) {
      001507 C0 00            [24] 4787 	push	ar0
      001509 E5 81            [12] 4788 	mov	a,sp
      00150B 24 38            [12] 4789 	add	a,#0x38
      00150D F8               [12] 4790 	mov	r0,a
      00150E 86 04            [24] 4791 	mov	ar4,@r0
      001510 7E 00            [12] 4792 	mov	r6,#0x00
      001512 7F 40            [12] 4793 	mov	r7,#0x40
      001514 D0 00            [24] 4794 	pop	ar0
      001516 C0 02            [24] 4795 	push	ar2
      001518 C0 01            [24] 4796 	push	ar1
      00151A C0 00            [24] 4797 	push	ar0
      00151C 74 04            [12] 4798 	mov	a,#0x04
      00151E C0 E0            [24] 4799 	push	acc
      001520 E4               [12] 4800 	clr	a
      001521 C0 E0            [24] 4801 	push	acc
      001523 74r72            [12] 4802 	mov	a,#___str_10
      001525 C0 E0            [24] 4803 	push	acc
      001527 74s00            [12] 4804 	mov	a,#(___str_10 >> 8)
      001529 C0 E0            [24] 4805 	push	acc
      00152B 74 80            [12] 4806 	mov	a,#0x80
      00152D C0 E0            [24] 4807 	push	acc
      00152F 8C 82            [24] 4808 	mov	dpl,r4
      001531 8E 83            [24] 4809 	mov	dph,r6
      001533 8F F0            [24] 4810 	mov	b,r7
      001535 78r00            [12] 4811 	mov	r0,#_strncmp
      001537 79s00            [12] 4812 	mov	r1,#(_strncmp >> 8)
      001539 7As00            [12] 4813 	mov	r2,#(_strncmp >> 16)
      00153B 12r00r00         [24] 4814 	lcall	__sdcc_banked_call
      00153E AE 82            [24] 4815 	mov	r6,dpl
      001540 AF 83            [24] 4816 	mov	r7,dph
      001542 E5 81            [12] 4817 	mov	a,sp
      001544 24 FB            [12] 4818 	add	a,#0xfb
      001546 F5 81            [12] 4819 	mov	sp,a
      001548 D0 00            [24] 4820 	pop	ar0
      00154A D0 01            [24] 4821 	pop	ar1
      00154C D0 02            [24] 4822 	pop	ar2
      00154E EE               [12] 4823 	mov	a,r6
      00154F 4F               [12] 4824 	orl	a,r7
      001550 70 2E            [24] 4825 	jnz	00149$
                                   4826 ;	../../../core/loader/elfloader.c:486: bsssize = shdr.sh_size;
      001552 C0 00            [24] 4827 	push	ar0
      001554 E5 81            [12] 4828 	mov	a,sp
      001556 24 37            [12] 4829 	add	a,#0x37
      001558 F8               [12] 4830 	mov	r0,a
      001559 C0 01            [24] 4831 	push	ar1
      00155B E5 81            [12] 4832 	mov	a,sp
      00155D 24 1E            [12] 4833 	add	a,#0x1e
      00155F F9               [12] 4834 	mov	r1,a
      001560 86 00            [24] 4835 	mov	ar0,@r0
      001562 E6               [12] 4836 	mov	a,@r0
      001563 F7               [12] 4837 	mov	@r1,a
      001564 08               [12] 4838 	inc	r0
      001565 E6               [12] 4839 	mov	a,@r0
      001566 09               [12] 4840 	inc	r1
      001567 F7               [12] 4841 	mov	@r1,a
      001568 18               [12] 4842 	dec	r0
      001569 D0 01            [24] 4843 	pop	ar1
                                   4844 ;	../../../core/loader/elfloader.c:487: bss.number = i;
      00156B E5 81            [12] 4845 	mov	a,sp
      00156D 24 EA            [12] 4846 	add	a,#0xea
      00156F F8               [12] 4847 	mov	r0,a
      001570 86 07            [24] 4848 	mov	ar7,@r0
      001572 D0 00            [24] 4849 	pop	ar0
      001574 90r00r21         [24] 4850 	mov	dptr,#_bss
      001577 EF               [12] 4851 	mov	a,r7
      001578 F0               [24] 4852 	movx	@dptr,a
                                   4853 ;	../../../core/loader/elfloader.c:488: bss.offset = 0;
      001579 90r00r22         [24] 4854 	mov	dptr,#(_bss + 0x0001)
      00157C E4               [12] 4855 	clr	a
      00157D F0               [24] 4856 	movx	@dptr,a
      00157E A3               [24] 4857 	inc	dptr
      00157F F0               [24] 4858 	movx	@dptr,a
      001580                       4859 00149$:
                                   4860 ;	../../../core/loader/elfloader.c:492: shdrptr += shdrsize;
      001580 C0 00            [24] 4861 	push	ar0
      001582 E5 81            [12] 4862 	mov	a,sp
      001584 24 57            [12] 4863 	add	a,#0x57
      001586 F8               [12] 4864 	mov	r0,a
      001587 86 06            [24] 4865 	mov	ar6,@r0
      001589 08               [12] 4866 	inc	r0
      00158A 86 07            [24] 4867 	mov	ar7,@r0
      00158C E5 81            [12] 4868 	mov	a,sp
      00158E 24 F0            [12] 4869 	add	a,#0xf0
      001590 F8               [12] 4870 	mov	r0,a
      001591 E6               [12] 4871 	mov	a,@r0
      001592 2E               [12] 4872 	add	a,r6
      001593 FE               [12] 4873 	mov	r6,a
      001594 08               [12] 4874 	inc	r0
      001595 E6               [12] 4875 	mov	a,@r0
      001596 3F               [12] 4876 	addc	a,r7
      001597 FF               [12] 4877 	mov	r7,a
      001598 E5 81            [12] 4878 	mov	a,sp
      00159A 24 57            [12] 4879 	add	a,#0x57
      00159C F8               [12] 4880 	mov	r0,a
      00159D A6 06            [24] 4881 	mov	@r0,ar6
      00159F 08               [12] 4882 	inc	r0
      0015A0 A6 07            [24] 4883 	mov	@r0,ar7
                                   4884 ;	../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      0015A2 E5 81            [12] 4885 	mov	a,sp
      0015A4 24 EA            [12] 4886 	add	a,#0xea
      0015A6 F8               [12] 4887 	mov	r0,a
      0015A7 06               [12] 4888 	inc	@r0
      0015A8 B6 00 02         [24] 4889 	cjne	@r0,#0x00,00351$
      0015AB 08               [12] 4890 	inc	r0
      0015AC 06               [12] 4891 	inc	@r0
      0015AD                       4892 00351$:
      0015AD D0 00            [24] 4893 	pop	ar0
      0015AF 02r0ErAE         [24] 4894 	ljmp	00205$
      0015B2                       4895 00150$:
                                   4896 ;	../../../core/loader/elfloader.c:495: if(symtabsize == 0) {
      0015B2 E5 81            [12] 4897 	mov	a,sp
      0015B4 24 FD            [12] 4898 	add	a,#0xfd
      0015B6 F8               [12] 4899 	mov	r0,a
      0015B7 E6               [12] 4900 	mov	a,@r0
      0015B8 08               [12] 4901 	inc	r0
      0015B9 46               [12] 4902 	orl	a,@r0
      0015BA 70 06            [24] 4903 	jnz	00152$
                                   4904 ;	../../../core/loader/elfloader.c:496: return ELFLOADER_NO_SYMTAB;
      0015BC 90 00 02         [24] 4905 	mov	dptr,#0x0002
      0015BF 02r1ArB8         [24] 4906 	ljmp	00207$
      0015C2                       4907 00152$:
                                   4908 ;	../../../core/loader/elfloader.c:498: if(strtabsize == 0) {
      0015C2 E5 81            [12] 4909 	mov	a,sp
      0015C4 24 22            [12] 4910 	add	a,#0x22
      0015C6 F8               [12] 4911 	mov	r0,a
      0015C7 E6               [12] 4912 	mov	a,@r0
      0015C8 08               [12] 4913 	inc	r0
      0015C9 46               [12] 4914 	orl	a,@r0
      0015CA 70 06            [24] 4915 	jnz	00154$
                                   4916 ;	../../../core/loader/elfloader.c:499: return ELFLOADER_NO_STRTAB;
      0015CC 90 00 03         [24] 4917 	mov	dptr,#0x0003
      0015CF 02r1ArB8         [24] 4918 	ljmp	00207$
      0015D2                       4919 00154$:
                                   4920 ;	../../../core/loader/elfloader.c:501: if(textsize == 0) {
      0015D2 E5 81            [12] 4921 	mov	a,sp
      0015D4 24 F5            [12] 4922 	add	a,#0xf5
      0015D6 F8               [12] 4923 	mov	r0,a
      0015D7 E6               [12] 4924 	mov	a,@r0
      0015D8 08               [12] 4925 	inc	r0
      0015D9 46               [12] 4926 	orl	a,@r0
      0015DA 70 06            [24] 4927 	jnz	00157$
                                   4928 ;	../../../core/loader/elfloader.c:502: return ELFLOADER_NO_TEXT;
      0015DC 90 00 04         [24] 4929 	mov	dptr,#0x0004
      0015DF 02r1ArB8         [24] 4930 	ljmp	00207$
                                   4931 ;	../../../core/loader/elfloader.c:505: PRINTF("before allocate ram\n");
      0015E2                       4932 00157$:
                                   4933 ;	../../../core/loader/elfloader.c:506: bss.address = (char *)elfloader_arch_allocate_ram(bsssize + datasize);
      0015E2 E5 81            [12] 4934 	mov	a,sp
      0015E4 24 20            [12] 4935 	add	a,#0x20
      0015E6 F8               [12] 4936 	mov	r0,a
      0015E7 E5 81            [12] 4937 	mov	a,sp
      0015E9 24 2A            [12] 4938 	add	a,#0x2a
      0015EB F9               [12] 4939 	mov	r1,a
      0015EC E7               [12] 4940 	mov	a,@r1
      0015ED 26               [12] 4941 	add	a,@r0
      0015EE FE               [12] 4942 	mov	r6,a
      0015EF 09               [12] 4943 	inc	r1
      0015F0 E7               [12] 4944 	mov	a,@r1
      0015F1 08               [12] 4945 	inc	r0
      0015F2 36               [12] 4946 	addc	a,@r0
      0015F3 FF               [12] 4947 	mov	r7,a
      0015F4 8E 82            [24] 4948 	mov	dpl,r6
      0015F6 8F 83            [24] 4949 	mov	dph,r7
      0015F8 78r00            [12] 4950 	mov	r0,#_elfloader_arch_allocate_ram
      0015FA 79s00            [12] 4951 	mov	r1,#(_elfloader_arch_allocate_ram >> 8)
      0015FC 7As00            [12] 4952 	mov	r2,#(_elfloader_arch_allocate_ram >> 16)
      0015FE 12r00r00         [24] 4953 	lcall	__sdcc_banked_call
      001601 AC 82            [24] 4954 	mov	r4,dpl
      001603 AE 83            [24] 4955 	mov	r6,dph
      001605 AF F0            [24] 4956 	mov	r7,b
      001607 90r00r24         [24] 4957 	mov	dptr,#(_bss + 0x0003)
      00160A EC               [12] 4958 	mov	a,r4
      00160B F0               [24] 4959 	movx	@dptr,a
      00160C EE               [12] 4960 	mov	a,r6
      00160D A3               [24] 4961 	inc	dptr
      00160E F0               [24] 4962 	movx	@dptr,a
      00160F EF               [12] 4963 	mov	a,r7
      001610 A3               [24] 4964 	inc	dptr
      001611 F0               [24] 4965 	movx	@dptr,a
                                   4966 ;	../../../core/loader/elfloader.c:507: data.address = (char *)bss.address + bsssize;
      001612 E5 81            [12] 4967 	mov	a,sp
      001614 24 20            [12] 4968 	add	a,#0x20
      001616 F8               [12] 4969 	mov	r0,a
      001617 E6               [12] 4970 	mov	a,@r0
      001618 2C               [12] 4971 	add	a,r4
      001619 FC               [12] 4972 	mov	r4,a
      00161A 08               [12] 4973 	inc	r0
      00161B E6               [12] 4974 	mov	a,@r0
      00161C 3E               [12] 4975 	addc	a,r6
      00161D FE               [12] 4976 	mov	r6,a
      00161E 90r00r2A         [24] 4977 	mov	dptr,#(_data + 0x0003)
      001621 EC               [12] 4978 	mov	a,r4
      001622 F0               [24] 4979 	movx	@dptr,a
      001623 EE               [12] 4980 	mov	a,r6
      001624 A3               [24] 4981 	inc	dptr
      001625 F0               [24] 4982 	movx	@dptr,a
      001626 EF               [12] 4983 	mov	a,r7
      001627 A3               [24] 4984 	inc	dptr
      001628 F0               [24] 4985 	movx	@dptr,a
                                   4986 ;	../../../core/loader/elfloader.c:509: text.address = (char *)elfloader_arch_allocate_rom(textsize + rodatasize);
      001629 E5 81            [12] 4987 	mov	a,sp
      00162B 24 F5            [12] 4988 	add	a,#0xf5
      00162D F8               [12] 4989 	mov	r0,a
      00162E E5 81            [12] 4990 	mov	a,sp
      001630 24 26            [12] 4991 	add	a,#0x26
      001632 F9               [12] 4992 	mov	r1,a
      001633 E7               [12] 4993 	mov	a,@r1
      001634 26               [12] 4994 	add	a,@r0
      001635 FE               [12] 4995 	mov	r6,a
      001636 09               [12] 4996 	inc	r1
      001637 E7               [12] 4997 	mov	a,@r1
      001638 08               [12] 4998 	inc	r0
      001639 36               [12] 4999 	addc	a,@r0
      00163A FF               [12] 5000 	mov	r7,a
      00163B 8E 82            [24] 5001 	mov	dpl,r6
      00163D 8F 83            [24] 5002 	mov	dph,r7
      00163F 78r00            [12] 5003 	mov	r0,#_elfloader_arch_allocate_rom
      001641 79s00            [12] 5004 	mov	r1,#(_elfloader_arch_allocate_rom >> 8)
      001643 7As00            [12] 5005 	mov	r2,#(_elfloader_arch_allocate_rom >> 16)
      001645 12r00r00         [24] 5006 	lcall	__sdcc_banked_call
      001648 AC 82            [24] 5007 	mov	r4,dpl
      00164A AE 83            [24] 5008 	mov	r6,dph
      00164C AF F0            [24] 5009 	mov	r7,b
      00164E 90r00r36         [24] 5010 	mov	dptr,#(_text + 0x0003)
      001651 EC               [12] 5011 	mov	a,r4
      001652 F0               [24] 5012 	movx	@dptr,a
      001653 EE               [12] 5013 	mov	a,r6
      001654 A3               [24] 5014 	inc	dptr
      001655 F0               [24] 5015 	movx	@dptr,a
      001656 EF               [12] 5016 	mov	a,r7
      001657 A3               [24] 5017 	inc	dptr
      001658 F0               [24] 5018 	movx	@dptr,a
                                   5019 ;	../../../core/loader/elfloader.c:510: rodata.address = (char *)text.address + textsize;
      001659 E5 81            [12] 5020 	mov	a,sp
      00165B 24 F5            [12] 5021 	add	a,#0xf5
      00165D F8               [12] 5022 	mov	r0,a
      00165E E6               [12] 5023 	mov	a,@r0
      00165F 2C               [12] 5024 	add	a,r4
      001660 FC               [12] 5025 	mov	r4,a
      001661 08               [12] 5026 	inc	r0
      001662 E6               [12] 5027 	mov	a,@r0
      001663 3E               [12] 5028 	addc	a,r6
      001664 FE               [12] 5029 	mov	r6,a
      001665 90r00r30         [24] 5030 	mov	dptr,#(_rodata + 0x0003)
      001668 EC               [12] 5031 	mov	a,r4
      001669 F0               [24] 5032 	movx	@dptr,a
      00166A EE               [12] 5033 	mov	a,r6
      00166B A3               [24] 5034 	inc	dptr
      00166C F0               [24] 5035 	movx	@dptr,a
      00166D EF               [12] 5036 	mov	a,r7
      00166E A3               [24] 5037 	inc	dptr
      00166F F0               [24] 5038 	movx	@dptr,a
                                   5039 ;	../../../core/loader/elfloader.c:521: if(textrelasize > 0) {
      001670 E5 81            [12] 5040 	mov	a,sp
      001672 24 2C            [12] 5041 	add	a,#0x2c
      001674 F8               [12] 5042 	mov	r0,a
      001675 E6               [12] 5043 	mov	a,@r0
      001676 08               [12] 5044 	inc	r0
      001677 46               [12] 5045 	orl	a,@r0
      001678 70 03            [24] 5046 	jnz	00355$
      00167A 02r17r42         [24] 5047 	ljmp	00175$
      00167D                       5048 00355$:
                                   5049 ;	../../../core/loader/elfloader.c:528: symtaboff, symtabsize, using_relas);
      00167D E5 81            [12] 5050 	mov	a,sp
      00167F 24 FB            [12] 5051 	add	a,#0xfb
      001681 F8               [12] 5052 	mov	r0,a
      001682 E5 81            [12] 5053 	mov	a,sp
      001684 24 22            [12] 5054 	add	a,#0x22
      001686 F9               [12] 5055 	mov	r1,a
      001687 E6               [12] 5056 	mov	a,@r0
      001688 F7               [12] 5057 	mov	@r1,a
      001689 08               [12] 5058 	inc	r0
      00168A 09               [12] 5059 	inc	r1
      00168B E6               [12] 5060 	mov	a,@r0
      00168C F7               [12] 5061 	mov	@r1,a
                                   5062 ;	../../../core/loader/elfloader.c:527: strtaboff,
      00168D A8 81            [24] 5063 	mov	r0,sp
      00168F 18               [12] 5064 	dec	r0
      001690 E5 81            [12] 5065 	mov	a,sp
      001692 24 50            [12] 5066 	add	a,#0x50
      001694 F9               [12] 5067 	mov	r1,a
      001695 E6               [12] 5068 	mov	a,@r0
      001696 F7               [12] 5069 	mov	@r1,a
      001697 08               [12] 5070 	inc	r0
      001698 09               [12] 5071 	inc	r1
      001699 E6               [12] 5072 	mov	a,@r0
      00169A F7               [12] 5073 	mov	@r1,a
                                   5074 ;	../../../core/loader/elfloader.c:525: text.address,
      00169B 90r00r36         [24] 5075 	mov	dptr,#(_text + 0x0003)
      00169E E0               [24] 5076 	movx	a,@dptr
      00169F FC               [12] 5077 	mov	r4,a
      0016A0 A3               [24] 5078 	inc	dptr
      0016A1 E0               [24] 5079 	movx	a,@dptr
      0016A2 FE               [12] 5080 	mov	r6,a
      0016A3 A3               [24] 5081 	inc	dptr
      0016A4 E0               [24] 5082 	movx	a,@dptr
      0016A5 FF               [12] 5083 	mov	r7,a
                                   5084 ;	../../../core/loader/elfloader.c:524: textoff,
      0016A6 E5 81            [12] 5085 	mov	a,sp
      0016A8 24 F3            [12] 5086 	add	a,#0xf3
      0016AA F8               [12] 5087 	mov	r0,a
      0016AB E5 81            [12] 5088 	mov	a,sp
      0016AD 24 56            [12] 5089 	add	a,#0x56
      0016AF F9               [12] 5090 	mov	r1,a
      0016B0 E6               [12] 5091 	mov	a,@r0
      0016B1 F7               [12] 5092 	mov	@r1,a
      0016B2 08               [12] 5093 	inc	r0
      0016B3 09               [12] 5094 	inc	r1
      0016B4 E6               [12] 5095 	mov	a,@r0
      0016B5 F7               [12] 5096 	mov	@r1,a
                                   5097 ;	../../../core/loader/elfloader.c:523: textrelaoff, textrelasize,
      0016B6 E5 81            [12] 5098 	mov	a,sp
      0016B8 24 54            [12] 5099 	add	a,#0x54
      0016BA F8               [12] 5100 	mov	r0,a
      0016BB 86 02            [24] 5101 	mov	ar2,@r0
      0016BD 08               [12] 5102 	inc	r0
      0016BE 86 05            [24] 5103 	mov	ar5,@r0
                                   5104 ;	../../../core/loader/elfloader.c:522: ret = relocate_section(fd,
      0016C0 E5 81            [12] 5105 	mov	a,sp
      0016C2 24 C2            [12] 5106 	add	a,#0xc2
      0016C4 F8               [12] 5107 	mov	r0,a
      0016C5 E6               [12] 5108 	mov	a,@r0
      0016C6 C0 E0            [24] 5109 	push	acc
      0016C8 E5 81            [12] 5110 	mov	a,sp
      0016CA 24 FC            [12] 5111 	add	a,#0xfc
      0016CC F8               [12] 5112 	mov	r0,a
      0016CD E6               [12] 5113 	mov	a,@r0
      0016CE C0 E0            [24] 5114 	push	acc
      0016D0 08               [12] 5115 	inc	r0
      0016D1 E6               [12] 5116 	mov	a,@r0
      0016D2 C0 E0            [24] 5117 	push	acc
      0016D4 E5 81            [12] 5118 	mov	a,sp
      0016D6 24 1F            [12] 5119 	add	a,#0x1f
      0016D8 F8               [12] 5120 	mov	r0,a
      0016D9 E6               [12] 5121 	mov	a,@r0
      0016DA C0 E0            [24] 5122 	push	acc
      0016DC 08               [12] 5123 	inc	r0
      0016DD E6               [12] 5124 	mov	a,@r0
      0016DE C0 E0            [24] 5125 	push	acc
      0016E0 E5 81            [12] 5126 	mov	a,sp
      0016E2 24 4B            [12] 5127 	add	a,#0x4b
      0016E4 F8               [12] 5128 	mov	r0,a
      0016E5 E6               [12] 5129 	mov	a,@r0
      0016E6 C0 E0            [24] 5130 	push	acc
      0016E8 08               [12] 5131 	inc	r0
      0016E9 E6               [12] 5132 	mov	a,@r0
      0016EA C0 E0            [24] 5133 	push	acc
      0016EC E5 81            [12] 5134 	mov	a,sp
      0016EE 24 E6            [12] 5135 	add	a,#0xe6
      0016F0 F8               [12] 5136 	mov	r0,a
      0016F1 E6               [12] 5137 	mov	a,@r0
      0016F2 C0 E0            [24] 5138 	push	acc
      0016F4 08               [12] 5139 	inc	r0
      0016F5 E6               [12] 5140 	mov	a,@r0
      0016F6 C0 E0            [24] 5141 	push	acc
      0016F8 C0 04            [24] 5142 	push	ar4
      0016FA C0 06            [24] 5143 	push	ar6
      0016FC C0 07            [24] 5144 	push	ar7
      0016FE E5 81            [12] 5145 	mov	a,sp
      001700 24 4A            [12] 5146 	add	a,#0x4a
      001702 F8               [12] 5147 	mov	r0,a
      001703 E6               [12] 5148 	mov	a,@r0
      001704 C0 E0            [24] 5149 	push	acc
      001706 08               [12] 5150 	inc	r0
      001707 E6               [12] 5151 	mov	a,@r0
      001708 C0 E0            [24] 5152 	push	acc
      00170A E5 81            [12] 5153 	mov	a,sp
      00170C 24 1E            [12] 5154 	add	a,#0x1e
      00170E F8               [12] 5155 	mov	r0,a
      00170F E6               [12] 5156 	mov	a,@r0
      001710 C0 E0            [24] 5157 	push	acc
      001712 08               [12] 5158 	inc	r0
      001713 E6               [12] 5159 	mov	a,@r0
      001714 C0 E0            [24] 5160 	push	acc
      001716 C0 02            [24] 5161 	push	ar2
      001718 C0 05            [24] 5162 	push	ar5
      00171A E5 81            [12] 5163 	mov	a,sp
      00171C 24 08            [12] 5164 	add	a,#0x08
      00171E F8               [12] 5165 	mov	r0,a
      00171F 86 82            [24] 5166 	mov	dpl,@r0
      001721 08               [12] 5167 	inc	r0
      001722 86 83            [24] 5168 	mov	dph,@r0
      001724 78rB7            [12] 5169 	mov	r0,#_relocate_section
      001726 79s02            [12] 5170 	mov	r1,#(_relocate_section >> 8)
      001728 7As00            [12] 5171 	mov	r2,#(_relocate_section >> 16)
      00172A 12r00r00         [24] 5172 	lcall	__sdcc_banked_call
      00172D AE 82            [24] 5173 	mov	r6,dpl
      00172F AF 83            [24] 5174 	mov	r7,dph
      001731 E5 81            [12] 5175 	mov	a,sp
      001733 24 EE            [12] 5176 	add	a,#0xee
      001735 F5 81            [12] 5177 	mov	sp,a
                                   5178 ;	../../../core/loader/elfloader.c:529: if(ret != ELFLOADER_OK) {
      001737 EE               [12] 5179 	mov	a,r6
      001738 4F               [12] 5180 	orl	a,r7
      001739 60 07            [24] 5181 	jz	00175$
                                   5182 ;	../../../core/loader/elfloader.c:530: return ret;
      00173B 8E 82            [24] 5183 	mov	dpl,r6
      00173D 8F 83            [24] 5184 	mov	dph,r7
      00173F 02r1ArB8         [24] 5185 	ljmp	00207$
                                   5186 ;	../../../core/loader/elfloader.c:535: PRINTF("elfloader: relocate rodata\n");
      001742                       5187 00175$:
                                   5188 ;	../../../core/loader/elfloader.c:536: if(rodatarelasize > 0) {
      001742 E5 81            [12] 5189 	mov	a,sp
      001744 24 24            [12] 5190 	add	a,#0x24
      001746 F8               [12] 5191 	mov	r0,a
      001747 E6               [12] 5192 	mov	a,@r0
      001748 08               [12] 5193 	inc	r0
      001749 46               [12] 5194 	orl	a,@r0
      00174A 70 03            [24] 5195 	jnz	00357$
      00174C 02r18r14         [24] 5196 	ljmp	00183$
      00174F                       5197 00357$:
                                   5198 ;	../../../core/loader/elfloader.c:543: symtaboff, symtabsize, using_relas);
      00174F E5 81            [12] 5199 	mov	a,sp
      001751 24 FB            [12] 5200 	add	a,#0xfb
      001753 F8               [12] 5201 	mov	r0,a
      001754 E5 81            [12] 5202 	mov	a,sp
      001756 24 54            [12] 5203 	add	a,#0x54
      001758 F9               [12] 5204 	mov	r1,a
      001759 E6               [12] 5205 	mov	a,@r0
      00175A F7               [12] 5206 	mov	@r1,a
      00175B 08               [12] 5207 	inc	r0
      00175C 09               [12] 5208 	inc	r1
      00175D E6               [12] 5209 	mov	a,@r0
      00175E F7               [12] 5210 	mov	@r1,a
                                   5211 ;	../../../core/loader/elfloader.c:542: strtaboff,
      00175F A8 81            [24] 5212 	mov	r0,sp
      001761 18               [12] 5213 	dec	r0
      001762 E5 81            [12] 5214 	mov	a,sp
      001764 24 56            [12] 5215 	add	a,#0x56
      001766 F9               [12] 5216 	mov	r1,a
      001767 E6               [12] 5217 	mov	a,@r0
      001768 F7               [12] 5218 	mov	@r1,a
      001769 08               [12] 5219 	inc	r0
      00176A 09               [12] 5220 	inc	r1
      00176B E6               [12] 5221 	mov	a,@r0
      00176C F7               [12] 5222 	mov	@r1,a
                                   5223 ;	../../../core/loader/elfloader.c:540: rodata.address,
      00176D 90r00r30         [24] 5224 	mov	dptr,#(_rodata + 0x0003)
      001770 E0               [24] 5225 	movx	a,@dptr
      001771 FA               [12] 5226 	mov	r2,a
      001772 A3               [24] 5227 	inc	dptr
      001773 E0               [24] 5228 	movx	a,@dptr
      001774 FD               [12] 5229 	mov	r5,a
      001775 A3               [24] 5230 	inc	dptr
      001776 E0               [24] 5231 	movx	a,@dptr
      001777 FF               [12] 5232 	mov	r7,a
                                   5233 ;	../../../core/loader/elfloader.c:539: rodataoff,
      001778 E5 81            [12] 5234 	mov	a,sp
      00177A 24 F9            [12] 5235 	add	a,#0xf9
      00177C F8               [12] 5236 	mov	r0,a
      00177D E5 81            [12] 5237 	mov	a,sp
      00177F 24 50            [12] 5238 	add	a,#0x50
      001781 F9               [12] 5239 	mov	r1,a
      001782 E6               [12] 5240 	mov	a,@r0
      001783 F7               [12] 5241 	mov	@r1,a
      001784 08               [12] 5242 	inc	r0
      001785 09               [12] 5243 	inc	r1
      001786 E6               [12] 5244 	mov	a,@r0
      001787 F7               [12] 5245 	mov	@r1,a
                                   5246 ;	../../../core/loader/elfloader.c:538: rodatarelaoff, rodatarelasize,
      001788 E5 81            [12] 5247 	mov	a,sp
      00178A 24 1E            [12] 5248 	add	a,#0x1e
      00178C F8               [12] 5249 	mov	r0,a
      00178D 86 03            [24] 5250 	mov	ar3,@r0
      00178F 08               [12] 5251 	inc	r0
      001790 86 06            [24] 5252 	mov	ar6,@r0
                                   5253 ;	../../../core/loader/elfloader.c:537: ret = relocate_section(fd,
      001792 E5 81            [12] 5254 	mov	a,sp
      001794 24 C2            [12] 5255 	add	a,#0xc2
      001796 F8               [12] 5256 	mov	r0,a
      001797 E6               [12] 5257 	mov	a,@r0
      001798 C0 E0            [24] 5258 	push	acc
      00179A E5 81            [12] 5259 	mov	a,sp
      00179C 24 FC            [12] 5260 	add	a,#0xfc
      00179E F8               [12] 5261 	mov	r0,a
      00179F E6               [12] 5262 	mov	a,@r0
      0017A0 C0 E0            [24] 5263 	push	acc
      0017A2 08               [12] 5264 	inc	r0
      0017A3 E6               [12] 5265 	mov	a,@r0
      0017A4 C0 E0            [24] 5266 	push	acc
      0017A6 E5 81            [12] 5267 	mov	a,sp
      0017A8 24 51            [12] 5268 	add	a,#0x51
      0017AA F8               [12] 5269 	mov	r0,a
      0017AB E6               [12] 5270 	mov	a,@r0
      0017AC C0 E0            [24] 5271 	push	acc
      0017AE 08               [12] 5272 	inc	r0
      0017AF E6               [12] 5273 	mov	a,@r0
      0017B0 C0 E0            [24] 5274 	push	acc
      0017B2 E5 81            [12] 5275 	mov	a,sp
      0017B4 24 51            [12] 5276 	add	a,#0x51
      0017B6 F8               [12] 5277 	mov	r0,a
      0017B7 E6               [12] 5278 	mov	a,@r0
      0017B8 C0 E0            [24] 5279 	push	acc
      0017BA 08               [12] 5280 	inc	r0
      0017BB E6               [12] 5281 	mov	a,@r0
      0017BC C0 E0            [24] 5282 	push	acc
      0017BE E5 81            [12] 5283 	mov	a,sp
      0017C0 24 E6            [12] 5284 	add	a,#0xe6
      0017C2 F8               [12] 5285 	mov	r0,a
      0017C3 E6               [12] 5286 	mov	a,@r0
      0017C4 C0 E0            [24] 5287 	push	acc
      0017C6 08               [12] 5288 	inc	r0
      0017C7 E6               [12] 5289 	mov	a,@r0
      0017C8 C0 E0            [24] 5290 	push	acc
      0017CA C0 02            [24] 5291 	push	ar2
      0017CC C0 05            [24] 5292 	push	ar5
      0017CE C0 07            [24] 5293 	push	ar7
      0017D0 E5 81            [12] 5294 	mov	a,sp
      0017D2 24 44            [12] 5295 	add	a,#0x44
      0017D4 F8               [12] 5296 	mov	r0,a
      0017D5 E6               [12] 5297 	mov	a,@r0
      0017D6 C0 E0            [24] 5298 	push	acc
      0017D8 08               [12] 5299 	inc	r0
      0017D9 E6               [12] 5300 	mov	a,@r0
      0017DA C0 E0            [24] 5301 	push	acc
      0017DC E5 81            [12] 5302 	mov	a,sp
      0017DE 24 16            [12] 5303 	add	a,#0x16
      0017E0 F8               [12] 5304 	mov	r0,a
      0017E1 E6               [12] 5305 	mov	a,@r0
      0017E2 C0 E0            [24] 5306 	push	acc
      0017E4 08               [12] 5307 	inc	r0
      0017E5 E6               [12] 5308 	mov	a,@r0
      0017E6 C0 E0            [24] 5309 	push	acc
      0017E8 C0 03            [24] 5310 	push	ar3
      0017EA C0 06            [24] 5311 	push	ar6
      0017EC E5 81            [12] 5312 	mov	a,sp
      0017EE 24 08            [12] 5313 	add	a,#0x08
      0017F0 F8               [12] 5314 	mov	r0,a
      0017F1 86 82            [24] 5315 	mov	dpl,@r0
      0017F3 08               [12] 5316 	inc	r0
      0017F4 86 83            [24] 5317 	mov	dph,@r0
      0017F6 78rB7            [12] 5318 	mov	r0,#_relocate_section
      0017F8 79s02            [12] 5319 	mov	r1,#(_relocate_section >> 8)
      0017FA 7As00            [12] 5320 	mov	r2,#(_relocate_section >> 16)
      0017FC 12r00r00         [24] 5321 	lcall	__sdcc_banked_call
      0017FF AE 82            [24] 5322 	mov	r6,dpl
      001801 AF 83            [24] 5323 	mov	r7,dph
      001803 E5 81            [12] 5324 	mov	a,sp
      001805 24 EE            [12] 5325 	add	a,#0xee
      001807 F5 81            [12] 5326 	mov	sp,a
                                   5327 ;	../../../core/loader/elfloader.c:544: if(ret != ELFLOADER_OK) {
      001809 EE               [12] 5328 	mov	a,r6
      00180A 4F               [12] 5329 	orl	a,r7
      00180B 60 07            [24] 5330 	jz	00183$
                                   5331 ;	../../../core/loader/elfloader.c:546: return ret;
      00180D 8E 82            [24] 5332 	mov	dpl,r6
      00180F 8F 83            [24] 5333 	mov	dph,r7
      001811 02r1ArB8         [24] 5334 	ljmp	00207$
                                   5335 ;	../../../core/loader/elfloader.c:551: PRINTF("elfloader: relocate data\n");
      001814                       5336 00183$:
                                   5337 ;	../../../core/loader/elfloader.c:552: if(datarelasize > 0) {
      001814 E5 81            [12] 5338 	mov	a,sp
      001816 24 28            [12] 5339 	add	a,#0x28
      001818 F8               [12] 5340 	mov	r0,a
      001819 E6               [12] 5341 	mov	a,@r0
      00181A 08               [12] 5342 	inc	r0
      00181B 46               [12] 5343 	orl	a,@r0
      00181C 70 03            [24] 5344 	jnz	00359$
      00181E 02r18rE6         [24] 5345 	ljmp	00190$
      001821                       5346 00359$:
                                   5347 ;	../../../core/loader/elfloader.c:559: symtaboff, symtabsize, using_relas);
      001821 E5 81            [12] 5348 	mov	a,sp
      001823 24 FB            [12] 5349 	add	a,#0xfb
      001825 F8               [12] 5350 	mov	r0,a
      001826 E5 81            [12] 5351 	mov	a,sp
      001828 24 54            [12] 5352 	add	a,#0x54
      00182A F9               [12] 5353 	mov	r1,a
      00182B E6               [12] 5354 	mov	a,@r0
      00182C F7               [12] 5355 	mov	@r1,a
      00182D 08               [12] 5356 	inc	r0
      00182E 09               [12] 5357 	inc	r1
      00182F E6               [12] 5358 	mov	a,@r0
      001830 F7               [12] 5359 	mov	@r1,a
                                   5360 ;	../../../core/loader/elfloader.c:558: strtaboff,
      001831 A8 81            [24] 5361 	mov	r0,sp
      001833 18               [12] 5362 	dec	r0
      001834 E5 81            [12] 5363 	mov	a,sp
      001836 24 56            [12] 5364 	add	a,#0x56
      001838 F9               [12] 5365 	mov	r1,a
      001839 E6               [12] 5366 	mov	a,@r0
      00183A F7               [12] 5367 	mov	@r1,a
      00183B 08               [12] 5368 	inc	r0
      00183C 09               [12] 5369 	inc	r1
      00183D E6               [12] 5370 	mov	a,@r0
      00183E F7               [12] 5371 	mov	@r1,a
                                   5372 ;	../../../core/loader/elfloader.c:556: data.address,
      00183F 90r00r2A         [24] 5373 	mov	dptr,#(_data + 0x0003)
      001842 E0               [24] 5374 	movx	a,@dptr
      001843 FA               [12] 5375 	mov	r2,a
      001844 A3               [24] 5376 	inc	dptr
      001845 E0               [24] 5377 	movx	a,@dptr
      001846 FD               [12] 5378 	mov	r5,a
      001847 A3               [24] 5379 	inc	dptr
      001848 E0               [24] 5380 	movx	a,@dptr
      001849 FF               [12] 5381 	mov	r7,a
                                   5382 ;	../../../core/loader/elfloader.c:555: dataoff,
      00184A E5 81            [12] 5383 	mov	a,sp
      00184C 24 F7            [12] 5384 	add	a,#0xf7
      00184E F8               [12] 5385 	mov	r0,a
      00184F E5 81            [12] 5386 	mov	a,sp
      001851 24 50            [12] 5387 	add	a,#0x50
      001853 F9               [12] 5388 	mov	r1,a
      001854 E6               [12] 5389 	mov	a,@r0
      001855 F7               [12] 5390 	mov	@r1,a
      001856 08               [12] 5391 	inc	r0
      001857 09               [12] 5392 	inc	r1
      001858 E6               [12] 5393 	mov	a,@r0
      001859 F7               [12] 5394 	mov	@r1,a
                                   5395 ;	../../../core/loader/elfloader.c:554: datarelaoff, datarelasize,
      00185A E5 81            [12] 5396 	mov	a,sp
      00185C 24 1C            [12] 5397 	add	a,#0x1c
      00185E F8               [12] 5398 	mov	r0,a
      00185F 86 03            [24] 5399 	mov	ar3,@r0
      001861 08               [12] 5400 	inc	r0
      001862 86 06            [24] 5401 	mov	ar6,@r0
                                   5402 ;	../../../core/loader/elfloader.c:553: ret = relocate_section(fd,
      001864 E5 81            [12] 5403 	mov	a,sp
      001866 24 C2            [12] 5404 	add	a,#0xc2
      001868 F8               [12] 5405 	mov	r0,a
      001869 E6               [12] 5406 	mov	a,@r0
      00186A C0 E0            [24] 5407 	push	acc
      00186C E5 81            [12] 5408 	mov	a,sp
      00186E 24 FC            [12] 5409 	add	a,#0xfc
      001870 F8               [12] 5410 	mov	r0,a
      001871 E6               [12] 5411 	mov	a,@r0
      001872 C0 E0            [24] 5412 	push	acc
      001874 08               [12] 5413 	inc	r0
      001875 E6               [12] 5414 	mov	a,@r0
      001876 C0 E0            [24] 5415 	push	acc
      001878 E5 81            [12] 5416 	mov	a,sp
      00187A 24 51            [12] 5417 	add	a,#0x51
      00187C F8               [12] 5418 	mov	r0,a
      00187D E6               [12] 5419 	mov	a,@r0
      00187E C0 E0            [24] 5420 	push	acc
      001880 08               [12] 5421 	inc	r0
      001881 E6               [12] 5422 	mov	a,@r0
      001882 C0 E0            [24] 5423 	push	acc
      001884 E5 81            [12] 5424 	mov	a,sp
      001886 24 51            [12] 5425 	add	a,#0x51
      001888 F8               [12] 5426 	mov	r0,a
      001889 E6               [12] 5427 	mov	a,@r0
      00188A C0 E0            [24] 5428 	push	acc
      00188C 08               [12] 5429 	inc	r0
      00188D E6               [12] 5430 	mov	a,@r0
      00188E C0 E0            [24] 5431 	push	acc
      001890 E5 81            [12] 5432 	mov	a,sp
      001892 24 E6            [12] 5433 	add	a,#0xe6
      001894 F8               [12] 5434 	mov	r0,a
      001895 E6               [12] 5435 	mov	a,@r0
      001896 C0 E0            [24] 5436 	push	acc
      001898 08               [12] 5437 	inc	r0
      001899 E6               [12] 5438 	mov	a,@r0
      00189A C0 E0            [24] 5439 	push	acc
      00189C C0 02            [24] 5440 	push	ar2
      00189E C0 05            [24] 5441 	push	ar5
      0018A0 C0 07            [24] 5442 	push	ar7
      0018A2 E5 81            [12] 5443 	mov	a,sp
      0018A4 24 44            [12] 5444 	add	a,#0x44
      0018A6 F8               [12] 5445 	mov	r0,a
      0018A7 E6               [12] 5446 	mov	a,@r0
      0018A8 C0 E0            [24] 5447 	push	acc
      0018AA 08               [12] 5448 	inc	r0
      0018AB E6               [12] 5449 	mov	a,@r0
      0018AC C0 E0            [24] 5450 	push	acc
      0018AE E5 81            [12] 5451 	mov	a,sp
      0018B0 24 1A            [12] 5452 	add	a,#0x1a
      0018B2 F8               [12] 5453 	mov	r0,a
      0018B3 E6               [12] 5454 	mov	a,@r0
      0018B4 C0 E0            [24] 5455 	push	acc
      0018B6 08               [12] 5456 	inc	r0
      0018B7 E6               [12] 5457 	mov	a,@r0
      0018B8 C0 E0            [24] 5458 	push	acc
      0018BA C0 03            [24] 5459 	push	ar3
      0018BC C0 06            [24] 5460 	push	ar6
      0018BE E5 81            [12] 5461 	mov	a,sp
      0018C0 24 08            [12] 5462 	add	a,#0x08
      0018C2 F8               [12] 5463 	mov	r0,a
      0018C3 86 82            [24] 5464 	mov	dpl,@r0
      0018C5 08               [12] 5465 	inc	r0
      0018C6 86 83            [24] 5466 	mov	dph,@r0
      0018C8 78rB7            [12] 5467 	mov	r0,#_relocate_section
      0018CA 79s02            [12] 5468 	mov	r1,#(_relocate_section >> 8)
      0018CC 7As00            [12] 5469 	mov	r2,#(_relocate_section >> 16)
      0018CE 12r00r00         [24] 5470 	lcall	__sdcc_banked_call
      0018D1 AE 82            [24] 5471 	mov	r6,dpl
      0018D3 AF 83            [24] 5472 	mov	r7,dph
      0018D5 E5 81            [12] 5473 	mov	a,sp
      0018D7 24 EE            [12] 5474 	add	a,#0xee
      0018D9 F5 81            [12] 5475 	mov	sp,a
                                   5476 ;	../../../core/loader/elfloader.c:560: if(ret != ELFLOADER_OK) {
      0018DB EE               [12] 5477 	mov	a,r6
      0018DC 4F               [12] 5478 	orl	a,r7
      0018DD 60 07            [24] 5479 	jz	00190$
                                   5480 ;	../../../core/loader/elfloader.c:562: return ret;
      0018DF 8E 82            [24] 5481 	mov	dpl,r6
      0018E1 8F 83            [24] 5482 	mov	dph,r7
      0018E3 02r1ArB8         [24] 5483 	ljmp	00207$
      0018E6                       5484 00190$:
                                   5485 ;	../../../core/loader/elfloader.c:567: elfloader_arch_write_rom(fd, textoff, textsize, text.address);
      0018E6 90r00r36         [24] 5486 	mov	dptr,#(_text + 0x0003)
      0018E9 E0               [24] 5487 	movx	a,@dptr
      0018EA FD               [12] 5488 	mov	r5,a
      0018EB A3               [24] 5489 	inc	dptr
      0018EC E0               [24] 5490 	movx	a,@dptr
      0018ED FE               [12] 5491 	mov	r6,a
      0018EE A3               [24] 5492 	inc	dptr
      0018EF E0               [24] 5493 	movx	a,@dptr
      0018F0 FF               [12] 5494 	mov	r7,a
      0018F1 E5 81            [12] 5495 	mov	a,sp
      0018F3 24 F5            [12] 5496 	add	a,#0xf5
      0018F5 F8               [12] 5497 	mov	r0,a
      0018F6 86 03            [24] 5498 	mov	ar3,@r0
      0018F8 08               [12] 5499 	inc	r0
      0018F9 86 04            [24] 5500 	mov	ar4,@r0
      0018FB C0 05            [24] 5501 	push	ar5
      0018FD C0 06            [24] 5502 	push	ar6
      0018FF C0 07            [24] 5503 	push	ar7
      001901 C0 03            [24] 5504 	push	ar3
      001903 C0 04            [24] 5505 	push	ar4
      001905 E5 81            [12] 5506 	mov	a,sp
      001907 24 EE            [12] 5507 	add	a,#0xee
      001909 F8               [12] 5508 	mov	r0,a
      00190A E6               [12] 5509 	mov	a,@r0
      00190B C0 E0            [24] 5510 	push	acc
      00190D 08               [12] 5511 	inc	r0
      00190E E6               [12] 5512 	mov	a,@r0
      00190F C0 E0            [24] 5513 	push	acc
      001911 E5 81            [12] 5514 	mov	a,sp
      001913 24 13            [12] 5515 	add	a,#0x13
      001915 F8               [12] 5516 	mov	r0,a
      001916 86 82            [24] 5517 	mov	dpl,@r0
      001918 08               [12] 5518 	inc	r0
      001919 86 83            [24] 5519 	mov	dph,@r0
      00191B 78r00            [12] 5520 	mov	r0,#_elfloader_arch_write_rom
      00191D 79s00            [12] 5521 	mov	r1,#(_elfloader_arch_write_rom >> 8)
      00191F 7As00            [12] 5522 	mov	r2,#(_elfloader_arch_write_rom >> 16)
      001921 12r00r00         [24] 5523 	lcall	__sdcc_banked_call
      001924 E5 81            [12] 5524 	mov	a,sp
      001926 24 F9            [12] 5525 	add	a,#0xf9
      001928 F5 81            [12] 5526 	mov	sp,a
                                   5527 ;	../../../core/loader/elfloader.c:568: elfloader_arch_write_rom(fd, rodataoff, rodatasize, rodata.address);
      00192A 90r00r30         [24] 5528 	mov	dptr,#(_rodata + 0x0003)
      00192D E0               [24] 5529 	movx	a,@dptr
      00192E FD               [12] 5530 	mov	r5,a
      00192F A3               [24] 5531 	inc	dptr
      001930 E0               [24] 5532 	movx	a,@dptr
      001931 FE               [12] 5533 	mov	r6,a
      001932 A3               [24] 5534 	inc	dptr
      001933 E0               [24] 5535 	movx	a,@dptr
      001934 FF               [12] 5536 	mov	r7,a
      001935 E5 81            [12] 5537 	mov	a,sp
      001937 24 26            [12] 5538 	add	a,#0x26
      001939 F8               [12] 5539 	mov	r0,a
      00193A 86 03            [24] 5540 	mov	ar3,@r0
      00193C 08               [12] 5541 	inc	r0
      00193D 86 04            [24] 5542 	mov	ar4,@r0
      00193F C0 05            [24] 5543 	push	ar5
      001941 C0 06            [24] 5544 	push	ar6
      001943 C0 07            [24] 5545 	push	ar7
      001945 C0 03            [24] 5546 	push	ar3
      001947 C0 04            [24] 5547 	push	ar4
      001949 E5 81            [12] 5548 	mov	a,sp
      00194B 24 F4            [12] 5549 	add	a,#0xf4
      00194D F8               [12] 5550 	mov	r0,a
      00194E E6               [12] 5551 	mov	a,@r0
      00194F C0 E0            [24] 5552 	push	acc
      001951 08               [12] 5553 	inc	r0
      001952 E6               [12] 5554 	mov	a,@r0
      001953 C0 E0            [24] 5555 	push	acc
      001955 E5 81            [12] 5556 	mov	a,sp
      001957 24 13            [12] 5557 	add	a,#0x13
      001959 F8               [12] 5558 	mov	r0,a
      00195A 86 82            [24] 5559 	mov	dpl,@r0
      00195C 08               [12] 5560 	inc	r0
      00195D 86 83            [24] 5561 	mov	dph,@r0
      00195F 78r00            [12] 5562 	mov	r0,#_elfloader_arch_write_rom
      001961 79s00            [12] 5563 	mov	r1,#(_elfloader_arch_write_rom >> 8)
      001963 7As00            [12] 5564 	mov	r2,#(_elfloader_arch_write_rom >> 16)
      001965 12r00r00         [24] 5565 	lcall	__sdcc_banked_call
      001968 E5 81            [12] 5566 	mov	a,sp
      00196A 24 F9            [12] 5567 	add	a,#0xf9
                                   5568 ;	../../../core/loader/elfloader.c:570: memset(bss.address, 0, bsssize);
      00196C F5 81            [12] 5569 	mov	sp,a
      00196E 24 20            [12] 5570 	add	a,#0x20
      001970 F8               [12] 5571 	mov	r0,a
      001971 86 06            [24] 5572 	mov	ar6,@r0
      001973 08               [12] 5573 	inc	r0
      001974 86 07            [24] 5574 	mov	ar7,@r0
      001976 90r00r24         [24] 5575 	mov	dptr,#(_bss + 0x0003)
      001979 E0               [24] 5576 	movx	a,@dptr
      00197A FB               [12] 5577 	mov	r3,a
      00197B A3               [24] 5578 	inc	dptr
      00197C E0               [24] 5579 	movx	a,@dptr
      00197D FC               [12] 5580 	mov	r4,a
      00197E A3               [24] 5581 	inc	dptr
      00197F E0               [24] 5582 	movx	a,@dptr
      001980 FD               [12] 5583 	mov	r5,a
      001981 C0 06            [24] 5584 	push	ar6
      001983 C0 07            [24] 5585 	push	ar7
      001985 E4               [12] 5586 	clr	a
      001986 C0 E0            [24] 5587 	push	acc
      001988 8B 82            [24] 5588 	mov	dpl,r3
      00198A 8C 83            [24] 5589 	mov	dph,r4
      00198C 8D F0            [24] 5590 	mov	b,r5
      00198E 78r00            [12] 5591 	mov	r0,#_memset
      001990 79s00            [12] 5592 	mov	r1,#(_memset >> 8)
      001992 7As00            [12] 5593 	mov	r2,#(_memset >> 16)
      001994 12r00r00         [24] 5594 	lcall	__sdcc_banked_call
      001997 15 81            [12] 5595 	dec	sp
      001999 15 81            [12] 5596 	dec	sp
      00199B 15 81            [12] 5597 	dec	sp
                                   5598 ;	../../../core/loader/elfloader.c:571: seek_read(fd, dataoff, data.address, datasize);
      00199D E5 81            [12] 5599 	mov	a,sp
      00199F 24 2A            [12] 5600 	add	a,#0x2a
      0019A1 F8               [12] 5601 	mov	r0,a
      0019A2 E5 81            [12] 5602 	mov	a,sp
      0019A4 24 56            [12] 5603 	add	a,#0x56
      0019A6 F9               [12] 5604 	mov	r1,a
      0019A7 E6               [12] 5605 	mov	a,@r0
      0019A8 F7               [12] 5606 	mov	@r1,a
      0019A9 08               [12] 5607 	inc	r0
      0019AA 09               [12] 5608 	inc	r1
      0019AB E6               [12] 5609 	mov	a,@r0
      0019AC F7               [12] 5610 	mov	@r1,a
      0019AD 90r00r2A         [24] 5611 	mov	dptr,#(_data + 0x0003)
      0019B0 E0               [24] 5612 	movx	a,@dptr
      0019B1 FB               [12] 5613 	mov	r3,a
      0019B2 A3               [24] 5614 	inc	dptr
      0019B3 E0               [24] 5615 	movx	a,@dptr
      0019B4 FC               [12] 5616 	mov	r4,a
      0019B5 A3               [24] 5617 	inc	dptr
      0019B6 E0               [24] 5618 	movx	a,@dptr
      0019B7 FD               [12] 5619 	mov	r5,a
      0019B8 E5 81            [12] 5620 	mov	a,sp
      0019BA 24 F7            [12] 5621 	add	a,#0xf7
      0019BC F8               [12] 5622 	mov	r0,a
      0019BD 86 02            [24] 5623 	mov	ar2,@r0
      0019BF 08               [12] 5624 	inc	r0
      0019C0 86 07            [24] 5625 	mov	ar7,@r0
      0019C2 E5 81            [12] 5626 	mov	a,sp
      0019C4 24 56            [12] 5627 	add	a,#0x56
      0019C6 F8               [12] 5628 	mov	r0,a
      0019C7 E6               [12] 5629 	mov	a,@r0
      0019C8 C0 E0            [24] 5630 	push	acc
      0019CA 08               [12] 5631 	inc	r0
      0019CB E6               [12] 5632 	mov	a,@r0
      0019CC C0 E0            [24] 5633 	push	acc
      0019CE C0 03            [24] 5634 	push	ar3
      0019D0 C0 04            [24] 5635 	push	ar4
      0019D2 C0 05            [24] 5636 	push	ar5
      0019D4 C0 02            [24] 5637 	push	ar2
      0019D6 C0 07            [24] 5638 	push	ar7
      0019D8 E5 81            [12] 5639 	mov	a,sp
      0019DA 24 13            [12] 5640 	add	a,#0x13
      0019DC F8               [12] 5641 	mov	r0,a
      0019DD 86 82            [24] 5642 	mov	dpl,@r0
      0019DF 08               [12] 5643 	inc	r0
      0019E0 86 83            [24] 5644 	mov	dph,@r0
      0019E2 78r00            [12] 5645 	mov	r0,#_seek_read
      0019E4 79s00            [12] 5646 	mov	r1,#(_seek_read >> 8)
      0019E6 7As00            [12] 5647 	mov	r2,#(_seek_read >> 16)
      0019E8 12r00r00         [24] 5648 	lcall	__sdcc_banked_call
      0019EB E5 81            [12] 5649 	mov	a,sp
      0019ED 24 F9            [12] 5650 	add	a,#0xf9
      0019EF F5 81            [12] 5651 	mov	sp,a
                                   5652 ;	../../../core/loader/elfloader.c:574: process = (struct process **) find_local_symbol(fd, "autostart_processes", symtaboff, symtabsize, strtaboff);
      0019F1 A8 81            [24] 5653 	mov	r0,sp
      0019F3 18               [12] 5654 	dec	r0
      0019F4 86 03            [24] 5655 	mov	ar3,@r0
      0019F6 08               [12] 5656 	inc	r0
      0019F7 86 04            [24] 5657 	mov	ar4,@r0
      0019F9 E5 81            [12] 5658 	mov	a,sp
      0019FB 24 FB            [12] 5659 	add	a,#0xfb
      0019FD F8               [12] 5660 	mov	r0,a
      0019FE E5 81            [12] 5661 	mov	a,sp
      001A00 24 56            [12] 5662 	add	a,#0x56
      001A02 F9               [12] 5663 	mov	r1,a
      001A03 E6               [12] 5664 	mov	a,@r0
      001A04 F7               [12] 5665 	mov	@r1,a
      001A05 08               [12] 5666 	inc	r0
      001A06 09               [12] 5667 	inc	r1
      001A07 E6               [12] 5668 	mov	a,@r0
      001A08 F7               [12] 5669 	mov	@r1,a
      001A09 C0 04            [24] 5670 	push	ar4
      001A0B C0 03            [24] 5671 	push	ar3
      001A0D C0 03            [24] 5672 	push	ar3
      001A0F C0 04            [24] 5673 	push	ar4
      001A11 E5 81            [12] 5674 	mov	a,sp
      001A13 24 F9            [12] 5675 	add	a,#0xf9
      001A15 F8               [12] 5676 	mov	r0,a
      001A16 E6               [12] 5677 	mov	a,@r0
      001A17 C0 E0            [24] 5678 	push	acc
      001A19 08               [12] 5679 	inc	r0
      001A1A E6               [12] 5680 	mov	a,@r0
      001A1B C0 E0            [24] 5681 	push	acc
      001A1D E5 81            [12] 5682 	mov	a,sp
      001A1F 24 50            [12] 5683 	add	a,#0x50
      001A21 F8               [12] 5684 	mov	r0,a
      001A22 E6               [12] 5685 	mov	a,@r0
      001A23 C0 E0            [24] 5686 	push	acc
      001A25 08               [12] 5687 	inc	r0
      001A26 E6               [12] 5688 	mov	a,@r0
      001A27 C0 E0            [24] 5689 	push	acc
      001A29 74r07            [12] 5690 	mov	a,#___str_0
      001A2B C0 E0            [24] 5691 	push	acc
      001A2D 74s00            [12] 5692 	mov	a,#(___str_0 >> 8)
      001A2F C0 E0            [24] 5693 	push	acc
      001A31 74 80            [12] 5694 	mov	a,#0x80
      001A33 C0 E0            [24] 5695 	push	acc
      001A35 E5 81            [12] 5696 	mov	a,sp
      001A37 24 0F            [12] 5697 	add	a,#0x0f
      001A39 F8               [12] 5698 	mov	r0,a
      001A3A 86 82            [24] 5699 	mov	dpl,@r0
      001A3C 08               [12] 5700 	inc	r0
      001A3D 86 83            [24] 5701 	mov	dph,@r0
      001A3F 78r65            [12] 5702 	mov	r0,#_find_local_symbol
      001A41 79s00            [12] 5703 	mov	r1,#(_find_local_symbol >> 8)
      001A43 7As00            [12] 5704 	mov	r2,#(_find_local_symbol >> 16)
      001A45 12r00r00         [24] 5705 	lcall	__sdcc_banked_call
      001A48 AA 82            [24] 5706 	mov	r2,dpl
      001A4A AD 83            [24] 5707 	mov	r5,dph
      001A4C AF F0            [24] 5708 	mov	r7,b
      001A4E E5 81            [12] 5709 	mov	a,sp
      001A50 24 F7            [12] 5710 	add	a,#0xf7
      001A52 F5 81            [12] 5711 	mov	sp,a
      001A54 D0 03            [24] 5712 	pop	ar3
      001A56 D0 04            [24] 5713 	pop	ar4
      001A58 E5 81            [12] 5714 	mov	a,sp
      001A5A 24 50            [12] 5715 	add	a,#0x50
      001A5C F8               [12] 5716 	mov	r0,a
      001A5D A6 02            [24] 5717 	mov	@r0,ar2
      001A5F 08               [12] 5718 	inc	r0
      001A60 A6 05            [24] 5719 	mov	@r0,ar5
      001A62 08               [12] 5720 	inc	r0
      001A63 A6 07            [24] 5721 	mov	@r0,ar7
                                   5722 ;	../../../core/loader/elfloader.c:575: if(process != NULL) {
      001A65 EA               [12] 5723 	mov	a,r2
      001A66 4D               [12] 5724 	orl	a,r5
      001A67 60 17            [24] 5725 	jz	00195$
                                   5726 ;	../../../core/loader/elfloader.c:577: elfloader_autostart_processes = process;
      001A69 E5 81            [12] 5727 	mov	a,sp
      001A6B 24 50            [12] 5728 	add	a,#0x50
      001A6D F8               [12] 5729 	mov	r0,a
      001A6E 90r00r1E         [24] 5730 	mov	dptr,#_elfloader_autostart_processes
      001A71 E6               [12] 5731 	mov	a,@r0
      001A72 F0               [24] 5732 	movx	@dptr,a
      001A73 08               [12] 5733 	inc	r0
      001A74 E6               [12] 5734 	mov	a,@r0
      001A75 A3               [24] 5735 	inc	dptr
      001A76 F0               [24] 5736 	movx	@dptr,a
      001A77 08               [12] 5737 	inc	r0
      001A78 E6               [12] 5738 	mov	a,@r0
      001A79 A3               [24] 5739 	inc	dptr
      001A7A F0               [24] 5740 	movx	@dptr,a
                                   5741 ;	../../../core/loader/elfloader.c:578: return ELFLOADER_OK;
      001A7B 90 00 00         [24] 5742 	mov	dptr,#0x0000
                                   5743 ;	../../../core/loader/elfloader.c:580: PRINTF("elfloader: no autostart\n");
      001A7E 80 38            [24] 5744 	sjmp	00207$
      001A80                       5745 00195$:
                                   5746 ;	../../../core/loader/elfloader.c:581: process = (struct process **) find_program_processes(fd, symtaboff, symtabsize, strtaboff);
      001A80 C0 03            [24] 5747 	push	ar3
      001A82 C0 04            [24] 5748 	push	ar4
      001A84 E5 81            [12] 5749 	mov	a,sp
      001A86 24 FB            [12] 5750 	add	a,#0xfb
      001A88 F8               [12] 5751 	mov	r0,a
      001A89 E6               [12] 5752 	mov	a,@r0
      001A8A C0 E0            [24] 5753 	push	acc
      001A8C 08               [12] 5754 	inc	r0
      001A8D E6               [12] 5755 	mov	a,@r0
      001A8E C0 E0            [24] 5756 	push	acc
      001A90 E5 81            [12] 5757 	mov	a,sp
      001A92 24 52            [12] 5758 	add	a,#0x52
      001A94 F8               [12] 5759 	mov	r0,a
      001A95 E6               [12] 5760 	mov	a,@r0
      001A96 C0 E0            [24] 5761 	push	acc
      001A98 08               [12] 5762 	inc	r0
      001A99 E6               [12] 5763 	mov	a,@r0
      001A9A C0 E0            [24] 5764 	push	acc
      001A9C E5 81            [12] 5765 	mov	a,sp
      001A9E 24 14            [12] 5766 	add	a,#0x14
      001AA0 F8               [12] 5767 	mov	r0,a
      001AA1 86 82            [24] 5768 	mov	dpl,@r0
      001AA3 08               [12] 5769 	inc	r0
      001AA4 86 83            [24] 5770 	mov	dph,@r0
      001AA6 78r36            [12] 5771 	mov	r0,#_find_program_processes
      001AA8 79s08            [12] 5772 	mov	r1,#(_find_program_processes >> 8)
      001AAA 7As00            [12] 5773 	mov	r2,#(_find_program_processes >> 16)
      001AAC 12r00r00         [24] 5774 	lcall	__sdcc_banked_call
      001AAF E5 81            [12] 5775 	mov	a,sp
      001AB1 24 FA            [12] 5776 	add	a,#0xfa
      001AB3 F5 81            [12] 5777 	mov	sp,a
                                   5778 ;	../../../core/loader/elfloader.c:585: return ELFLOADER_NO_STARTPOINT;
      001AB5 90 00 07         [24] 5779 	mov	dptr,#0x0007
      001AB8                       5780 00207$:
                                   5781 ;	../../../core/loader/elfloader.c:587: }
      001AB8 E5 81            [12] 5782 	mov	a,sp
      001ABA 24 19            [12] 5783 	add	a,#0x19
      001ABC F5 81            [12] 5784 	mov	sp,a
      001ABE 02r00r00         [24] 5785 	ljmp	__sdcc_banked_ret
                                   5786 	.area CSEG    (CODE)
                                   5787 	.area CONST   (CODE)
      000000                       5788 _elf_magic_header:
      000000 7F                    5789 	.db #0x7f	; 127
      000001 45                    5790 	.db #0x45	; 69	'E'
      000002 4C                    5791 	.db #0x4c	; 76	'L'
      000003 46                    5792 	.db #0x46	; 70	'F'
      000004 01                    5793 	.db #0x01	; 1
      000005 01                    5794 	.db #0x01	; 1
      000006 01                    5795 	.db #0x01	; 1
                                   5796 	.area CONST   (CODE)
      000007                       5797 ___str_0:
      000007 61 75 74 6F 73 74 61  5798 	.ascii "autostart_processes"
             72 74 5F 70 72 6F 63
             65 73 73 65 73
      00001A 00                    5799 	.db 0x00
                                   5800 	.area BANK1   (CODE)
                                   5801 	.area CONST   (CODE)
      00001B                       5802 ___str_1:
      00001B 2E 74 65 78 74        5803 	.ascii ".text"
      000020 00                    5804 	.db 0x00
                                   5805 	.area BANK1   (CODE)
                                   5806 	.area CONST   (CODE)
      000021                       5807 ___str_2:
      000021 2E 72 65 6C 2E 74 65  5808 	.ascii ".rel.text"
             78 74
      00002A 00                    5809 	.db 0x00
                                   5810 	.area BANK1   (CODE)
                                   5811 	.area CONST   (CODE)
      00002B                       5812 ___str_3:
      00002B 2E 72 65 6C 61 2E 74  5813 	.ascii ".rela.text"
             65 78 74
      000035 00                    5814 	.db 0x00
                                   5815 	.area BANK1   (CODE)
                                   5816 	.area CONST   (CODE)
      000036                       5817 ___str_4:
      000036 2E 64 61 74 61        5818 	.ascii ".data"
      00003B 00                    5819 	.db 0x00
                                   5820 	.area BANK1   (CODE)
                                   5821 	.area CONST   (CODE)
      00003C                       5822 ___str_5:
      00003C 2E 72 6F 64 61 74 61  5823 	.ascii ".rodata"
      000043 00                    5824 	.db 0x00
                                   5825 	.area BANK1   (CODE)
                                   5826 	.area CONST   (CODE)
      000044                       5827 ___str_6:
      000044 2E 72 65 6C 2E 72 6F  5828 	.ascii ".rel.rodata"
             64 61 74 61
      00004F 00                    5829 	.db 0x00
                                   5830 	.area BANK1   (CODE)
                                   5831 	.area CONST   (CODE)
      000050                       5832 ___str_7:
      000050 2E 72 65 6C 61 2E 72  5833 	.ascii ".rela.rodata"
             6F 64 61 74 61
      00005C 00                    5834 	.db 0x00
                                   5835 	.area BANK1   (CODE)
                                   5836 	.area CONST   (CODE)
      00005D                       5837 ___str_8:
      00005D 2E 72 65 6C 2E 64 61  5838 	.ascii ".rel.data"
             74 61
      000066 00                    5839 	.db 0x00
                                   5840 	.area BANK1   (CODE)
                                   5841 	.area CONST   (CODE)
      000067                       5842 ___str_9:
      000067 2E 72 65 6C 61 2E 64  5843 	.ascii ".rela.data"
             61 74 61
      000071 00                    5844 	.db 0x00
                                   5845 	.area BANK1   (CODE)
                                   5846 	.area CONST   (CODE)
      000072                       5847 ___str_10:
      000072 2E 62 73 73           5848 	.ascii ".bss"
      000076 00                    5849 	.db 0x00
                                   5850 	.area BANK1   (CODE)
                                   5851 	.area XINIT   (CODE)
                                   5852 	.area CABS    (ABS,CODE)
